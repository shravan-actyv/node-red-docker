[
    {
        "id": "62bce85b962c1ba4",
        "type": "tab",
        "label": "IIFL drawdown",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "996aaae174a57dd4",
        "type": "tab",
        "label": "IIFL REPAYMENT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "61062284bea26a85",
        "type": "tab",
        "label": "IIFL Loan Level Status Update",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6f7cc265b7283a5c",
        "type": "tab",
        "label": "Flow 8",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e8842e93c37e68d3",
        "type": "tab",
        "label": "IIFL Lead Push",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "09338278a6827f06",
        "type": "tab",
        "label": "IIFL leadPush Nach completed",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6aa904d67d2907b2",
        "type": "tab",
        "label": "Download file",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "84b812933a436af8",
        "type": "tab",
        "label": "Download file",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c458c3f61cf5894d",
        "type": "tab",
        "label": "split file",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fc1716ca544be1e5",
        "type": "tab",
        "label": "Download And Zip",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c072707ead15851f",
        "type": "tab",
        "label": "IIFL Wait Esign And create loan term",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c8388b64545e95b6",
        "type": "tab",
        "label": "TC Response for leadpush",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fb44a60890b22361",
        "type": "tab",
        "label": "SMS to notify nach",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2659280b75890366",
        "type": "tab",
        "label": "Raise Nach Req",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "32607aaaf853d8ed",
        "type": "tab",
        "label": "Axis - Maturity report",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dca724589f9513c8",
        "type": "tab",
        "label": "Axis - Utilization report",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "79f42ae3a90a4604",
        "type": "tab",
        "label": "Axis Lead push",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f5c81779c63cb9e6",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ad42c8b5ca08905f",
        "type": "tab",
        "label": "Update TRS (Tenor and Rate Spread)",
        "disabled": false,
        "info": "Update new tenor and rate spread in BNPL preference",
        "env": []
    },
    {
        "id": "6438b3204074b24c",
        "type": "tab",
        "label": "Axis tentativie limit",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b77a80e15cf9f8c6",
        "type": "tab",
        "label": "Flow 4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5bf29b5d3a6e7fb3",
        "type": "tab",
        "label": "Nivea Enterprise Connect",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a29923d1b01e690c",
        "type": "tab",
        "label": "latest maturity report",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "58e110d7c2bbe19a",
        "type": "tab",
        "label": "utilization report by email",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e546fa9119a2d093",
        "type": "tab",
        "label": "GoSeedingBase",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ced2a26ef4f97d80",
        "type": "tab",
        "label": "BNPL Seeding Updating",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "46bc40aaa70da7e7",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4da9cf371ae8419b",
        "type": "tab",
        "label": "change go seeding",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "589d958d829dbb36",
        "type": "tab",
        "label": "Flow 9",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e19abe9cd46a7f79",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a2d4a4280cb86ad3",
        "type": "tab",
        "label": "Flow 6",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8cd6e1aac6a07f03",
        "type": "tab",
        "label": "CKPL Borrower Summary",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b24fe51f964dbf33",
        "type": "tab",
        "label": "APL Knockoff report",
        "disabled": false,
        "info": "Knock off report for both DISTRIBUTOR and VENDOR",
        "env": []
    },
    {
        "id": "53e710bd040c67f4",
        "type": "tab",
        "label": "UPDATED DEMO - Enterprise connect",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "99fe1ea7a0633a03",
        "type": "tab",
        "label": "Update ROI",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1a96990e9c8ce6d6",
        "type": "tab",
        "label": "Flow 5",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9ab61dee89975794",
        "type": "tab",
        "label": "APL APOLLO PIPES - Enterprise connect",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f40935e17e5fc0c9",
        "type": "tab",
        "label": "CKPL Axis Repayments",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cdaff48bc60630c8",
        "type": "tab",
        "label": "CKPL - Enterprise connect",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0ffe25cc2bd52d12",
        "type": "tab",
        "label": "CKPL Axis Drawdown Request",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4dd61965a51abc1b",
        "type": "tab",
        "label": "CKPL Axis Drawdown Response",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2805f1a60c3bda60",
        "type": "tab",
        "label": "Kotak - Lead push",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e10b010af9b7eb48",
        "type": "tab",
        "label": "BNPL_Seeding_working_1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "54c1df4d72a20f23",
        "type": "tab",
        "label": "update roi",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9c867e890410d7fd",
        "type": "tab",
        "label": "BNPL_Seeding_working_31",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7233099df5fc7477",
        "type": "tab",
        "label": "Chola Lead push response",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b950979261d40ce2",
        "type": "tab",
        "label": "CKPL Axis Drawdown Response",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dc1b4d18cfcadf9a",
        "type": "tab",
        "label": "Flow 14",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2d360e569b9a1614",
        "type": "tab",
        "label": "BNPL_Seeding_working_01_06",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c28fd65bec3668c6",
        "type": "tab",
        "label": "Flow 12",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e862ba184c2a0edf",
        "type": "tab",
        "label": "IIFL Lead Push Axios Logger",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "86c36504f6c40918",
        "type": "tab",
        "label": "HDFC",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "43b58765f1bba507",
        "type": "tab",
        "label": "Flow 13",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bfa4ea3fa6f6c3e9",
        "type": "tab",
        "label": "SG Finserve - Drawdown request",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d5c235f958bb950d",
        "type": "tab",
        "label": "SG- Drawdown response",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d18bf023c4d8c839",
        "type": "tab",
        "label": "SG - Repayment",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "25a5e0c8d9afa6e3",
        "type": "tab",
        "label": "Flow 10",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2f7f09616aee1b2d",
        "type": "tab",
        "label": "Kotak term loan lead push",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8190ed7d744371a3",
        "type": "tab",
        "label": "Flow 7",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c7bf343fb21bd983",
        "type": "tab",
        "label": "TC Response for leadpush Axios",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c03c74b3e3b3a2bb",
        "type": "tab",
        "label": "Update ROI and Bank Relations",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0cbd918f05921aae",
        "type": "subflow",
        "name": "Axios",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "f5135a3098c39671"
                    },
                    {
                        "id": "cf46fc37499c5b2e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 600,
                "y": 100,
                "wires": [
                    {
                        "id": "b56812fe5b171c67",
                        "port": 0
                    }
                ]
            },
            {
                "x": 610,
                "y": 280,
                "wires": [
                    {
                        "id": "b56812fe5b171c67",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "outputLabels": [
            "Success",
            "Failure"
        ],
        "icon": "font-awesome/fa-life-bouy",
        "status": {
            "x": 320,
            "y": 320,
            "wires": [
                {
                    "id": "cf46fc37499c5b2e",
                    "port": 0
                },
                {
                    "id": "d268c12bb7353110",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "951a533bb3498fe6",
        "type": "subflow",
        "name": "Logger",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 220,
                "wires": [
                    {
                        "id": "3f661de354f47776"
                    },
                    {
                        "id": "e4215efc1acec389"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 300,
                "wires": [
                    {
                        "id": "e4215efc1acec389",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "icon": "node-red/debug.svg"
    },
    {
        "id": "9c6db570ab89ba16",
        "type": "subflow",
        "name": "update file status",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 160,
                "wires": [
                    {
                        "id": "9e546c06d8ce037c"
                    },
                    {
                        "id": "7b3e32975ec64054"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 540,
                "wires": [
                    {
                        "id": "8907c34638902cf1",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#FDF0C2",
        "status": {
            "x": 720,
            "y": 280,
            "wires": [
                {
                    "id": "2cec9ac34ba231e2",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "e31d0df218bab90b",
        "type": "subflow",
        "name": "axios",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 420,
                "y": 360,
                "wires": [
                    {
                        "id": "69bf9539fca02f01"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 660,
                "y": 360,
                "wires": [
                    {
                        "id": "69bf9539fca02f01",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "7dfb7fc299d103f9",
        "type": "subflow",
        "name": "Axios logger",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "35da3c46cfdee385"
                    },
                    {
                        "id": "6a1d8de165e179a7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 900,
                "y": 140,
                "wires": [
                    {
                        "id": "1b875959f940617e",
                        "port": 0
                    }
                ]
            },
            {
                "x": 830,
                "y": 240,
                "wires": [
                    {
                        "id": "2b4cdfbc9f79b9b8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#C7E9C0",
        "outputLabels": [
            "success",
            "failure"
        ],
        "icon": "node-red/sort.svg",
        "status": {
            "x": 300,
            "y": 340,
            "wires": [
                {
                    "id": "6a1d8de165e179a7",
                    "port": 0
                },
                {
                    "id": "dcb85052b09dca68",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "4bdfed63bfa7021d",
        "type": "subflow",
        "name": "update file status for BNPL seeding_31",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 160,
                "wires": [
                    {
                        "id": "780c4e781d2a4068"
                    },
                    {
                        "id": "882f7504c153a545"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 540,
                "wires": [
                    {
                        "id": "4c5153f4193f6568",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#FDF0C2"
    },
    {
        "id": "330045778eef98cf",
        "type": "group",
        "z": "32607aaaf853d8ed",
        "name": "Move file SFTP",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "110afad24fd8188c",
            "dd9a74d8f33afc5b",
            "9572b589acd33875",
            "80292021a81a8a72"
        ],
        "x": 304,
        "y": 459
    },
    {
        "id": "c61f6fd5ccf5ede8",
        "type": "group",
        "z": "dca724589f9513c8",
        "name": "Move file SFTP",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "9e89c0628dae798d",
            "ab60355897d8a01d",
            "ce2076e6cdd3b758",
            "45b8eb1406dfc508"
        ],
        "x": 11.142822265625,
        "y": 491.8571472167969
    },
    {
        "id": "395878a351894d59",
        "type": "group",
        "z": "62bce85b962c1ba4",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true
        },
        "nodes": [],
        "x": 924,
        "y": 2559,
        "w": 40,
        "h": 40
    },
    {
        "id": "28df55e7a361e197",
        "type": "group",
        "z": "ced2a26ef4f97d80",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "63f280a67f79ac66",
            "ed5825176bd9fc8e",
            "1c2f0496c7bc6466",
            "3789fb2fd858e425",
            "274950bd79f3474f",
            "e890773239f9acac",
            "d6a0411041bdb589",
            "4cb69be7e4f48182",
            "3535ab03aafd4358"
        ],
        "x": 344,
        "y": 1559
    },
    {
        "id": "93fe5307bc4762c3",
        "type": "group",
        "z": "ced2a26ef4f97d80",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true
        },
        "nodes": [
            "19b29090b9a70c40",
            "71f26c0e1f8fad42",
            "cef5adcc7e91d25c",
            "bc1963a56b571703",
            "a140de239e0421a1",
            "f0141033b31aea8c",
            "d2113b7ce3c1dadf"
        ],
        "x": 274,
        "y": 1919
    },
    {
        "id": "4d2788302b21251a",
        "type": "group",
        "z": "ced2a26ef4f97d80",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true
        },
        "nodes": [
            "be07fd207670da4a",
            "63818f2da050c30e",
            "bfbeeaf036fc2740",
            "41316525dcc1cf41",
            "e366cbcd386837e1",
            "3316790d275b93bf",
            "cd4c10d01f090c6f",
            "2f3757e690577221",
            "63747b6725757db2",
            "36da4c1579934909",
            "bb04036c4186958e",
            "2015a2f8936088d2",
            "556f6a9a6eac7ea2",
            "6734c4e3e7d72467"
        ],
        "x": 174,
        "y": 2179
    },
    {
        "id": "93fb9229bcd9bcd6",
        "type": "group",
        "z": "ced2a26ef4f97d80",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true
        },
        "nodes": [
            "153face4af99e128",
            "72c1569f3eeefc5c",
            "737828aa9a9921a3",
            "00baff346ee0b259",
            "8cf22f3bbd1217cf",
            "035172bd95bd9f1c",
            "4893b32644bc4cdd"
        ],
        "x": 864,
        "y": 2499
    },
    {
        "id": "c54beb9f06cab2cc",
        "type": "group",
        "z": "e10b010af9b7eb48",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true
        },
        "nodes": [
            "252bf344e9972846",
            "78bd3c2fd28f9702",
            "2bd681a5b3a18557",
            "16de35257efede53",
            "8085aa350ddd5f74",
            "17039c532174451f",
            "2f1ad69c77599714",
            "d757b507d3fb4cc6",
            "a813f9cc12d6f140",
            "fff9bfb5e24875d2",
            "749cb691036563fb",
            "f3d174bd1702744d",
            "0fd10b5ec47e783b",
            "59ded9cde23385ea",
            "be2ffd7cbe74294e",
            "c2ca4e6a85bc7935",
            "0aa2051031a6f0a2",
            "7aa7a446a4279517"
        ],
        "x": 594,
        "y": 2159
    },
    {
        "id": "54609a9c7f708e09",
        "type": "group",
        "z": "e10b010af9b7eb48",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true
        },
        "nodes": [
            "159c0ed404385998",
            "6b7798857ae08830",
            "edd75e34366169f3",
            "ef10db9bd06cfbde",
            "b038ff486f35e920",
            "03e08daf4c27d914",
            "366b9620189f12a2",
            "5a8d796db4c5857f",
            "1855bb3b74bc941c",
            "f217af3d720f0c7d",
            "3bd583497f3e644f",
            "118f03f5b0171db5"
        ],
        "x": 524,
        "y": 2639
    },
    {
        "id": "7cfa0a2f3327f16b",
        "type": "group",
        "z": "e10b010af9b7eb48",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "9f1a318ffa6b7b8f",
            "f72e11dfe5e8a2a8",
            "8bfd6af33073ccf7",
            "915c587691b0bea9",
            "51213845173363a8",
            "76a884c8b52d3d97",
            "d557a38277e215b9",
            "b35c661bb28363b0",
            "4026601b0c422a67",
            "4a09aa02667bfacc",
            "1584eff70e2aaec0",
            "64c945c7316da60c",
            "c6353b86319ca405",
            "23449579b48821fc",
            "2406ba742ae51ee8",
            "c3eaef8b4bca019d",
            "4e6bfd5de2520860",
            "9d13c8b0d97bf08b",
            "e94a24f58805dd25",
            "4d291440988f74ec",
            "62899a6f62c39b5b",
            "fcb7f294e061b538"
        ],
        "x": 574,
        "y": 1139
    },
    {
        "id": "cc9a2417f48cbec3",
        "type": "group",
        "z": "e10b010af9b7eb48",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true
        },
        "nodes": [
            "f15eb261fa241aa1",
            "52f3fce79ec49b66",
            "d8e3bee5a2e466d2",
            "f33b14e6efc04787",
            "2d9c2ce370ce070e",
            "e2aef4aef8d88efb"
        ],
        "x": 874,
        "y": 1839
    },
    {
        "id": "0fbcf743ca2684da",
        "type": "group",
        "z": "9c867e890410d7fd",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true
        },
        "nodes": [
            "f0a62ff9bb25644a",
            "719e46e6fa61b917",
            "d6e5beb21de0ff3a",
            "2981235518b26eb4",
            "0995c0a440cb0cc5",
            "4f227c97b1ec3ab0",
            "5633e843227004a0",
            "fe4ed8a8c5ed8702",
            "8c14beadfa059ce8",
            "5ef6677a67adca57",
            "09e9652360367364",
            "fe3c2cdfbe30e2bd",
            "d69a04805e98ba02",
            "629c1cd4715c118a",
            "6ae180796c50d660",
            "926ac8136e9426f4",
            "1c16d5be1b2efcf3",
            "140e68491c29376a"
        ],
        "x": 594,
        "y": 2159
    },
    {
        "id": "3eee94045575f667",
        "type": "group",
        "z": "9c867e890410d7fd",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true
        },
        "nodes": [
            "d5c1e6dfe4a68521",
            "17d4b7fb98727bf4",
            "7e1f37709e127867",
            "276e89c0185672de",
            "3b498e98b69e8d5b",
            "80ca9a7f28f861ee",
            "e17ab7364fa7d7f5",
            "2c7f5b7793733846",
            "e5d6f1d41201dfa1",
            "c6c14d7d82928cac",
            "dbddb2551abe5a6b",
            "b2db31f674b64a62",
            "59559016fdc5ab9b",
            "ccca572ce58f5cc9"
        ],
        "x": 524,
        "y": 2639
    },
    {
        "id": "e388f6b50d8947c0",
        "type": "group",
        "z": "9c867e890410d7fd",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "ecf2c53374a1beb5",
            "980fa47c624a073a",
            "498844db8284812e",
            "164aaf06152c4768",
            "93bed63868ca7827",
            "d9f3fdea93f5950c",
            "bd3549553b972afe",
            "3ca5ae3f0a4f2b78",
            "f4881c5ac0a708b8",
            "464d9957c6939a8f",
            "2f436d0c2de8365d",
            "8726d3572a650feb",
            "1f52c05f53555f83",
            "d31a78849ecf9b54",
            "e65d0d83ac98c0aa",
            "7a5b944c99dbca14",
            "c0eb3726c77466c7",
            "c3a7c056c4064d15",
            "3407744cade162da",
            "0b7c0095c0f8dee8",
            "be6f0f022413db86",
            "a281377201ce4704",
            "fa3101c091e8377c",
            "eb96bfa19e20c21e",
            "f7e8ba0032eb79e4"
        ],
        "x": 574,
        "y": 1139
    },
    {
        "id": "09f520fdfc75c874",
        "type": "group",
        "z": "9c867e890410d7fd",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true
        },
        "nodes": [
            "e82af394990ae97b",
            "e0c85223f59f7273",
            "25656d4a951b8b06",
            "fd2c088db7cb63c7",
            "53d89fa0a1185398",
            "df9883299442dab5",
            "dd16ca3509624f59"
        ],
        "x": 874,
        "y": 1839
    },
    {
        "id": "0e249ca2cc59c2ed",
        "type": "group",
        "z": "2d360e569b9a1614",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true
        },
        "nodes": [
            "3c3bb98f1379ec63",
            "64a003eda451da49",
            "260f42802b5d2f75",
            "fe08b2326e4a0b38",
            "c8ad4dc2a1749cdf",
            "f4078b55ffff1435",
            "ae11a0a5c3b1ae1d",
            "1a6241fd2059bc8d",
            "60f6868216554a9b",
            "5f35a374edc16fca",
            "98f29b4499eef061",
            "b6ca988413755a4b",
            "f80690e99fc35a20",
            "f5d17dca5a28b604",
            "4a92a72397a7f6b2",
            "edb2576f7bea3bb0",
            "65f02ff38f6f476e",
            "955e244637f40d2c"
        ],
        "x": 574,
        "y": 2139
    },
    {
        "id": "7ef0977ae5c95b40",
        "type": "group",
        "z": "2d360e569b9a1614",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true
        },
        "nodes": [
            "272ba9625098c6a1",
            "fa9e67f8b043dc17",
            "4e7d7ee26ef2a303",
            "11a8bd53e38e107e",
            "0884e354bfb93cbc",
            "434cc68d79f6d653",
            "2eddb86e7e064c86",
            "6bd3b19b830eedd4",
            "01f438010b088b4a",
            "1f1cb9a20096342a",
            "9090b91fc3b69166",
            "0820166e770cee89",
            "179f64ea2fe05af9",
            "0461e16e9203a103"
        ],
        "x": 524,
        "y": 2639
    },
    {
        "id": "392372c777d3850d",
        "type": "group",
        "z": "2d360e569b9a1614",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true
        },
        "nodes": [
            "f4554e2c9e211eb8",
            "1de151ed206faa28",
            "7f5d9aa7b30a9118",
            "aca89e20c50059b1",
            "7e1cd79be577d59f",
            "121142452a1c8def",
            "0f0405368fc970bf"
        ],
        "x": 874,
        "y": 1839
    },
    {
        "id": "ca7746c90d3d69f9",
        "type": "group",
        "z": "2d360e569b9a1614",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "bec35c43844c723a",
            "d8efa373dede0879",
            "b39485355d4d4c01",
            "dfbeab6dce045093",
            "29e43acc77f16560",
            "a57b350de59713d8",
            "cf373a584349599c",
            "c6f16ea47cb41398",
            "2d525a8ec05b658a",
            "879e49607c59dec9",
            "88d8c763f0bf28ec",
            "af87ed0612b6f553",
            "89a833f7d830ae86",
            "f7aee8d4b30def5c",
            "eaf6fad8b6b84a78",
            "7a252a38c05c61b1",
            "e85be2916e17fdcf",
            "935b39046c99ebcd",
            "7ba43ded6f55b6f1",
            "7fa08fbcc70dc853",
            "488a1ba9284601c7",
            "95832288c7856d66",
            "78cf391d25d531cf",
            "92f0c3ae42900c26",
            "4dd314597bd38e12"
        ],
        "x": 584,
        "y": 1139
    },
    {
        "id": "3dba22b286b032b4",
        "type": "SFTP-credentials",
        "host": "43.204.74.60",
        "port": "22",
        "username": "apl_uat_sftp",
        "password": "14UiqD1LvPobOpZIC8"
    },
    {
        "id": "5d210162c7877d54",
        "type": "aws-config"
    },
    {
        "id": "2e225edb63763603",
        "type": "chronos-config",
        "name": "",
        "timezone": "",
        "sunPositions": []
    },
    {
        "id": "e890793010d7a406",
        "type": "SFTP-credentials",
        "host": "43.204.74.60",
        "port": "22",
        "username": "apl_uat_sftp",
        "password": "14UiqD1LvPobOpZIC8"
    },
    {
        "id": "d4942248b841ce28",
        "type": "SFTP-credentials",
        "host": "43.204.74.60",
        "port": "22",
        "username": "tata_uat_sftp",
        "password": "QLYEe4B7eRCPjqm2fntn"
    },
    {
        "id": "e3cfc177798d2d62",
        "type": "SFTP-credentials",
        "host": "s2fs.axisbank.com",
        "port": "22",
        "username": "Actyv_Onbaording",
        "password": "Happy@2022"
    },
    {
        "id": "015617f7b1e92c5e",
        "type": "SFTP-credentials",
        "host": "43.204.74.60",
        "port": "22",
        "username": "tata_uat_sftp",
        "password": "QLYEe4B7eRCPjqm2fntn"
    },
    {
        "id": "ec0eb0d718c8abe0",
        "type": "SFTP-credentials",
        "host": "s2fs.axisbank.com",
        "port": "22",
        "username": "DBATActyv_Transaction",
        "password": "Newindia@2022"
    },
    {
        "id": "41941cb5b48f7a71",
        "type": "SFTP-credentials",
        "host": "127.0.0.1",
        "port": "22",
        "username": "",
        "password": ""
    },
    {
        "id": "a0e863bf6c443264",
        "type": "chronos-config",
        "name": "",
        "timezone": "",
        "sunPositions": []
    },
    {
        "id": "2d3d7df6c65235a6",
        "type": "SFTP-credentials",
        "host": "s2fs.axisbank.com",
        "port": "22",
        "username": "Actyv_Onbaording",
        "password": "Happy@2022"
    },
    {
        "id": "8713902662c7b8a4",
        "type": "SFTP-credentials",
        "host": "43.204.74.60",
        "port": "22",
        "username": "tata_uat_sftp",
        "password": "QLYEe4B7eRCPjqm2fntn"
    },
    {
        "id": "b8a52d61cb94408c",
        "type": "SFTP-credentials",
        "host": "43.204.74.60",
        "port": "22",
        "username": "apl_prod_sftp",
        "password": "Dfk8529FAEFpJCcEM9"
    },
    {
        "id": "55c08fb94e980196",
        "type": "SFTP-credentials",
        "host": "s2fs.axisbank.com",
        "port": "22",
        "username": "DBATActyv_Transaction",
        "password": "India@2023"
    },
    {
        "id": "51d2cbf3952b1285",
        "type": "SFTP-credentials",
        "host": "43.204.74.60",
        "port": "22",
        "username": "apl_uat_sftp",
        "password": "14UiqD1LvPobOpZIC8"
    },
    {
        "id": "f5135a3098c39671",
        "type": "function",
        "z": "0cbd918f05921aae",
        "name": "axios",
        "func": "\nasync function callApi(msg){\n    const {headers,url,data,method} = msg\n    delete msg.headers\n    try {\n        node.status({fill:\"blue\",shape:\"ring\",text:\"requesting\"});\n       let data = await axios({\n            url: msg.url,\n            data: msg.method.toLowerCase() !== \"get\"?msg?.payload:{},\n            headers: headers,\n            method: msg?.method,\n        })\n        \n        node.send({ ...msg, payload: data?.data, statusCode: data?.status, apiCallSuccess: true, logger2: { statusCode: data?.status,url: msg.url}})\n   \n  \n        node.status({fill:\"green\",shape:\"ring\",text:\"completed\"});\n    } catch (error) {\n        // console.log({ error })\n        node.send({ ...msg, statusCode: error?.response?.status, payload: error?.response?.data, apiCallSuccess: false, logger2: { statusCode: error?.response?.status, url: msg.url }})\n        \n        // node.done()\n    \n        node.error(`Axios error ${JSON.stringify(error.response?.data)}`,{error:error.response?.data,...msg,statusCode:error.response?.status});\n    };\n}\ncallApi(msg)\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "axios",
                "module": "axios"
            }
        ],
        "x": 250,
        "y": 80,
        "wires": [
            [
                "d268c12bb7353110",
                "b56812fe5b171c67"
            ]
        ]
    },
    {
        "id": "cf46fc37499c5b2e",
        "type": "function",
        "z": "0cbd918f05921aae",
        "name": "function 218",
        "func": "msg.payload = \"Initiated\"\nnode.status({ fill: \"green\", shape: \"ring\", text: \"Initiated\" });\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "d268c12bb7353110",
        "type": "function",
        "z": "0cbd918f05921aae",
        "name": "function 219",
        "func": "msg.payload = msg.apiCallSuccess ?\"Success\": \"Failed\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "b56812fe5b171c67",
        "type": "switch",
        "z": "0cbd918f05921aae",
        "name": "",
        "property": "apiCallSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 160,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "3f661de354f47776",
        "type": "function",
        "z": "951a533bb3498fe6",
        "name": "logger",
        "func": "const date = new Date().toISOString()\nconst flowName = env.get(\"NR_FLOW_NAME\")\nconst nodeName = env.get(\"NR_NODE_NAME\")\nconst LOCAL_PATH = env.get(\"LOCAL_PATH\")\nlet log = `${msg.loggerNewLine ? `\\n*************************************************************************************************\\n\\n` : \"\"} ${date}: flow_name:\"${flowName}\", ${msg.logger ? `,logger: ${JSON.stringify(msg.logger)}` : \"\"} Payload: ${JSON.stringify(msg.payload)} ${msg.logger2 ? `,${JSON.stringify(msg.logger2)}` : \"\"} ${msg.error ? `,${JSON.stringify(msg.error)}` : \"\"} \\n\\n`\n// log = JSON.stringify(JSON.parse(JSON.stringify(log)));\n// console.log(log)\nmsg.payload = log;\nlet dates = date.split(\"T\")[0]\nmsg.filename = `${LOCAL_PATH}/logs/log_${dates}.txt`\ndelete msg.logger\ndelete msg.loggerNewLine\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 180,
        "wires": [
            [
                "e55513515433c2d0"
            ]
        ]
    },
    {
        "id": "e55513515433c2d0",
        "type": "file",
        "z": "951a533bb3498fe6",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 380,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "e4215efc1acec389",
        "type": "function",
        "z": "951a533bb3498fe6",
        "name": "function 186",
        "func": "delete msg.logger\ndelete msg.logger2\ndelete msg.loggerNewLine\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "55d9a5a1e6e5413d",
        "type": "function",
        "z": "9c6db570ab89ba16",
        "name": "uploadFileReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\n\nconst token = msg.actyvToken\n\nmsg.headers = {\n    \"content-type\": 'multipart/form-data',\n    Authorization: `Bearer ${token}`\n};\n\nmsg.url = `${ADMIN_URL}/api/file/upload`\nmsg.method = \"POST\"\nmsg.payload = {\n    \"file\": {\n        \"value\": msg.attachment,\n        \"options\": {\n            \"filename\": `Seeding File response.xlsx`\n        }\n    },\n    \"filename\": `Seeding File response.xlsx`\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 240,
        "wires": [
            [
                "b34b86b2d2793f73"
            ]
        ]
    },
    {
        "id": "b34b86b2d2793f73",
        "type": "http request",
        "z": "9c6db570ab89ba16",
        "name": "uploadFile",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 240,
        "wires": [
            [
                "1d369ebf9c438734"
            ]
        ]
    },
    {
        "id": "1d369ebf9c438734",
        "type": "function",
        "z": "9c6db570ab89ba16",
        "name": "function 221",
        "func": "msg.newFileId = msg.payload.key\n\nconsole.log({payload: msg.payload})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 340,
        "wires": [
            [
                "99238cd9045ba8f8"
            ]
        ]
    },
    {
        "id": "99238cd9045ba8f8",
        "type": "function",
        "z": "9c6db570ab89ba16",
        "name": "updateStatus of file processing",
        "func": "const actyvToken = msg.actyvToken\n// const fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/changeStatus/${msg.fileId}`;\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/update/${msg.fileId}`;\nconst failedRows = msg.failedRows//flow.get(\"failedRows\")\nconst succeededRows = msg.succeededRows// flow.get(\"succeededRows\")\n\nconsole.log({failedRows})\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"actyventityid\": msg.actyvEntityId\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'PATCH';\nmsg.payload = {\n    \"processedFileId\": msg.newFileId,\n    \"seedingStatus\": msg.numOfRows == failedRows.length ? \"FAILED\" : failedRows.length == 0 ? \"COMPLETED\" : \"PARTIALLY_COMPLETED\",\n    \"numOfRows\": msg.numOfRows,\n    \"successRows\": msg.numOfRows - failedRows.length,\n    \"failedRows\": failedRows.length,\n    \"fileId\": msg.fileId\n}\nif(msg.allFailed){\n    msg.payload = {\n        \"processedFileId\": msg.newFileId,\n        \"seedingStatus\": \"FAILED\" ,\n        \"numOfRows\": msg.numOfRows,\n        \"successRows\": 0,//msg.numOfRows - failedRows.length,\n        \"failedRows\": msg.numOfRows,//failedRows.length,\n        \"fileId\": msg.fileId\n    } \n}\n\nconsole.log({\"updateStatus of file processing\": msg.payload})\n\nmsg.logger = { seedingStatusCount: { succeededRows, failedRows, success: succeededRows.length, failed: failedRows.length } }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 460,
        "wires": [
            [
                "f58babc5c281519c"
            ]
        ]
    },
    {
        "id": "f58babc5c281519c",
        "type": "subflow:951a533bb3498fe6",
        "z": "9c6db570ab89ba16",
        "name": "",
        "x": 460,
        "y": 460,
        "wires": [
            [
                "56db551a2a645bf4"
            ]
        ]
    },
    {
        "id": "56db551a2a645bf4",
        "type": "subflow:0cbd918f05921aae",
        "z": "9c6db570ab89ba16",
        "name": "update file Status to completed",
        "x": 750,
        "y": 460,
        "wires": [
            [
                "705a046ef195e56b"
            ],
            [
                "705a046ef195e56b"
            ]
        ]
    },
    {
        "id": "705a046ef195e56b",
        "type": "function",
        "z": "9c6db570ab89ba16",
        "name": "Logger",
        "func": "msg.logger = \"Updated file status to completed\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 540,
        "wires": [
            [
                "8907c34638902cf1"
            ]
        ]
    },
    {
        "id": "8907c34638902cf1",
        "type": "subflow:951a533bb3498fe6",
        "z": "9c6db570ab89ba16",
        "name": "",
        "x": 440,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "9e546c06d8ce037c",
        "type": "switch",
        "z": "9c6db570ab89ba16",
        "name": "fileProcessingCompleted?",
        "property": "isFileProcessingCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 260,
        "y": 160,
        "wires": [
            [
                "2cec9ac34ba231e2"
            ]
        ]
    },
    {
        "id": "2cec9ac34ba231e2",
        "type": "delay",
        "z": "9c6db570ab89ba16",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 580,
        "y": 160,
        "wires": [
            [
                "6cdc4dd171bc57c3"
            ]
        ]
    },
    {
        "id": "6cdc4dd171bc57c3",
        "type": "function",
        "z": "9c6db570ab89ba16",
        "name": "create xlsx",
        "func": "\n\nconst failedRows = msg.failedRows\nlet seedingData = msg.seedingData\n\nconsole.log({failedRows})\nfailedRows.forEach((failedRow) => {\n    seedingData.forEach((row) => {\n        if (failedRow.applicantEmail == row[\"Business Partner Email\"]) {\n            row[\"Remarks\"] = JSON.stringify(failedRow[\"message\"])\n        }\n    })\n})\n\nseedingData.forEach((row) => {\n    if (!row.Remarks) {\n        row.Remarks = \"Success\"\n    }\n})\n\nif(msg.allFailed){\n    seedingData.forEach((row) => {\n        \n            row.Remarks = msg.remark\n        \n    })\n}\n\nconst workbook = XLSX.utils.book_new();\nvar worksheet = XLSX.utils.json_to_sheet(seedingData, {\n    skipHeader: false,\n    header: [\n        \"Business Partner Customer No\",\n        \"Primary User First Name\",\n        \"Primary User Last Name\",\n        \"Business Partner Company Name\",\n        \"Business Partner PAN\",\n        \"Business Partner GST\",\n        \"Business Partner Phone\",\n        \"Business Partner Email\",\n        \"Business Partner City\",\n        \"Business Partner Type\",\n        \"Business Partner Account with Enterprise\",\n        \"Business Partner Bank Name with Enterprise\",\n        \"Business Partner Bank IFSC with Enterprise\",\n        \"Vintage with Enterprise (in months)\",\n        \"Transaction History M1\",\n        \"Transaction History M2\",\n        \"Transaction History M3\",\n        \"Transaction History M4\",\n        \"Transaction History M5\",\n        \"Transaction History M6\",\n        \"Transaction History M7\",\n        \"Transaction History M8\",\n        \"Transaction History M9\",\n        \"Transaction History M10\",\n        \"Transaction History M11\",\n        \"Transaction History M12\",\n        \"Projected Next 12 Months Sales\",\n        \"Remarks\"\n    ],\n});\nXLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\n//  XLSX.writeFile(workbook, \"example.xlsx\");\nconst buffer = XLSX.write(workbook, { type: 'buffer' });\n\nmsg.attachment = buffer\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "XLSX",
                "module": "xlsx"
            },
            {
                "var": "json2xls",
                "module": "json2xls"
            },
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 750,
        "y": 160,
        "wires": [
            [
                "55d9a5a1e6e5413d"
            ]
        ]
    },
    {
        "id": "7b3e32975ec64054",
        "type": "switch",
        "z": "9c6db570ab89ba16",
        "name": "fileProcessingCompleted?",
        "property": "allFailed",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 100,
        "wires": [
            [
                "2cec9ac34ba231e2"
            ]
        ]
    },
    {
        "id": "69bf9539fca02f01",
        "type": "function",
        "z": "e31d0df218bab90b",
        "name": "axios",
        "func": "async function callApi(msg) {\n    try {\n        let response = await axios({\n            url: msg.url,\n            data: msg.payload,\n            headers: msg.headers,\n            method: msg.method,\n        });\n        console.log({ response: response.data });\n        node.send({ ...msg, payload: response.data ?? {} });\n        node.status({ fill: \"green\", shape: \"ring\", text: \"Success\" });\n    } catch (error) {\n        console.log(error)\n        node.status({ fill: \"red\", shape: \"ring\", text: \"Failed\" });\n        // node.send({...msg,payload:error})\n        node.error(\"Axios error\", { error: error?.response?.data, ...msg });\n    }\n}\ncallApi(msg);\n// return msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "axios",
                "module": "axios"
            }
        ],
        "x": 530,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "6a1d8de165e179a7",
        "type": "function",
        "z": "7dfb7fc299d103f9",
        "name": "function 234",
        "func": "msg.payload = \"Initiated\"\nnode.status({ fill: \"green\", shape: \"ring\", text: \"Initiated\" });\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "35da3c46cfdee385",
        "type": "function",
        "z": "7dfb7fc299d103f9",
        "name": "axios",
        "func": "\nasync function callApi(msg){\n    const {headers,url,data,method} = msg\n    delete msg.headers\n    try {\n        node.status({fill:\"blue\",shape:\"ring\",text:\"requesting\"});\n       let data = await axios({\n            url: msg.url,\n            data: msg.method.toLowerCase() !== \"get\"?msg?.payload:{},\n            headers: headers,\n            method: msg?.method,\n        })\n        \n        node.send({ ...msg, payload: data?.data, statusCode: data?.status, apiCallSuccess: true, logger2: { statusCode: data?.status,url: msg.url}})\n   \n  \n        node.status({fill:\"green\",shape:\"ring\",text:\"completed\"});\n    } catch (error) {\n        \n        node.send({ ...msg, statusCode: error?.response?.status, payload: error?.response?.data, apiCallSuccess: false, logger2: { statusCode: error?.response?.status, url: msg.url }})\n        \n        // node.done()\n    \n        // node.error(`Axios error,${JSON.stringify(error?.response?.data)}`,{error:error.response?.data,...msg,statusCode:error.response?.status});\n    };\n}\ncallApi(msg)\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "axios",
                "module": "axios"
            }
        ],
        "x": 250,
        "y": 120,
        "wires": [
            [
                "dcb85052b09dca68",
                "402b98ca8cb9c5ad"
            ]
        ]
    },
    {
        "id": "dcb85052b09dca68",
        "type": "function",
        "z": "7dfb7fc299d103f9",
        "name": "function 235",
        "func": "msg.payload = msg.apiCallSuccess ?\"Success\": \"Failed\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "402b98ca8cb9c5ad",
        "type": "switch",
        "z": "7dfb7fc299d103f9",
        "name": "",
        "property": "apiCallSuccess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 140,
        "wires": [
            [
                "1b875959f940617e",
                "eb7ff237f644a881"
            ],
            [
                "2b4cdfbc9f79b9b8"
            ]
        ]
    },
    {
        "id": "2b4cdfbc9f79b9b8",
        "type": "subflow:951a533bb3498fe6",
        "z": "7dfb7fc299d103f9",
        "name": "",
        "x": 700,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "1b875959f940617e",
        "type": "function",
        "z": "7dfb7fc299d103f9",
        "name": "function 236",
        "func": "\n\ndelete msg.logger\ndelete msg.logger2\ndelete msg.loggerNewLine\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "eb7ff237f644a881",
        "type": "function",
        "z": "7dfb7fc299d103f9",
        "name": "function 237",
        "func": "msg.payload = `Api call is success`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 60,
        "wires": [
            [
                "409ffa24f11b1e06"
            ]
        ]
    },
    {
        "id": "409ffa24f11b1e06",
        "type": "subflow:951a533bb3498fe6",
        "z": "7dfb7fc299d103f9",
        "name": "",
        "x": 780,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "345472c79eed47b1",
        "type": "function",
        "z": "4bdfed63bfa7021d",
        "name": "uploadFileReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\n\nconst token = msg.actyvToken\nconsole.log(token, \"tokennnn\");\nconsole.log({token})\nmsg.headers = {\n    \"content-type\": 'multipart/form-data',\n    Authorization: `Bearer ${token}`\n};\n\nmsg.url = `${ADMIN_URL}/api/file/upload`\nmsg.method = \"POST\"\nmsg.payload = {\n    \"file\": {\n        \"value\": msg.attachment,\n        \"options\": {\n            \"filename\": `Seeding File response.xlsx`\n        }\n    },\n    \"filename\": `Seeding File response.xlsx`\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 240,
        "wires": [
            [
                "b4e69f9edcccdddb"
            ]
        ]
    },
    {
        "id": "b4e69f9edcccdddb",
        "type": "http request",
        "z": "4bdfed63bfa7021d",
        "name": "uploadFile",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 240,
        "wires": [
            [
                "676d1ca0cc8a9ae3",
                "587bd95e73bdad36"
            ]
        ]
    },
    {
        "id": "676d1ca0cc8a9ae3",
        "type": "function",
        "z": "4bdfed63bfa7021d",
        "name": "function 221",
        "func": "msg.newFileId = msg.payload.key\n\nconsole.log({payload: msg.payload})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 340,
        "wires": [
            [
                "de2c96a9287baf1a"
            ]
        ]
    },
    {
        "id": "780c4e781d2a4068",
        "type": "switch",
        "z": "4bdfed63bfa7021d",
        "name": "fileProcessingCompleted?",
        "property": "isFileProcessingCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 260,
        "y": 160,
        "wires": [
            [
                "5c809e9e019e3a4f"
            ]
        ]
    },
    {
        "id": "5c809e9e019e3a4f",
        "type": "delay",
        "z": "4bdfed63bfa7021d",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 600,
        "y": 160,
        "wires": [
            [
                "46dba768d6d764de"
            ]
        ]
    },
    {
        "id": "882f7504c153a545",
        "type": "switch",
        "z": "4bdfed63bfa7021d",
        "name": "fileProcessingCompleted?",
        "property": "allFailed",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 293.7769775390625,
        "y": 70.48995971679688,
        "wires": [
            [
                "5c809e9e019e3a4f"
            ]
        ]
    },
    {
        "id": "46dba768d6d764de",
        "type": "function",
        "z": "4bdfed63bfa7021d",
        "name": "create xlsx",
        "func": "const failedRows = msg.failedRows\nlet seedingData = msg.seedingData\n\nconsole.log({ failedRows })\nfailedRows.forEach((failedRow) => {\n    seedingData.forEach((row) => {\n        if (failedRow.applicantCRN == row[\"Bank CRN\"]) {\n            row[\"Remarks\"] = JSON.stringify(failedRow[\"message\"])\n        }\n    })\n})\n\nseedingData.forEach((row) => {\n    if (!row.Remarks) {\n        row.Remarks = \"Success\"\n    }\n})\n// console.log({ seedingData })\nif (msg.allFailed) {\n    seedingData.forEach((row) => {\n\n        row.Remarks = msg.remark\n\n    })\n}\n\nconst workbook = XLSX.utils.book_new();\nvar worksheet = XLSX.utils.json_to_sheet(seedingData, {\n    skipHeader: false,\n    header: [\n        \"Business Partner PAN\",\n        \"Business Partner GST\",\n        \"Business Partner Phone\",\n        \"Business Partner Email\",\n        \"Bank CRN\",\n        \"Loan Account Number\",\n        \"Approved Limit\",\n        \"Rate Of Interest\",\n        \"Loan Repayment Account Number\",\n        \"Loan Repayment Account Name\",\n        \"Loan Repayment Account IFSC\",\n        \"Create BNPL Preference\",\n        \"Remarks\"\n    ],\n});\nXLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\n//  XLSX.writeFile(workbook, \"example.xlsx\");\nconst buffer = XLSX.write(workbook, { type: 'buffer' });\nconsole.log({ buffer });\nmsg.attachment = buffer\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "XLSX",
                "module": "xlsx"
            },
            {
                "var": "json2xls",
                "module": "json2xls"
            },
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 810,
        "y": 160,
        "wires": [
            [
                "345472c79eed47b1"
            ]
        ]
    },
    {
        "id": "de2c96a9287baf1a",
        "type": "function",
        "z": "4bdfed63bfa7021d",
        "name": "updateStatus of file processing",
        "func": "const actyvToken = msg.actyvToken\n// const fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/changeStatus/${msg.fileId}`;\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/update/${msg.fileId}`;\nconst failedRows = msg.failedRows//flow.get(\"failedRows\")\nconst succeededRows = msg.succeededRows// flow.get(\"succeededRows\")\n\nconsole.log({failedRows})\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"actyventityid\": msg.actyvId\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'PATCH';\nmsg.payload = {\n    \"processedFileId\": msg.newFileId,\n    \"seedingStatus\": msg.numOfRows == failedRows.length ? \"FAILED\" : failedRows.length == 0 ? \"COMPLETED\" : \"PARTIALLY_COMPLETED\",\n    \"numOfRows\": msg.numOfRows,\n    \"successRows\": msg.numOfRows - failedRows.length,\n    \"failedRows\": failedRows.length,\n    \"fileId\": msg.fileId\n}\nif(msg.allFailed){\n    msg.payload = {\n        \"processedFileId\": msg.newFileId,\n        \"seedingStatus\": \"FAILED\" ,\n        \"numOfRows\": msg.numOfRows,\n        \"successRows\": 0,//msg.numOfRows - failedRows.length,\n        \"failedRows\": msg.numOfRows,//failedRows.length,\n        \"fileId\": msg.fileId\n    } \n}\n\nconsole.log({\"updateStatus of file processing\": msg.payload})\n\nmsg.logger = { seedingStatusCount: { succeededRows, failedRows, failed: failedRows.length } }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 460,
        "wires": [
            [
                "4c5153f4193f6568"
            ]
        ]
    },
    {
        "id": "587bd95e73bdad36",
        "type": "debug",
        "z": "4bdfed63bfa7021d",
        "name": "debug 497",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 260,
        "wires": []
    },
    {
        "id": "4c5153f4193f6568",
        "type": "http request",
        "z": "4bdfed63bfa7021d",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 650,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "50699989681bb650",
        "type": "inject",
        "z": "62bce85b962c1ba4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 120,
        "wires": [
            [
                "77d2dcb76a92fbce"
            ]
        ]
    },
    {
        "id": "0e13dfda5d905e0d",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "No Pending Drawdowns",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.length",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 620,
        "wires": []
    },
    {
        "id": "77d2dcb76a92fbce",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "Set env variables",
        "func": "\n// let v8 = global.get(\"v8\");\n// const totalHeapSize = v8.getHeapStatistics().total_available_size;\n// let totalHeapSizeInMB = (totalHeapSize / 1024 / 1024).toFixed(2)\n// node.warn(\"V8 Total Heap Size \"+totalHeapSize+\" bytes\");\n\nconst ENV_VARIABLES = new Map();\n\nENV_VARIABLES.set('PAYLATER_URL',\"https://actyv-platform-paylater-service-v1.qa.actyv.com\")\nENV_VARIABLES.set('GO_URL',\"https://actyv-platform-go-service.qa.actyv.com/api\")\nENV_VARIABLES.set('ADMIN_URL',\"https://actyv-platform-admin-service.qa.actyv.com\")\n\nENV_VARIABLES.set('BUSINESS_IDENTIFIER',\"ABBCB2066P\")\nENV_VARIABLES.set('BUSINESS_TYPE',\"ENTERPRISE\")\nENV_VARIABLES.set('BANK_KEY',\"msl\")\nENV_VARIABLES.set('X_ACTYV_API_CONFIG_KEY',\"8HhkIWzVMSnSgvlhxr\")\nENV_VARIABLES.set('BANK_UNIQUE_IDENTIFIER',\"AASCA2089A\")\nENV_VARIABLES.set('BASE_URL', \"https://iifl-atlas-uat.finfluxtrial.io\")\nENV_VARIABLES.set('tenant_id', \"iifl-qa\")\nENV_VARIABLES.set('IIFL_USER', \"demoUser1\")\nENV_VARIABLES.set('IIFL_USER_PASSWORD', \"fc895Tbr2i&w@\")\nENV_VARIABLES.set('BNPL_USER', \"surajkumar@aplapollo.com\")\nENV_VARIABLES.set('BNPL_USER_PASSWORD', \"890ioP@12\")\n\nglobal.set('envVariables',ENV_VARIABLES)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 120,
        "wires": [
            [
                "fd222e8aba92c133"
            ]
        ]
    },
    {
        "id": "275ddaa1421c57b5",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "getPendingDrawdownsReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst BANK_UNIQUE_IDENTIFIER = env.get('BANK_UNIQUE_IDENTIFIER')\n\nconst bankToken = flow.get(\"bankToken\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown/send-drawdowns-to-bank/${BANK_UNIQUE_IDENTIFIER}`\nmsg.method = 'PUT';\n\nmsg.headers = {\nAuthorization : `Bearer ${bankToken}`,\nbankid: msg.bankId\n}\nmsg.payload = {}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 500,
        "wires": [
            [
                "13d65c21ad91c5d7"
            ]
        ]
    },
    {
        "id": "ee2e15543739d07e",
        "type": "switch",
        "z": "62bce85b962c1ba4",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 195.00000762939453,
        "y": 627.5000057220459,
        "wires": [
            [
                "0e13dfda5d905e0d"
            ],
            [
                "bfdd274754ca45ea"
            ]
        ]
    },
    {
        "id": "bfdd274754ca45ea",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "setDrawdownReqFormat",
        "func": "const pendingDrawdowns = msg.payload\nconst formatPendingDrawdownsForIIFL = []\nfor (let pendingDrawdown of pendingDrawdowns) {\n    formatPendingDrawdownsForIIFL.push({\n        \"Dealer Code\": pendingDrawdown.loanTerm?.crnNumber || \"\",\n        \"Invoice Date\": changeDateFormat(pendingDrawdown.invoice.documentDate.split(\"T\")[0]),\n        // \"Invoice Date\": pendingDrawdown.invoice.documentDate,\n        \"Invoice Number\": pendingDrawdown.invoice.finalInvoiceNo,\n        \"Invoice Amount\": pendingDrawdown.invoice.netAmount,\n        // \"Due Date\": changeDateFormat(pendingDrawdown.invoice.dueDate.split(\"T\")[0]),\n        \"Account No\": pendingDrawdown.businessRelationShip.bankAccountNumber || \"\",\n        \"Email ID\": \"\",\n        \"ROI\": pendingDrawdown.tenorAndRateSpread?.bankSpread,\n        \"Request Unique Code\": pendingDrawdown.loanDrawdown?.requestUniqueCode,\n        bankId: msg.bankId\n    })\n\n}\n\nfunction changeDateFormat(str) {\n\n    str = str.split(\"-\");\n    let res = str[1] + \"/\" + str[2] + \"/\" + str[0]\n    let date = Date.parse(res)\n    return date\n}\n\nmsg.payload = formatPendingDrawdownsForIIFL;\n// TODO: Follow naming of the filename as per Axis\n// const fileConvention = createFileNameForAxis()\t\n// msg.filename = `/Users/shravanpm/Desktop/node-red/drawdowns/${fileConvention}`\n\n// function createFileNameForAxis(){\n//     const input = new Date().toISOString().split('.')\n//     const modified = `${input[0].split(\":\").join(\"-\")}.txt`\n\n//     return `Actyv_${modified}`\n// }\nmsg.payload = [msg.payload[0]]\nfor(let i=0;i<msg.payload.length;i++){\n    node.send({payload:msg.payload[i]});\n}\n\n// return msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 740,
        "wires": [
            [
                "3c47ac3a20e4f657",
                "2f56d2e007815135"
            ]
        ]
    },
    {
        "id": "63bb448d262dc246",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "mockPendingDrawdowns",
        "func": "msg.payload = [\n    {\n        \"loanTerm\": {\n            \"approvedLimit\": \"50000000\",\n            \"crnNumber\": \"ACTYVDEMO000000294\",\n            \"bankProvidedLoanCode\": \"2134\",\n            \"validTill\": \"2022-11-16\",\n            \"loanAmount\": \"\",\n            \"holdAmount\": 0,\n            \"businessType\": \"VENDOR\"\n        },\n        \"invoice\": {\n            \"id\": \"e9966a85-c09c-4302-8a1e-5ad28e1deed2\",\n            \"finalInvoiceNo\": \"0050101517SGFL2022\",\n            \"documentDate\": \"2023-03-17T00:00:00.000Z\",\n            \"dueDate\": \"2023-03-16T00:00:00.000Z\",\n            \"remitTo\": \"\",\n            \"remitAccount\": \"\",\n            \"netAmount\": 5000,\n            \"additionalAttributes\": null,\n            \"erpID\": null\n        },\n        \"tenorAndRateSpread\": {\n            \"fromDuration\": \"P0D\",\n            \"toDuration\": \"P7D\",\n            \"bankSpread\": 12\n        },\n        \"loanDrawdown\": {\n            \"requestUniqueCode\": \"ACTY3891670954806167\",\n            \"requestAmount\": 3540543,\n            \"dueDate\": \"2022-11-23T00:00:00.000Z\",\n            \"remitAccount\": \"APLATB101104\",\n            \"bankIFSC\": \"HDFC0000003\"\n        },\n        \"bank\": {\n            \"userFriendlyIdentifier\": \"Moongipa Securities Ltd.\",\n            \"name\": \"Moongipa Securities Ltd.\"\n        },\n        \"enterprise\": {\n            \"userFriendlyIdentifier\": \"Apollo\",\n            \"name\": \"Apollo\"\n        },\n        \"distributor\": {\n            \"userFriendlyIdentifier\": \"Santosh Steel\",\n            \"name\": \"Santosh Steel\"\n        },\n        \"businessRelationShip\": {\n\n        }\n    }\n]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 500,
        "wires": [
            [
                "ee2e15543739d07e"
            ]
        ]
    },
    {
        "id": "2f56d2e007815135",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "createLoanReq",
        "func": "msg.drawdown = msg.payload;\n\nconst iiflToken = flow.get(\"iiflToken\")\nconst IIFL_URL = env.get('IIFL_URL')\n// const tenant_id = env.get('tenant_id')\nconst vclAccountNumber = msg.payload[\"Dealer Code\"] //take from loan term\nmsg.dealerCode = msg.payload[\"Dealer Code\"]\nmsg.url = `${IIFL_URL}/api/virtual-credit-line/${vclAccountNumber}/draw-downs`\nmsg.method = \"POST\";\nmsg.headers = {\n    // \"Fineract-Platform-TenantId\": tenant_id,\n    Authorization : `Bearer ${iiflToken}`\n}\n\nmsg.payload = {\n    \"productCode\": \"ACTYV_LOC\",\n    \"amount\": msg.payload[\"Invoice Amount\"],\n    \"interestRate\":msg.payload.ROI,//take from loan term\n    \"repayEvery\":1, //constant\n    \"repaymentPeriodFrequencyEnum\":2, //constant\n    \"numberOfInstallments\":2, //constant\n    \"drawDownDate\": msg.payload[\"Invoice Date\"], //epoch date need to be passed\n    \"isWorkFlowCreationEnabled\": \"false\"\n}\n\n// msg.payload.identifier = \"8b10189b-67f7-42b0-bc22-862956e210f1\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 840,
        "wires": [
            [
                "de4b6b6926270bbe",
                "b2752abac5be2585",
                "df7783a042940842"
            ]
        ]
    },
    {
        "id": "b2752abac5be2585",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "approveLoanReq",
        "func": "const FINFLUX_BASE_URL = env.get('FINFLUX_BASE_URL')\nconst tenant_id = env.get('tenant_id');\nconst FINFLUX_TOKEN = env.get(\"FINFLUX_TOKEN\")\n\nmsg.identifier = msg.payload.identifier\n// msg.url = `${IIFL_URL}/fineract-provider/api/v1/virtual-credit-line/${msg.dealerCode}/draw-downs/${msg.payload.identifier}/approve`\nmsg.url = `${FINFLUX_BASE_URL}/fineract-provider/api/v1/virtual-credit-line/${msg.dealerCode}/draw-downs/${msg.payload.identifier}/approve`\nmsg.headers = {\n    // \"Fineract-Platform-TenantId\": tenant_id,\n    Authorization: `Bearer ${FINFLUX_TOKEN}`\n};\n// msg.req = {}\n// msg.req.query = {\n//     command:\"approve\"\n// }\n\nmsg.payload = {\n    \"notes\": \"approved\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 940,
        "wires": [
            [
                "772f0fbf83df4207"
            ]
        ]
    },
    {
        "id": "14cd394a6020b381",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "disburseLoanReq",
        "func": "const FINFLUX_BASE_URL = env.get('FINFLUX_BASE_URL')\n// const tenant_id = env.get('tenant_id')\nconst FINFLUX_TOKEN = env.get(\"FINFLUX_TOKEN\")\n\n\nmsg.url = `${FINFLUX_BASE_URL}/fineract-provider/api/v1/virtual-credit-line/${msg.dealerCode}/draw-downs/${msg.identifier}/disburse`\nmsg.headers = {\n    // \"Fineract-Platform-TenantId\": tenant_id,\n    Authorization: `Bearer ${FINFLUX_TOKEN}`\n};\n// msg.req = {}\n// msg.req.query = {\n//     command:\"disburse\"\n// }\n\nmsg.payload = {\n    \"transactionAmount\": 10000,//msg.drawdown[\"Invoice Amount\"]\n    \"actualDisbursementDate\": \"04 September 2022\",\n    \"locale\": \"en\",\n    \"dateFormat\": \"dd MMMM yyyy\",\n    \"disburseToBankAccount\": {\n        \"bankAccountNo\": \"61323432312\",\n        \"ifscCode\": \"SBIN0016272\"\n    },\n    \"disbursePaymentDetail\": {\n        \"remark\": \"Test\",\n        \"routingCode\": \"1234567\",\n        \"bankNumber\": \"StandardCharteredBank\"\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1040,
        "wires": [
            [
                "6756aceb0865f1a7"
            ]
        ]
    },
    {
        "id": "80ea9b3494df383a",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "updateDrawdownForSuccessReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst bankToken = flow.get(\"bankToken\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown/service`\nmsg.method = 'PATCH';\nmsg.headers = {\n    Authorization : `Bearer ${bankToken}`,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n    bankid: msg.drawdown.bankId\n}\nmsg.payload = {\n    \"drawdownStatus\": \"paid\",\n    \"bankProvidedDrawdownCodes\":msg.payload.loanId.toString(),\n    \"requestUniqueCode\": msg.drawdown[\"Request Unique Code\"]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1180,
        "wires": [
            [
                "c9a88326a726ee10"
            ]
        ]
    },
    {
        "id": "f4cc89bf78b24fdb",
        "type": "switch",
        "z": "62bce85b962c1ba4",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 1240,
        "wires": [
            [
                "80ea9b3494df383a"
            ],
            [
                "00ef493f45cb637f"
            ]
        ]
    },
    {
        "id": "00ef493f45cb637f",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "updateDrawdownForFailureReq ",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\nconst bankToken = flow.get(\"bankToken\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown/service`\nmsg.method = 'PATCH';\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n    Authorization: `Bearer ${bankToken}`,\n    bankid: msg.drawdown.bankId\n}\nmsg.payload = {\n    \"drawdownStatus\": \"failed\",\n    \"requestUniqueCode\": msg.drawdown[\"Request Unique Code\"],\n    \"bankProvidedDrawdownCodes\": msg.payload.loanId.toString(),\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1300,
        "wires": [
            [
                "c9a88326a726ee10"
            ]
        ]
    },
    {
        "id": "633f7ce511474dc5",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 1240,
        "wires": []
    },
    {
        "id": "fd222e8aba92c133",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "AuthenticateIIFLUserReq",
        "func": "const envVariables = global.get('envVariables')\nconst IIFL_USER = envVariables.get('IIFL_USER')\nconst IIFL_USER_PASSWORD = envVariables.get('IIFL_USER_PASSWORD')\nconst BASE_URL = envVariables.get('BASE_URL');\n\n\nmsg.url = `${BASE_URL}/api/auth/login`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": IIFL_USER_PASSWORD,\n        \"userName\": IIFL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 180,
        "wires": [
            [
                "47fea7e3ae268ca6"
            ]
        ]
    },
    {
        "id": "900aba3a49e05c71",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "saveIIFLToken",
        "func": "flow.set(\"iiflToken\", msg.payload.accessToken)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 180,
        "wires": [
            [
                "6a115c3ffa026925"
            ]
        ]
    },
    {
        "id": "3c47ac3a20e4f657",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "drawdownRqstFormat",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 740,
        "wires": []
    },
    {
        "id": "578fad4caae8e5c9",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "create IIFL Loan",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 840,
        "wires": []
    },
    {
        "id": "9a72b758a84637d6",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "IIFL LoanApproval",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 940,
        "wires": []
    },
    {
        "id": "3a3b6647d3781e54",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "IIFL disburseLoan",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 1040,
        "wires": []
    },
    {
        "id": "6a115c3ffa026925",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst ENTERPRISE_USER_EMAIL = env.get('ENTERPRISE_USER_EMAIL')\nconst ENTERPRISE_USER_PASSWORD = env.get('ENTERPRISE_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": ENTERPRISE_USER_PASSWORD,\n    \"email\": ENTERPRISE_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 260,
        "wires": [
            [
                "a5f7f3b49a8eb554"
            ]
        ]
    },
    {
        "id": "c6d4b50b4990bdfa",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "saveEnterpriseToken",
        "func": "flow.set(\"enterpriseToken\",msg.payload.idToken)\n// console.log({enterpriseToken:msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 260,
        "wires": [
            [
                "992b517d5a27cb59"
            ]
        ]
    },
    {
        "id": "992b517d5a27cb59",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "AuthenticateBankUserReq",
        "func": "\nconst BANK_USER_EMAIL = env.get('BANK_USER_EMAIL')\nconst BANK_USER_PASSWORD = env.get('BANK_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": BANK_USER_PASSWORD,\n    \"email\": BANK_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 340,
        "wires": [
            [
                "e6601856e4cff9f3"
            ]
        ]
    },
    {
        "id": "3a8baf9b80f7e220",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "saveBankToken",
        "func": "flow.set(\"bankToken\",msg.payload.idToken)\nconsole.log({bankToken:msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 340,
        "wires": [
            [
                "7b388eef24e2692d"
            ]
        ]
    },
    {
        "id": "7b388eef24e2692d",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "getBankByKeyReq",
        "func": "\n\nconst GO_URL = env.get('GO_URL');\nconst BANK_KEY = env.get(\"BANK_KEY\")\n\nmsg.url = `${GO_URL}/bank/key/${BANK_KEY}`;\nmsg.method = \"GET\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 400,
        "wires": [
            [
                "5dc9cf55077123eb"
            ]
        ]
    },
    {
        "id": "2e0b9c4e9de4ca10",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "saveBankId",
        "func": "msg.bankId = msg.payload._id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 400,
        "wires": [
            [
                "275ddaa1421c57b5"
            ]
        ]
    },
    {
        "id": "e40283809434048d",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "debug 294",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 460,
        "wires": []
    },
    {
        "id": "de4b6b6926270bbe",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "debug 311",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 800,
        "wires": []
    },
    {
        "id": "48ec4dbae63060da",
        "type": "inject",
        "z": "62bce85b962c1ba4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 40,
        "wires": [
            [
                "6f7738ec467ac029"
            ]
        ]
    },
    {
        "id": "6f7738ec467ac029",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "function 180",
        "func": "msg.payload = {env: env.get(\"ENV\")}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 40,
        "wires": [
            [
                "600756bdcb81be4d"
            ]
        ]
    },
    {
        "id": "600756bdcb81be4d",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "debug 336",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 40,
        "wires": []
    },
    {
        "id": "534aaf916f99b0a0",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "debug 386",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 60,
        "wires": []
    },
    {
        "id": "6566e72519c944cd",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "debug 394",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 60,
        "wires": []
    },
    {
        "id": "122fc23955e31d38",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "saveactyvId",
        "func": "flow.set(\"actyv_id\", msg.payload.actyvEntityId);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "8e95ffb521d2489a",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "Getting Actyv Entity User",
        "func": "const flow_var = flow.get('FLOW_VARIABLES');\nconst EMAIL = \"anand.rastogi@actyv.com\";\nconst PASSWORD =  \"890ioP@12\";\n// const EMAIL = env.get('EMAIL')\n// const PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow_var.token}`,\n}\n\nmsg.url = `${ADMIN_URL}/api/user/getCurrentUser?url=https://actyv-platform.uat.actyv.com`;\nmsg.method = \"GET\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 260,
        "wires": [
            [
                "7232d8fdac7bae0a"
            ]
        ]
    },
    {
        "id": "7232d8fdac7bae0a",
        "type": "http request",
        "z": "62bce85b962c1ba4",
        "name": "Getting Actyv_id",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1320,
        "y": 260,
        "wires": [
            [
                "122fc23955e31d38"
            ]
        ]
    },
    {
        "id": "47fea7e3ae268ca6",
        "type": "subflow:0cbd918f05921aae",
        "z": "62bce85b962c1ba4",
        "name": "AuthenticateIIFLUser",
        "x": 520,
        "y": 180,
        "wires": [
            [
                "900aba3a49e05c71"
            ],
            []
        ]
    },
    {
        "id": "a5f7f3b49a8eb554",
        "type": "subflow:0cbd918f05921aae",
        "z": "62bce85b962c1ba4",
        "name": "AuthenticateEnterpriseUser",
        "x": 560,
        "y": 260,
        "wires": [
            [
                "c6d4b50b4990bdfa"
            ],
            []
        ]
    },
    {
        "id": "e6601856e4cff9f3",
        "type": "subflow:0cbd918f05921aae",
        "z": "62bce85b962c1ba4",
        "name": "AuthenticateBankUser",
        "x": 500,
        "y": 340,
        "wires": [
            [
                "3a8baf9b80f7e220"
            ],
            []
        ]
    },
    {
        "id": "5dc9cf55077123eb",
        "type": "subflow:0cbd918f05921aae",
        "z": "62bce85b962c1ba4",
        "name": "getBankByKey",
        "x": 460,
        "y": 400,
        "wires": [
            [
                "2e0b9c4e9de4ca10"
            ],
            []
        ]
    },
    {
        "id": "13d65c21ad91c5d7",
        "type": "subflow:0cbd918f05921aae",
        "z": "62bce85b962c1ba4",
        "name": "getPendingDrawdowns",
        "x": 510,
        "y": 500,
        "wires": [
            [
                "63bb448d262dc246",
                "e40283809434048d"
            ],
            []
        ]
    },
    {
        "id": "df7783a042940842",
        "type": "subflow:0cbd918f05921aae",
        "z": "62bce85b962c1ba4",
        "name": "createLoan",
        "x": 590,
        "y": 840,
        "wires": [
            [
                "578fad4caae8e5c9"
            ],
            []
        ]
    },
    {
        "id": "772f0fbf83df4207",
        "type": "subflow:0cbd918f05921aae",
        "z": "62bce85b962c1ba4",
        "name": "approveLoan",
        "x": 590,
        "y": 940,
        "wires": [
            [
                "9a72b758a84637d6",
                "14cd394a6020b381"
            ],
            []
        ]
    },
    {
        "id": "6756aceb0865f1a7",
        "type": "subflow:0cbd918f05921aae",
        "z": "62bce85b962c1ba4",
        "name": "disburseLoan",
        "x": 600,
        "y": 1040,
        "wires": [
            [
                "3a3b6647d3781e54",
                "f4cc89bf78b24fdb"
            ],
            []
        ]
    },
    {
        "id": "c9a88326a726ee10",
        "type": "subflow:0cbd918f05921aae",
        "z": "62bce85b962c1ba4",
        "name": "updateDrawdownStatus",
        "x": 1030,
        "y": 1240,
        "wires": [
            [
                "633f7ce511474dc5"
            ],
            []
        ]
    },
    {
        "id": "bc23fc535ad2be48",
        "type": "inject",
        "z": "996aaae174a57dd4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 120,
        "wires": [
            [
                "d4a563f6bec24b80"
            ]
        ]
    },
    {
        "id": "d4a563f6bec24b80",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "Set env variables",
        "func": "\n// let v8 = global.get(\"v8\");\n// const totalHeapSize = v8.getHeapStatistics().total_available_size;\n// let totalHeapSizeInMB = (totalHeapSize / 1024 / 1024).toFixed(2)\n// node.warn(\"V8 Total Heap Size \"+totalHeapSize+\" bytes\");\n\nconst ENV_VARIABLES = new Map();\n\nENV_VARIABLES.set('PAYLATER_URL', \"https://actyv-platform-paylater-service-v1.qa.actyv.com\")\nENV_VARIABLES.set('GO_URL', \"https://actyv-platform-go-service.qa.actyv.com/api\")\nENV_VARIABLES.set('ADMIN_URL', \"https://actyv-platform-admin-service.qa.actyv.com\")\n\nENV_VARIABLES.set('BUSINESS_IDENTIFIER', \"ABBCB2066P\")\nENV_VARIABLES.set('BUSINESS_TYPE', \"ENTERPRISE\")\nENV_VARIABLES.set('BANK_KEY', \"msl\")\nENV_VARIABLES.set('X_ACTYV_API_CONFIG_KEY', \"8HhkIWzVMSnSgvlhxr\")\nENV_VARIABLES.set('BANK_UNIQUE_IDENTIFIER', \"AASCA2089A\")\nENV_VARIABLES.set('BASE_URL', \"https://iifl-atlas-uat.finfluxtrial.io\")\nENV_VARIABLES.set('tenant_id', \"iifl-qa\")\nENV_VARIABLES.set('BANK_PRODUCT_KEY', \"axis-sabari-product\")\n\nENV_VARIABLES.set('BNPL_USER', \"surajkumar@aplapollo.com\")\nENV_VARIABLES.set('BNPL_USER_PASSWORD', \"890ioP@12\")\n\nENV_VARIABLES.set('IIFL_USER', \"demoUser1\")\nENV_VARIABLES.set('IIFL_USER_PASSWORD', \"fc895Tbr2i&w@\")\n\nglobal.set('envVariables', ENV_VARIABLES)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 120,
        "wires": [
            [
                "03d162704cc4b6ef"
            ]
        ]
    },
    {
        "id": "c009ce22dbc96c3d",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "getBankProductReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\n\nmsg.headers = {}\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank-application-config/key/${BANK_PRODUCT_KEY}`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 500,
        "wires": [
            [
                "3f883db3dd91f52f"
            ]
        ]
    },
    {
        "id": "8b0e28813da8dd6b",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "setBankAndEnterpriseId",
        "func": "flow.set(\"bankId\",msg.payload.bank);\nflow.set(\"enterpriseId\", msg.payload.allowedEnterprises[0]);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 600,
        "wires": [
            [
                "eecf173edc9397da"
            ]
        ]
    },
    {
        "id": "eecf173edc9397da",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "getDistributorRelatonsReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst enterpriseToken = flow.get(\"enterpriseToken\")\n\nmsg.url = `${GO_URL}/business-relationship/getByParentBusinessId/${msg.payload[\"bank\"]}`\nmsg.method = \"GET\"\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n    Authorization : `Bearer ${enterpriseToken}`\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 600,
        "wires": [
            [
                "521aea128952274b"
            ]
        ]
    },
    {
        "id": "a5e37392b86c864f",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "filterByBankAndDistributer",
        "func": "msg.payload = msg.payload.filter((item)=>{\n    return item.relationType === \"DISTRIBUTOR-BANK\"\n});\n\nfor(let i=0;i<msg.payload.length;i++){\n    node.send({\n        payload:msg.payload[i].identifierByParent\n    })\n}\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 680,
        "wires": [
            [
                "865145a15b51b9b8"
            ]
        ]
    },
    {
        "id": "55865ec6cf840209",
        "type": "debug",
        "z": "996aaae174a57dd4",
        "name": "debug 60",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 880,
        "wires": []
    },
    {
        "id": "865145a15b51b9b8",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "getLoanTermByCrnReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL');\nconst bankToken = flow.get(\"bankToken\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/fetchByCrnNumber`;\nmsg.method = \"POST\";\nmsg.headers = {\n    Authorization : `Bearer ${bankToken}`\n}\nmsg.crnNumber = msg.payload\nmsg.payload = { \n    // crnNumber: msg.payload\n    crnNumber:\"SGFLTD101104\"\n    }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 680,
        "wires": [
            [
                "cf97279d4e73f882"
            ]
        ]
    },
    {
        "id": "31ef4ad07643841b",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "getPaidDrawdownsForLoanIDReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL');\nconst bankToken = flow.get(\"bankToken\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown/service/fetch`;\nmsg.method = \"POST\";\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY \n}\nmsg.crnNumber = msg.payload.crnNumber\nmsg.payload = \n   {\n\n    // \"loanTermID\": msg.payload.id,\n    \"loanTermID\":\"1e035bf2-00b2-4ac3-80d6-2c405461a5e5\",\n        \"drawdownStatus\" : \"paid\"\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 780,
        "wires": [
            [
                "117996374f9c2b54"
            ]
        ]
    },
    {
        "id": "fbb8d461b3e2c8a0",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "loopThroughDrawdowns",
        "func": "\n\nfor(let i=0;i<msg.payload.length;i++){\n    node.send({\n        drawdown :{\n            id:msg.payload[i].id,\n            requestUniqueCode: msg.payload[i].requestUniqueCode,\n            loanId: msg.payload[i].bankProvidedDrawdownCodes,\n            vcl: msg.payload[i].loanTerm.crnNumber,\n            loanTermId: msg.payload[i].loanTerm.id\n        }\n    })\n}\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 880,
        "wires": [
            [
                "55865ec6cf840209",
                "d55aafc5bf695080"
            ]
        ]
    },
    {
        "id": "d55aafc5bf695080",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "getLoanStatusReq",
        "func": "const iiflToken = flow.get(\"iiflToken\")\nconst IIFL_URL = env.get('IIFL_URL')\n// const tenant_id = env.get('tenant_id')\nconst vclAccountNumber = msg.drawdown.vcl //take from loan term\nconst loanId = msg.drawdown.loanId\nmsg.url = `${IIFL_URL}/api/loans/${loanId}`\nmsg.method = \"GET\";\nmsg.headers = {\n    // \"Fineract-Platform-TenantId\": tenant_id,\n    Authorization: `Bearer ${iiflToken}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 980,
        "wires": [
            [
                "5f9fffd972ad52ee"
            ]
        ]
    },
    {
        "id": "f598a0f54b3791e5",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "createEntryOnDailyLedgerReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\nconst tenant_id = envVariables.get('tenant_id')\n\nmsg.url = `${PAYLATER_URL}/v1/daily-ledger`\nmsg.method = \"POST\";\n\nmsg.payload = {\n    \"loanTermID\": msg.drawdown.loanTermId,\n    \"transactionDate\": \"2023-01-16T13:51:12.958Z\",\n    \"openingBalance\": 0,\n    \"closingBalance\": 0,\n    \"totalPayment\": 0,\n    \"totalDrawdown\": 0,\n    \"interestAmount\": 0,\n    \"overdueAmount\": 0,\n    \"penalInterestAmount\": 0,\n    \"interestRate\": 0,\n    \"penalInterestRate\": 0\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 1400,
        "wires": [
            [
                "ab963133e6904785"
            ]
        ]
    },
    {
        "id": "ab963133e6904785",
        "type": "http request",
        "z": "996aaae174a57dd4",
        "name": "createEntryOnRepaymentTable",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 670,
        "y": 1400,
        "wires": [
            [
                "cc1449116ae322eb"
            ]
        ]
    },
    {
        "id": "cc1449116ae322eb",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "createEntryOnRepaymentTableReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\nconst tenant_id = envVariables.get('tenant_id')\n\nmsg.url = `${PAYLATER_URL}/v1/loan-payment`\nmsg.method = \"POST\";\n\nmsg.payload = {\n    \"loanID\": \"xxxx-xxxx-xxxx\",\n    \"drawdownID\": \"xxxx-xxxx-xxxx\",\n    \"amount\": 1000000,\n    \"date\": \"2011-04-11T10:20:30Z\",\n    \"paymentMethod\": \"Cash\",\n    \"fromAccount\": \"123412341234\",\n    \"principal\": 100000,\n    \"interest\": 1000,\n    \"balance\": 0\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1520,
        "wires": [
            [
                "c22dd584c751c67d"
            ]
        ]
    },
    {
        "id": "c22dd584c751c67d",
        "type": "http request",
        "z": "996aaae174a57dd4",
        "name": "createEntryOnDailyLedger",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 660,
        "y": 1520,
        "wires": [
            [
                "e78a633d45d434b1"
            ]
        ]
    },
    {
        "id": "e78a633d45d434b1",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "createEntryOnCashTableReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\nconst tenant_id = envVariables.get('tenant_id')\n\nmsg.url = `${PAYLATER_URL}/v1/cash-application`\nmsg.method = \"POST\";\n\nmsg.payload = {\n    \"loanDrawdownID\": \"string\",\n    \"loanPaymentID\": \"string\",\n    \"loanTermID\": \"string\",\n    \"transactionDate\": \"2023-01-16T13:52:30.856Z\",\n    \"appliedAmount\": 0\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1660,
        "wires": [
            [
                "b37fc11cbb1fccbf"
            ]
        ]
    },
    {
        "id": "b37fc11cbb1fccbf",
        "type": "http request",
        "z": "996aaae174a57dd4",
        "name": "createEntryOnCashTable",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 650,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "a6a7b6e4ba6af4f1",
        "type": "debug",
        "z": "996aaae174a57dd4",
        "name": "debug 61",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 1120,
        "wires": []
    },
    {
        "id": "21fbe25aa67aa8ec",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "AuthenticateIIFLUserReq",
        "func": "const IIFL_USER = env.get('IIFL_USER')\nconst IIFL_USER_PASSWORD = env.get('IIFL_USER_PASSWORD')\nconst IIFL_URL = env.get('IIFL_URL');\n\n\nmsg.url = `${IIFL_URL}/api/auth/login`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": IIFL_USER_PASSWORD,\n        \"userName\": IIFL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 340,
        "wires": [
            [
                "d11fdae97c6328ae"
            ]
        ]
    },
    {
        "id": "ca99bf5b7ee9a3cb",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "saveIIFLToken",
        "func": "flow.set(\"iiflToken\", msg.payload.accessToken)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 340,
        "wires": [
            [
                "c009ce22dbc96c3d"
            ]
        ]
    },
    {
        "id": "acc5fa752e399e47",
        "type": "debug",
        "z": "996aaae174a57dd4",
        "name": "debug 64",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 400,
        "wires": []
    },
    {
        "id": "03d162704cc4b6ef",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst ENTERPRISE_USER_EMAIL = env.get('ENTERPRISE_USER_EMAIL')\nconst ENTERPRISE_USER_PASSWORD = env.get('ENTERPRISE_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": ENTERPRISE_USER_PASSWORD,\n    \"email\": ENTERPRISE_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 180,
        "wires": [
            [
                "c88e7179b94de58e"
            ]
        ]
    },
    {
        "id": "1fa55e16444e6943",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "saveEnterpriseToken",
        "func": "flow.set(\"enterpriseToken\",msg.payload.idToken)\nconsole.log({enterpriseToken:msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 180,
        "wires": [
            [
                "91474774605389a1"
            ]
        ]
    },
    {
        "id": "91474774605389a1",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "AuthenticateBankUserReq",
        "func": "\nconst BANK_USER_EMAIL = env.get('BANK_USER_EMAIL')\nconst BANK_USER_PASSWORD = env.get('BANK_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": BANK_USER_PASSWORD,\n    \"email\": BANK_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 260,
        "wires": [
            [
                "e138b01cf80b9aa5"
            ]
        ]
    },
    {
        "id": "4ee423487c83c858",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "saveBankToken",
        "func": "flow.set(\"bankToken\",msg.payload.idToken)\nconsole.log({bankToken:msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 260,
        "wires": [
            [
                "21fbe25aa67aa8ec"
            ]
        ]
    },
    {
        "id": "c95f30e41150c848",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "updateDrawdownForSuccessReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst bankToken = flow.get(\"bankToken\")\nconst bankId = flow.get(\"bankId\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown/service`\nmsg.method = 'PATCH';\nmsg.headers = {\n    Authorization : `Bearer ${bankToken}`,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n    bankid: bankId\n}\nmsg.payload = {\n    \"requestUniqueCode\": msg.drawdown[\"requestUniqueCode\"],\n    paidInterestAmount: msg.payload.interestPaid,\n    paidDisbursedAmount: msg.payload.principalPaid\n}\nif(msg.payload.closed){\n    msg.payload.drawdownStatus = \"completed\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1120,
        "wires": [
            [
                "747e87f46b9bdce3"
            ]
        ]
    },
    {
        "id": "c88e7179b94de58e",
        "type": "subflow:0cbd918f05921aae",
        "z": "996aaae174a57dd4",
        "name": "AuthenticateEnterpriseUser",
        "x": 540,
        "y": 180,
        "wires": [
            [
                "1fa55e16444e6943"
            ],
            []
        ]
    },
    {
        "id": "e138b01cf80b9aa5",
        "type": "subflow:0cbd918f05921aae",
        "z": "996aaae174a57dd4",
        "name": "AuthenticateBankUser",
        "x": 560,
        "y": 260,
        "wires": [
            [
                "4ee423487c83c858"
            ],
            []
        ]
    },
    {
        "id": "d11fdae97c6328ae",
        "type": "subflow:0cbd918f05921aae",
        "z": "996aaae174a57dd4",
        "name": "AuthenticateEnterpriseUser",
        "x": 600,
        "y": 340,
        "wires": [
            [
                "ca99bf5b7ee9a3cb"
            ],
            []
        ]
    },
    {
        "id": "3f883db3dd91f52f",
        "type": "subflow:0cbd918f05921aae",
        "z": "996aaae174a57dd4",
        "name": "getBankProduct",
        "x": 560,
        "y": 500,
        "wires": [
            [
                "8b0e28813da8dd6b"
            ],
            []
        ]
    },
    {
        "id": "521aea128952274b",
        "type": "subflow:0cbd918f05921aae",
        "z": "996aaae174a57dd4",
        "name": "getDistributorRelatons",
        "x": 820,
        "y": 600,
        "wires": [
            [
                "a5e37392b86c864f"
            ],
            []
        ]
    },
    {
        "id": "cf97279d4e73f882",
        "type": "subflow:0cbd918f05921aae",
        "z": "996aaae174a57dd4",
        "name": "getLoanTermByCrn",
        "x": 810,
        "y": 680,
        "wires": [
            [
                "31ef4ad07643841b"
            ],
            []
        ]
    },
    {
        "id": "117996374f9c2b54",
        "type": "subflow:0cbd918f05921aae",
        "z": "996aaae174a57dd4",
        "name": "getPaidDrawdownsForLoanID",
        "x": 690,
        "y": 780,
        "wires": [
            [
                "fbb8d461b3e2c8a0"
            ],
            []
        ]
    },
    {
        "id": "5f9fffd972ad52ee",
        "type": "subflow:0cbd918f05921aae",
        "z": "996aaae174a57dd4",
        "name": "getLoanStatus",
        "x": 600,
        "y": 980,
        "wires": [
            [
                "c95f30e41150c848"
            ],
            []
        ]
    },
    {
        "id": "747e87f46b9bdce3",
        "type": "subflow:0cbd918f05921aae",
        "z": "996aaae174a57dd4",
        "name": "updateDrawdownForSuccess",
        "x": 610,
        "y": 1120,
        "wires": [
            [
                "a6a7b6e4ba6af4f1"
            ],
            []
        ]
    },
    {
        "id": "bb737c30c8ca6f98",
        "type": "inject",
        "z": "61062284bea26a85",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "9ac0cc4dad29c7b2"
            ]
        ]
    },
    {
        "id": "9ac0cc4dad29c7b2",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "Set env variables",
        "func": "\n// let v8 = global.get(\"v8\");\n// const totalHeapSize = v8.getHeapStatistics().total_available_size;\n// let totalHeapSizeInMB = (totalHeapSize / 1024 / 1024).toFixed(2)\n// node.warn(\"V8 Total Heap Size \"+totalHeapSize+\" bytes\");\n\nconst ENV_VARIABLES = new Map();\n\nENV_VARIABLES.set('PAYLATER_URL', \"https://actyv-platform-paylater-service-v1.qa.actyv.com\")\nENV_VARIABLES.set('GO_URL', \"https://actyv-platform-go-service.qa.actyv.com/api\")\nENV_VARIABLES.set('ADMIN_URL', \"https://actyv-platform-admin-service.qa.actyv.com\")\n\nENV_VARIABLES.set('BUSINESS_IDENTIFIER', \"ABBCB2066P\")\nENV_VARIABLES.set('BUSINESS_TYPE', \"ENTERPRISE\")\nENV_VARIABLES.set('BANK_KEY', \"msl\")\nENV_VARIABLES.set('X_ACTYV_API_CONFIG_KEY', \"8HhkIWzVMSnSgvlhxr\")\nENV_VARIABLES.set('BANK_UNIQUE_IDENTIFIER', \"AASCA2089A\")\nENV_VARIABLES.set('BASE_URL', \"https://iifl-atlas-uat.finfluxtrial.io\")\nENV_VARIABLES.set('tenant_id', \"iifl-qa\")\nENV_VARIABLES.set('BANK_PRODUCT_KEY', \"axis-sabari-product\")\n\nENV_VARIABLES.set('BNPL_USER', \"surajkumar@aplapollo.com\")\nENV_VARIABLES.set('BNPL_USER_PASSWORD', \"890ioP@12\")\nENV_VARIABLES.set('IIFL_USER', \"demoUser1\")\nENV_VARIABLES.set('IIFL_USER_PASSWORD', \"fc895Tbr2i&w@\")\n\nglobal.set('envVariables', ENV_VARIABLES)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 60,
        "wires": [
            [
                "7530dc11778e49ea"
            ]
        ]
    },
    {
        "id": "f7ba9a887eb49491",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "getBankProductReq",
        "func": "const envVariables = global.get('envVariables')\nconst GO_URL = envVariables.get('GO_URL')\nconst BANK_PRODUCT_KEY = envVariables.get('BANK_PRODUCT_KEY')\n\nmsg.headers = {}\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank-application-config/key/${BANK_PRODUCT_KEY}`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 300,
        "wires": [
            [
                "a79e7fe9748cf123"
            ]
        ]
    },
    {
        "id": "a79e7fe9748cf123",
        "type": "http request",
        "z": "61062284bea26a85",
        "name": "getBankProduct",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 480,
        "y": 300,
        "wires": [
            [
                "fd5c0b77d2411e9f",
                "65f3ab07a6f11f22"
            ]
        ]
    },
    {
        "id": "fd5c0b77d2411e9f",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "setBankAndEnterpriseId",
        "func": "flow.set(\"bankId\",msg.payload.bank);\nflow.set(\"enterpriseId\", msg.payload.allowedEnterprises[0]);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 420,
        "wires": [
            [
                "b5d193f12a4ba20b"
            ]
        ]
    },
    {
        "id": "b5d193f12a4ba20b",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "getDistributorRelatonsReq",
        "func": "const envVariables = global.get('envVariables')\nconst GO_URL = envVariables.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = envVariables.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.url = `${GO_URL}/business-relationship/getByParentBusinessId/${msg.payload[\"bank\"]}`\nmsg.method = \"GET\"\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n    Authorization : `Bearer ${actyvToken}`\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 420,
        "wires": [
            [
                "73d9214512e9ebc6"
            ]
        ]
    },
    {
        "id": "73d9214512e9ebc6",
        "type": "http request",
        "z": "61062284bea26a85",
        "name": "getDistributorRelatons",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 820,
        "y": 420,
        "wires": [
            [
                "88c594de00aaf369",
                "edc50df4010bb0af"
            ]
        ]
    },
    {
        "id": "edc50df4010bb0af",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "filterByBankAndDistributer",
        "func": "msg.payload = msg.payload.filter((item)=>{\n    return item.relationType === \"DISTRIBUTOR-BANK\"\n});\n\nfor(let i=0;i<msg.payload.length;i++){\n    node.send({\n        payload:msg.payload[i]\n    })\n}\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 520,
        "wires": [
            [
                "ccd0d6350dfce3be"
            ]
        ]
    },
    {
        "id": "ccd0d6350dfce3be",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "getLoanTermByCrnReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL');\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/fetchByCrnNumber`;\nmsg.method = \"POST\";\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`\n}\nmsg.crnNumber = msg.payload.identifierByParent\nmsg.payload = { \n    // crnNumber: msg.payload.identifierByParent\n    crnNumber:\"SGFLTD101104\"\n    }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 520,
        "wires": [
            [
                "0284ef1ee47e9034"
            ]
        ]
    },
    {
        "id": "0284ef1ee47e9034",
        "type": "http request",
        "z": "61062284bea26a85",
        "name": "getLoanTermByCrn",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 830,
        "y": 520,
        "wires": [
            [
                "668959e1f01e6611"
            ]
        ]
    },
    {
        "id": "7530dc11778e49ea",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "AuthenticateBNPLUserReq",
        "func": "const envVariables = global.get('envVariables')\nconst BNPL_USER = envVariables.get('BNPL_USER')\nconst BNPL_USER_PASSWORD = envVariables.get('BNPL_USER_PASSWORD')\nconst ADMIN_URL = envVariables.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": BNPL_USER_PASSWORD,\n    \"email\": BNPL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 120,
        "wires": [
            [
                "b459e362ef2b9c61"
            ]
        ]
    },
    {
        "id": "b459e362ef2b9c61",
        "type": "http request",
        "z": "61062284bea26a85",
        "name": "AuthenticateBNPLUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 120,
        "wires": [
            [
                "103963ae6567f156"
            ]
        ]
    },
    {
        "id": "103963ae6567f156",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\", msg.payload.idToken.accessToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 120,
        "wires": [
            [
                "bd4c69d7bc9b264b",
                "7629a302d71cb32c"
            ]
        ]
    },
    {
        "id": "bd4c69d7bc9b264b",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "AuthenticateIIFLUserReq",
        "func": "const envVariables = global.get('envVariables')\nconst IIFL_USER = envVariables.get('IIFL_USER')\nconst IIFL_USER_PASSWORD = envVariables.get('IIFL_USER_PASSWORD')\nconst BASE_URL = envVariables.get('BASE_URL');\n\n\nmsg.url = `${BASE_URL}/api/auth/login`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": IIFL_USER_PASSWORD,\n        \"userName\": IIFL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 200,
        "wires": [
            [
                "0d6cb629be9c052e"
            ]
        ]
    },
    {
        "id": "0d6cb629be9c052e",
        "type": "http request",
        "z": "61062284bea26a85",
        "name": "AuthenticateIIFLUser",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 200,
        "wires": [
            [
                "07ee7d166a5ace75"
            ]
        ]
    },
    {
        "id": "07ee7d166a5ace75",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "saveIIFLToken",
        "func": "flow.set(\"iiflToken\",msg.payload)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 200,
        "wires": [
            [
                "f7ba9a887eb49491",
                "45cf2365d568989e"
            ]
        ]
    },
    {
        "id": "cb7ad22c93ac5e31",
        "type": "debug",
        "z": "61062284bea26a85",
        "name": "debug 62",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 600,
        "wires": []
    },
    {
        "id": "45cf2365d568989e",
        "type": "debug",
        "z": "61062284bea26a85",
        "name": "IIFL Token",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 200,
        "wires": []
    },
    {
        "id": "7629a302d71cb32c",
        "type": "debug",
        "z": "61062284bea26a85",
        "name": "actyv Token",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 120,
        "wires": []
    },
    {
        "id": "65f3ab07a6f11f22",
        "type": "debug",
        "z": "61062284bea26a85",
        "name": "bankProduct",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 300,
        "wires": []
    },
    {
        "id": "88c594de00aaf369",
        "type": "debug",
        "z": "61062284bea26a85",
        "name": "distributorRelationships",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 420,
        "wires": []
    },
    {
        "id": "668959e1f01e6611",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "getLoanTermReq",
        "func": "// msg.loanID = msg.payload.id\nmsg.loanID = \"1e035bf2-00b2-4ac3-80d6-2c405461a5e5\"\n\nconst envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL');\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/fetch`;\nmsg.method = \"POST\";\nmsg.headers = {\n    Authorization: `Bearer ${actyvToken}`\n}\nmsg.crnNumber = msg.payload.identifierByParent\nmsg.payload = {\n    // crnNumber: msg.payload.identifierByParent\n    \"loanTermsID\": msg.loanID,\n    \"toMask\": false\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 600,
        "wires": [
            [
                "b9801a93bb233b3b"
            ]
        ]
    },
    {
        "id": "ee3bae13c71165ec",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "loanUpdatesFromIIFLReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\n// const clientId = msg.payload[0].bankProvidedLoanCodes\nconst clientId = msg.payload[0].bankProvidedLoanCodes\n\nconst iiflToken = flow.get(\"iiflToken\")\n\n\nmsg.url = `${BASE_URL}/api/clients/${clientId}/virtual-credit-line`\nmsg.headers = {\n    // \"Fineract-Platform-TenantId\": tenant_id,.\n    Authorization: `Bearer ${iiflToken}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 700,
        "wires": [
            [
                "9298002a8115a859"
            ]
        ]
    },
    {
        "id": "b9801a93bb233b3b",
        "type": "http request",
        "z": "61062284bea26a85",
        "name": "getLoanTerm",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 600,
        "wires": [
            [
                "cb7ad22c93ac5e31",
                "ee3bae13c71165ec"
            ]
        ]
    },
    {
        "id": "9298002a8115a859",
        "type": "http request",
        "z": "61062284bea26a85",
        "name": "loanUpdatesFromIIFL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 700,
        "wires": [
            [
                "15b6002441d89aff"
            ]
        ]
    },
    {
        "id": "15b6002441d89aff",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "filterByCrn",
        "func": "let vclData = msg.payload.filter((item)=>{\n    return item.accountNo == msg.crnNumber\n});\nmsg.payload = vclData[0]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 700,
        "wires": [
            [
                "8efe067680650f64"
            ]
        ]
    },
    {
        "id": "8efe067680650f64",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "updateLoanTermReq",
        "func": "// msg.loanID = msg.payload.id\nmsg.loanID = \"1e035bf2-00b2-4ac3-80d6-2c405461a5e5\"\n\nconst envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL');\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/update`;\nmsg.method = \"PATCH\";\nmsg.headers = {\n    Authorization: `Bearer ${actyvToken}`\n}\nmsg.crnNumber = msg.payload.identifierByParent\nmsg.payload = {\n    // crnNumber: msg.payload.identifierByParent\n    \"loanTermsID\": msg.loanID,\n    \"loanAmount\": msg.payload.creditLimit,\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 800,
        "wires": [
            [
                "a624176a4154eb3f"
            ]
        ]
    },
    {
        "id": "fa6beeef2e013814",
        "type": "comment",
        "z": "61062284bea26a85",
        "name": "loop",
        "info": "",
        "x": 130,
        "y": 480,
        "wires": []
    },
    {
        "id": "a624176a4154eb3f",
        "type": "http request",
        "z": "61062284bea26a85",
        "name": "updateLoanTerm",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 490,
        "y": 800,
        "wires": [
            [
                "2f6325eaabdc18ad"
            ]
        ]
    },
    {
        "id": "2f6325eaabdc18ad",
        "type": "debug",
        "z": "61062284bea26a85",
        "name": "completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 800,
        "wires": []
    },
    {
        "id": "c50a7e0407590dd0",
        "type": "inject",
        "z": "6f7cc265b7283a5c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 240,
        "wires": [
            [
                "d0bac47e01cf553d"
            ]
        ]
    },
    {
        "id": "d0bac47e01cf553d",
        "type": "function",
        "z": "6f7cc265b7283a5c",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst ENTERPRISE_USER_EMAIL = env.get('ENTERPRISE_USER_EMAIL')\nconst ENTERPRISE_USER_PASSWORD = env.get('ENTERPRISE_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": ENTERPRISE_USER_PASSWORD,\n    \"email\": ENTERPRISE_USER_EMAIL+\"dd\"\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 240,
        "wires": [
            [
                "9e0fcf6e0fe8f437"
            ]
        ]
    },
    {
        "id": "df019777b1bba2d8",
        "type": "debug",
        "z": "6f7cc265b7283a5c",
        "name": "debug 527",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 220,
        "wires": []
    },
    {
        "id": "9e0fcf6e0fe8f437",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "6f7cc265b7283a5c",
        "name": "",
        "x": 620,
        "y": 240,
        "wires": [
            [
                "df019777b1bba2d8"
            ],
            [
                "0e6854af7adc6f25"
            ]
        ]
    },
    {
        "id": "0e6854af7adc6f25",
        "type": "debug",
        "z": "6f7cc265b7283a5c",
        "name": "debug 528",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 300,
        "wires": []
    },
    {
        "id": "23a7fbaace120573",
        "type": "inject",
        "z": "e8842e93c37e68d3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "32591d37a841bef2"
            ]
        ]
    },
    {
        "id": "32591d37a841bef2",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "Set env variables",
        "func": "\n// let v8 = global.get(\"v8\");\n// const totalHeapSize = v8.getHeapStatistics().total_available_size;\n// let totalHeapSizeInMB = (totalHeapSize / 1024 / 1024).toFixed(2)\n// node.warn(\"V8 Total Heap Size \"+totalHeapSize+\" bytes\");\n\nconst ENV_VARIABLES = new Map();\n\nENV_VARIABLES.set('PAYLATER_URL', \"https://actyv-platform-paylater-service-v1.qa.actyv.com\")\nENV_VARIABLES.set('GO_URL', \"https://actyv-platform-go-service.qa.actyv.com\")\nENV_VARIABLES.set('ADMIN_URL', \"https://actyv-platform-admin-service.qa.actyv.com\")\n\nENV_VARIABLES.set('BUSINESS_IDENTIFIER', \"ABBCB2066P\")\nENV_VARIABLES.set('BUSINESS_TYPE', \"ENTERPRISE\")\nENV_VARIABLES.set('BANK_KEY', \"msl\")\nENV_VARIABLES.set('X_ACTYV_API_CONFIG_KEY', \"8HhkIWzVMSnSgvlhxr\")\nENV_VARIABLES.set('BANK_UNIQUE_IDENTIFIER', \"AASCA2089A\")\nENV_VARIABLES.set('BASE_URL', \"https://iifl-atlas-uat.finfluxtrial.io\")\nENV_VARIABLES.set('tenant_id', \"iifl-qa\")\nENV_VARIABLES.set('BANK_PRODUCT_KEY', \"axis-sabari-product\")\n\nENV_VARIABLES.set('BNPL_USER', \"surajkumar@aplapollo.com\")\nENV_VARIABLES.set('BNPL_USER_PASSWORD', \"890ioP@12\")\nENV_VARIABLES.set('IIFL_USER', \"demoUser2\")\nENV_VARIABLES.set('IIFL_USER_PASSWORD', \"fc895Tbr2i&w@\")\n\nglobal.set('envVariables', ENV_VARIABLES)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 60,
        "wires": [
            [
                "c9968cc2d1d8ca3b"
            ]
        ]
    },
    {
        "id": "c9968cc2d1d8ca3b",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst CKPL_ENTERPRISE_ADMIN_EMAIL = env.get('CKPL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": CKPL_ENTERPRISE_ADMIN_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 120,
        "wires": [
            [
                "704f8f1009f33844"
            ]
        ]
    },
    {
        "id": "704f8f1009f33844",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "AuthenticateEnterpriseUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 520,
        "y": 120,
        "wires": [
            [
                "8a728e695af44a28",
                "a257ca5bd6faa3e4"
            ]
        ]
    },
    {
        "id": "8a728e695af44a28",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveEnterpriseToken",
        "func": "flow.set(\"enterpriseToken\",msg.payload.idToken)\n// console.log({enterpriseToken: msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 120,
        "wires": [
            [
                "c3c9f25fce09fd4a"
            ]
        ]
    },
    {
        "id": "1f3f810b8fb8f45e",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "AuthenticateIIFLUserReq",
        "func": "const IIFL_USER = env.get('IIFL_USER')\nconst IIFL_USER_PASSWORD = env.get('IIFL_USER_PASSWORD')\nconst IIFL_URL = env.get('IIFL_URL');\n\n\nmsg.url = `${IIFL_URL}/api/auth/login`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": IIFL_USER_PASSWORD,\n        \"userName\": IIFL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 320,
        "wires": [
            [
                "a532dc305f0c9995"
            ]
        ]
    },
    {
        "id": "a532dc305f0c9995",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "AuthenticateIIFLUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 320,
        "wires": [
            [
                "db3e1d47472bb697",
                "2b483fb15ef70afa"
            ]
        ]
    },
    {
        "id": "db3e1d47472bb697",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveIIFLToken",
        "func": "\nflow.set(\"iiflToken\", msg.payload.accessToken)\nconsole.log({ iifl_token: msg.payload.accessToken})\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "2b483fb15ef70afa",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "getBankProductKeyReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY_CKPL_IIFL = env.get('BANK_PRODUCT_KEY_CKPL_IIFL')\n\nmsg.url = `${GO_URL}/bank-application-config/key/${BANK_PRODUCT_KEY_CKPL_IIFL}`\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 420,
        "wires": [
            [
                "e744ec0a521965e0"
            ]
        ]
    },
    {
        "id": "e744ec0a521965e0",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "getBankProductKeyReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 420,
        "wires": [
            [
                "496cf6c85e17e0c7",
                "cd80c266bd75f768"
            ]
        ]
    },
    {
        "id": "496cf6c85e17e0c7",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "bankProductConfig",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 420,
        "wires": []
    },
    {
        "id": "cd80c266bd75f768",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "getPendingBankApplicationsReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY_CKPL_IIFL = env.get('BANK_PRODUCT_KEY_CKPL_IIFL')\nconst IIFL_BANK_APPLICATION_STATUS = env.get(\"IIFL_BANK_APPLICATION_STATUS\")\n\nmsg.bankId = msg.payload.bank\nmsg.enterpriseId = msg.payload.allowedEnterprises[0]\n\nmsg.url = `${GO_URL}/bank-application?bankApplicationConfigKey=${BANK_PRODUCT_KEY_CKPL_IIFL}&applicationStatus=${IIFL_BANK_APPLICATION_STATUS}`\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 540,
        "wires": [
            [
                "1c06a40aea2c963b"
            ]
        ]
    },
    {
        "id": "1c06a40aea2c963b",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "getPendingBankApplications",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 540,
        "wires": [
            [
                "e575ef382e1b0832",
                "6deb7717f8dbf7f1"
            ]
        ]
    },
    {
        "id": "e575ef382e1b0832",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "pendingBankApplications",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 540,
        "wires": []
    },
    {
        "id": "039ae05e46075e66",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "mockBankApplication",
        "func": "msg.payload = [\n    {\n        \"_id\": \"63ff1b2f723b070cae7c09c0\",\n        \"createdOn\": \"Tue, 21 Feb 2023 11:32:41 GMT\",\n        \"createdBy\": \"63750a1995a6a16f696d2f7b\",\n        \"updatedOn\": \"Tue, 21 Feb 2023 11:32:42 GMT\",\n        \"isDeleted\": false,\n        \"bankApplicationDocumentConfigKey\": \"63cfbc85edee8f7eee6f3d6e\",\n        \"bankName\": \"Axis Bank Limited\",\n        \"productFamily\": \"PAYLATER\",\n        \"productType\": \"PAYLATER\",\n        \"status\": \"DOCUMENT_CAPTURE\",\n        \"businessPartnerName\": \"Shri Durga Metalex\",\n        \"businessPartnerID\": \"63750a19ca608a344ae556d6\",\n        \"productGranularity\": \"product\",\n        \"bankProductConfigId\": \"64363fc74516a3ea3c8b86d9\",\n        \"bankId\": \"642d3bc0ebc96f31f3daebe9\",\n        \"bankApplicationLabel\": \"Continue Bank Application\",\n        \"bankApplicationURL\": \"www.google.com\",\n        \"enterpriseId\": \"637670c7f8e9564da0dea656\",\n        \"approvedLimit\": null,\n        \"availableLimit\": null\n    }\n]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 620,
        "wires": [
            [
                "6deb7717f8dbf7f1"
            ]
        ]
    },
    {
        "id": "6deb7717f8dbf7f1",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "LoopOverBankApplication",
        "func": "\nfor(let bankApplication of msg.payload){\n    // console.log({bankApplication})\n    node.send({\n        businessPartnerId: bankApplication.businessPartnerID,\n        bankId: bankApplication.bankId,\n        enterpriseId: bankApplication.enterpriseId,\n        bankProductConfigId: bankApplication.bankProductConfigId,\n        bankApplicationId : bankApplication._id,\n        dataPartDone: \"false\"\n    })\n}\n\n// return msg;\n\n/**\n *  \"_id\": \"63f4abd94f0acc5aa73d9e46\",\n        \"createdOn\": \"Tue, 21 Feb 2023 11:32:41 GMT\",\n        \"createdBy\": \"63750a1995a6a16f696d2f7b\",\n        \"updatedOn\": \"Tue, 21 Feb 2023 11:32:42 GMT\",\n        \"isDeleted\": false,\n        \"bankApplicationDocumentConfigKey\": \"63cfbc85edee8f7eee6f3d6e\",\n        \"bankName\": \"Axis Bank Limited\",\n        \"productFamily\": \"PAYLATER\",\n        \"productType\": \"PAYLATER\",\n        \"status\": \"DOCUMENT_CAPTURE\",\n        \"businessPartnerName\": \"Shri Durga Metalex\",\n        \"businessPartnerID\": \"63750a19ca608a344ae556d6\",\n        \"productGranularity\": \"product\",\n        \"bankProductConfigId\": \"63cfbe250c729962c86ec8a7\",\n        \"bankId\": \"63c8fa075f1c5afda77bae5e\",\n        \"bankApplicationLabel\": \"Continue Bank Application\",\n        \"bankApplicationURL\": \"www.google.com\",\n        \"enterpriseId\": \"638c73f16ea52ce57470c1a9\",\n        \"approvedLimit\": null,\n        \"availableLimit\": null\n */",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 620,
        "wires": [
            [
                "c55d34a0b7d3f920",
                "da7029d68fcd7c4e"
            ]
        ]
    },
    {
        "id": "c55d34a0b7d3f920",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "bankApplication",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 620,
        "wires": []
    },
    {
        "id": "f736deeaccbb3789",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "getBusinessPartnerDataReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.enterpriseBankAccountDetails = {\n    accountNo: msg.payload[0]?.bankAccountNumber,\n    ifsc: msg.payload[0]?.bankIFSC,\n    bankName: msg.payload[0]?.bankName\n}\n\nmsg.dealerCode = msg.payload.identifierByParent\n\n\nmsg.url = `${GO_URL}/business-partner/data/${msg.businessPartnerId}`\n\nmsg.headers = {\n    \"x-actyv-api-config-key\" : X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 780,
        "wires": [
            [
                "e9bf25e995d728ce"
            ]
        ]
    },
    {
        "id": "e9bf25e995d728ce",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "getBusinessPartnerData",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 780,
        "wires": [
            [
                "bedefb3af6f1cf60"
            ]
        ]
    },
    {
        "id": "bedefb3af6f1cf60",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "businessPartnerData",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 780,
        "wires": []
    },
    {
        "id": "d99129b6df753753",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "createClientReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${IIFL_URL}/api/customer`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nconst aadhar = msg.data.documents.filter((document) => document.documentType ===\"AADHAAR\");\n// console.log({aadhar:aadhar[0].data})\n\nconst pan = msg.data.documents.filter((document) => document.documentType === \"PERSONAL_PAN\");\nconst name = aadhar[0].data.name.split(\" \")\n\n// console.log({ clientRefId: msg.dealerCode, mobileNo: msg.data.persons[0].phone, })\nmsg.payload = {\n    \"firstName\": name[0],\n    \"lastName\": name[name.length-1],\n    \"dateOfBirth\": aadhar[0].data.dob.split(\"T\")[0],//\"2022-12-01\",\n    \"gender\":  aadhar[0].data.gender === \"M\"?\"MALE\":\"FEMALE\",//\"MALE\",\n    \"mobileNo\": \"9573603199\",//msg.data.persons[0].phone.split(\"+91\")[1],//\"9876543210\",\n    \"email\": msg.data.persons[0].email,//\"aa@example.com\",\n    \"clientReferenceId\": \"CAVINMC005\",//msg.dealerCode,//\"1234\",\n    \"panNo\": \"BHXPS7086M\",//pan[0].data.panNumber,//\"AAAAA1111A\",\n    \"panAuthenticationRequired\": false,\n    \"productCode\": \"ACTYV_LOC\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 1080,
        "wires": [
            [
                "d7e023ec521fe983",
                "982d5f92330f55d4"
            ]
        ]
    },
    {
        "id": "da7029d68fcd7c4e",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "getDealerCodeReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/business-relationship/${msg.businessPartnerId}/${msg.enterpriseId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 700,
        "wires": [
            [
                "782e89e2c1965b72"
            ]
        ]
    },
    {
        "id": "782e89e2c1965b72",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "getDealerCode",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 520,
        "y": 700,
        "wires": [
            [
                "5d5fe0d2dcee7b75",
                "f736deeaccbb3789"
            ]
        ]
    },
    {
        "id": "23590d1e71b9f5c4",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "storeBPdataToData",
        "func": "msg.data = msg.payload\n// let bankStatement = msg.payload.documents.filter((doc) => doc.documentType === \"BANK_STATEMENT\").sort((a, b) => b.data.statementdetails.statementAccounts[0].xnsEndDate - a.data.statementdetails.statementAccounts[0].xnsEndDate)\n// console.log({bankStatement:bankStatement})\n// let data = JSON.parse(msg.payload.documents)\nlet gstin = msg.data.documents.filter((doc)=>doc.documentType === \"GSTIN\")\nmsg.gstIn = gstin[0];\n// console.log({gstin: JSON.stringify(gstin,null,\"\\t\")})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 880,
        "wires": [
            [
                "a9272948125ad233"
            ]
        ]
    },
    {
        "id": "d7e023ec521fe983",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "createClient",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 1080,
        "wires": [
            [
                "311235acf43729ea",
                "3e9e3c20e266386d"
            ]
        ]
    },
    {
        "id": "311235acf43729ea",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "createClient",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1080,
        "wires": []
    },
    {
        "id": "ca3b93f4132c427c",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "addClientAddressReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.payload.clientId\n\n//set clientId and leadId to msg object\nmsg.clientId = msg.payload.clientId,\nmsg.leadId = msg.payload.leadId\nconsole.log({clientId})\nmsg.url = `${IIFL_URL}/api/clients/${clientId}/addresses`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nconst aadhar = msg.data.documents.filter((document) => document.documentType ===\"AADHAAR\");\n\nconst pan = msg.data.documents.filter((document) => document.documentType === \"PERSONAL_PAN\");\nconst name = aadhar[0].data.name.split(\" \")\nmsg.payload = {\n    \"addressLine1\": aadhar[0].data.address,//\"123, Abc Street\",\n    \"addressLine2\": `${aadhar[0].data.subDistrict},${aadhar[0].data.district},${aadhar[0].data.state}`,//\"Some Locality\",\n    \"addressType\": \"PERMANENT\",\n    \"pincode\": aadhar[0].data.pinCode,//\"126778\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1200,
        "wires": [
            [
                "8128476ed06ff640",
                "d761cd61d63908b7"
            ]
        ]
    },
    {
        "id": "8128476ed06ff640",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "addClientAddress",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 1200,
        "wires": [
            [
                "608e3159c26db254"
            ]
        ]
    },
    {
        "id": "608e3159c26db254",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "addClientAddress",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1200,
        "wires": []
    },
    {
        "id": "a9272948125ad233",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "mockCreateClient",
        "func": "msg.payload = {\n    clientId: 2762,\n    leadId: 1707\n}\n\nconsole.log(\"mock\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 880,
        "wires": [
            [
                "d99129b6df753753"
            ]
        ]
    },
    {
        "id": "97fa262b7cb08e63",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "Scrapping Documents of a particular Business Partner",
        "func": "let c = 0\n\nconst arr = msg.data.documents;\nconst businessPartnerId = msg.businessPartnerId;\nconst gst_regex = new RegExp(/^GST/);\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\n// const dealerCode = msg.payload.identifierByParent\nconst dealerCode = msg.dealerCode\n\n// const lp = msg.LOCAL_PATH;\n\nlet documents = [\n    'AADHAAR', 'BANK_STATEMENT',\n    'ITR', 'BUSINESS_PAN',\n    'PERSONAL_PAN', 'GST',\n    'GST', 'GSTR3B_RETSUM',\n    'GSTR2A_B2B', 'GSTR2A_RETSUM',\n    'GSTR1_EXP', 'GSTR1_B2B',\n    'GSTR1_CDNR', 'GSTR1_HSNSUM',\n    'GSTR1_CDNUR', 'GSTR1_B2CL',\n    'GSTR1_CDN', 'GSTR1_NIL',\n    'GSTR1_B2CS', 'GSTR_FILES',\n    'BANK_FORM_1'\n]\n\nfor(let document of msg.data?.documents){\n    \n    \n    switch (true) {\n        case /^AADHAAR/.test(document?.documentType):\n        \n            node.send({\n                ...msg,\n                    data:{},\n                payload: document,\n                // businessPartnerId: msg.businessPartnerId,\n                // bankId: msg.bankId,\n                // enterpriseId: msg.enterpriseId,\n                // bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                dealerCode,\n                documentType: \"KYC\",\n                documentName:\"AADHAAR\",//document.documentType,\n                isSelfie: false\n            });\n         \n            break\n        // case /^BANK_STATEMENT/.test(document?.documentType):\n        //     node.send({\n        //         ...msg,\n        //         payload: document,\n        //      data:{},\n        //         // businessPartnerId: msg.businessPartnerId,\n        //         // bankId: msg.bankId,\n        //         // enterpriseId: msg.enterpriseId,\n        //         // bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\", \n        //         dealerCode,\n        //         documentType: \"BANK_STATEMENT\",\n        //         isSelfie: false\n        //     });\n           \n        //     break;\n        // case /^ITR/.test(document?.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode,\n        //         isSelfie: false\n        //     });\n          \n        //     break\n        case /^BUSINESS_PAN/.test(document?.documentType):\n       \n            node.send({\n                ...msg,\n                payload: document,\n                // businessPartnerId: msg.businessPartnerId,\n                // bankId: msg.bankId,\n                // enterpriseId: msg.enterpriseId,\n                // bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                documentType: \"KYC\",\n                dealerCode,\n                isSelfie: false\n            });\n           \n            break\n        case /^PERSONAL_PAN/.test(document?.documentType):\n      \n            node.send({\n                ...msg,\n                payload: document,\n                \n                data:{},\n                // businessPartnerId: msg.businessPartnerId,\n                // bankId: msg.bankId,\n                // enterpriseId: msg.enterpriseId,\n                // bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                documentType: \"KYC\",\n                dealerCode,\n                isSelfie: false\n            });\n           \n            break\n        // case /^GST/.test(document?.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode,\n        //         isSelfie: false\n        //     });\n           \n        //     break\n       \n\n\n        // case /BANK_FORM_1/.test(document.documentType):\n        //     node.send({\n        //         ...msg,\n        //         payload: document,\n        //         // businessPartnerId: msg.businessPartnerId,\n        //         // bankId: msg.bankId,\n        //         // enterpriseId: msg.enterpriseId,\n        //         // bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         documentType: \"KYC\",\n        //         dealerCode\n        //     });\n            \n        //     break\n        \n        \n\n        default: {}\n        // node.send({\n        //     payload: {\n        //         files:[]\n        //     },\n        //     businessPartnerId: msg.businessPartnerId,\n        //     bankId: msg.bankId,\n        //     enterpriseId: msg.enterpriseId,\n        //     bankProductConfigId: msg.bankProductConfigId,\n        //     transferDone: \"false\",\n        //     dealerCode,\n        //     isSelfie: false\n        // });\n    }\n};\n\n\nconst reqDocsFromFieldValue = [\"iifl_live_selfie_1\"]\n\nlet documentsFromFieldValue = msg.data.fieldValues.filter((doc)=>{\n    if(reqDocsFromFieldValue.includes(doc.key)){\n        return doc\n    }\n})\n\n\n\n\nfor (let i = 0; i < documentsFromFieldValue.length;i++){\n   \n    \n        if (documentsFromFieldValue[i].key ===\"iifl_live_selfie_1\"){\n          \n            node.send({\n                ...msg,\n                payload: documentsFromFieldValue[i].value,\n                // businessPartnerId: msg.businessPartnerId,\n                // bankId: msg.bankId,\n                // enterpriseId: msg.enterpriseId,\n                // bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                documentType:\"SELFIE\",\n                dealerCode,\n                isSelfie :true\n            }); \n        }else{\n            node.send({\n                ...msg,\n                payload: documentsFromFieldValue[i].value,\n                // businessPartnerId: msg.businessPartnerId,\n                // bankId: msg.bankId,\n                // enterpriseId: msg.enterpriseId,\n                // bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                documentType: documentsFromFieldValue[i].key,\n                dealerCode,\n                isSelfie: false\n            }); \n        }\n        \n    \n}\n\n\nmsg.transferDone = \"true\";\n// msg.LOCAL_PATH = lp;\nreturn msg;\n\n/**\n    businessPartnerId: msg.businessPartnerId,\n    bankId: msg.bankId,\n    enterpriseId: msg.enterpriseId,\n    bankProductConfigId: msg.bankProductConfigId,\n */",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 306.6666717529297,
        "y": 2375.0000677108765,
        "wires": [
            [
                "bbc1f3cb6646c2cf"
            ]
        ]
    },
    {
        "id": "bbc1f3cb6646c2cf",
        "type": "switch",
        "z": "e8842e93c37e68d3",
        "name": "",
        "property": "transferDone",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "falseh",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 636.6666717529297,
        "y": 2375.0000677108765,
        "wires": [
            [
                "c8244f98f0d204d1"
            ],
            [
                "3f2ca455eb3f16a3"
            ]
        ]
    },
    {
        "id": "5d5fe0d2dcee7b75",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "dealerCode",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 680,
        "wires": []
    },
    {
        "id": "a257ca5bd6faa3e4",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "debug 257",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 60,
        "wires": []
    },
    {
        "id": "43b12b26c26018b2",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "addThirdPartyAccountReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\n\n\nconst           {\n    accountNo,\n    ifsc,\n    bankName\n                } = msg.enterpriseBankAccountDetails\n\n\nmsg.url = `${IIFL_URL}/api/clients/${clientId}/third-party-bank-account-details`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nmsg.payload = {\n    \"accountTypeId\": 1,\n    \"name\": \"enterpriseName\",\n    \"accountNumber\": accountNo,//\"67896745532734\",\n    \"ifscCode\": ifsc,//\"SBIN0001632\",\n    \"bankName\": bankName,//\"SBI\",\n    \"accountType\": \"CURRENTACCOUNT\"\n    // \"branchName\": \"Bellandur\",\n    // \"bankCity\": \"Bangalore\",\n    // \"bankCode\": \"98978\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 186.6666717529297,
        "y": 1415.0000677108765,
        "wires": [
            [
                "1550c86fcc134d89"
            ]
        ]
    },
    {
        "id": "1550c86fcc134d89",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "addThirdPartyAccount",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 486.6666717529297,
        "y": 1415.0000677108765,
        "wires": [
            [
                "4e03cc76190e497a",
                "c5ccba4b33542a7f"
            ]
        ]
    },
    {
        "id": "4e03cc76190e497a",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "addThirdPartyAccount",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 766.6666717529297,
        "y": 1415.0000677108765,
        "wires": []
    },
    {
        "id": "c5ccba4b33542a7f",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "activateThirdPartyAccountReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\n\n\nconst clientThirdPartyBankAccountDetailAssociationId = msg.payload.clientThirdPartyBankAccountDetailAssociationId\nmsg.url = `${IIFL_URL}/api/client-third-party-bank-account-details/${clientThirdPartyBankAccountDetailAssociationId}/activate`\nmsg.method = \"PUT\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nmsg.payload = {\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 196.6666717529297,
        "y": 1515.0000677108765,
        "wires": [
            [
                "387f774266576673"
            ]
        ]
    },
    {
        "id": "387f774266576673",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "activateThirdPartyAccount",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 506.6666717529297,
        "y": 1515.0000677108765,
        "wires": [
            [
                "ddf0fc21b8ce3e71",
                "ddda7a5cc3aa58b0"
            ]
        ]
    },
    {
        "id": "ddf0fc21b8ce3e71",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "activateThirdPartyAccount",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 786.6666717529297,
        "y": 1515.0000677108765,
        "wires": []
    },
    {
        "id": "ddda7a5cc3aa58b0",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "initiateBankStatementAnalysisReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\nconsole.log(\"test\")\n\nconst clientThirdPartyBankAccountDetailAssociationId = msg.payload.clientThirdPartyBankAccountDetailAssociationId\nmsg.url = `${IIFL_URL}/api/client-third-party-bank-account-details/${clientThirdPartyBankAccountDetailAssociationId}/activate`\nmsg.method = \"PUT\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nmsg.payload = {\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 186.6666717529297,
        "y": 1615.0000677108765,
        "wires": [
            [
                "084a251e66bd63fa",
                "04811f28b04f0f65"
            ]
        ]
    },
    {
        "id": "084a251e66bd63fa",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "initiateBankStatementAnalysis",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 496.6666717529297,
        "y": 1615.0000677108765,
        "wires": [
            [
                "66874b2f57329d2c",
                "04811f28b04f0f65"
            ]
        ]
    },
    {
        "id": "66874b2f57329d2c",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "initiateBankStatementAnalysis",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 776.6666717529297,
        "y": 1615.0000677108765,
        "wires": []
    },
    {
        "id": "fb87403b9c58e3a3",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "saveClientId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 516.6666717529297,
        "y": 1735.0000677108765,
        "wires": [
            [
                "50536d6780805fe8",
                "92d7c60b05e4d288"
            ]
        ]
    },
    {
        "id": "04811f28b04f0f65",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveClientIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/service`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    enterpriseid: msg.enterpriseId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflClientId\",\n    \"value\": msg.clientId,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId,\n    \"enterpriseId\": msg.enterpriseId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 146.6666717529297,
        "y": 1735.0000677108765,
        "wires": [
            [
                "fb87403b9c58e3a3"
            ]
        ]
    },
    {
        "id": "50536d6780805fe8",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "saveClientId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 776.6666717529297,
        "y": 1735.0000677108765,
        "wires": []
    },
    {
        "id": "92d7c60b05e4d288",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveLeadIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${env.get(\"GO_URL\")}/field-value/service`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n    enterpriseid: msg.enterpriseId\n}\n\nmsg.payload = {\n    \"key\": \"iiflLeadId\",\n    \"value\": msg.leadId,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId,\n    \"enterpriseId\": msg.enterpriseId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 146.6666717529297,
        "y": 1815.0000677108765,
        "wires": [
            [
                "e9517a7806304033"
            ]
        ]
    },
    {
        "id": "e9517a7806304033",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "saveLeadId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 516.6666717529297,
        "y": 1815.0000677108765,
        "wires": [
            [
                "a8aef02ea5c7d2f8",
                "97fa262b7cb08e63"
            ]
        ]
    },
    {
        "id": "a8aef02ea5c7d2f8",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "saveLeadId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 776.6666717529297,
        "y": 1815.0000677108765,
        "wires": []
    },
    {
        "id": "d0a0ed332341bef7",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "pNach/eNach?",
        "func": "\n\nlet natch = msg.data.fieldValues.filter((fieldValue) => {\n    return fieldValue.key == \"nach\"\n})\n\nmsg.nach = \"pnach\"//natch[0].value\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 1440,
        "wires": [
            [
                "7cfa197b6ef1a784"
            ]
        ]
    },
    {
        "id": "7cfa197b6ef1a784",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "initiateNachReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${IIFL_URL}/api/leads/${msg.leadId}/nach/init`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload =\n{\n    \"amount\": \"50000\",\n    \"bankAccountDetailId\": \"214\",\n    \"debitFrequency\": \"MONTHLY\",\n    \"debitType\": \"FIXED_AMOUNT\",\n    \"fromDate\": new Date().toISOString().split(\"T\")[0],//\"2023-04-08\",\n    \"registrationMode\": \"physical\",//msg.nach==\"enach\"?\"API\":\"physical\",\n    \"toDate\": \"2023-10-20\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2120,
        "y": 1440,
        "wires": [
            [
                "7c286e766a6f19d3"
            ]
        ]
    },
    {
        "id": "7c286e766a6f19d3",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "initiateNach",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2430,
        "y": 1440,
        "wires": [
            [
                "bb1a060ed26cf407",
                "0a8be38952893f3b"
            ]
        ]
    },
    {
        "id": "bb1a060ed26cf407",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "initiateNach",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2750,
        "y": 1440,
        "wires": []
    },
    {
        "id": "202b427ded8f7b54",
        "type": "comment",
        "z": "e8842e93c37e68d3",
        "name": "hardCodedNatchReq",
        "info": "",
        "x": 1974.3333282470703,
        "y": 1660.9999322891235,
        "wires": []
    },
    {
        "id": "0a8be38952893f3b",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveNachIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/service`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst nachId = 1620//msg.payload.resourceId\n\nmsg.nachId = nachId\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    enterpriseid: msg.enterpriseId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflNachId\",\n    \"value\": nachId,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"enterpriseId\": msg.enterpriseId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1901,
        "y": 1516,
        "wires": [
            [
                "c67fb72e922af84d"
            ]
        ]
    },
    {
        "id": "c67fb72e922af84d",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "saveNachId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2271,
        "y": 1516,
        "wires": [
            [
                "c067d7335fa5d7c6",
                "d7b0f1048d0a9929"
            ]
        ]
    },
    {
        "id": "c067d7335fa5d7c6",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "saveNachId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2531,
        "y": 1516,
        "wires": []
    },
    {
        "id": "d7b0f1048d0a9929",
        "type": "switch",
        "z": "e8842e93c37e68d3",
        "name": "",
        "property": "nach",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "pnach",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "enach",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1891,
        "y": 1596,
        "wires": [
            [
                "d8c65ed42d681cbe"
            ],
            []
        ]
    },
    {
        "id": "d8c65ed42d681cbe",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "generateP-nachDocReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${IIFL_URL}/api/leads/${msg.leadId}/nach/${msg.nachId}/generate-file`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {\n   \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2091,
        "y": 1596,
        "wires": [
            [
                "0d1ffb3aa3e1f5e0"
            ]
        ]
    },
    {
        "id": "0d1ffb3aa3e1f5e0",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "generateP-nachDoc",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2401,
        "y": 1596,
        "wires": [
            [
                "340467033835c515",
                "f9dc1a2d374cb8d6"
            ]
        ]
    },
    {
        "id": "340467033835c515",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "generateP-nachDoc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2721,
        "y": 1596,
        "wires": []
    },
    {
        "id": "439e7d266108eac6",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "downloadP-NathDoc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2561,
        "y": 1696,
        "wires": []
    },
    {
        "id": "727f5cc081c6f40c",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "downloadP-NathDoc",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2241,
        "y": 1696,
        "wires": [
            [
                "439e7d266108eac6",
                "37af8d6f68ab5843"
            ]
        ]
    },
    {
        "id": "f9dc1a2d374cb8d6",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "downloadP-NathDocReq",
        "func": "console.log({ node:\"downloadP-NatchDocReq\"})\n\nconst IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nmsg.docId = msg.payload.resourceId\nconst nachDoc = msg.payload.id\nmsg.url = `${IIFL_URL}/api/document/download/${nachDoc}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {\n   \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1931,
        "y": 1696,
        "wires": [
            [
                "727f5cc081c6f40c"
            ]
        ]
    },
    {
        "id": "c8244f98f0d204d1",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "initiateVclReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${IIFL_URL}/api/leads/${msg.leadId}/update-limit`\nmsg.method = \"PUT\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload =\n{\n    \"loanAmountRequested\": 100000\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1906.6666717529297,
        "y": 1155.0000677108765,
        "wires": [
            [
                "c00a59de1e2f6be8"
            ]
        ]
    },
    {
        "id": "c00a59de1e2f6be8",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "initiateVcl",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2206.6666717529297,
        "y": 1155.0000677108765,
        "wires": [
            [
                "b7439c897a5c60d6",
                "214113718349eb7b"
            ]
        ]
    },
    {
        "id": "b7439c897a5c60d6",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "initiateVcl",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2526.6666717529297,
        "y": 1155.0000677108765,
        "wires": []
    },
    {
        "id": "214113718349eb7b",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveVclIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/service`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\n// msg.natchId = msg.payload.resourceId\nmsg.vclAccountNumber = msg.payload.vclAccountNumber\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n    enterpriseid: msg.enterpriseId,\n}\n\nmsg.payload = {\n    \"key\": \"iiflVclId\",\n    \"value\": msg.payload.vclAccountNumber,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"enterpriseId\": msg.enterpriseId,\n    \"bankApplicationId\": msg.bankApplicationId,\n\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1906.6666717529297,
        "y": 1235.0000677108765,
        "wires": [
            [
                "64cd3911bc5dce3d"
            ]
        ]
    },
    {
        "id": "64cd3911bc5dce3d",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "saveVclId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2266.6666717529297,
        "y": 1235.0000677108765,
        "wires": [
            [
                "484d4463ef8836f1",
                "6597f3ac51b0af31"
            ]
        ]
    },
    {
        "id": "484d4463ef8836f1",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "saveVclId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2526.6666717529297,
        "y": 1235.0000677108765,
        "wires": []
    },
    {
        "id": "37af8d6f68ab5843",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "uploadFileReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\n\nconst token = flow.get(\"enterpriseToken\")\n\nmsg.headers = {\n    \"content-type\": 'multipart/form-data',\n    Authorization: `Bearer ${token}`\n};\n\nmsg.url = `${ADMIN_URL}/api/file/upload`\nmsg.method = \"POST\"\nmsg.payload = {\n    \"file\": {\n        \"value\": msg.payload,\n        \"options\": {\n            \"filename\": 'IIFL Loan document'\n        }\n    },\n    \"filename\": 'IIFL Nach agreement'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1901,
        "y": 1756,
        "wires": [
            [
                "576eccf5414345cc"
            ]
        ]
    },
    {
        "id": "576eccf5414345cc",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "uploadFile",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2171,
        "y": 1756,
        "wires": [
            [
                "c6553b1fca00482e",
                "fb679d18598e9979"
            ]
        ]
    },
    {
        "id": "c6553b1fca00482e",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "uploadFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2411,
        "y": 1756,
        "wires": []
    },
    {
        "id": "fb679d18598e9979",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveP-NatchAgreementReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    enterpriseid: msg.enterpriseId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflNachAgreement\",\n    \"value\": msg.payload.key,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"enterpriseId\": msg.enterpriseId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1941,
        "y": 1836,
        "wires": [
            [
                "9f1f7c1d0575884c"
            ]
        ]
    },
    {
        "id": "9f1f7c1d0575884c",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "saveP-NatchAgreement",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2291,
        "y": 1836,
        "wires": [
            [
                "f9fbef4ea855807d"
            ]
        ]
    },
    {
        "id": "f9fbef4ea855807d",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "saveLoanAgreement",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2541,
        "y": 1836,
        "wires": []
    },
    {
        "id": "51203aba317e60c4",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "function 166",
        "func": "// console.log({file:msg.file})\nif(msg.file){\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 2800,
        "wires": [
            [
                "fb37e062a9ae96e5",
                "cb8af0ee537f4130"
            ]
        ]
    },
    {
        "id": "3f2ca455eb3f16a3",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "sendFilesToReaderReq",
        "func": "// msg.payload.documentType = \"BUSINESS_PAN\"\nconsole.log({payload: msg.payload})\n\nif(msg.documentType !== \"SELFIE\"){\n    for (let file of msg?.payload?.files) {\n        // console.log({file})\n        switch (msg?.payload?.documentType) {\n\n\n\n            case \"PERSONAL_PAN\": {\n\n                node.send({\n                    ...msg,\n                    tag: \"pan-front\",\n                    file: file,\n                    payload: {}\n                })\n                break\n            }\n\n            case \"BUSINESS_PAN\": {\n\n                node.send({\n                    ...msg,\n                    tag: \"pan-front\",\n                    file: file,\n                    payload: {}\n                })\n                break\n            }\n\n            case \"AADHAAR\": {\n\n                if (file.type === \"AADHAAR_FRONT\") {\n\n                    node.send({\n                        ...msg,\n                        tag: \"aadhaar-front\",\n                        file: file,\n                        payload: {}\n                    })\n                } else if (file.type === \"AADHAAR_BACK\") {\n                    console.log(\"aadhaar back\")\n                    node.send({\n                        ...msg,\n                        tag: \"aadhaar-back\",\n                        file: file,\n                        payload: {}\n                    })\n                }\n                break\n            }\n\n\n\n\n            default: {\n                // node.send({\n                //     ...msg,\n                //     file: \"\",\n                //     payload:{}\n                // })\n            }\n        }\n}\n// node.send({\n//     ...msg,\n//     file: file,\n//     // payload:{}\n//     // businessPartnerId: msg.businessPartnerId,\n//     // bankId: msg.bankId,\n//     // enterpriseId: msg.enterpriseId,\n//     // bankProductConfigId: msg.bankProductConfigId,\n//     // dealerCode : msg.dealerCode\n// })\n} else {\n    node.send({\n        ...msg,\n        tag: \"SELFIE\",\n        file: msg.payload[0],\n        payload: {}\n    })\n}\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 2800,
        "wires": [
            [
                "51203aba317e60c4"
            ]
        ]
    },
    {
        "id": "fb37e062a9ae96e5",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "file",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2390,
        "y": 2800,
        "wires": []
    },
    {
        "id": "cb8af0ee537f4130",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "Setting fileID of a particular file",
        "func": "msg.fid = msg.file.fileId;\n\nmsg.method = \"GET\"\nmsg.url = `${env.get(\"GO_URL\")}/file/read/${msg.file.fileId}`;\nmsg.fileUrl = `${env.get(\"GO_URL\")}/file/read/${msg.file.fileId}`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 2900,
        "wires": [
            [
                "d0899605a72b48e7"
            ]
        ]
    },
    {
        "id": "d0899605a72b48e7",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "read file",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "x-actyv-api-config-key",
                "valueType": "other",
                "valueValue": "8HhkIWzVMSnSgvlhxr"
            }
        ],
        "x": 2120,
        "y": 2900,
        "wires": [
            [
                "a792592be3175eed"
            ]
        ]
    },
    {
        "id": "a792592be3175eed",
        "type": "base64",
        "z": "e8842e93c37e68d3",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 2300,
        "y": 2900,
        "wires": [
            [
                "68ccd4ff19bf6be1"
            ]
        ]
    },
    {
        "id": "68ccd4ff19bf6be1",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "detectMimeType",
        "func": "const signatures = {\n    JVBERi0: \"application/pdf\",\n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"application/vnd.openxmlformats-officedocument.\",\n    PK: \"application/zip\",\n};\n\n// console.log({signature:msg.file.fileType})\n\n\nlet fileName = msg.fid.split(\"-\");\nlet extension = msg.file.fileType.split(\"/\")[1];\n// let filePath = `${msg.LOCAL_PATH}/${fileName}.${extension}`;\n// const base64String = msg.payload;\n\n// for (let ext in signatures) {\n//     const base64Sig = base64String.slice(0, ext.length)\n//     if (base64Sig === ext) {\n//         fileName = msg.fid\n//         extension = getExtension(ext)\n//         filePath = `${msg.LOCAL_PATH}/${fileName}${msg.ind}.${extension}`\n//     }\n// }\n\nmsg.filename = `${fileName[fileName.length-1]}.${extension}`\n\n// console.log({fun:msg.filename})\n\n// msg.filePath = filePath\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 2980,
        "wires": [
            [
                "d1b61a694a1729d8",
                "f649f1a9bc4301c8"
            ]
        ]
    },
    {
        "id": "d1b61a694a1729d8",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "document type",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "documentType",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2060,
        "y": 2960,
        "wires": []
    },
    {
        "id": "f649f1a9bc4301c8",
        "type": "switch",
        "z": "e8842e93c37e68d3",
        "name": "switch by documentType",
        "property": "documentType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "KYC",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BANK_STATEMENT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SELFIE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 2090,
        "y": 3060,
        "wires": [
            [
                "3b13bb6d3257ebc6"
            ],
            [],
            [
                "17cf58e10d2ea70d"
            ]
        ]
    },
    {
        "id": "3b13bb6d3257ebc6",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "uploadKycDocReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\n\n//set clientId and leadId to msg object\n// msg.clientId = clientId,\n// msg.leadId = msg.payload.leadId\n\nmsg.url = `${IIFL_URL}/api/clients/${clientId}/upload-document`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nconsole.log({file:msg.file,filename:msg.filename,tag:msg.tag})\nmsg.payload = {\n    \"tag\": msg.tag,//\"aadhaar-front\",\n    \"document\": {\n        \"fileName\": msg.filename,//\"sample.jpeg\",\n        \"base64\": `data:${msg.file.fileType};base64,${msg.payload}`\n    },\n    // \"isFaceMatchRequired\": false,\n    // \"isImageQualityRequired\": false,\n    // \"isMaskRequired\": false,\n    // \"isOCRNameMatchRequired\": false\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 2980,
        "wires": [
            [
                "81381b115b373252"
            ]
        ]
    },
    {
        "id": "81381b115b373252",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "uploadKycDoc",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2560,
        "y": 2980,
        "wires": [
            [
                "013f4501ad08ff68"
            ]
        ]
    },
    {
        "id": "013f4501ad08ff68",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "uploadKycDoc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2760,
        "y": 2980,
        "wires": []
    },
    {
        "id": "17cf58e10d2ea70d",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "uploadSelfieReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\n\n//set clientId and leadId to msg object\n// msg.clientId = clientId,\n// msg.leadId = msg.payload.leadId\n\nmsg.url = `${IIFL_URL}/api/clients/${clientId}/selfie`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\n// console.log({file:msg.file,filename:msg.filename,tag:msg.tag})\nmsg.payload = {\n    \"doLiveliness\": true,\n    \"image\": {\n        \"fileName\": \"abc\",\n        \"filePath\": msg.payload,\n        \"fileType\": \".jpeg\",\n        \"storageType\": \"base64\"\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2340,
        "y": 3140,
        "wires": [
            [
                "0e7e80d01030a490"
            ]
        ]
    },
    {
        "id": "0e7e80d01030a490",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "uploadSelfie",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2550,
        "y": 3140,
        "wires": [
            [
                "ecd02dd906ea5e54"
            ]
        ]
    },
    {
        "id": "ecd02dd906ea5e54",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "uploadSelfie",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2730,
        "y": 3140,
        "wires": []
    },
    {
        "id": "c3c9f25fce09fd4a",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "AuthenticateBankUserReq",
        "func": "\nconst IIFL_BANK_ADMIN_EMAIL = env.get('IIFL_BANK_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": PASSWORD,\n    \"email\": IIFL_BANK_ADMIN_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 200,
        "wires": [
            [
                "9ef6f004b1d3273f"
            ]
        ]
    },
    {
        "id": "9ef6f004b1d3273f",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "AuthenticateBankUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 200,
        "wires": [
            [
                "b61d7c8b2f87835a"
            ]
        ]
    },
    {
        "id": "b61d7c8b2f87835a",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveBankToken",
        "func": "flow.set(\"bankToken\",msg.payload.idToken)\n// console.log({bankToken: msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 200,
        "wires": [
            [
                "1f3f810b8fb8f45e"
            ]
        ]
    },
    {
        "id": "f1f8256916788874",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "initiateBureau",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst leadId = msg.leadId\n\n\nconst clientThirdPartyBankAccountDetailAssociationId = msg.payload.clientThirdPartyBankAccountDetailAssociationId\nmsg.url = `${IIFL_URL}/api/leads/${leadId}/bureaus`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nmsg.payload = {\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 1760,
        "wires": [
            [
                "a4c1bf879c30bbfb"
            ]
        ]
    },
    {
        "id": "a4c1bf879c30bbfb",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "initiateBankStatementAnalysis",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 490,
        "y": 1760,
        "wires": [
            [
                "146cbdef18efb9ac"
            ]
        ]
    },
    {
        "id": "146cbdef18efb9ac",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "initiateBankStatementAnalysis",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1760,
        "wires": []
    },
    {
        "id": "d21a512a64d709cb",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "initiateBureauPush",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\n\nmsg.cibil = msg.payload\n\nmsg.url = `${IIFL_URL}/api/leads/${clientId}/bureaus`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nmsg.payload = {\n    \"source_name\": \"CIBIL_HARD_PULL\",\n    \"user_id\": \"63462343847\",\n    \"payload\": msg.cibil\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 136.6666717529297,
        "y": 2015.0000677108765,
        "wires": [
            [
                "c18acd2df02fccb9"
            ]
        ]
    },
    {
        "id": "c18acd2df02fccb9",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "initiateBankStatementAnalysis",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 496.6666717529297,
        "y": 2015.0000677108765,
        "wires": [
            [
                "c6ab63727ead4e3d",
                "c070abe593405c79"
            ]
        ]
    },
    {
        "id": "c6ab63727ead4e3d",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "initiateBankStatementAnalysis",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 776.6666717529297,
        "y": 2015.0000677108765,
        "wires": []
    },
    {
        "id": "c070abe593405c79",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "runningDecision",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\n\nmsg.cibil = msg.payload\n\n\nmsg.url = `${IIFL_URL}/v1/sentinel/decideCompound`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nmsg.payload = {\n    \"reference_id\": \"a219d937-ef0e-4dff-996c-56f86e159140\",//msg.payload.data.reference_id,\n    \"policy_version\": \"iifl_bl_compound_policy_v1.2\",\n    \"user_id\": \"2664\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 126.66667175292969,
        "y": 2095.0000677108765,
        "wires": [
            [
                "faa509f689075584"
            ]
        ]
    },
    {
        "id": "faa509f689075584",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "runningDecision",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 446.6666717529297,
        "y": 2095.0000677108765,
        "wires": [
            [
                "24629901470304a4",
                "97fa262b7cb08e63"
            ]
        ]
    },
    {
        "id": "24629901470304a4",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "runningDecision",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 726.6666717529297,
        "y": 2095.0000677108765,
        "wires": []
    },
    {
        "id": "982d5f92330f55d4",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "debug 313",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 1020,
        "wires": []
    },
    {
        "id": "d761cd61d63908b7",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "addBusinessDetails",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst leadId = msg.payload.leadId\n\n//set clientId and leadId to msg object\nmsg.clientId = msg.payload.clientId,\nmsg.leadId = msg.payload.leadId\n\nmsg.url = `${IIFL_URL}/api/leads/${leadId}/add-business`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\nlet registrationDateTemp = msg.gstIn.data.rgdt.split(\"/\")\nlet registrationDate = `${registrationDateTemp[2]}-${registrationDateTemp[1]}-${registrationDateTemp[0]}`\nconst aadhar = msg.data.documents.filter((document) => document.documentType ===\"AADHAAR\");\n\nconst pan = msg.data.documents.filter((document) => document.documentType === \"PERSONAL_PAN\");\nconst name = aadhar[0].data.name.split(\" \")\nmsg.payload = {\n    \"businessType\": \"Private\",//msg.gstIn.data.ctb,//\n    \"dateOfEstablishment\": \"2022-12-01\",//new Date(registrationDate).toISOString().split(\"T\")[0],//\n    \"name\": msg.data.businessPartner.name,//\"Ram Enterprises\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1280,
        "wires": [
            [
                "7d59d61db454c5c2",
                "d3de26f5ad795525"
            ]
        ]
    },
    {
        "id": "d3de26f5ad795525",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "addBusinessDetails",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 1280,
        "wires": [
            [
                "2b620af111c0fc35"
            ]
        ]
    },
    {
        "id": "2b620af111c0fc35",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "addBusinessDetails",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1280,
        "wires": []
    },
    {
        "id": "6597f3ac51b0af31",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "approveVclReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${BASE_URL}/api/virtual-credit-line/${msg.vclAccountNumber}/approve`\nmsg.method = \"PUT\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1906.6666717529297,
        "y": 1315.0000677108765,
        "wires": [
            [
                "1ba75a349acdefa8"
            ]
        ]
    },
    {
        "id": "1ba75a349acdefa8",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "approveVcl",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2216.6666717529297,
        "y": 1315.0000677108765,
        "wires": [
            [
                "c6915eea16a205aa",
                "d0a0ed332341bef7"
            ]
        ]
    },
    {
        "id": "c6915eea16a205aa",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "approveVcl",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2536.6666717529297,
        "y": 1315.0000677108765,
        "wires": []
    },
    {
        "id": "3e9e3c20e266386d",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "mockCreateClient",
        "func": "msg.payload = {\n    clientId: 2762,\n    leadId: 1707\n}\n\nconsole.log(\"mock\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1140,
        "wires": [
            [
                "ca3b93f4132c427c"
            ]
        ]
    },
    {
        "id": "7d59d61db454c5c2",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "debug 339",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 1320,
        "wires": []
    },
    {
        "id": "1fb07682b9d16e1e",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "generateLeadDocReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${IIFL_URL}/api/leads/${msg.leadId}/document/generate/IIFL%20Loan%20Agreement`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {\n   \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 4500,
        "wires": [
            [
                "c2ce907a073183d1"
            ]
        ]
    },
    {
        "id": "c2ce907a073183d1",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "generateLeadDoc",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1930,
        "y": 4500,
        "wires": [
            [
                "8816c3acdd6ae618",
                "8f9514206e47caf0"
            ]
        ]
    },
    {
        "id": "8816c3acdd6ae618",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "generateLeadDoc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 4500,
        "wires": []
    },
    {
        "id": "8f9514206e47caf0",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "downloadLeadDocReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nmsg.docId = msg.payload.id \n// msg.docId = 3049\nmsg.url = `${IIFL_URL}/api/document/download/${msg.docId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {\n   \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 4580,
        "wires": [
            [
                "d3ea0d0868911cec"
            ]
        ]
    },
    {
        "id": "d3ea0d0868911cec",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "downloadLeadDoc",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1930,
        "y": 4580,
        "wires": [
            [
                "95efc5305242d41f",
                "0bbe87707fa915fc"
            ]
        ]
    },
    {
        "id": "95efc5305242d41f",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "downloadLeadDoc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 4580,
        "wires": []
    },
    {
        "id": "0bbe87707fa915fc",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "uploadFileReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\n\nconst token = flow.get(\"enterpriseToken\")\n\nmsg.headers = {\n    \"content-type\": 'multipart/form-data',\n    Authorization: `Bearer ${token}`\n};\n\nmsg.url = `${ADMIN_URL}/api/file/upload`\nmsg.method = \"POST\"\nmsg.payload = {\n    \"file\": {\n        \"value\": msg.payload,\n        \"options\": {\n            \"filename\": 'IIFL Loan document'\n        }\n    },\n    \"filename\": 'IIFL Loan document'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 4680,
        "wires": [
            [
                "f743b59db70ae941"
            ]
        ]
    },
    {
        "id": "f743b59db70ae941",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "uploadFile",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1870,
        "y": 4680,
        "wires": [
            [
                "cc541b387ae0a219",
                "aa3470a8827d8f78"
            ]
        ]
    },
    {
        "id": "cc541b387ae0a219",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "uploadFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2110,
        "y": 4680,
        "wires": []
    },
    {
        "id": "aa3470a8827d8f78",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveLoanAgreementReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/service`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    enterpriseid: msg.enterpriseId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflLoanAgreement\",\n    \"value\": msg.payload.key,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"enterpriseId\": msg.enterpriseId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 4760,
        "wires": [
            [
                "8267bb56245455d5"
            ]
        ]
    },
    {
        "id": "8267bb56245455d5",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "saveLoanAgreement",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1980,
        "y": 4760,
        "wires": [
            [
                "3ed6f7be6672e592"
            ]
        ]
    },
    {
        "id": "3ed6f7be6672e592",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "saveLoanAgreement",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2240,
        "y": 4760,
        "wires": []
    },
    {
        "id": "77b592770405c22d",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "initiateEsignReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${IIFL_URL}/api/leads/${msg.leadId}/esign/init`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload =\n{\n    \"clientId\": msg.clientId,\n    \"esignKey\": \"bl-esign\",\n    \"signingType\": \"ELECTRONIC\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 4840,
        "wires": [
            [
                "055bc894d08ce1e1"
            ]
        ]
    },
    {
        "id": "055bc894d08ce1e1",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "initiateEsign",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1950,
        "y": 4840,
        "wires": [
            [
                "7e7ef07752c6b641",
                "5cd1c5d9a83ec3fd"
            ]
        ]
    },
    {
        "id": "7e7ef07752c6b641",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "initiateEsign",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2270,
        "y": 4840,
        "wires": []
    },
    {
        "id": "5cd1c5d9a83ec3fd",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveEsignIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/service`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    enterpriseid: msg.enterpriseId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflEsignId\",\n    \"value\": msg.payload.esignId,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"enterpriseId\": msg.enterpriseId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 4900,
        "wires": [
            [
                "3be82fd5efc25e68"
            ]
        ]
    },
    {
        "id": "3be82fd5efc25e68",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "saveEsignId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2010,
        "y": 4900,
        "wires": [
            [
                "3ad1adc114214f96"
            ]
        ]
    },
    {
        "id": "3ad1adc114214f96",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "saveEsignId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2270,
        "y": 4900,
        "wires": []
    },
    {
        "id": "228993283d56c854",
        "type": "inject",
        "z": "09338278a6827f06",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "93905e3b32148be1"
            ]
        ]
    },
    {
        "id": "93905e3b32148be1",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "Set env variables",
        "func": "\n// let v8 = global.get(\"v8\");\n// const totalHeapSize = v8.getHeapStatistics().total_available_size;\n// let totalHeapSizeInMB = (totalHeapSize / 1024 / 1024).toFixed(2)\n// node.warn(\"V8 Total Heap Size \"+totalHeapSize+\" bytes\");\n\nconst ENV_VARIABLES = new Map();\n\nENV_VARIABLES.set('PAYLATER_URL', \"https://actyv-platform-paylater-service-v1.qa.actyv.com\")\nENV_VARIABLES.set('GO_URL', \"https://actyv-platform-go-service.qa.actyv.com\")\nENV_VARIABLES.set('ADMIN_URL', \"https://actyv-platform-admin-service.qa.actyv.com\")\n\nENV_VARIABLES.set('BUSINESS_IDENTIFIER', \"ABBCB2066P\")\nENV_VARIABLES.set('BUSINESS_TYPE', \"ENTERPRISE\")\nENV_VARIABLES.set('BANK_KEY', \"msl\")\nENV_VARIABLES.set('X_ACTYV_API_CONFIG_KEY', \"8HhkIWzVMSnSgvlhxr\")\nENV_VARIABLES.set('BANK_UNIQUE_IDENTIFIER', \"AASCA2089A\")\nENV_VARIABLES.set('BASE_URL', \"https://iifl-atlas-uat.finfluxtrial.io\")\nENV_VARIABLES.set('tenant_id', \"iifl-qa\")\nENV_VARIABLES.set('BANK_PRODUCT_KEY', \"axis-sabari-product\")\n\nENV_VARIABLES.set('BNPL_ENTERPRISE_USER', \"surajkumar@aplapollo.com\")\nENV_VARIABLES.set('BNPL_BANK_USER', \"vivekanand.t@sgfinserv.in\")\nENV_VARIABLES.set('BNPL_USER_PASSWORD', \"890ioP@12\")\nENV_VARIABLES.set('IIFL_USER', \"demoUser2\")\nENV_VARIABLES.set('IIFL_USER_PASSWORD', \"fc895Tbr2i&w@\")\n\nglobal.set('envVariables', ENV_VARIABLES)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 100,
        "wires": [
            [
                "eb5e3cc61a2702c1"
            ]
        ]
    },
    {
        "id": "10b875fbb12ea8ee",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "AuthenticateIIFLUserReq",
        "func": "const IIFL_USER = env.get('IIFL_USER')\nconst IIFL_USER_PASSWORD = env.get('IIFL_USER_PASSWORD')\nconst IIFL_URL = env.get('IIFL_URL');\n\n\nmsg.url = `${IIFL_URL}/api/auth/login`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": IIFL_USER_PASSWORD,\n        \"userName\": IIFL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 380,
        "wires": [
            [
                "a8d7d1c972276370"
            ]
        ]
    },
    {
        "id": "a8d7d1c972276370",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "AuthenticateIIFLUser",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 480,
        "y": 380,
        "wires": [
            [
                "eea2d5dd45010ea8",
                "8b892fbcda46021a"
            ]
        ]
    },
    {
        "id": "eea2d5dd45010ea8",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "saveIIFLToken",
        "func": "flow.set(\"iiflToken\", msg.payload.accessToken)\nconsole.log({token:msg.payload})\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 380,
        "wires": [
            [
                "7855873c45c3a33b"
            ]
        ]
    },
    {
        "id": "7855873c45c3a33b",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getBankProductKeyReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\n\nmsg.url = `${GO_URL}/bank-application-config/key/${BANK_PRODUCT_KEY}`\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 480,
        "wires": [
            [
                "cda5824aef9f6d83"
            ]
        ]
    },
    {
        "id": "cda5824aef9f6d83",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "getBankProductKeyReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 480,
        "wires": [
            [
                "6ceb7c49590b5b78",
                "ed50a1baf6cf2c41"
            ]
        ]
    },
    {
        "id": "6ceb7c49590b5b78",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "bankProductConfig",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 480,
        "wires": []
    },
    {
        "id": "ed50a1baf6cf2c41",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getPendingBankApplicationsReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\n\nmsg.bankId = msg.payload.bank\nmsg.enterpriseId = msg.payload.allowedEnterprises[0]\n\nmsg.url = `${GO_URL}/bank-application?bankID=${msg.bankId}&enterpriseID=${msg.enterpriseId}`\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 600,
        "wires": [
            [
                "ac24ab74f66e7a9c"
            ]
        ]
    },
    {
        "id": "ac24ab74f66e7a9c",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "getPendingBankApplications",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 600,
        "wires": [
            [
                "6d2568904f1f711e",
                "18a39e7851d7744b"
            ]
        ]
    },
    {
        "id": "6d2568904f1f711e",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "pendingBankApplications",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 600,
        "wires": []
    },
    {
        "id": "18a39e7851d7744b",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "mockBankApplication",
        "func": "msg.payload = [\n    {\n        \"_id\": \"63ff1b2f723b070cae7c09c0\",\n        \"createdOn\": \"Tue, 21 Feb 2023 11:32:41 GMT\",\n        \"createdBy\": \"63750a1995a6a16f696d2f7b\",\n        \"updatedOn\": \"Tue, 21 Feb 2023 11:32:42 GMT\",\n        \"isDeleted\": false,\n        \"bankApplicationDocumentConfigKey\": \"63cfbc85edee8f7eee6f3d6e\",\n        \"bankName\": \"Axis Bank Limited\",\n        \"productFamily\": \"PAYLATER\",\n        \"productType\": \"PAYLATER\",\n        \"status\": \"DOCUMENT_CAPTURE\",\n        \"businessPartnerName\": \"Shri Durga Metalex\",\n        \"businessPartnerID\": \"63750a19ca608a344ae556d6\",\n        \"productGranularity\": \"product\",\n        \"bankProductConfigId\": \"63cfbe250c729962c86ec8a7\",\n        \"bankId\": \"63c8fa075f1c5afda77bae5e\",\n        \"bankApplicationLabel\": \"Continue Bank Application\",\n        \"bankApplicationURL\": \"www.google.com\",\n        \"enterpriseId\": \"638c73f16ea52ce57470c1a9\",\n        \"approvedLimit\": null,\n        \"availableLimit\": null\n    }\n]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 680,
        "wires": [
            [
                "72b57cd0da748ed6"
            ]
        ]
    },
    {
        "id": "72b57cd0da748ed6",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "LoopOverBankApplication",
        "func": "\nfor(let bankApplication of msg.payload){\n    // console.log({bankApplication})\n    node.send({\n        businessPartnerId: bankApplication.businessPartnerID,\n        bankId: bankApplication.bankId,\n        enterpriseId: bankApplication.enterpriseId,\n        bankProductConfigId: bankApplication.bankProductConfigId,\n        bankApplicationId : bankApplication._id,\n        dataPartDone: \"false\"\n    })\n}\n\n// return msg;\n\n/**\n *  \"_id\": \"63f4abd94f0acc5aa73d9e46\",\n        \"createdOn\": \"Tue, 21 Feb 2023 11:32:41 GMT\",\n        \"createdBy\": \"63750a1995a6a16f696d2f7b\",\n        \"updatedOn\": \"Tue, 21 Feb 2023 11:32:42 GMT\",\n        \"isDeleted\": false,\n        \"bankApplicationDocumentConfigKey\": \"63cfbc85edee8f7eee6f3d6e\",\n        \"bankName\": \"Axis Bank Limited\",\n        \"productFamily\": \"PAYLATER\",\n        \"productType\": \"PAYLATER\",\n        \"status\": \"DOCUMENT_CAPTURE\",\n        \"businessPartnerName\": \"Shri Durga Metalex\",\n        \"businessPartnerID\": \"63750a19ca608a344ae556d6\",\n        \"productGranularity\": \"product\",\n        \"bankProductConfigId\": \"63cfbe250c729962c86ec8a7\",\n        \"bankId\": \"63c8fa075f1c5afda77bae5e\",\n        \"bankApplicationLabel\": \"Continue Bank Application\",\n        \"bankApplicationURL\": \"www.google.com\",\n        \"enterpriseId\": \"638c73f16ea52ce57470c1a9\",\n        \"approvedLimit\": null,\n        \"availableLimit\": null\n */",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 680,
        "wires": [
            [
                "0684f8dc42bd19e4",
                "a460b00268816abf"
            ]
        ]
    },
    {
        "id": "0684f8dc42bd19e4",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "bankApplication",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 680,
        "wires": []
    },
    {
        "id": "a460b00268816abf",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getDealerCodeReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/business-relationship/${msg.businessPartnerId}/${msg.enterpriseId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${enterpriseToken}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 740,
        "wires": [
            [
                "beb4a2357a741554"
            ]
        ]
    },
    {
        "id": "beb4a2357a741554",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "getDealerCode",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 520,
        "y": 740,
        "wires": [
            [
                "25bfa163c9eda5fd",
                "07c2e0c61982a2c1"
            ]
        ]
    },
    {
        "id": "25bfa163c9eda5fd",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "debug 260",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 740,
        "wires": []
    },
    {
        "id": "8b892fbcda46021a",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "debug 262",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 340,
        "wires": []
    },
    {
        "id": "cfc98e75d3b550c6",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getClientIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/find-field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.vclId = msg.payload[0].value\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflClientId\",\n   \n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 860,
        "wires": [
            [
                "2bb24f48cecef4ae"
            ]
        ]
    },
    {
        "id": "2bb24f48cecef4ae",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "getClientId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 860,
        "wires": [
            [
                "762e11096983c174",
                "d5169b5159bd5674"
            ]
        ]
    },
    {
        "id": "762e11096983c174",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "getClientId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 860,
        "wires": []
    },
    {
        "id": "d5169b5159bd5674",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getLeadIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${env.get(\"GO_URL\")}/field-value/find-field-value`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.clientId = msg.payload[0].value\n\nmsg.payload = {\n    \"key\": \"iiflLeadId\",\n    \n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 920,
        "wires": [
            [
                "7508a4c1907c9bcf"
            ]
        ]
    },
    {
        "id": "7508a4c1907c9bcf",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "getLeadId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 920,
        "wires": [
            [
                "4d924d6fe14c308d",
                "3af5c33b137c8005"
            ]
        ]
    },
    {
        "id": "4d924d6fe14c308d",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "saveLeadId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 920,
        "wires": []
    },
    {
        "id": "3af5c33b137c8005",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getNatchIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/find-field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\n// msg.eSignId = msg.payload[0].value\nmsg.leadId = msg.payload[0].value\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflNachId\",\n    \n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1060,
        "wires": [
            [
                "1865d612ac68a70e"
            ]
        ]
    },
    {
        "id": "1865d612ac68a70e",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "getNatchId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 490,
        "y": 1060,
        "wires": [
            [
                "efb7a0b1dc693a96",
                "bbb151e5a4e5a6e7"
            ]
        ]
    },
    {
        "id": "efb7a0b1dc693a96",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "saveEsignId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1060,
        "wires": []
    },
    {
        "id": "bbb151e5a4e5a6e7",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getNatchStatusReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\nmsg.nachId = msg.payload[0].value\n\nmsg.url = `${IIFL_URL}/api/leads/${msg.leadId}/nach/${msg.nachId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1280,
        "wires": [
            [
                "074093fa43c9f38f"
            ]
        ]
    },
    {
        "id": "074093fa43c9f38f",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "getNatchStatus",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 460,
        "y": 1280,
        "wires": [
            [
                "ee0bd04a9553f430",
                "4f7fd2cbb351d2a0"
            ]
        ]
    },
    {
        "id": "ee0bd04a9553f430",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "getNatchStatus",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 1280,
        "wires": []
    },
    {
        "id": "4f7fd2cbb351d2a0",
        "type": "switch",
        "z": "09338278a6827f06",
        "name": "",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "COMPLETED_SUCCESSFULLY",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 210,
        "y": 1360,
        "wires": [
            [
                "c0d43dab98f06fbe"
            ]
        ]
    },
    {
        "id": "07c2e0c61982a2c1",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getVCLIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/find-field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflVclId\",\n   \n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 800,
        "wires": [
            [
                "1efc1171ceaec18b"
            ]
        ]
    },
    {
        "id": "1efc1171ceaec18b",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "getVCLId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 480,
        "y": 800,
        "wires": [
            [
                "1c094f567c7ad1e7",
                "cfc98e75d3b550c6"
            ]
        ]
    },
    {
        "id": "1c094f567c7ad1e7",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "getVCLId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 800,
        "wires": []
    },
    {
        "id": "6ed78d090be39040",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "createTenorAndRateSpreadReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\n\nmsg.vcl = msg.payload\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms`\nmsg.method = \"POST\"\nmsg.payload = {\n    \"loanProductID\": \"BNPL\",\n    \"bankID\": msg.bankId,\n    \"loanID\": msg.loanId,\n    \"fromDuration\": \"P1Y2M3DT4H5M6S\",\n    \"toDuration\": \"P1Y2M3DT4H5M6S\",\n    \"benchmarkRateID\": msg.benchmark,//\"b7802e04-2416-4365-ab07-44ac283d1b8a\",\n    \"bankSpread\": \"\",\n    \"variableSpread\": msg.vcl.rateOfInterest,\n    \"actyvSpread\": 1,\n    \"additionalCashbackCodes\": [\n        \"UYUS\",\n        \"CSY+23\"\n    ],\n    \"bankMaxAllowedRate\": 9.008,\n    \"doesActyvSpreadBreachThreshold\": false,\n    \"actyvSpreadExceedingThreshold\": 1.234,\n    \"validFrom\": \"2022-11-31 00:00:00.000000+00\",\n    \"ValidTill\": \"2024-11-31 00:00:00.000000+00\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 2100,
        "wires": [
            [
                "ce44db861ab36ffe"
            ]
        ]
    },
    {
        "id": "ce44db861ab36ffe",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "createTenorAndRateSpread",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 540,
        "y": 2100,
        "wires": [
            [
                "9471ec1bb4551452"
            ]
        ]
    },
    {
        "id": "9471ec1bb4551452",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "createTenorAndRateSpread",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 2100,
        "wires": []
    },
    {
        "id": "eb5e3cc61a2702c1",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst ENTERPRISE_USER_EMAIL = env.get('ENTERPRISE_USER_EMAIL')\nconst ENTERPRISE_USER_PASSWORD = env.get('ENTERPRISE_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": ENTERPRISE_USER_PASSWORD,\n    \"email\": ENTERPRISE_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 200,
        "wires": [
            [
                "2bdf5baca6206272"
            ]
        ]
    },
    {
        "id": "2bdf5baca6206272",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "AuthenticateEnterpriseUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 200,
        "wires": [
            [
                "940d5fd65cdcbe2d"
            ]
        ]
    },
    {
        "id": "940d5fd65cdcbe2d",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "saveEnterpriseToken",
        "func": "flow.set(\"enterpriseToken\",msg.payload.idToken)\n// console.log(msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 200,
        "wires": [
            [
                "31c49ad126435858"
            ]
        ]
    },
    {
        "id": "31c49ad126435858",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "AuthenticateBankUserReq",
        "func": "\nconst BANK_USER_EMAIL = env.get('BANK_USER_EMAIL')\nconst BANK_USER_PASSWORD = env.get('BANK_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": BANK_USER_PASSWORD,\n    \"email\": BANK_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 280,
        "wires": [
            [
                "a7e37a1c0bbc3fcf"
            ]
        ]
    },
    {
        "id": "a7e37a1c0bbc3fcf",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "AuthenticateBankUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 480,
        "y": 280,
        "wires": [
            [
                "28cd229840c45eb0"
            ]
        ]
    },
    {
        "id": "28cd229840c45eb0",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "saveBankToken",
        "func": "flow.set(\"bankToken\",msg.payload.idToken)\n// console.log(msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 280,
        "wires": [
            [
                "10b875fbb12ea8ee"
            ]
        ]
    },
    {
        "id": "fad752574aec8141",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "initiateEsign",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 450,
        "y": 1700,
        "wires": [
            [
                "264006cba8faf137",
                "633a1f9d4e7be4a4"
            ]
        ]
    },
    {
        "id": "432ba4a9f478531d",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "initiateEsignReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${IIFL_URL}/api/leads/${msg.leadId}/esign/init`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload =\n{\n    \"clientId\": msg.clientId,\n    \"esignKey\": \"bl-esign\",\n    \"signingType\": \"ELECTRONIC\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1700,
        "wires": [
            [
                "fad752574aec8141"
            ]
        ]
    },
    {
        "id": "264006cba8faf137",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "initiateEsign",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1700,
        "wires": []
    },
    {
        "id": "633a1f9d4e7be4a4",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "saveEsignIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/service`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    enterpriseid: msg.enterpriseId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflEsignId\",\n    \"value\": msg.payload.esignId,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"enterpriseId\": msg.enterpriseId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1760,
        "wires": [
            [
                "09de1d4437b77f54"
            ]
        ]
    },
    {
        "id": "09de1d4437b77f54",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "saveEsignId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 1760,
        "wires": [
            [
                "ead9568c8d24a7c8"
            ]
        ]
    },
    {
        "id": "ead9568c8d24a7c8",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "saveEsignId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1760,
        "wires": []
    },
    {
        "id": "c0d43dab98f06fbe",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "generateLeadDocReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${IIFL_URL}/api/leads/${msg.leadId}/document/generate/IIFL%20Loan%20Agreement`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {\n   \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1440,
        "wires": [
            [
                "72e8f0cbef3d5cfd"
            ]
        ]
    },
    {
        "id": "72e8f0cbef3d5cfd",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "generateLeadDoc",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 1440,
        "wires": [
            [
                "ed2c443f0e7ae541",
                "cc121330eaa61751"
            ]
        ]
    },
    {
        "id": "ed2c443f0e7ae541",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "generateLeadDoc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 1440,
        "wires": []
    },
    {
        "id": "cc121330eaa61751",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "downloadLeadDocReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nmsg.docId = msg.payload.id \n// msg.docId = 3049\nmsg.url = `${IIFL_URL}/api/document/download/${msg.docId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {\n   \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1520,
        "wires": [
            [
                "d69e614c9ca0b2ea"
            ]
        ]
    },
    {
        "id": "d69e614c9ca0b2ea",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "downloadLeadDoc",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 1520,
        "wires": [
            [
                "087d311fb27e74d8",
                "ead6b7246d569355"
            ]
        ]
    },
    {
        "id": "087d311fb27e74d8",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "downloadLeadDoc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 1520,
        "wires": []
    },
    {
        "id": "ead6b7246d569355",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "uploadFileReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\n\nconst token = flow.get(\"enterpriseToken\")\n\nmsg.headers = {\n    \"content-type\": 'multipart/form-data',\n    Authorization: `Bearer ${token}`\n};\n\nmsg.url = `${ADMIN_URL}/api/file/upload`\nmsg.method = \"POST\"\nmsg.payload = {\n    \"file\": {\n        \"value\": msg.payload,\n        \"options\": {\n            \"filename\": 'IIFL Loan document'\n        }\n    },\n    \"filename\": 'IIFL Loan document'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1620,
        "wires": [
            [
                "ebdddf7ce6535da3"
            ]
        ]
    },
    {
        "id": "ebdddf7ce6535da3",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "uploadFile",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 410,
        "y": 1620,
        "wires": [
            [
                "cac10bececfaf851",
                "432ba4a9f478531d"
            ]
        ]
    },
    {
        "id": "cac10bececfaf851",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "uploadFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 1620,
        "wires": []
    },
    {
        "id": "0e8998edac209abd",
        "type": "inject",
        "z": "6aa904d67d2907b2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 100,
        "wires": [
            [
                "2f78549a2c7adca0"
            ]
        ]
    },
    {
        "id": "234c2c522a2ab078",
        "type": "http request",
        "z": "6aa904d67d2907b2",
        "name": "readFile",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 720,
        "y": 100,
        "wires": [
            [
                "776d5a708946d663",
                "5dd52f5fd4298809"
            ]
        ]
    },
    {
        "id": "21a274423118fe71",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 43",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 600,
        "wires": []
    },
    {
        "id": "f9987901c674f1f7",
        "type": "file",
        "z": "6aa904d67d2907b2",
        "name": "",
        "filename": "/Users/shravanpm/Downloads/pdf.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "binary",
        "x": 890,
        "y": 480,
        "wires": [
            [
                "21a274423118fe71"
            ]
        ]
    },
    {
        "id": "ce898b0786d6ad9c",
        "type": "base64",
        "z": "6aa904d67d2907b2",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 330,
        "y": 200,
        "wires": [
            [
                "386d9f3fc10af4c7"
            ]
        ]
    },
    {
        "id": "577860b78f0201be",
        "type": "function",
        "z": "6aa904d67d2907b2",
        "name": "detectMimeType",
        "func": "const LOCAL_PATH = `/Users/shravanpm/Downloads/`\n\nconst signatures = {\n    JVBERi0: \"application/pdf\",\n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"application/vnd.openxmlformats-officedocument.\",\n    PK: \"application/zip\",\n};\n\nlet filePath;\nlet fileName;\nlet extension;\n\nconst base64String = msg.payload;\n\nfor (let ext in signatures) {\n    const base64Sig = base64String.slice(0, ext.length)\n    if (base64Sig === ext) {\n        fileName = msg.fileId\n        extension = getExtension(ext)\n        filePath = `${LOCAL_PATH}/${fileName}.${extension}\n        `\n    }\n}\n\n\nmsg.filePath = filePath\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "2f78549a2c7adca0",
        "type": "function",
        "z": "6aa904d67d2907b2",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\n\n// const fileId = \"5efaaa6b-0471-40d1-9f0f-b1729296faf4-AADHAR_BACK\"\n// const fileId = \"1f4f03e2-e977-43fe-82b5-1aca2adaf8a0-MISCELLANEOUS_DOCUMENT_ADDRESS_PROOF_FORM\"\n// const fileId = \"222eedef-cde8-4aab-8cc7-8debb609e64b-BANK_STATEMENT\"\nconst fileId = \"222eedef-cde8-4aab-8cc7-8debb609e64b-BANK_STATEMENT\"\nmsg.fileId = fileId\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/file/read/${fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 100,
        "wires": [
            [
                "234c2c522a2ab078"
            ]
        ]
    },
    {
        "id": "12aa7f41388a1b6b",
        "type": "file",
        "z": "6aa904d67d2907b2",
        "name": "",
        "filename": "/Users/shravanpm/Downloads/test.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 730,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "f5cb07199db75a98",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 66",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 300,
        "wires": []
    },
    {
        "id": "776d5a708946d663",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 67",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 40,
        "wires": []
    },
    {
        "id": "cba73039553b3be5",
        "type": "function",
        "z": "6aa904d67d2907b2",
        "name": "function 27",
        "func": "// msg.payload = msg.payload.split(\"\\n\")[0]\nconsole.log(msg.payload.length)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 660,
        "wires": [
            [
                "12aa7f41388a1b6b"
            ]
        ]
    },
    {
        "id": "fa52ab0b5c6facea",
        "type": "file in",
        "z": "6aa904d67d2907b2",
        "name": "",
        "filename": "payload",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 300,
        "y": 560,
        "wires": [
            [
                "f962312e4d8dab3d"
            ]
        ]
    },
    {
        "id": "f962312e4d8dab3d",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 68",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 560,
        "wires": []
    },
    {
        "id": "8a31929f15a5b734",
        "type": "function",
        "z": "6aa904d67d2907b2",
        "name": "function 29",
        "func": "const fs = global.get(\"fs\");\nconst pdf = global.get(\"pdf\")\nconst scissors = global.get(\"scissors\")\n\n\n// var pdfOp = scissors(\"/Users/shravanpm/Downloads/bus oct 2021.pdf\")\n\n// console.log({pdfOp})\n\n\n\nconst PDFDocument = pdf.PDFDocument;\n\n// // console.log(PDFDocument.copyPages,\"dcdcc\")\n\n\n\nasync function splitPdf(pathToPdf) {\ntry {\n    const docmentAsBytes = await fs.promises.readFile(pathToPdf);\n\n    // Load your PDFDocument\n    const pdfDoc = await PDFDocument.load(docmentAsBytes, { ignoreEncryption: true })\n    // console.log({pdfDoc})\n    \n\n    const numberOfPages = pdfDoc.getPages().length;\n    // console.log({numberOfPages})\n    const subDocument = await PDFDocument.create();\n    let res = subDocument.copyPages(pdfDoc, [1])\n    console.log({res})\n    // console.log(subDocument.copyPages(pdfDoc, [1]), \"jdslfjls\")\n\n    for (let i = 0; i < 2; i++) {\n\n      // Create a new \"sub\" document\n    //   const subDocument = await PDFDocument.create();\n      // console.log(subDocument.copyPages(pdfDoc,[i]),\"jdslfjls\")\n      // copy the page at current index\n      // const [copiedPage] = await subDocument.copyPages(pdfDoc, [i])\n      // subDocument.addPage(copiedPage);\n      // const pdfBytes = await subDocument.save()\n      // await writePdfBytesToFile(`file-${i + 1}.pdf`, pdfBytes);\n\n    }\n  } catch (error) {\n    console.log({error})\n  };\n}\n\nfunction writePdfBytesToFile(fileName, pdfBytes) {\n  return fs.promises.writeFile(fileName, pdfBytes);\n}\n\n(async () => {\n  await splitPdf(\"/Users/shravanpm/Downloads/bus oct 2021.pdf\");\n})();\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 300,
        "wires": [
            [
                "f5cb07199db75a98"
            ]
        ]
    },
    {
        "id": "55326f0876262081",
        "type": "inject",
        "z": "6aa904d67d2907b2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 380,
        "wires": [
            [
                "ee8516c1c1260445"
            ]
        ]
    },
    {
        "id": "386d9f3fc10af4c7",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 70",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 240,
        "wires": []
    },
    {
        "id": "28a27f4bf063cf0d",
        "type": "file in",
        "z": "6aa904d67d2907b2",
        "name": "read file",
        "filename": "/Users/shravanpm/Downloads/bus oct 2021.pdf",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "hex",
        "allProps": false,
        "x": 200,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "5dd52f5fd4298809",
        "type": "zip",
        "z": "6aa904d67d2907b2",
        "name": "",
        "mode": "compress",
        "filename": "/Users/shravanpm/Downloads/text/test.zip",
        "compressionlevel": "0",
        "outasstring": false,
        "x": 800,
        "y": 180,
        "wires": [
            [
                "28f057098e31844c"
            ]
        ]
    },
    {
        "id": "28f057098e31844c",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 71",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 180,
        "wires": []
    },
    {
        "id": "ee8516c1c1260445",
        "type": "function",
        "z": "6aa904d67d2907b2",
        "name": "base64string",
        "func": "msg.payload = \"JVBERi0xLjUKJeLjz9MKNSAwIG9iago8PAovU3VidHlwZSAvVHlwZTEKL1R5cGUgL0ZvbnQKL0Jhc2VGb250IC9UaW1lcy1Cb2xkCi9FbmNvZGluZyAvV2luQW5zaUVuY29kaW5nCj4+CmVuZG9iago2IDAgb2JqCjw8Ci9TdWJ0eXBlIC9UeXBlMQovVHlwZSAvRm9udAovQmFzZUZvbnQgL1RpbWVzLVJvbWFuCi9FbmNvZGluZyAvV2luQW5zaUVuY29kaW5nCj4+CmVuZG9iago3IDAgb2JqCjw8Ci9GaWx0ZXIgL0ZsYXRlRGVjb2RlCi9MZW5ndGggMjAwNgo+PgpzdHJlYW0KeJylWVtT48YSfvevmEe2CmbnPlLeuCZblcMSoJIXXoQ9NsqxJaILG/59umWZtcxIGkRRGMp2f93T169H/8zO7mfSkIhpGsXkfjG7vJ/9MftnJjQVhEdEK0WjaPd54WZ/zbLdx+2b7Vfgy+3HHvnuh5zgT7GCfxj8cNJ82ypDpSTzzQzfbAV1TLVB2WUjCdZ+vQJhQe6Xe9KSGkNszKiwKL/7AF/vN7Ojq++3/yPX3ykXZ2df7v/enbEBEyTuYFneYFlDIx/Uw9Gdc6So144Ic/7w5RAObOP7eBZcpIg1nCof3F2VVG7jsoqUT/mPNFuR56So0nm9ToqS5EsyXyfppiSPryTJiNs8r/NX0L/MC7Jwi3pepXmGX6uSf0mdLVxBSrd9k8fi/VGjzlEjqsA0qan22sbpdbJxoHdBksWicGVjUPXk3uwYUxAbau2Ahl9GACS3VEYDAGf1ql6k5DbZ1GGHFZAp3Ick6I0rNkmGoTidz/Ma/l7Xm0fw6LRD92oaP3TUHFqIHoCL325ubo0V0W3YmVlMTewDkvQqzZJsniZr8uqSIvBkvXih4ewFEEyIEyH3YN53iojGmpgIjibeWoVscDnD18NW0a1u0WSSiWJq/b51VZKu9ysP09+9pAuXzR3mQeHyZYCBRtKY7wwErUwTwajVw/ZBolswD5qG9nafuzUl7zvOIQR0R2Owo3oQrnM6ZL22aKOxior4zfpYYl8OcC8HOYhsv/3XSVUX7s27Q5ZIDf1fHjjSRFSEOdJKquyAJacbLPERXyqmaDyEMhaLiFHeH4uHo9uSdkbIOy8oYRovdALCJQzFkHgo8KEeisflLrG/7s+dgPRWUEBxN70D7JEG7DaaU+Yd0w9HfNgbbXZ2lYdnZxxTJQf1i2H9u5zsGLDNyZDTR7LJpgH9MiwbOvrDsyEGajOoXg2rb2MPHQYY0kdjryzV0JcgBQDDyzZGmJmOKEMAS4U3l3/L69KR22aAr9f5DxhsbmwiQULFUB9CUS79Lkkfvmwxn5N0Qaq8oQJrGArrvFiMzTsYMxGYjJPcC2/ZMWOMMhZmJoP077ESzWzYWktWAi3k0JqGkN8NG69hOtZIDHosQ9NOu/wx0LoWPRJUetkfoL8A+BhxC9Qm5Ig60qmNXUcQ25qAcfM2pfD1REPT52Q9a2bVj+Z9Rm5/nd2NHRf6Cfc68zqv3C/9py2fkvWaPMJyUBdZWj65BUm3DkhWq8KtYNGACt1l8qIucNvAj8OiAIuY8LrluQB6BLU3hhNZpF79OMhAift37twCEiXDuP3/CTatZ+cCJpJWTXOd1pW0gmAZ/1oQ1JUQQHsp7e8ueQHeWMDrmsxz6EllCesZnLAgCfxbVtinRlynYJmQrRavmSTAQSLe53QfdJBkPQxCBjoIAOIexr23xqZZBQS7rCD+5DEvimYlDmviGpYL63XOtol/20E/J6/J49p97TR0h7tzmB4Gruu5GsBe1+nC4bAqFm0HOYT1d9APIFtgC33TLah/fkCXsZhXXl0JqPq5b37Lyiqtagx8CXYsSfICixcG5v2dil8VcDHZM3QeQdXldl0vpoEr3jdq54D9HffAgKaEfE3JiTWnBCS0d29QYTWnwAh/MH7W3PbO6PwpeYbqIH9+OzkN8w9XePPnddApOOiuvYSK2Pkx/J6fN2s0/ncRhs8EFT07U9rFD8KTMbAs79T5PV06TMa6wD5Mbgq3SevNKLGz2I/7UTnjxzKKuszugDPIOEJ2uM8ZIDdiOYEzSGtp1Nf7Dvx1HugxvLHsY13vMMOiKmF+MW+Pezg625XV7gKzJA9Hjq4o4F8ew8uv+HJ/f3pMXDWHrdmTuoM3G9uKlFBUauoUlIBhva1fj1akaQBgCvbc6R1U5M65Qg3uwwZXT8llG318V3OOoxpeRy/DYD2ReCunKfe2iT9dkS7TeYKWjJwPsgU6joANO/JCfTsme3e1pMyzr4ukXj1V2zFzVziXpS9JWa9rssgJXrM9vpK5K6p0+QpTKKmaUZRmyxyGVeOaVfriMpI85sCv0hK4FTR8V23vq+fAHcCDnqh00tIwTEsRKcq8A/JmnYzvkHhJZCIigLfLnhq8S1fZ283X/l3y6DhqLezFvgBWP2Yg5wbJqTBxDwiPTq7c44lgnavXAXOggRlvHVy4sjkqxGfcqoYy92PdXVySE8LHWrFs1rV+mKsatiIkZaO307Ghcsgg/8OGn4YwKiSUgG2vV966OjQP1t/Vu7UsYCHfbp9b8baaWah41NThm7iwQJJ0uDi4wMQTtCuhttfyhsbdkYZzBNw5BrDbo98DaEl1/x59IK9tRA9GKrBfGawfB3vclZfI4ELFLcdb5+nyWreE4qc8H6IEh/KK4eV/R755ijomD1OR4YMZfqheaY5b1Wj6aNTiiZ6SFu++xtMP4zZdP051fOgiOvJaNZN9PH234kpGbeVPEsfgs3iyODpPTzde6v0nYh8XxzydbrxUnxLX2H4+YTx0uWiS6wzF55lAyuy+NMdkDlYeNdxw8tHxz3RxvHi003NWQ3uwn0g6INCGT9cOWx4zn0h5dRC4j5U70t/pOausaZ8hTwscsIL4E66DJNV6uvG8yfHJ4jDuP6Fd47oqp8ddxp9JWmV2dH+aOEwk+YmkhRVpUrljqxIq3nv0Ntqq/pj9B3HdMEoKZW5kc3RyZWFtCmVuZG9iago4IDAgb2JqCjw8Ci9GaWx0ZXIgL0ZsYXRlRGVjb2RlCi9MZW5ndGggMjIyNQo+PgpzdHJlYW0KeJytW9tyGzcSfedX4DGpirG4A7NvTGQncsk0I2mT2qq8MOTQ5q7IUUakU/777R4OZV6mZwBwy1WSJarPnO7TaFwa89fox8eRdiwIy0PBHhejt4+jX0d/jZTlisnArDE8hMPndTn6fbQ5fNz+sv0T+OP24w770w/hmf94J5k07HE5kkzAP/gpKK4986HgyrL5+vUD/Pq4Hn033m2rp6/b1fyFPZbzz5vqqfr0lU3r1ZfZtmR3q/VqWy6+f/zPwYXDU9TpUzQPhnnnuNRdT5l+vGXLqmbbzyV7LutVtWDVko2fa6aEAqiKfZg1/9eXjyqOn6Q894p5I7j1XQ+azNYl++c5CARNnPAVBsPhdcGLTr4/7j7tFit2P1vvhgiZwFUfo7fr56fqa1mySTVMTAMdmtVYSBkZIMgU57owblDWj0v2vlptuvgUF3HaoxVFF5qw7KF8bkSMjBNJbFrW69mm3GzZeD6vdvB9slv/WdaRQQNcoTod/mU6vXdehfsjnFdWltvAvJW8kGiMv8Wvb3Qj59NIcG/Z383vBbv/efRwYi6F4sLn2yvjrrLXheBB59tbra7yH/MCh5HjTn8zt8Lh6BIx5qp5uDXH1h6NYq2VxHyPt4aAKW01O/9efzoFdsFiSWuB7T5VsNwuyRSHElB45oqCd1bahyc+qY5yMIKJd5dMfASTAoq+oZl8qDbbz2lMpNYXVCC8w1Sk1TjuSS531Xy2XVUbNlA/EEdbYFAQU8ztZrECqKpOc0yJcOGYC5i/w74pKRtOlG/3WM1gumNrDPiQhwpCHPo8/OO7+xf+x/eJ/kEOGXvuoI10ELj0JdL4+bmuvpSLQdcK3QwN0rXxGit+mmfawNC/GB3cRfilLRDp8ethO9vuXhLpAJg+oyM9FKGYAWuc58b1ZdJ6Vv/35XImDGdzvyuY80ChC0QOmMNkImnrw2JtAERq20tiAkP9Q7mtqyFfnOSyB0dwIQYgNBRkY2iIi6w9t4eSYx1tP307ubmd/DyAYgSkaY8jQyxaUZ0mhs6QICHwIvTYf5h9TdGVxEkVlgRKUJbEiJWWBEjTNptHK64VWKM77C9W+5dD1rse+/e7TYq4JE6quCRQgrgkRqy4JECauNk8WnG1xzmgw94MiSu5sz3273dPKeKSOKnikkAJ4pIYseKSAGniZvNoxcVtZ+fO2A6V5YIb3WM/3n1KEZfESRWXBEoQl8SIFZcESBM3m0crrlTcdJ4puOGyrFWPPXVmQohL4kSLa3QjLgkkxQ9CJChMAsUqTAKkKZzNY6+whfW2N132flhha3rsP863CQrTOIkK00CJCtNAkQrTAEkK5/NoFQ6ei87zxhBVoGn7SfUlReEenDSFSaBUhUmgWIVJgDSFs3m0CnvDdWeVL4YVDqHH/qacpyhM4qQqTAKlKkwCxSpMAqQpnM2jVRiWJl52B2S4TMPmlwZ4P9t0dp0IiUmcVIl7PEqTmASKlZgESJM4m0crsSm46NxBy4hTK1hr0QDvyj9TJCZxUiWmPUqUmASKlZgESJM4m0crsXZcd09cg0dYBW6EaQCqd0xITOKkSkx7lCgxCRQrMQmQJnEUj9co7Hun2AM5at8J9kb6wHUYbl4axcU1ANiTsv4KAOyNYPs03wVYnbprGACB6zwQ4ToA62B9fQ2BpgPsjMfF8rcuLAwQMI7q4YK59RIvqWSb24DjOtscm/Aq29xpg3+Vba6aUZBtLmCbku964U675wnmCrKmaXgfWTe3kqKpB4s9r2zPveL+isA5waXMj1wwXGSqDqsVqFzaJEQu9taCwc3Ua1BU4AGmCITub/PCRsgzC0VAdh9Xpd9csOaMi7SNZxFsJNY01UNnOqu3q/nuaVYntmiVaIbqKTETFyKp+kntO9iDjXAluIJQC9HWjHOYvB6/VZd+udh4K6dxe9bjWmyX3wUspLRzWV1+CZP8mWtNlz/CM62hQJm+xM7p88NkJc8Hmowk5KF49GXRpBoKsvYelxx0kKvlIARwN306DVKwWPsM7rw6eyc31Tz17gQkcGbx0kVf6ZrWVbVMI2NAzfOMkybgYjeCjoF1E67ISUbkVY7TS42qucdmINSd2+pfqt1LyZoLRtPZ6uKCbucOzDiFt14yboZYx02ffSIbWfTD+djtEwRZwUSDrau8s2qYNGHDQzOJ2z41A8pcEV9dWNxQ0gD/Lofu/hil8Y4uDdERi86Mg6WI7745XC528+aq3r82i7JmP32ePW/h+2+3bByXf1rmXUxq048yD+In9obdrZYlu9287OrZZl6yaV2uV7v1YCraXmgp5A86hPhUhBkn765Rm4kUkbREpFCGDloOeUjZx6chhRCbhdK0G8qhLHwo9z8pQx5RWNhiFUcbDdzdwnKuiLgfbXBR32G/v/EcZ25goyL96eMtehdpbiQeUqSb48opXMG+tc+mf7DP5g8LLXMN/719Pv/WPpe/EhZvhWXzb+2z+R/ss/lbfR3/vX0+/9Y+lz+u43Bbm8u/tc/mf7DPzv9C48sh+fm/t8/P/9Y+l//+aDG/+O4PWoxvZ5K9eeIxjXldhueZB9e2tfLMIXS5J1yqiZw9OdZMOl4zyrX9mjzusOi64kwWn37F6ZyBLX6ubgpUF2fc/0/Ha7pohvThGOLwFiaWqddNYdQ7GXijFMeXPgIT6KFs5vyh0zqPVBzxIt3dbLNgd1W9gNXwsqrXzes1UQt0HWT78sLFuQTxWuVpf81YXH3SKHGNQg11Q3Z6Nl4s6vLlJZoICRRJBPcdnavYbyGejifRdEi4SQX75rr6slqUCx5HDcZD6DwYuCnnT7N6/0rVO1A/mh2JeMyOXGPDkDup8RB6qF2DHTwc1ufDqrG3TeWMm2Lynr0vNNoHGJ/ZdQqZZ3cBjCi4U9kFHnu/V/RPNL6sndk6Uk3n2qdMTp2VDDLPw9ZXYhJ0Z1459IoyzDOIARVfDWw4fx39Dx+2y5IKZW5kc3RyZWFtCmVuZG9iagozIDAgb2JqCjw8Ci9UeXBlIC9QYWdlCi9NZWRpYUJveCBbMCAwIDU5NS4yOCA4NDEuODldCi9SZXNvdXJjZXMgPDwKL0NvbG9yU3BhY2UgPDwKL0NTIC9EZXZpY2VSR0IKPj4KL1Byb2NTZXQgWy9QREYgL1RleHQgL0ltYWdlQiAvSW1hZ2VDIC9JbWFnZUldCi9Gb250IDw8Ci9GMSA1IDAgUgovRjIgNiAwIFIKPj4KPj4KL0dyb3VwIDw8Ci9TIC9UcmFuc3BhcmVuY3kKL1R5cGUgL0dyb3VwCi9DUyAvRGV2aWNlUkdCCj4+Ci9Db250ZW50cyA3IDAgUgovUGFyZW50IDIgMCBSCj4+CmVuZG9iago0IDAgb2JqCjw8Ci9UeXBlIC9QYWdlCi9NZWRpYUJveCBbMCAwIDU5NS4yOCA4NDEuODldCi9SZXNvdXJjZXMgPDwKL0NvbG9yU3BhY2UgPDwKL0NTIC9EZXZpY2VSR0IKPj4KL1Byb2NTZXQgWy9QREYgL1RleHQgL0ltYWdlQiAvSW1hZ2VDIC9JbWFnZUldCi9Gb250IDw8Ci9GMSA1IDAgUgovRjIgNiAwIFIKPj4KPj4KL0dyb3VwIDw8Ci9TIC9UcmFuc3BhcmVuY3kKL1R5cGUgL0dyb3VwCi9DUyAvRGV2aWNlUkdCCj4+Ci9Db250ZW50cyA4IDAgUgovUGFyZW50IDIgMCBSCj4+CmVuZG9iagoxMyAwIG9iago8PAovTmFtZXMgWyhfX1RPQ18xMCkgWzQgMCBSIC9YWVogbnVsbCA0ODcuMDggMF0gKF9fVE9DXzExKSBbNCAwIFIgL1hZWiBudWxsIDQ1Ni43NCAwXSAoX19UT0NfMTIpIFs0IDAgUiAvWFlaIG51bGwgNDI2LjQxIDBdIChfX2Jvb2ttYXJrXzEwKSBbMyAwIFIgL1hZWiBudWxsIDU1NS44NSAwXSAoX19ib29rbWFya18xMSkgWzMgMCBSIC9YWVogbnVsbCAzOTguODIgMF0gKF9fYm9va21hcmtfMTIpIFszIDAgUiAvWFlaIG51bGwgMzc0LjQ3IDBdIChfX2Jvb2ttYXJrXzEzKSBbMyAwIFIgL1hZWiBudWxsIDM1OC4wNCAwXSAoX19ib29rbWFya18xNCkgWzMgMCBSIC9YWVogbnVsbCAzNDMuMTIgMF0gKF9fYm9va21hcmtfMTcpIFs0IDAgUiAvWFlaIG51bGwgODA0LjM5IDBdIChfX2Jvb2ttYXJrXzE4KSBbNCAwIFIgL1hZWiBudWxsIDc1MS45MSAwXSAoX19ib29rbWFya18xOSkgWzQgMCBSIC9YWVogbnVsbCA3NDkuNjYgMF0gKF9fYm9va21hcmtfMjApIFs0IDAgUiAvWFlaIG51bGwgNzQ5LjY2IDBdIChfX2Jvb2ttYXJrXzIxKSBbNCAwIFIgL1hZWiBudWxsIDczNC43NSAwXSAoX19ib29rbWFya18yMikgWzQgMCBSIC9YWVogbnVsbCA3MzQuNzUgMF0gKF9fYm9va21hcmtfMjMpIFs0IDAgUiAvWFlaIG51bGwgNzExLjM0IDBdIChfX2Jvb2ttYXJrXzI0KSBbNCAwIFIgL1hZWiBudWxsIDUyMi45NiAwXSAoX19ib29rbWFya18zMikgWzQgMCBSIC9YWVogbnVsbCA0MTAgMF0gKF9fYm9va21hcmtfMzMpIFs0IDAgUiAvWFlaIG51bGwgMzg5LjYyIDBdIChfX2Jvb2ttYXJrXzM0KSBbNCAwIFIgL1hZWiBudWxsIDM3Ni45NCAwXSAoX19ib29rbWFya18zNikgWzQgMCBSIC9YWVogbnVsbCAzNTEuNTkgMF0gKF9fYm9va21hcmtfMzcpIFs0IDAgUiAvWFlaIG51bGwgMzIwLjA0IDBdIChfX2Jvb2ttYXJrXzQpIFszIDAgUiAvWFlaIG51bGwgODA1Ljg5IDBdIChfX2Jvb2ttYXJrXzYpIFszIDAgUiAvWFlaIG51bGwgNjMzLjQxIDBdIChfX2Jvb2ttYXJrXzgpIFszIDAgUiAvWFlaIG51bGwgNjMxLjkxIDBdXQo+PgplbmRvYmoKOSAwIG9iago8PAovQSA8PAovUyAvR29UbwovRCAoX19UT0NfMTApCj4+Ci9UaXRsZSAoSG91c2UgUmVudCBQYWlkKQovUGFyZW50IDE0IDAgUgovTmV4dCAxMCAwIFIKPj4KZW5kb2JqCjEwIDAgb2JqCjw8Ci9BIDw8Ci9TIC9Hb1RvCi9EIChfX1RPQ18xMSkKPj4KL1RpdGxlIChEZWR1Y3Rpb24gVW5kZXIgQ2hhcHRlciBWSSBBKQovUGFyZW50IDE0IDAgUgovUHJldiA5IDAgUgovTmV4dCAxMSAwIFIKPj4KZW5kb2JqCjExIDAgb2JqCjw8Ci9BIDw8Ci9TIC9Hb1RvCi9EIChfX1RPQ18xMikKPj4KL1RpdGxlIChEZWR1Y3Rpb24gVW5kZXIgU2VjdGlvbiAyNCkKL1BhcmVudCAxNCAwIFIKL1ByZXYgMTAgMCBSCj4+CmVuZG9iagoyIDAgb2JqCjw8Ci9UeXBlIC9QYWdlcwovS2lkcyBbMyAwIFIgNCAwIFJdCi9Db3VudCAyCj4+CmVuZG9iagoxNCAwIG9iago8PAovQ291bnQgMwovRmlyc3QgOSAwIFIKL0xhc3QgMTEgMCBSCj4+CmVuZG9iagoxIDAgb2JqCjw8Ci9UeXBlIC9DYXRhbG9nCi9QYWdlcyAyIDAgUgovTmFtZXMgPDwKL0Rlc3RzIDEzIDAgUgo+PgovT3V0bGluZXMgMTQgMCBSCj4+CmVuZG9iagoxMiAwIG9iago8PAovUHJvZHVjZXIgKGlMb3ZlUERGKQovTW9kRGF0ZSAoRDoyMDIzMDIyMjE3MDMwNFopCj4+CmVuZG9iagoxNSAwIG9iago8PAovU2l6ZSAxNgovUm9vdCAxIDAgUgovSW5mbyAxMiAwIFIKL0lEIFs8NjdGREQzQzhEMTNGNTc5Mjg0Q0QyMkI4ODQ5MDNEMDk+IDxCQTE5QUQ3NEQ4M0Y0MzkyOUJFREU0MTNCMTY1RTNDNT5dCi9UeXBlIC9YUmVmCi9XIFsxIDIgMl0KL0ZpbHRlciAvRmxhdGVEZWNvZGUKL0luZGV4IFswIDE2XQovTGVuZ3RoIDY2Cj4+CnN0cmVhbQp4nGNgYPj/n1GKk4GBUXIikBB8CySEWYAEAz+IKAQRV4AEx2cgIaELIqaDFEsDCak0ICECYkleAHHXMTAAAK3jCccKZW5kc3RyZWFtCmVuZG9iagpzdGFydHhyZWYKNjgzMAolJUVPRgo=\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "d1720175299174b7",
        "type": "inject",
        "z": "6aa904d67d2907b2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 600,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "793e3dfb52bfedb6",
        "type": "file in",
        "z": "6aa904d67d2907b2",
        "name": "read file",
        "filename": "/Users/shravanpm/Downloads/bus oct 2021.pdf",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 480,
        "y": 800,
        "wires": [
            [
                "57ea66c790d55da1",
                "c04a643ed361e831"
            ]
        ]
    },
    {
        "id": "6c6075c0b6dba9d1",
        "type": "inject",
        "z": "6aa904d67d2907b2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 800,
        "wires": [
            [
                "793e3dfb52bfedb6"
            ]
        ]
    },
    {
        "id": "57ea66c790d55da1",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 73",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 720,
        "wires": []
    },
    {
        "id": "8f452b2328d44191",
        "type": "function",
        "z": "6aa904d67d2907b2",
        "name": "function 30",
        "func": "const JSZip = global.get(\"jszip\")\nconst fs = global.get('fs');\n\nconst zip = new JSZip();\n\ntry {\n    console.log(\"hjgsghjad\")\n    const pdfData = fs.readFileSync('/Users/shravanpm/Downloads/bus oct 2021.pdf');\n    zip.file(\"PDFFile.pdf\", pdfData);\n    // console.log({test})\n    // zip.file(\"Textfile.txt\", \"Hello NodeJS\\n\");\n\n    // const images = [\"coding-science.jpg\", \"programming-languages.jpg\"];\n    // const img = zip.folder(\"images\");\n\n    // for (const image of images) {\n    //     const imageData = fs.readFileSync(image);\n    //     img.file(image, imageData);\n    // }\n\n    let result = zip.generateNodeStream({ type: 'nodebuffer', streamFiles: true })\n        .pipe(fs.createWriteStream('sample.zip'))\n        .on('finish', function (res) {\n            \n            \n            console.log(\"sample.zip written.\");\n        });\n\n        // console.log({result})\n\n    const test = fs.readFileSync('sample.zip');\n    // node.send({payload:test})\n    msg.payload = test\n    console.log({ test })\n} catch (err) {\n    console.error(err)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "c04a643ed361e831",
        "type": "zip",
        "z": "6aa904d67d2907b2",
        "name": "",
        "mode": "compress",
        "filename": "",
        "compressionlevel": 6,
        "outasstring": false,
        "x": 780,
        "y": 800,
        "wires": [
            [
                "27e8896d7b824b64",
                "7729f1690ab76186"
            ]
        ]
    },
    {
        "id": "27e8896d7b824b64",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 74",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 706,
        "wires": []
    },
    {
        "id": "0decd3ca114017e7",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 75",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 1000,
        "wires": []
    },
    {
        "id": "77b481c203099e40",
        "type": "file",
        "z": "6aa904d67d2907b2",
        "name": "",
        "filename": "filePath",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "base64",
        "x": 400,
        "y": 1000,
        "wires": [
            [
                "0decd3ca114017e7"
            ]
        ]
    },
    {
        "id": "7729f1690ab76186",
        "type": "base64",
        "z": "6aa904d67d2907b2",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 490,
        "y": 880,
        "wires": [
            [
                "91cf7de891c0b1ee"
            ]
        ]
    },
    {
        "id": "91cf7de891c0b1ee",
        "type": "function",
        "z": "6aa904d67d2907b2",
        "name": "detectMimeType",
        "func": "// const LOCAL_PATH = env.get(\"LOCAL_PATH\")\nconst LOCAL_PATH = \"/Users/shravanpm/Downloads\"\n\nconst signatures = {\n    JVBERi0: \"application/pdf\",\n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"application/vnd.openxmlformats-officedocument.\",\n    PK: \"application/zip\",\n};\n\nlet filePath;\nlet fileName;\nlet extension;\n\nconst base64String = msg.payload;\n\nfor (let ext in signatures) {\n    const base64Sig = base64String.slice(0, ext.length)\n    if (base64Sig === ext) {\n        fileName = msg.fileId\n        extension = getExtension(ext)\n        filePath = `${LOCAL_PATH}/${\"fileName\"}.${\"zip\"}`\n    }\n}\n\n\nmsg.filePath = filePath\n\nconsole.log(fileName)\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 880,
        "wires": [
            [
                "77b481c203099e40"
            ]
        ]
    },
    {
        "id": "563227598a60c241",
        "type": "inject",
        "z": "84b812933a436af8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 460,
        "y": 360,
        "wires": [
            [
                "f500b3761004fa36"
            ]
        ]
    },
    {
        "id": "1f373ffc44f09238",
        "type": "http request",
        "z": "84b812933a436af8",
        "name": "readFile",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 840,
        "y": 360,
        "wires": [
            [
                "be27695051af519a"
            ]
        ]
    },
    {
        "id": "8ab9d6b38ac30338",
        "type": "debug",
        "z": "84b812933a436af8",
        "name": "debug 43",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 660,
        "wires": []
    },
    {
        "id": "fc69e978e3bcd95e",
        "type": "file",
        "z": "84b812933a436af8",
        "name": "write file",
        "filename": "filePath",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "base64",
        "x": 620,
        "y": 660,
        "wires": [
            [
                "8ab9d6b38ac30338"
            ]
        ]
    },
    {
        "id": "eab6a95d143141c8",
        "type": "function",
        "z": "84b812933a436af8",
        "name": "detectMimeType",
        "func": "// const LOCAL_PATH = env.get(\"LOCAL_PATH\")\nconst LOCAL_PATH = \"/Users/shravanpm/Downloads\"\n\nconst signatures = {\n    JVBERi0: \"application/pdf\",\n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"xlsx/xlsx\",\n    PK: \"application/zip\",\n};\n\nlet filePath;\nlet fileName;\nlet extension;\n\nconst base64String = msg.payload;\n\nfor (let ext in signatures) {\n    const base64Sig = base64String.slice(0, ext.length)\n    if (base64Sig === ext) {\n        fileName = \"docsss\"\n        extension = getExtension(ext)\n        filePath = `${LOCAL_PATH}/${\"fileName\"}.${\"pdf\"}`\n    }\n}\n\n\nmsg.filePath = filePath\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "f500b3761004fa36",
        "type": "function",
        "z": "84b812933a436af8",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\n\n// const fileId = \"5efaaa6b-0471-40d1-9f0f-b1729296faf4-AADHAR_BACK\"\nconst fileId = \"1f4f03e2-e977-43fe-82b5-1aca2adaf8a0-MISCELLANEOUS_DOCUMENT_ADDRESS_PROOF_FORM\"\n// const fileId = \"222eedef-cde8-4aab-8cc7-8debb609e64b-BANK_STATEMENT\"\n\nmsg.fileId = fileId\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/file/read/${fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 360,
        "wires": [
            [
                "1f373ffc44f09238"
            ]
        ]
    },
    {
        "id": "be27695051af519a",
        "type": "zip",
        "z": "84b812933a436af8",
        "name": "",
        "mode": "compress",
        "filename": "test.zip",
        "compressionlevel": 6,
        "outasstring": false,
        "x": 380,
        "y": 520,
        "wires": [
            [
                "108bfe5156f6cc24"
            ]
        ]
    },
    {
        "id": "108bfe5156f6cc24",
        "type": "base64",
        "z": "84b812933a436af8",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 270,
        "y": 600,
        "wires": [
            [
                "eab6a95d143141c8"
            ]
        ]
    },
    {
        "id": "70438d11b1e56c39",
        "type": "debug",
        "z": "84b812933a436af8",
        "name": "debug 76",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 460,
        "wires": []
    },
    {
        "id": "c10b4d098657f711",
        "type": "base64",
        "z": "84b812933a436af8",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 630,
        "y": 480,
        "wires": [
            [
                "70438d11b1e56c39"
            ]
        ]
    },
    {
        "id": "366b6f99fb1fcec0",
        "type": "inject",
        "z": "84b812933a436af8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 900,
        "wires": [
            [
                "27238a568feea36e"
            ]
        ]
    },
    {
        "id": "7c54786e2c6ca074",
        "type": "http request",
        "z": "84b812933a436af8",
        "name": "readFile",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 620,
        "y": 900,
        "wires": [
            [
                "83c776182b1939b9",
                "0950989ba9efded9"
            ]
        ]
    },
    {
        "id": "27238a568feea36e",
        "type": "function",
        "z": "84b812933a436af8",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\n\n// const fileId = \"5efaaa6b-0471-40d1-9f0f-b1729296faf4-AADHAR_BACK\"\n// const fileId = \"1f4f03e2-e977-43fe-82b5-1aca2adaf8a0-MISCELLANEOUS_DOCUMENT_ADDRESS_PROOF_FORM\"\n// const fileId = \"8e79976d-26b1-4e18-a458-244b3b0ed4a9-BANK_STATEMENT\"\nconst fileId = \"4c21b525-3709-4d23-8fb2-1a9b8efabee2-AADHAR_FRONT\"\nmsg.fileId = fileId\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/file/read/${fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 900,
        "wires": [
            [
                "7c54786e2c6ca074",
                "32a47838ddfe72e2"
            ]
        ]
    },
    {
        "id": "83c776182b1939b9",
        "type": "debug",
        "z": "84b812933a436af8",
        "name": "debug 77",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 900,
        "wires": []
    },
    {
        "id": "15c33e8fe19e62a8",
        "type": "function",
        "z": "84b812933a436af8",
        "name": "function 31",
        "func": "const JSZip = global.get(\"jszip\")\nconst fs = global.get('fs');\n\nconst zip = new JSZip();\n\ntry {\n    console.log(\"hjgsghjad\")\n    // const pdfData = fs.readFileSync('/Users/shravanpm/Downloads/bus oct 2021.pdf');\n    const pdfData  = msg.payload\n    \n    zip.file(\"PDFFile.pdf\", pdfData);\n    console.log({pdfData})\n    // zip.file(\"Textfile.txt\", \"Hello NodeJS\\n\");\n\n    // const images = [\"coding-science.jpg\", \"programming-languages.jpg\"];\n    // const img = zip.folder(\"images\");\n\n    // for (const image of images) {\n    //     const imageData = fs.readFileSync(image);\n    //     img.file(image, imageData);\n    // }\n\n    let result = zip.generateNodeStream({ type: 'nodebuffer', streamFiles: true })\n        // .pipe(fs.createWriteStream('sample.zip'))\n        .pipe(fs.createWriteStream('PDFFile.pdf'))\n        .on('finish', function (res) {\n            \n            \n            console.log(\"sample.zip written.\");\n        });\n\n        // console.log({result})\n\n    const test = fs.readFileSync('sample.zip');\n    // node.send({payload:test})\n    msg.payload = test\n    console.log({ test })\n} catch (err) {\n    console.error(err)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1000,
        "wires": [
            [
                "eef43beeeb4982dd"
            ]
        ]
    },
    {
        "id": "a3d778801f791f9d",
        "type": "debug",
        "z": "84b812933a436af8",
        "name": "debug 78",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 1000,
        "wires": []
    },
    {
        "id": "eef43beeeb4982dd",
        "type": "base64",
        "z": "84b812933a436af8",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 510,
        "y": 1000,
        "wires": [
            [
                "a3d778801f791f9d",
                "7290765312faeb0d"
            ]
        ]
    },
    {
        "id": "0950989ba9efded9",
        "type": "file",
        "z": "84b812933a436af8",
        "name": "write file",
        "filename": "/Users/shravanpm/Downloads/fileName.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "binary",
        "x": 560,
        "y": 1100,
        "wires": [
            [
                "fa8436ffe7cf3ed1"
            ]
        ]
    },
    {
        "id": "7290765312faeb0d",
        "type": "function",
        "z": "84b812933a436af8",
        "name": "detectMimeType",
        "func": "// const LOCAL_PATH = env.get(\"LOCAL_PATH\")\nconst LOCAL_PATH = \"/Users/shravanpm/Downloads\"\n\nconst signatures = {\n    JVBERi0: \"application/pdf\",\n    \n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"xlsx/xlsx\",\n    PK: \"application/zip\",\n};\n\nlet filePath;\nlet fileName;\nlet extension;\n\nconst base64String = msg.payload;\n\nfor (let ext in signatures) {\n    const base64Sig = base64String.slice(0, ext.length)\n    if (base64Sig === ext) {\n        fileName = \"docsss\"\n        extension = getExtension(ext)\n        filePath = `${LOCAL_PATH}/${\"fileName\"}.${extension}`\n    }\n}\n\n\nmsg.filePath = filePath\n\nconsole.log({filePath,extension})\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1100,
        "wires": [
            [
                "0950989ba9efded9"
            ]
        ]
    },
    {
        "id": "fa8436ffe7cf3ed1",
        "type": "debug",
        "z": "84b812933a436af8",
        "name": "debug 79",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 1100,
        "wires": []
    },
    {
        "id": "e48f244b873111e5",
        "type": "file in",
        "z": "84b812933a436af8",
        "name": "",
        "filename": "",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 440,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "33f190cf03adce07",
        "type": "inject",
        "z": "84b812933a436af8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 1260,
        "wires": [
            [
                "f527386241d0196a"
            ]
        ]
    },
    {
        "id": "43bd688c23c1969f",
        "type": "debug",
        "z": "84b812933a436af8",
        "name": "debug 225",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 1380,
        "wires": []
    },
    {
        "id": "f527386241d0196a",
        "type": "file in",
        "z": "84b812933a436af8",
        "name": "read",
        "filename": "/Users/shravanpm/Downloads/Holiday list.pdf",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 430,
        "y": 1260,
        "wires": [
            [
                "c0661b1558d6d168"
            ]
        ]
    },
    {
        "id": "c0661b1558d6d168",
        "type": "base64",
        "z": "84b812933a436af8",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 630,
        "y": 1260,
        "wires": [
            [
                "33dddb0822c29145"
            ]
        ]
    },
    {
        "id": "33dddb0822c29145",
        "type": "file",
        "z": "84b812933a436af8",
        "name": "write file",
        "filename": "/Users/shravanpm/Downloads/gfccg.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 380,
        "y": 1380,
        "wires": [
            [
                "43bd688c23c1969f"
            ]
        ]
    },
    {
        "id": "32a47838ddfe72e2",
        "type": "debug",
        "z": "84b812933a436af8",
        "name": "debug 249",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "url",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 840,
        "wires": []
    },
    {
        "id": "d188a7237d9a16df",
        "type": "inject",
        "z": "c458c3f61cf5894d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "f62adde18ea51a16"
            ]
        ]
    },
    {
        "id": "75a4f7593309a5e5",
        "type": "http request",
        "z": "c458c3f61cf5894d",
        "name": "readFile",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 540,
        "y": 120,
        "wires": [
            [
                "2cd4df085beffc92",
                "b6eb09c25ae2391d"
            ]
        ]
    },
    {
        "id": "f62adde18ea51a16",
        "type": "function",
        "z": "c458c3f61cf5894d",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\n\n// const fileId = \"5efaaa6b-0471-40d1-9f0f-b1729296faf4-AADHAR_BACK\"\nconst fileId = \"1f4f03e2-e977-43fe-82b5-1aca2adaf8a0-MISCELLANEOUS_DOCUMENT_ADDRESS_PROOF_FORM\"\n// const fileId = \"222eedef-cde8-4aab-8cc7-8debb609e64b-BANK_STATEMENT\"\n\nmsg.fileId = fileId\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/file/read/${fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 120,
        "wires": [
            [
                "75a4f7593309a5e5"
            ]
        ]
    },
    {
        "id": "2cd4df085beffc92",
        "type": "debug",
        "z": "c458c3f61cf5894d",
        "name": "debug 83",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 120,
        "wires": []
    },
    {
        "id": "b6eb09c25ae2391d",
        "type": "function",
        "z": "c458c3f61cf5894d",
        "name": "function 33",
        "func": "const JSZip = global.get(\"jszip\")\nconst fs = global.get('fs');\n\nconst zip = new JSZip();\n\ntry {\n    console.log(\"hjgsghjad\")\n    // const pdfData = fs.readFileSync('/Users/shravanpm/Downloads/bus oct 2021.pdf');\n    const pdfData  = msg.payload\n    \n    zip.file(\"PDFFile.pdf\", pdfData);\n    console.log({pdfData})\n    // zip.file(\"Textfile.txt\", \"Hello NodeJS\\n\");\n\n    // const images = [\"coding-science.jpg\", \"programming-languages.jpg\"];\n    // const img = zip.folder(\"images\");\n\n    // for (const image of images) {\n    //     const imageData = fs.readFileSync(image);\n    //     img.file(image, imageData);\n    // }\n\n    let result = zip.generateNodeStream({ type: 'nodebuffer', streamFiles: true })\n        // .pipe(fs.createWriteStream('sample.zip'))\n        .pipe(fs.createWriteStream('PDFFile.pdf'))\n        .on('finish', function (res) {\n            \n            \n            console.log(\"sample.zip written.\");\n        });\n\n        // console.log({result})\n\n    const test = fs.readFileSync('sample.zip');\n    // node.send({payload:test})\n    msg.payload = test\n    console.log({ test })\n} catch (err) {\n    console.error(err)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 220,
        "wires": [
            [
                "ed73b1c7b0200bd5"
            ]
        ]
    },
    {
        "id": "a27fbb9638b177c5",
        "type": "debug",
        "z": "c458c3f61cf5894d",
        "name": "debug 84",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 220,
        "wires": []
    },
    {
        "id": "ed73b1c7b0200bd5",
        "type": "base64",
        "z": "c458c3f61cf5894d",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 430,
        "y": 220,
        "wires": [
            [
                "a27fbb9638b177c5",
                "44faad76ee4176c8"
            ]
        ]
    },
    {
        "id": "44faad76ee4176c8",
        "type": "file",
        "z": "c458c3f61cf5894d",
        "name": "write file",
        "filename": "/Users/shravanpm/Downloads/fileNameTest.zip",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "base64",
        "x": 480,
        "y": 320,
        "wires": [
            [
                "0cae38af04a7bcda"
            ]
        ]
    },
    {
        "id": "bda931c547488d6f",
        "type": "function",
        "z": "c458c3f61cf5894d",
        "name": "detectMimeType",
        "func": "// const LOCAL_PATH = env.get(\"LOCAL_PATH\")\nconst LOCAL_PATH = \"/Users/shravanpm/Downloads\"\n\nconst signatures = {\n    JVBERi0: \"application/pdf\",\n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"xlsx/xlsx\",\n    PK: \"application/zip\",\n};\n\nlet filePath;\nlet fileName;\nlet extension;\n\nconst base64String = msg.payload;\n\nfor (let ext in signatures) {\n    const base64Sig = base64String.slice(0, ext.length)\n    if (base64Sig === ext) {\n        fileName = \"docsss\"\n        extension = getExtension(ext)\n        filePath = `${LOCAL_PATH}/${\"fileName\"}.${\"pdf\"}`\n    }\n}\n\n\nmsg.filePath = filePath\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 320,
        "wires": [
            [
                "44faad76ee4176c8"
            ]
        ]
    },
    {
        "id": "0cae38af04a7bcda",
        "type": "debug",
        "z": "c458c3f61cf5894d",
        "name": "debug 85",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 320,
        "wires": []
    },
    {
        "id": "84200e31b199b4cd",
        "type": "function",
        "z": "c458c3f61cf5894d",
        "name": "function 34",
        "func": "\n\nconst splitFile = global.get(\"splitFile\");\n\nsplitFile.splitFile('/Users/shravanpm/Downloads/bus oct 2021.pdf', 3)\n    .then((names) => {\n        console.log(names);\n    })\n    .catch((err) => {\n        console.log('Error: ', err);\n    });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 440,
        "wires": [
            [
                "a44d395b82ceea14"
            ]
        ]
    },
    {
        "id": "1a794ae26046a551",
        "type": "inject",
        "z": "c458c3f61cf5894d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 440,
        "wires": [
            [
                "84200e31b199b4cd"
            ]
        ]
    },
    {
        "id": "a44d395b82ceea14",
        "type": "debug",
        "z": "c458c3f61cf5894d",
        "name": "debug 86",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 440,
        "wires": []
    },
    {
        "id": "88c85528a49294de",
        "type": "e-mail",
        "z": "c458c3f61cf5894d",
        "server": "smtp-mail.outlook.com",
        "port": "587",
        "secure": false,
        "tls": true,
        "name": "mailsofshravan@gmail.com",
        "dname": "",
        "x": 600,
        "y": 540,
        "wires": []
    },
    {
        "id": "e767b703250fb0eb",
        "type": "inject",
        "z": "c458c3f61cf5894d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 540,
        "wires": [
            [
                "88c85528a49294de"
            ]
        ]
    },
    {
        "id": "fccbf73acba8d852",
        "type": "http request",
        "z": "fc1716ca544be1e5",
        "name": "readFile",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 540,
        "y": 180,
        "wires": [
            [
                "c8b238963d4eeafd"
            ]
        ]
    },
    {
        "id": "af4fe2ec79a4ef68",
        "type": "function",
        "z": "fc1716ca544be1e5",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\n\n// const fileId = \"5efaaa6b-0471-40d1-9f0f-b1729296faf4-AADHAR_BACK\"\n// const fileId = \"1f4f03e2-e977-43fe-82b5-1aca2adaf8a0-MISCELLANEOUS_DOCUMENT_ADDRESS_PROOF_FORM\"\nconst fileId = \"222eedef-cde8-4aab-8cc7-8debb609e64b-BANK_STATEMENT\"\n\nmsg.fileId = fileId\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/file/read/${fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 180,
        "wires": [
            [
                "fccbf73acba8d852"
            ]
        ]
    },
    {
        "id": "c8b238963d4eeafd",
        "type": "debug",
        "z": "fc1716ca544be1e5",
        "name": "debug 80",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 180,
        "wires": []
    },
    {
        "id": "c9a3c17e4e802aec",
        "type": "function",
        "z": "fc1716ca544be1e5",
        "name": "pdf-lib",
        "func": "const pdf = global.get('pdf')\nconst fs = global.get('fs');\nconst { PDFDocument } = pdf\n\nasync function splitFile() {\n    try {\n        const pdfBytes = fs.readFileSync('/Users/shravanpm/Downloads/traffic_pub_gen19.pdf');\n        const pdfDoc = await PDFDocument.load(pdfBytes);\n\n        const maxFileSizeInBytes = 1024 * 1024; // 1mb\n        const pageCount = pdfDoc.getPageCount();\n        let currentPageIndex = 0;\n        let currentFileSize = 0;\n        let count = 0\n        while (currentPageIndex < pageCount) {\n            let endIndex = currentPageIndex;\n            let newPdfDoc = await PDFDocument.create();\n\n            while (endIndex < pageCount) {\n                const [copiedPage] = await newPdfDoc?.copyPages(pdfDoc, [endIndex]);\n                // const [firstDonorPage] = await pdfDoc.copyPages(firstDonorPdfDoc, [0])\n                newPdfDoc.addPage(copiedPage);\n                console.log({ endIndex })\n                const pdfBytes = await newPdfDoc.save();\n                currentFileSize = pdfBytes.length;\n\n                endIndex++;\n\n                if (currentFileSize > maxFileSizeInBytes) {\n                    break;\n                }\n\n\n            }\n            count = count + 1\n            console.log({ count })\n           \n            const newPdfBytes = await newPdfDoc.save();\n\n            fs.writeFileSync(`/Users/shravanpm/Desktop/log/page${count}.pdf`, newPdfBytes);\n            currentPageIndex = endIndex;\n        }\n    } catch (error) {\n        console.log(\"error\",error)\n    };\n}\n\nsplitFile()\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 460,
        "wires": [
            [
                "84903dc9187f09d6"
            ]
        ]
    },
    {
        "id": "d50a5a9524c1d958",
        "type": "debug",
        "z": "fc1716ca544be1e5",
        "name": "debug 81",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 260,
        "wires": []
    },
    {
        "id": "0fc3dabc924f60d2",
        "type": "base64",
        "z": "fc1716ca544be1e5",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 430,
        "y": 280,
        "wires": [
            [
                "d50a5a9524c1d958",
                "1ffd5d957d54586d"
            ]
        ]
    },
    {
        "id": "ab702dd208980b3b",
        "type": "file",
        "z": "fc1716ca544be1e5",
        "name": "write file",
        "filename": "/Users/shravanpm/Downloads/fileNameTest.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 480,
        "y": 380,
        "wires": [
            [
                "aa96406e24f15f15"
            ]
        ]
    },
    {
        "id": "1ffd5d957d54586d",
        "type": "function",
        "z": "fc1716ca544be1e5",
        "name": "detectMimeType",
        "func": "// const LOCAL_PATH = env.get(\"LOCAL_PATH\")\nconst LOCAL_PATH = \"/Users/shravanpm/Downloads\"\n\nconst signatures = {\n    JVBERi0: \"application/pdf\",\n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"xlsx/xlsx\",\n    PK: \"application/zip\",\n};\n\nlet filePath;\nlet fileName;\nlet extension;\n\nconst base64String = msg.payload;\n\nfor (let ext in signatures) {\n    const base64Sig = base64String.slice(0, ext.length)\n    if (base64Sig === ext) {\n        fileName = \"docsss\"\n        extension = getExtension(ext)\n        filePath = `${LOCAL_PATH}/${\"fileName\"}.${\"txt\"}`\n    }\n}\n\n\nmsg.filePath = filePath\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 380,
        "wires": [
            [
                "ab702dd208980b3b"
            ]
        ]
    },
    {
        "id": "aa96406e24f15f15",
        "type": "debug",
        "z": "fc1716ca544be1e5",
        "name": "debug 82",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 380,
        "wires": []
    },
    {
        "id": "1877bc2695415c79",
        "type": "debug",
        "z": "fc1716ca544be1e5",
        "name": "debug 87",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "bytes",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 140,
        "y": 320,
        "wires": []
    },
    {
        "id": "bbb7817c9218b869",
        "type": "inject",
        "z": "fc1716ca544be1e5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 180,
        "wires": [
            [
                "af4fe2ec79a4ef68"
            ]
        ]
    },
    {
        "id": "753d3b8be5d37ae0",
        "type": "function",
        "z": "fc1716ca544be1e5",
        "name": "node-pdftk",
        "func": "const pdftk = global.get(\"pdftk\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "1f51b5e3e4caeae9",
        "type": "inject",
        "z": "fc1716ca544be1e5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 460,
        "wires": [
            [
                "c9a3c17e4e802aec"
            ]
        ]
    },
    {
        "id": "84903dc9187f09d6",
        "type": "debug",
        "z": "fc1716ca544be1e5",
        "name": "debug 88",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 460,
        "wires": []
    },
    {
        "id": "93f72a5ff7622e69",
        "type": "http request",
        "z": "fc1716ca544be1e5",
        "name": "readFile",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 460,
        "y": 720,
        "wires": [
            [
                "fbdf3da7701cd99c"
            ]
        ]
    },
    {
        "id": "671013b8b8947a0b",
        "type": "function",
        "z": "fc1716ca544be1e5",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\n\n// const fileId = \"5efaaa6b-0471-40d1-9f0f-b1729296faf4-AADHAR_BACK\"\n// const fileId = \"1f4f03e2-e977-43fe-82b5-1aca2adaf8a0-MISCELLANEOUS_DOCUMENT_ADDRESS_PROOF_FORM\"\nconst fileId = \"222eedef-cde8-4aab-8cc7-8debb609e64b-BANK_STATEMENT\"\n\nmsg.fileId = fileId\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/file/read/${fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 720,
        "wires": [
            [
                "93f72a5ff7622e69"
            ]
        ]
    },
    {
        "id": "c507c1ea1db4616d",
        "type": "debug",
        "z": "fc1716ca544be1e5",
        "name": "debug 227",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 820,
        "wires": []
    },
    {
        "id": "f45488b2433e0b95",
        "type": "inject",
        "z": "fc1716ca544be1e5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 720,
        "wires": [
            [
                "671013b8b8947a0b"
            ]
        ]
    },
    {
        "id": "d0851e0f7722cb8c",
        "type": "zip",
        "z": "fc1716ca544be1e5",
        "name": "Compress",
        "mode": "compress",
        "filename": "",
        "compressionlevel": "0",
        "outasstring": false,
        "x": 790,
        "y": 720,
        "wires": [
            [
                "ce3e48cb59e8aba4"
            ]
        ]
    },
    {
        "id": "50b706438450b8c4",
        "type": "file",
        "z": "fc1716ca544be1e5",
        "name": "write file",
        "filename": "/Users/shravanpm/Downloads/fileNameTest.zip",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "base64",
        "x": 400,
        "y": 820,
        "wires": [
            [
                "c507c1ea1db4616d"
            ]
        ]
    },
    {
        "id": "ce3e48cb59e8aba4",
        "type": "base64",
        "z": "fc1716ca544be1e5",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 170,
        "y": 820,
        "wires": [
            [
                "50b706438450b8c4"
            ]
        ]
    },
    {
        "id": "fbdf3da7701cd99c",
        "type": "function",
        "z": "fc1716ca544be1e5",
        "name": "function 160",
        "func": "msg.filename = \"functionName.pdf\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 720,
        "wires": [
            [
                "d0851e0f7722cb8c"
            ]
        ]
    },
    {
        "id": "bad214e123661042",
        "type": "inject",
        "z": "fc1716ca544be1e5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "0602a57e07bf064d",
        "type": "xlsx",
        "z": "fc1716ca544be1e5",
        "name": "",
        "sheets": "first",
        "multi": "one",
        "parse": "rows",
        "map": "",
        "x": 310,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "1fa43f2af3b8fb98",
        "type": "inject",
        "z": "c072707ead15851f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "0f83082e01917bc0"
            ]
        ]
    },
    {
        "id": "0f83082e01917bc0",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "Set env variables",
        "func": "\n// let v8 = global.get(\"v8\");\n// const totalHeapSize = v8.getHeapStatistics().total_available_size;\n// let totalHeapSizeInMB = (totalHeapSize / 1024 / 1024).toFixed(2)\n// node.warn(\"V8 Total Heap Size \"+totalHeapSize+\" bytes\");\n\nconst ENV_VARIABLES = new Map();\n\nENV_VARIABLES.set('PAYLATER_URL', \"https://actyv-platform-paylater-service-v1.qa.actyv.com\")\nENV_VARIABLES.set('GO_URL', \"https://actyv-platform-go-service.qa.actyv.com\")\nENV_VARIABLES.set('ADMIN_URL', \"https://actyv-platform-admin-service.qa.actyv.com\")\n\nENV_VARIABLES.set('BUSINESS_IDENTIFIER', \"ABBCB2066P\")\nENV_VARIABLES.set('BUSINESS_TYPE', \"ENTERPRISE\")\nENV_VARIABLES.set('BANK_KEY', \"msl\")\nENV_VARIABLES.set('X_ACTYV_API_CONFIG_KEY', \"8HhkIWzVMSnSgvlhxr\")\nENV_VARIABLES.set('BANK_UNIQUE_IDENTIFIER', \"AASCA2089A\")\nENV_VARIABLES.set('BASE_URL', \"https://iifl-atlas-uat.finfluxtrial.io\")\nENV_VARIABLES.set('tenant_id', \"iifl-qa\")\nENV_VARIABLES.set('BANK_PRODUCT_KEY', \"axis-sabari-product\")\n\nENV_VARIABLES.set('BNPL_ENTERPRISE_USER', \"surajkumar@aplapollo.com\")\nENV_VARIABLES.set('BNPL_BANK_USER', \"vivekanand.t@sgfinserv.in\")\nENV_VARIABLES.set('BNPL_USER_PASSWORD', \"890ioP@12\")\nENV_VARIABLES.set('IIFL_USER', \"demoUser2\")\nENV_VARIABLES.set('IIFL_USER_PASSWORD', \"fc895Tbr2i&w@\")\n\nglobal.set('envVariables', ENV_VARIABLES)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 80,
        "wires": [
            [
                "da6b74c88335821d"
            ]
        ]
    },
    {
        "id": "da6b74c88335821d",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst ENTERPRISE_USER_EMAIL = env.get('ENTERPRISE_USER_EMAIL')\nconst ENTERPRISE_USER_PASSWORD = env.get('ENTERPRISE_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": ENTERPRISE_USER_PASSWORD,\n    \"email\": ENTERPRISE_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 180,
        "wires": [
            [
                "f4d9f567bf7cf402"
            ]
        ]
    },
    {
        "id": "21026d5b89bcb057",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "saveEnterpriseToken",
        "func": "flow.set(\"enterpriseToken\",msg.payload.idToken)\n// console.log(msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 180,
        "wires": [
            [
                "5b71fdd009e07ea6"
            ]
        ]
    },
    {
        "id": "5b71fdd009e07ea6",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "AuthenticateBankUserReq",
        "func": "\nconst BANK_USER_EMAIL = env.get('BANK_USER_EMAIL')\nconst BANK_USER_PASSWORD = env.get('BANK_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": BANK_USER_PASSWORD,\n    \"email\": BANK_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 260,
        "wires": [
            [
                "30401113ced7e5a5"
            ]
        ]
    },
    {
        "id": "aeaddacd741519ac",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "saveBankToken",
        "func": "flow.set(\"bankToken\",msg.payload.idToken)\n// console.log(msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 260,
        "wires": [
            [
                "cc7886f1fef42efc"
            ]
        ]
    },
    {
        "id": "cc7886f1fef42efc",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "AuthenticateIIFLUserReq",
        "func": "const IIFL_USER = env.get('IIFL_USER')\nconst IIFL_USER_PASSWORD = env.get('IIFL_USER_PASSWORD')\nconst IIFL_URL = env.get('IIFL_URL');\n\n\nmsg.url = `${IIFL_URL}/api/auth/login`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": IIFL_USER_PASSWORD,\n        \"userName\": IIFL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 360,
        "wires": [
            [
                "93a477f5e2c398e2"
            ]
        ]
    },
    {
        "id": "aecdbf6fba687548",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "saveIIFLToken",
        "func": "flow.set(\"iiflToken\", msg.payload.accessToken)\nconsole.log({token:msg.payload})\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 360,
        "wires": [
            [
                "2136ac10a3d57240"
            ]
        ]
    },
    {
        "id": "7a2ea784a96c4105",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "debug 337",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 320,
        "wires": []
    },
    {
        "id": "2136ac10a3d57240",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "getBankProductKeyReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\n\nmsg.url = `${GO_URL}/bank-application-config/key/${BANK_PRODUCT_KEY}`\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 460,
        "wires": [
            [
                "ee744e0fcc9ecdfa"
            ]
        ]
    },
    {
        "id": "63d14a722b073e6c",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "bankProductConfig",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 460,
        "wires": []
    },
    {
        "id": "a52bc54dc6055e32",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "getPendingBankApplicationsReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\n\nmsg.bankId = msg.payload.bank\nmsg.enterpriseId = msg.payload.allowedEnterprises[0]\n\nmsg.url = `${GO_URL}/bank-application?bankID=${msg.bankId}&enterpriseID=${msg.enterpriseId}`\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 580,
        "wires": [
            [
                "9e5a8c0ebac37335"
            ]
        ]
    },
    {
        "id": "d8fea977fdfee702",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "pendingBankApplications",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 580,
        "wires": []
    },
    {
        "id": "f9214bb840246b1c",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "mockBankApplication",
        "func": "msg.payload = [\n    {\n        \"_id\": \"63ff1b2f723b070cae7c09c0\",\n        \"createdOn\": \"Tue, 21 Feb 2023 11:32:41 GMT\",\n        \"createdBy\": \"63750a1995a6a16f696d2f7b\",\n        \"updatedOn\": \"Tue, 21 Feb 2023 11:32:42 GMT\",\n        \"isDeleted\": false,\n        \"bankApplicationDocumentConfigKey\": \"63cfbc85edee8f7eee6f3d6e\",\n        \"bankName\": \"Axis Bank Limited\",\n        \"productFamily\": \"PAYLATER\",\n        \"productType\": \"PAYLATER\",\n        \"status\": \"DOCUMENT_CAPTURE\",\n        \"businessPartnerName\": \"Shri Durga Metalex\",\n        \"businessPartnerID\": \"63750a19ca608a344ae556d6\",\n        \"productGranularity\": \"product\",\n        \"bankProductConfigId\": \"63cfbe250c729962c86ec8a7\",\n        \"bankId\": \"63c8fa075f1c5afda77bae5e\",\n        \"bankApplicationLabel\": \"Continue Bank Application\",\n        \"bankApplicationURL\": \"www.google.com\",\n        \"enterpriseId\": \"638c73f16ea52ce57470c1a9\",\n        \"approvedLimit\": null,\n        \"availableLimit\": null\n    }\n]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 660,
        "wires": [
            [
                "28e71d8e924592d9"
            ]
        ]
    },
    {
        "id": "28e71d8e924592d9",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "LoopOverBankApplication",
        "func": "\nfor(let bankApplication of msg.payload){\n    // console.log({bankApplication})\n    node.send({\n        businessPartnerId: bankApplication.businessPartnerID,\n        bankId: bankApplication.bankId,\n        enterpriseId: bankApplication.enterpriseId,\n        bankProductConfigId: bankApplication.bankProductConfigId,\n        bankApplicationId : bankApplication._id,\n        dataPartDone: \"false\"\n    })\n}\n\n// return msg;\n\n/**\n *  \"_id\": \"63f4abd94f0acc5aa73d9e46\",\n        \"createdOn\": \"Tue, 21 Feb 2023 11:32:41 GMT\",\n        \"createdBy\": \"63750a1995a6a16f696d2f7b\",\n        \"updatedOn\": \"Tue, 21 Feb 2023 11:32:42 GMT\",\n        \"isDeleted\": false,\n        \"bankApplicationDocumentConfigKey\": \"63cfbc85edee8f7eee6f3d6e\",\n        \"bankName\": \"Axis Bank Limited\",\n        \"productFamily\": \"PAYLATER\",\n        \"productType\": \"PAYLATER\",\n        \"status\": \"DOCUMENT_CAPTURE\",\n        \"businessPartnerName\": \"Shri Durga Metalex\",\n        \"businessPartnerID\": \"63750a19ca608a344ae556d6\",\n        \"productGranularity\": \"product\",\n        \"bankProductConfigId\": \"63cfbe250c729962c86ec8a7\",\n        \"bankId\": \"63c8fa075f1c5afda77bae5e\",\n        \"bankApplicationLabel\": \"Continue Bank Application\",\n        \"bankApplicationURL\": \"www.google.com\",\n        \"enterpriseId\": \"638c73f16ea52ce57470c1a9\",\n        \"approvedLimit\": null,\n        \"availableLimit\": null\n */",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 660,
        "wires": [
            [
                "b1122ed4b0f22997",
                "1e56588ffd448348"
            ]
        ]
    },
    {
        "id": "b1122ed4b0f22997",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "bankApplication",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 660,
        "wires": []
    },
    {
        "id": "1e56588ffd448348",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "getDealerCodeReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/business-relationship/${msg.businessPartnerId}/${msg.enterpriseId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${enterpriseToken}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 720,
        "wires": [
            [
                "25f99a756561c5ad"
            ]
        ]
    },
    {
        "id": "7a8b62f3fd366925",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "debug 338",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 720,
        "wires": []
    },
    {
        "id": "789d0b1d321f81f1",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "getVCLIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/find-field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflVclId\",\n   \n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 780,
        "wires": [
            [
                "5a979cf5abf9d1e3"
            ]
        ]
    },
    {
        "id": "4a9a80589aac2205",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "getVCLId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 780,
        "wires": []
    },
    {
        "id": "9d9d4180d07bdbed",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "getClientIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/find-field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.vclId = msg.payload[0].value\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflClientId\",\n   \n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 840,
        "wires": [
            [
                "a5a6bdda7724c9bd"
            ]
        ]
    },
    {
        "id": "74b4d9d3a3b05ebb",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "getClientId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 840,
        "wires": []
    },
    {
        "id": "8925f1ba65c0f704",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "getLeadIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${env.get(\"GO_URL\")}/field-value/find-field-value`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.clientId = msg.payload[0].value\n\nmsg.payload = {\n    \"key\": \"iiflLeadId\",\n    \n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 900,
        "wires": [
            [
                "7485db98a70cb71c"
            ]
        ]
    },
    {
        "id": "375c0d65cde9473d",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "saveLeadId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 900,
        "wires": []
    },
    {
        "id": "aaba1ee958fa1d7b",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "getEsignIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/find-field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\n\nmsg.leadId = msg.payload[0].value\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflEsignId\",\n\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 960,
        "wires": [
            [
                "3e416aed76ae5631"
            ]
        ]
    },
    {
        "id": "767941538e28c76b",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "saveEsignId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 960,
        "wires": []
    },
    {
        "id": "e0e349821a76e0ac",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "getE-signStatusReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\nmsg.eSignId = msg.payload[0].value\n\nmsg.url = `${IIFL_URL}/api/leads/${msg.leadId}/esign/status/${msg.eSignId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1120,
        "wires": [
            [
                "f2b394eec7a014bf"
            ]
        ]
    },
    {
        "id": "164d696c3f019bbe",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "getE-signStatus",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 1120,
        "wires": []
    },
    {
        "id": "dfa42e03d268f3bb",
        "type": "switch",
        "z": "c072707ead15851f",
        "name": "",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "COMPLETED_SUCCESSFULLY",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 230,
        "y": 1180,
        "wires": [
            [
                "2e778d01ae2a24ca"
            ]
        ]
    },
    {
        "id": "2e778d01ae2a24ca",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "activateVclReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${BASE_URL}/api/virtual-credit-line/${msg.vclId}/activate`\nmsg.method = \"PUT\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1280,
        "wires": [
            [
                "b04ddc3f69307908"
            ]
        ]
    },
    {
        "id": "00407283273d4db3",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "activateVcl",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1280,
        "wires": []
    },
    {
        "id": "13dd5d5ac7d7ade7",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "getVclReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${BASE_URL}/api/leads/${msg.leadId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 1420,
        "wires": [
            [
                "b120351d8ba6efe7"
            ]
        ]
    },
    {
        "id": "778f5cf4f4dd4885",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "getVCL",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 1420,
        "wires": []
    },
    {
        "id": "0904cad0dbdcec41",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "createLoanTermReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\nconst bankToken = flow.get(\"bankToken\")\n\nmsg.vcl = msg.payload\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization:`Bearer ${bankToken}`,\n    bankid:msg.bankid\n}\nmsg.payload = {\n    \"bankID\": msg.bankId,\n    \"borrowerID\": msg.businessPartnerId,\n    \"enterpriseID\": msg.enterpriseId,\n    \"productType\": \"BNPL\",\n    \"rateOfInterest\": msg.payload.rateOfInterest\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1500,
        "wires": [
            [
                "0c47b3e7b066c1e1"
            ]
        ]
    },
    {
        "id": "7890ffd32d068ece",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "createLoanTerm",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1500,
        "wires": []
    },
    {
        "id": "15fa8c0d6b8e7ee2",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "getVclReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nmsg.loanId = msg.payload.id\n\n\nmsg.url = `${IIFL_URL}/api/clients/${msg.clientId}/virtual-credit-line`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 1580,
        "wires": [
            [
                "c52676864a1fac03"
            ]
        ]
    },
    {
        "id": "003a2bfca14ad556",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "getVCL",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 1580,
        "wires": []
    },
    {
        "id": "08bb870a7d14ac96",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "updateLoanTermReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\nconst actyvBankToken = flow.get(\"actyvBankToken\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.vcl = msg.payload\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/service/update`\nmsg.method = \"PATCH\"\n\nmsg.headers = {\n    Authorization : `Bearer ${actyvBankToken}`,\n    bankid: msg.bankId,\n    \"x-actyv-api-config\":X_ACTYV_API_CONFIG_KEY\n    \n}\n\nmsg.payload = {\n    \"loanTermsID\": msg.loanId,\n    \"approvedLimit\": msg.vcl.availableLimit,\n    \"validTill\": msg.virtualCreditLines[0].expiryDate,\n    \"bankProvidedLoanCodes\": msg.clientId,\n    \"roi\": msg.vcl.rateOfInterest,\n   \n    \"loanGrantStatus\": \"APPROVED\",\n    \"crnNumber\": msg.virtualCreditLines[0].accountNo,//msg.clientId,\n    \"awaitingBalanceRefresh\": true,\n    \"businessType\": \"VENDOR\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1660,
        "wires": [
            [
                "81b5e84b062f9344"
            ]
        ]
    },
    {
        "id": "2e4929ed23f08776",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "updateLoanTerm",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1660,
        "wires": []
    },
    {
        "id": "89fade42183290f5",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "createBankDistributorReq",
        "func": "const X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/business-relationship/service`\nmsg.method = \"POST\"\nmsg.headers = {\n    \"x-actyv-api-config\": X_ACTYV_API_CONFIG_KEY,\n    Authorization : `Bearer ${enterpriseToken}`\n}\n\nmsg.payload = {\n    \"businessId\": msg.businessPartnerId,\n    \"parentBusinessId\": msg.bankId,\n    \"identifierByParent\": msg.vclId,\n    \"bankAccountNumber\": \"string\",\n    \"bankIFSC\": \"string\",\n    \"bankName\": \"string\",\n    \"relationType\": \"DISTRIBUTOR-BANK\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1760,
        "wires": [
            [
                "7f052515a1be9a49"
            ]
        ]
    },
    {
        "id": "9bff150159647b75",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "debug 263",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1760,
        "wires": []
    },
    {
        "id": "f4d9f567bf7cf402",
        "type": "subflow:0cbd918f05921aae",
        "z": "c072707ead15851f",
        "name": "AuthenticateEnterpriseUser",
        "x": 500,
        "y": 180,
        "wires": [
            [
                "21026d5b89bcb057"
            ],
            []
        ]
    },
    {
        "id": "30401113ced7e5a5",
        "type": "subflow:0cbd918f05921aae",
        "z": "c072707ead15851f",
        "name": "AuthenticateBankUse",
        "x": 540,
        "y": 260,
        "wires": [
            [
                "aeaddacd741519ac"
            ],
            []
        ]
    },
    {
        "id": "93a477f5e2c398e2",
        "type": "subflow:0cbd918f05921aae",
        "z": "c072707ead15851f",
        "name": "AuthenticateIIFLUser",
        "x": 480,
        "y": 360,
        "wires": [
            [
                "aecdbf6fba687548",
                "7a2ea784a96c4105"
            ],
            []
        ]
    },
    {
        "id": "ee744e0fcc9ecdfa",
        "type": "subflow:0cbd918f05921aae",
        "z": "c072707ead15851f",
        "name": "getBankProductKey",
        "x": 460,
        "y": 460,
        "wires": [
            [
                "63d14a722b073e6c",
                "a52bc54dc6055e32"
            ],
            []
        ]
    },
    {
        "id": "9e5a8c0ebac37335",
        "type": "subflow:0cbd918f05921aae",
        "z": "c072707ead15851f",
        "name": "getPendingBankApplications",
        "x": 520,
        "y": 580,
        "wires": [
            [
                "d8fea977fdfee702",
                "f9214bb840246b1c"
            ],
            []
        ]
    },
    {
        "id": "25f99a756561c5ad",
        "type": "subflow:0cbd918f05921aae",
        "z": "c072707ead15851f",
        "name": "getDealerCode",
        "x": 460,
        "y": 720,
        "wires": [
            [
                "789d0b1d321f81f1",
                "7a8b62f3fd366925"
            ],
            []
        ]
    },
    {
        "id": "5a979cf5abf9d1e3",
        "type": "subflow:0cbd918f05921aae",
        "z": "c072707ead15851f",
        "d": true,
        "name": "getVCLId",
        "x": 440,
        "y": 780,
        "wires": [
            [
                "4a9a80589aac2205",
                "9d9d4180d07bdbed"
            ],
            []
        ]
    },
    {
        "id": "a5a6bdda7724c9bd",
        "type": "subflow:0cbd918f05921aae",
        "z": "c072707ead15851f",
        "d": true,
        "name": "getClientId",
        "x": 470,
        "y": 840,
        "wires": [
            [
                "74b4d9d3a3b05ebb",
                "8925f1ba65c0f704"
            ],
            []
        ]
    },
    {
        "id": "7485db98a70cb71c",
        "type": "subflow:0cbd918f05921aae",
        "z": "c072707ead15851f",
        "d": true,
        "name": "getLeadId",
        "x": 480,
        "y": 900,
        "wires": [
            [
                "375c0d65cde9473d",
                "aaba1ee958fa1d7b"
            ],
            []
        ]
    },
    {
        "id": "3e416aed76ae5631",
        "type": "subflow:0cbd918f05921aae",
        "z": "c072707ead15851f",
        "name": "getEsignId",
        "x": 410,
        "y": 960,
        "wires": [
            [
                "767941538e28c76b",
                "e0e349821a76e0ac"
            ],
            []
        ]
    },
    {
        "id": "f2b394eec7a014bf",
        "type": "subflow:0cbd918f05921aae",
        "z": "c072707ead15851f",
        "name": "getE-signStatus",
        "x": 500,
        "y": 1120,
        "wires": [
            [
                "164d696c3f019bbe",
                "dfa42e03d268f3bb"
            ],
            []
        ]
    },
    {
        "id": "b04ddc3f69307908",
        "type": "subflow:0cbd918f05921aae",
        "z": "c072707ead15851f",
        "name": "activateVcl",
        "x": 430,
        "y": 1280,
        "wires": [
            [
                "00407283273d4db3",
                "13dd5d5ac7d7ade7"
            ],
            []
        ]
    },
    {
        "id": "b120351d8ba6efe7",
        "type": "subflow:0cbd918f05921aae",
        "z": "c072707ead15851f",
        "name": "getVCL",
        "x": 460,
        "y": 1420,
        "wires": [
            [
                "778f5cf4f4dd4885",
                "0904cad0dbdcec41"
            ],
            []
        ]
    },
    {
        "id": "c52676864a1fac03",
        "type": "subflow:0cbd918f05921aae",
        "z": "c072707ead15851f",
        "name": "getVCL",
        "x": 480,
        "y": 1580,
        "wires": [
            [
                "003a2bfca14ad556",
                "08bb870a7d14ac96"
            ],
            []
        ]
    },
    {
        "id": "0c47b3e7b066c1e1",
        "type": "subflow:0cbd918f05921aae",
        "z": "c072707ead15851f",
        "name": "createLoanTerm",
        "x": 440,
        "y": 1500,
        "wires": [
            [
                "7890ffd32d068ece",
                "15fa8c0d6b8e7ee2"
            ],
            []
        ]
    },
    {
        "id": "81b5e84b062f9344",
        "type": "subflow:0cbd918f05921aae",
        "z": "c072707ead15851f",
        "name": "updateLoanTerm",
        "x": 470,
        "y": 1660,
        "wires": [
            [
                "2e4929ed23f08776",
                "89fade42183290f5"
            ],
            []
        ]
    },
    {
        "id": "7f052515a1be9a49",
        "type": "subflow:0cbd918f05921aae",
        "z": "c072707ead15851f",
        "name": "createBankDistributor",
        "x": 480,
        "y": 1760,
        "wires": [
            [
                "9bff150159647b75"
            ],
            []
        ]
    },
    {
        "id": "96d98bf5611b99e7",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "getBusinsessPartnerReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\n// console.log({ X_ACTYV_API_CONFIG_KEY, GO_URL })\nconst row = msg.payload\n\nmsg.url = `${GO_URL}/business-partner/service/XX${row[\"Pan Card\"]}XXX`\nmsg.method = 'GET'\nmsg.headers = {};\nmsg.headers['x-actyv-api-config-key'] = X_ACTYV_API_CONFIG_KEY;\n\nmsg.row = row\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1160,
        "wires": [
            [
                "9fa3adf21a3e09dd"
            ]
        ]
    },
    {
        "id": "9fa3adf21a3e09dd",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "getBusinessPartner",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 470,
        "y": 1160,
        "wires": [
            [
                "2d97946698b6174d",
                "b5b1dcf3cdea65e1"
            ]
        ]
    },
    {
        "id": "2d97946698b6174d",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "getBusinessPartner",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1160,
        "wires": []
    },
    {
        "id": "b5b1dcf3cdea65e1",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "getBankProductConfigReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\n\nflow.set('businessPartnerId', msg.payload._id)\nmsg.businessPartnerId = msg.payload._id\n\nmsg.url = `${GO_URL}/bank-application-config/key/${BANK_PRODUCT_KEY}`\nmsg.method = 'GET'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1280,
        "wires": [
            [
                "3adc56c34d64ba36"
            ]
        ]
    },
    {
        "id": "3adc56c34d64ba36",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "getBankProductConfig",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 460,
        "y": 1280,
        "wires": [
            [
                "2b2bff84df2281fb",
                "8c0e426c5fece3fe"
            ]
        ]
    },
    {
        "id": "2b2bff84df2281fb",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "getAllBankApplicationReq",
        "func": "const GO_URL = env.get('GO_URL')\n\nconst businessPartnerId = flow.get('businessPartnerId') || \"\"\n\nflow.set('bankProductConfigId', msg.payload.id)\nconst bankId = msg.payload.bank\nmsg.bankId = bankId\nmsg.enterpriseId = msg.payload.allowedEnterprises[0]\n\nmsg.url = `${GO_URL}/bank-application?bankID=${bankId}&businessPartner=${businessPartnerId}&bankProductConfigKey=${msg.payload.id}`\nconsole.log(\"URL\",msg.url)\nmsg.method = 'GET'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1380,
        "wires": [
            [
                "3f3b20a915cc4d0e"
            ]
        ]
    },
    {
        "id": "8c0e426c5fece3fe",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "getBankProduct",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 1280,
        "wires": []
    },
    {
        "id": "3f3b20a915cc4d0e",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "getAllBankApplication",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 460,
        "y": 1380,
        "wires": [
            [
                "8d91d1144fa961c7",
                "f7b8aff814cbb834"
            ]
        ]
    },
    {
        "id": "8d91d1144fa961c7",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "updateBankApplicationStatusReq",
        "func": "const GO_URL = env.get('GO_URL')\n\nconst token = flow.get(\"token\")\n\nmsg.url = `${GO_URL}/bank-application/decision/update`\nmsg.method = 'POST'\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.payload = {\n    remarks: msg.row[\"Reason For rejection\"], // actual message\n    // remarks: \"APPROVE\", // actual message\n    decision: {\n        label: msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? \"Approve\" : \"Reject\",\n        value: msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? \"APPROVE\" : \"REJECT\",\n        // value: false ? \"APPROVE\" : \"REJECT\",\n        variableName: \"bankapprover_action\",\n        actionType: \"DECISION\",\n    },\n    bankApplicationId: msg.payload[0]._id || \"63fc9febc7d9bb697685ab4a\",\n    correctionItems: {\n        documentIds: [],\n    },\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1560,
        "wires": [
            [
                "801fd995f2e8ff63"
            ]
        ]
    },
    {
        "id": "f7b8aff814cbb834",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "getAllBankApplications",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 1380,
        "wires": []
    },
    {
        "id": "801fd995f2e8ff63",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "updateBankApplicationStatus",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 490,
        "y": 1560,
        "wires": [
            [
                "9f0213676e1804f9",
                "d7eb43486e56b9c9"
            ]
        ]
    },
    {
        "id": "9f0213676e1804f9",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "debug 235",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1500,
        "wires": []
    },
    {
        "id": "d7eb43486e56b9c9",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "createLoanTermReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst bankAccount = flow.get(\"bankAccount\") || {}\n\nconst bankDetails = flow.get('bankDetails') || {}\nconst businessPartnerId = flow.get('businessPartnerId')\n\n\nconst enterpriseID = msg.enterpriseId\nconst bankId = msg.bankId\n\nconst row = msg.row\n\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.headers = {\n        Authorization: `Bearer ${actyvToken}`\n}\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms`\nmsg.method = 'POST'\n\nmsg.payload = {\n        bankID: bankId,\n        borrowerID: businessPartnerId,\n        enterpriseID,\n        productType: \"BNPL\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1700,
        "wires": [
            [
                "0456f1f1bb30bb5f"
            ]
        ]
    },
    {
        "id": "0456f1f1bb30bb5f",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "createLoanTerm",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 460,
        "y": 1700,
        "wires": [
            [
                "45e2ae4877c62511",
                "411a7c42864ac576"
            ]
        ]
    },
    {
        "id": "45e2ae4877c62511",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "debug 236",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 1700,
        "wires": []
    },
    {
        "id": "411a7c42864ac576",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "updateLoanTermReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst row = msg.row\n\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.headers = {\n        Authorization: `Bearer ${actyvToken}`,\n        \"x-actyv-api-config\":X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/service/update`\nmsg.method = 'PATCH',\n\nmsg.payload = {\n        loanTermsID: msg.payload.id,\n        approvedLimit: msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? row[\"Sanction amount\"] : 0,\n        // loanAmount: row[\"Loan Accepted Amount\"],\n        loanAmount: 0,\n        crnNumber: row[\"Dealer Code\"],\n        validTill: msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? calculateValidTill(row[\"Updated Date\"]) : \"\",\n        loanGrantStatus: msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? \"APPROVED\" : \"REJECTED\",\n        bankProvidedLoanCodes: msg.row[\"Loan Account No\"]\n}\n\nfunction calculateValidTill(inputDate){\n        let date = inputDate\n        let split = date.split(\"/\")\n        let addOneYear = Number(split[split.length - 1]) + 1\n        split[split.length - 1] = addOneYear\n        let joined = split.join('-')\n        return joined\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1820,
        "wires": [
            [
                "5e037c3cb5e2feb0"
            ]
        ]
    },
    {
        "id": "5e037c3cb5e2feb0",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "updateLoanTerm",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 470,
        "y": 1820,
        "wires": [
            [
                "d813b4aabd7040bc"
            ]
        ]
    },
    {
        "id": "d813b4aabd7040bc",
        "type": "switch",
        "z": "c8388b64545e95b6",
        "name": "",
        "property": "row[\"Loan Approved (Y/N)\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "N",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Y",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 1820,
        "wires": [
            [
                "924d4ff38e8b161d"
            ],
            [
                "bdb757d73d66b370"
            ]
        ]
    },
    {
        "id": "924d4ff38e8b161d",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "debug 237",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 1800,
        "wires": []
    },
    {
        "id": "bdb757d73d66b370",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "createTernorAndRateSpreadReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst bankAccount = flow.get(\"bankAccount\") || {}\nconst bankDetails = flow.get('bankDetails') || {}\nconst benchmarkRateID = flow.get(\"benchmarkRateID\") || \"\"\n\nconsole.log(\"benchmarkRateID\", benchmarkRateID)\n\nconst bankId = msg.bankId\n\nconst row = msg.row\n\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.headers = {\n        Authorization: `Bearer ${actyvToken}`,\n        bankid:bankId\n}\n\nmsg.url = `${PAYLATER_URL}/v1/tenor-and-rate-spread`\nmsg.method = 'POST'\nmsg.payload = {\n        bankID: bankId,\n        loanID: msg.payload.id,\n        fromDuration: \"P0D\",\n        benchmarkRateID: benchmarkRateID,\n        toDuration: \"P45D\",\n        loanProductID: \"BNPL\",\n        bankSpread: row[\"ROI\"],\n        actyvSpread: 1,\n        additionalCashbackCodes: []\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1920,
        "wires": [
            [
                "2e506a1a40e1bddb"
            ]
        ]
    },
    {
        "id": "2e506a1a40e1bddb",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "createTenorAndRateSpread",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 480,
        "y": 1920,
        "wires": [
            [
                "bca40386f64a4687",
                "702410267a4fd5a9"
            ]
        ]
    },
    {
        "id": "bca40386f64a4687",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "setTenorAndRateSpreadId",
        "func": "flow.set(\"tenorAndRateSpreadId\",msg.payload.id)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1920,
        "wires": [
            [
                "103d024432c5abf3"
            ]
        ]
    },
    {
        "id": "702410267a4fd5a9",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "createBusinessRelationship(D-B)Req",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst bankAccount = flow.get(\"bankAccount\") || {}\nconst bankDetails = flow.get('bankDetails') || {}\n\nconst {  bankAccountNo,\n        bankIfsc,\n        bankName, } = bankAccount\n\nconst enterpriseId = msg.enterpriseId\nconst bankId = msg.bankId\nconst businessPartnerId = flow.get('businessPartnerId') || \"\"\n\nconst row = msg.row\n\nmsg.url = `${GO_URL}/business-relationship/service`\nmsg.method = 'POST'\nmsg.headers = {};\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = {\n        businessId: businessPartnerId,\n        parentBusinessId: enterpriseId,\n        identifierByParent: row[\"Dealer Code\"],\n        bankAccountNumber: bankAccountNo,\n        bankIFSC: bankIfsc,\n        bankName: bankName,\n        relationType: \"DISTRIBUTOR-BANK\"\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 2060,
        "wires": [
            [
                "7e77bd149a2b15a3"
            ]
        ]
    },
    {
        "id": "103d024432c5abf3",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "debug 238",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 1920,
        "wires": []
    },
    {
        "id": "7e77bd149a2b15a3",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "createBusinessRelationship(D-B)",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 500,
        "y": 2060,
        "wires": [
            [
                "b16584432ce9a7c9"
            ]
        ]
    },
    {
        "id": "b16584432ce9a7c9",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "createBusinessRelationship(D-B)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 2060,
        "wires": []
    },
    {
        "id": "64a93ca2489e5e51",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "Loop",
        "func": "\n\nfor(let row of msg.payload){\n\nnode.send({\n    payload:row,\n    isComplete : \"false\"\n});\n}\n\nmsg.isComplete = \"true\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 1020,
        "wires": [
            [
                "3b6efcdb3409acdf"
            ]
        ]
    },
    {
        "id": "3b6efcdb3409acdf",
        "type": "switch",
        "z": "c8388b64545e95b6",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 1020,
        "wires": [
            [],
            [
                "96d98bf5611b99e7"
            ]
        ]
    },
    {
        "id": "bc182e6c9cb87c64",
        "type": "node-red-contrib-graph-oauth-login",
        "z": "c8388b64545e95b6",
        "name": "",
        "scope": "https://graph.microsoft.com/.default",
        "redirecturi": "",
        "code": "",
        "encoding": false,
        "logintype": "Application",
        "refreshtimer": "10",
        "x": 130,
        "y": 420,
        "wires": [
            [
                "0a60278894a31394"
            ]
        ]
    },
    {
        "id": "a8de946bf9850971",
        "type": "inject",
        "z": "c8388b64545e95b6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "0a60278894a31394",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "Get All Messages",
        "func": "let data=msg.payload;\nflow.set(\"token\",msg.at);\n// let userID=\"User Id from microsoft Graph\"\n\nlet userID = env.get(\"OUTLOOKUSERID\")\nlet sender =\"from:gargayush456@gmail.com\"\n//2023 - 03 - 31T04: 53: 15.736Z\nconst date = moment().toISOString().split(\"T\")[0].split(\"-\")\nconst today = `${date[2]}/${date[1]}/${date[0]}`\nconsole.log({token:msg.at})\n\n// msg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages?$search=\"from:ramu.bugudi@actyv.com\"`\nmsg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages?$search=\"received:${today} AND from:mshravan142@gmail.com\"`\n// msg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages?$filter=Subject in 'lead push' and importance eq 'normal'&$orderby=subject,importance,receivedDateTime desc`\nmsg.method=\"GET\";\nmsg.headers={\n    // \"Authorization\":`${data.access_token}`\n    \"Authorization\": `${msg.at}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 370,
        "y": 420,
        "wires": [
            [
                "113e28cbd1472770"
            ]
        ]
    },
    {
        "id": "113e28cbd1472770",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 390,
        "y": 500,
        "wires": [
            [
                "9c73c8d7b5a7fbfb"
            ]
        ]
    },
    {
        "id": "9e07c5b5a40947a6",
        "type": "inject",
        "z": "c8388b64545e95b6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 200,
        "wires": [
            [
                "701ea1cfddbf0260"
            ]
        ]
    },
    {
        "id": "7e2fafd53187b004",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "Searching Attachment",
        "func": "let data = msg.payload;\nlet token=flow.get(\"token\");\nflow.set(\"msg\",data);\nlet userID = env.get(\"OUTLOOKUSERID\")\n// msg.url = `https://graph.microsoft.com/v1.0/users/1870cd49-a831-4b52-ba5e-b680441f9f70/messages/${data.id}/attachments`\nmsg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages/${data.id}/attachments`\n\nmsg.method = \"GET\";\nmsg.headers = {\n    // \"Authorization\": `${token.access_token}`\n    \"Authorization\": `${token}`\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 640,
        "wires": [
            [
                "2e3c729878e92353"
            ]
        ]
    },
    {
        "id": "2e3c729878e92353",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 640,
        "wires": [
            [
                "83673e1b9559aace",
                "e29c88dec3870a8d"
            ]
        ]
    },
    {
        "id": "83673e1b9559aace",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "debug 245",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 640,
        "wires": []
    },
    {
        "id": "9c73c8d7b5a7fbfb",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "each Msg",
        "func": "// let data=msg.payload;\nlet data = msg.payload.value;\n\n// console.log({valubhchnve:msg.value})\n\n\n// let parsedData = msg.payload.value\n// console.log(\"dsfd\", parsedData)\nfor (let index = 0; index < data.length; index++) {\n    // console.log(\"dhvhsgav\",data[index])\n    node.send({payload:data[index]});\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 500,
        "wires": [
            [
                "7e2fafd53187b004"
            ]
        ]
    },
    {
        "id": "f69b26a2f9d52e38",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "debug 246",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 880,
        "wires": []
    },
    {
        "id": "44a8720b112fbbc7",
        "type": "book",
        "z": "c8388b64545e95b6",
        "name": "",
        "raw": false,
        "x": 150,
        "y": 880,
        "wires": [
            [
                "70f911c713eeadbe"
            ]
        ]
    },
    {
        "id": "70f911c713eeadbe",
        "type": "sheet",
        "z": "c8388b64545e95b6",
        "name": "",
        "sheetName": "Sheet1",
        "x": 290,
        "y": 880,
        "wires": [
            [
                "0578820f894f482b"
            ]
        ]
    },
    {
        "id": "0578820f894f482b",
        "type": "sheet-to-json",
        "z": "c8388b64545e95b6",
        "name": "",
        "raw": "false",
        "range": "",
        "header": "default",
        "blankrows": false,
        "x": 490,
        "y": 880,
        "wires": [
            [
                "f69b26a2f9d52e38",
                "64a93ca2489e5e51"
            ]
        ]
    },
    {
        "id": "e29c88dec3870a8d",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "function 162",
        "func": "let data=msg.payload;\n\nmsg.payload = data.value[0].contentBytes.toString();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 740,
        "wires": [
            [
                "f9d25bef865b2f3e"
            ]
        ]
    },
    {
        "id": "f9d25bef865b2f3e",
        "type": "base64",
        "z": "c8388b64545e95b6",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 760,
        "y": 740,
        "wires": [
            [
                "44a8720b112fbbc7"
            ]
        ]
    },
    {
        "id": "26bf47bca542c04f",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 280,
        "wires": [
            [
                "bc182e6c9cb87c64"
            ]
        ]
    },
    {
        "id": "2fb5df234f8e402e",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "AuthenticateBNPLUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 280,
        "wires": [
            [
                "26bf47bca542c04f"
            ]
        ]
    },
    {
        "id": "701ea1cfddbf0260",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "AuthenticateBNPLUserReq",
        "func": "// const envVariables = global.get('envVariables')\nconst BNPL_USER = env.get('BNPL_USER')\nconst BNPL_USER_PASSWORD = env.get('BNPL_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": BNPL_USER_PASSWORD,\n    \"email\": BNPL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 280,
        "wires": [
            [
                "2fb5df234f8e402e",
                "5d1860af97196436"
            ]
        ]
    },
    {
        "id": "5d1860af97196436",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "debug 247",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 200,
        "wires": []
    },
    {
        "id": "4a5967710ee356b2",
        "type": "comment",
        "z": "c8388b64545e95b6",
        "name": "hardcoded bank applicationId",
        "info": "",
        "x": 320,
        "y": 1520,
        "wires": []
    },
    {
        "id": "25d026dd81300a48",
        "type": "inject",
        "z": "fb44a60890b22361",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "ceafe6cf5c347561"
            ]
        ]
    },
    {
        "id": "ceafe6cf5c347561",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "getAllBanks",
        "func": "\nconst BANK_USER_EMAIL = env.get('BANK_USER_EMAIL')\nconst BANK_USER_PASSWORD = env.get('BANK_USER_PASSWORD')\nconst GO_URL = env.get('GO_URL');\n\n\nmsg.url = `${GO_URL}/bank`;\nmsg.method = \"GET\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 260,
        "wires": [
            [
                "41c027f4dc64517c"
            ]
        ]
    },
    {
        "id": "41c027f4dc64517c",
        "type": "http request",
        "z": "fb44a60890b22361",
        "name": "getAllBanks",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 260,
        "wires": [
            [
                "2fbc26ce0fb1ac68",
                "c57db240c8a8a052"
            ]
        ]
    },
    {
        "id": "2fbc26ce0fb1ac68",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "getAllBanks",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 240,
        "wires": []
    },
    {
        "id": "c57db240c8a8a052",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "loopThroughBanks",
        "func": "\n\nfor(let bank of msg.payload.slice(0,1)){\n    node.send({\n        payload : bank,\n        isComplete: false\n    })\n}\n\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 400,
        "wires": [
            [
                "0a378c55c3a7cd38"
            ]
        ]
    },
    {
        "id": "0a378c55c3a7cd38",
        "type": "switch",
        "z": "fb44a60890b22361",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 400,
        "wires": [
            [
                "3424132fec3ff5b1"
            ],
            []
        ]
    },
    {
        "id": "3424132fec3ff5b1",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "getAllMandates",
        "func": "\nconst PAYMENT_SERVICE_URL = env.get('PAYMENT_SERVICE_URL');\n\n\nmsg.url = `${PAYMENT_SERVICE_URL}/api/actyv/getMandatesOfBusiness`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \"bankID\": msg.payload._id\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 480,
        "wires": [
            [
                "5ea885f2f9647d6a"
            ]
        ]
    },
    {
        "id": "5ea885f2f9647d6a",
        "type": "http request",
        "z": "fb44a60890b22361",
        "name": "getAllMandates",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 400,
        "y": 480,
        "wires": [
            [
                "c74236687d651b6a",
                "79069a5a2e6acc7e"
            ]
        ]
    },
    {
        "id": "c74236687d651b6a",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "getAllMandates",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 480,
        "wires": []
    },
    {
        "id": "79069a5a2e6acc7e",
        "type": "switch",
        "z": "fb44a60890b22361",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 600,
        "wires": [
            [
                "2acfa6886ee66adb"
            ],
            [
                "0dda985c763b82c0"
            ]
        ]
    },
    {
        "id": "2acfa6886ee66adb",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "No mandates",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 560,
        "wires": []
    },
    {
        "id": "0dda985c763b82c0",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "loopThroughMandates",
        "func": "let mandates = msg.payload.filter((mandate) => mandate.businessPartnerID.length>20)\nfor(let mandate of mandates){\n    if (mandate.businessPartnerID.length === 24){\n        if(mandate.businessPartnerID == '63ca983b9f179c258fb5e545'){\n            node.send({\n                ...msg,\n                payload: mandate,\n                actyvMandateID: mandate.id,\n                businessPartnerID: mandate.businessPartnerID,\n                bankID: mandate.bankID,\n                borrowerID: mandate.businessPartnerID,\n                isComplete: false\n            });\n        }\n        \n    }\n}\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "_",
                "module": "lodash"
            }
        ],
        "x": 340,
        "y": 640,
        "wires": [
            [
                "03714a18ae4463dc",
                "11e903e61b2a6cb3"
            ]
        ]
    },
    {
        "id": "11e903e61b2a6cb3",
        "type": "switch",
        "z": "fb44a60890b22361",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 640,
        "wires": [
            [
                "56560921c7bf5fb0"
            ],
            [
                "a1626fa44001beb1"
            ]
        ]
    },
    {
        "id": "a1626fa44001beb1",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "fetchAllDrawdowns",
        "func": "const actyvToken = flow.get(\"actyvToken\")\nconst PAYLATER_URL = env.get('PAYLATER_URL');\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY');\n\n\n\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown/service/fetch`;\nmsg.headers = {\n    // Authorization: `Bearer ${actyvToken}`,\n    // actyventityid: \"63d1139e9afdf78f2da3743d\",\n    \"x-actyv-api-config-key\":X_ACTYV_API_CONFIG_KEY\n}\nmsg.method = \"POST\"\nmsg.payload = {\n    \"bankID\": msg.bankID,\n    // \"borrowerID\": msg.borrowerID,\n    \"drawdownStatus\": \"paid\",\n    \"beforeDueDate\": moment().local().add(2, \"day\").toISOString().split(\"T\")[0],\n    \"afterDueDate\": moment().local().add(1, \"day\").toISOString().split(\"T\")[0],\n    // \"beforeDueDate\": \"2023-03-30\",\n    // \"afterDueDate\": \"2023-03-01\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 190,
        "y": 740,
        "wires": [
            [
                "471d5a3cc3c26396"
            ]
        ]
    },
    {
        "id": "471d5a3cc3c26396",
        "type": "http request",
        "z": "fb44a60890b22361",
        "name": "fetchAllDrawdowns",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 410,
        "y": 740,
        "wires": [
            [
                "7bb20d29083e9546",
                "80179c50bd824f35"
            ]
        ]
    },
    {
        "id": "7bb20d29083e9546",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "fetchAllDrawdowns",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 740,
        "wires": []
    },
    {
        "id": "80179c50bd824f35",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "loopThroughDrawdown",
        "func": "\nfor(let drawdown of msg.payload.slice(0,1)){\n    node.send({\n        ...msg,\n        payload: {},\n        drawdown,\n        isComplete: false\n    });\n}\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 840,
        "wires": [
            [
                "7a52557f863c59c4"
            ]
        ]
    },
    {
        "id": "7a52557f863c59c4",
        "type": "switch",
        "z": "fb44a60890b22361",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 840,
        "wires": [
            [
                "860bab8216ec179f"
            ],
            [
                "d24b43f1348529e4",
                "6054f663b92c4d4b"
            ]
        ]
    },
    {
        "id": "d24b43f1348529e4",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "getBP_UsersReq",
        "func": "\nconst ACTYV_ENTITY_USER_EMAIL = env.get('ACTYV_ENTITY_USER_EMAIL')\nconst ACTYV_ENTITY_USER_PASSWORD = env.get('ACTYV_ENTITY_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst borrowerID = msg.borrowerID\n\nmsg.headers = {\n    \"x-actyv-api-config-key\":X_ACTYV_API_CONFIG_KEY\n}\nmsg.url = `${ADMIN_URL}/api/business-partner-user/get/all/${borrowerID}`;\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 940,
        "wires": [
            [
                "b1ad0296dc4e7809"
            ]
        ]
    },
    {
        "id": "b1ad0296dc4e7809",
        "type": "http request",
        "z": "fb44a60890b22361",
        "name": "getBP_Users",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 450,
        "y": 940,
        "wires": [
            [
                "03c2e8c74ca76523",
                "7fb79b6551955f01"
            ]
        ]
    },
    {
        "id": "03c2e8c74ca76523",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "getBP_Users",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 940,
        "wires": []
    },
    {
        "id": "7fb79b6551955f01",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "sendSmsReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL');\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst dueDate = msg.drawdown.dueDate.split(\"T\")[0]\n//requestAmount + interestAmount + penaltyInterest - paidDisbursedAmount - paidInterest  \nconst { disbursedAmount, paidDisbursedAmount, interestAmount, paidInterestAmount, penaltyInterest} = msg.drawdown\nconst amount = disbursedAmount + interestAmount + penaltyInterest - paidDisbursedAmount - paidInterestAmount\n\nmsg.headers = {\n    \"x-actyv-api-config-key\":X_ACTYV_API_CONFIG_KEY\n}\nmsg.url = `${ADMIN_URL}/api/user/sms/send`;\nmsg.method = \"POST\"\nmsg.payload = {\n    // \"phone\": msg.payload[0].mobile,\n    \"phone\": \"+919747442344\",\n    \"message\": `Repayment of Rs.${amount} for your BNPL drawdown is due on ${dueDate} and will be paid using your mandate. Please maintain sufficient balance. -Actyv`,\n    \"templateId\": \"1107168060079334572\"\n}\n\n\nreturn msg;\n/*\n1107168006902413160\n\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1040,
        "wires": [
            [
                "a2226ab405647522",
                "d3cf84bc71704c3e"
            ]
        ]
    },
    {
        "id": "a2226ab405647522",
        "type": "http request",
        "z": "fb44a60890b22361",
        "d": true,
        "name": "sendSmsReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 460,
        "y": 1040,
        "wires": [
            [
                "301abd30620e578f"
            ]
        ]
    },
    {
        "id": "301abd30620e578f",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "sendSmsReq",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 1040,
        "wires": []
    },
    {
        "id": "7302daebdb2f7e93",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "getAllMandates",
        "func": "\nconst PAYMENT_SERVICE_URL = env.get('PAYMENT_SERVICE_URL');\n\n\nmsg.url = `${PAYMENT_SERVICE_URL}/api/actyv/getMandatesOfBusiness`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \"enterpriseID\": msg.payload._id\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 1820,
        "wires": [
            [
                "c41a36766be156e6"
            ]
        ]
    },
    {
        "id": "c41a36766be156e6",
        "type": "http request",
        "z": "fb44a60890b22361",
        "name": "getAllMandates",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 460,
        "y": 1820,
        "wires": [
            [
                "aa43a560862afae9",
                "2d28c36f3d122dbd"
            ]
        ]
    },
    {
        "id": "aa43a560862afae9",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "getAllMandates",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 1820,
        "wires": []
    },
    {
        "id": "2d28c36f3d122dbd",
        "type": "switch",
        "z": "fb44a60890b22361",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 170,
        "y": 2040,
        "wires": [
            [
                "a44e725116255005"
            ],
            [
                "9de2cad43b0fc875"
            ]
        ]
    },
    {
        "id": "a44e725116255005",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "No mandates",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 2000,
        "wires": []
    },
    {
        "id": "9de2cad43b0fc875",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "loopThroughMandates",
        "func": "\nfor(let mandate of msg.payload){\n    if (mandate.businessPartnerID){\n        node.send({\n            ...msg,\n            payload: mandate,\n            actyvMandateID: mandate.id,\n            businessPartnerID: mandate.businessPartnerID,\n            enterpriseID: mandate.enterpriseID,\n            borrowerID: mandate.businessPartnerID,\n            isComplete: false\n        });\n    }\n}\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 2080,
        "wires": [
            [
                "8ba144eca31e1494"
            ]
        ]
    },
    {
        "id": "8ba144eca31e1494",
        "type": "switch",
        "z": "fb44a60890b22361",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 2080,
        "wires": [
            [],
            [
                "d0a1654345b9c696"
            ]
        ]
    },
    {
        "id": "d0a1654345b9c696",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "fetchAllInvoices",
        "func": "const actyvToken = flow.get(\"actyvToken\")\nconst PAYLATER_URL = env.get('PAYLATER_URL');\n// const PAYLATER_URL = \"http://localhost:3000\";\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY');\n\nconst {\n    enterpriseID,\n    borrowerID\n} = msg\n// const dueDate = moment().add(1, \"day\").toISOString().split(\"T\")[0]\nconst dueDate = \"2023-02-14\"\nmsg.url = `${PAYLATER_URL}/v1/invoices/service?enterpriseID=${enterpriseID}&dueDate=2023-02-14&distributorID=${borrowerID}`;\nmsg.headers = {\n    \"x-actyv-api-config-key\":X_ACTYV_API_CONFIG_KEY\n}\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 180,
        "y": 2180,
        "wires": [
            [
                "646e2447d3ab2529"
            ]
        ]
    },
    {
        "id": "646e2447d3ab2529",
        "type": "http request",
        "z": "fb44a60890b22361",
        "name": "fetchAllInvoices",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 420,
        "y": 2180,
        "wires": [
            [
                "eaf7a0c0eb3d94c3",
                "b1e0f0f2eb5e05d5"
            ]
        ]
    },
    {
        "id": "eaf7a0c0eb3d94c3",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "fetchAllInvoices",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 2180,
        "wires": []
    },
    {
        "id": "5f0c4794df7ad75a",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "getAllEnterprises",
        "func": "const GO_URL = env.get('GO_URL');\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${GO_URL}/enterprise/service`;\nmsg.method = \"GET\"\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1580,
        "wires": [
            [
                "9578bc9138a274a0"
            ]
        ]
    },
    {
        "id": "9578bc9138a274a0",
        "type": "http request",
        "z": "fb44a60890b22361",
        "name": "getAllEnterprises",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 1580,
        "wires": [
            [
                "2d59708f75d77c2a",
                "7d5016b5f9820c40"
            ]
        ]
    },
    {
        "id": "2d59708f75d77c2a",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "getAllEnterprises",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 1560,
        "wires": []
    },
    {
        "id": "7d5016b5f9820c40",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "loopThroughEnterprise",
        "func": "\n\nfor(let enterprise of msg.payload){\n    node.send({\n        payload : enterprise,\n        isComplete: false\n    })\n}\n\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 1700,
        "wires": [
            [
                "ab3268faa9b93db3"
            ]
        ]
    },
    {
        "id": "ab3268faa9b93db3",
        "type": "switch",
        "z": "fb44a60890b22361",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 1700,
        "wires": [
            [],
            [
                "7302daebdb2f7e93"
            ]
        ]
    },
    {
        "id": "b1e0f0f2eb5e05d5",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "loopThroughInvoices",
        "func": "console.log({before:msg.payload})\nmsg.payload = msg.payload.filter((invoice) => !invoice.loanDrawdown)\nconsole.log({ before: msg.payload })\n\nfor(let invoice of msg.payload.slice(0,1)){\n    node.send({\n        ...msg,\n        payload: {},\n        invoice,\n        isComplete: false\n    });\n}\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 2300,
        "wires": [
            [
                "645ff04d529e9fea"
            ]
        ]
    },
    {
        "id": "645ff04d529e9fea",
        "type": "switch",
        "z": "fb44a60890b22361",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 2300,
        "wires": [
            [],
            [
                "cde0c14bd7259f1c",
                "604a3763385cc703"
            ]
        ]
    },
    {
        "id": "604a3763385cc703",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "getBP_UsersReq",
        "func": "\nconst ACTYV_ENTITY_USER_EMAIL = env.get('ACTYV_ENTITY_USER_EMAIL')\nconst ACTYV_ENTITY_USER_PASSWORD = env.get('ACTYV_ENTITY_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst borrowerID = msg.borrowerID\n\nmsg.headers = {\n    \"x-actyv-api-config-key\":X_ACTYV_API_CONFIG_KEY\n}\nmsg.url = `${ADMIN_URL}/api/business-partner-user/get/all/${borrowerID}`;\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 2400,
        "wires": [
            [
                "b3bdbe27dc6b23a2"
            ]
        ]
    },
    {
        "id": "b3bdbe27dc6b23a2",
        "type": "http request",
        "z": "fb44a60890b22361",
        "name": "getBP_Users",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 2400,
        "wires": [
            [
                "5861068dfc9e4173",
                "4cc649ba1de1e951"
            ]
        ]
    },
    {
        "id": "5861068dfc9e4173",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "getBP_Users",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 2400,
        "wires": []
    },
    {
        "id": "4cc649ba1de1e951",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "sendSmsReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL');\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst dueDate = msg.invoice.dueDate.split(\"T\")[0]\nconst amount = msg.invoice.amount\nconst invoiceNo = msg.invoice.finalInvoiceNo\nconsole.log({ nbr: msg.payload[0].mobile})\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\nmsg.url = `${ADMIN_URL}/api/user/sms/send`;\nmsg.method = \"POST\"\nmsg.payload = {\n    // \"phone\": msg.payload[0].mobile,\n    \"phone\": \"+919747442344\",\n    \"message\": `Your invoice ${invoiceNo} of Rs.${amount} is due on ${dueDate} and will be paid using your mandate. Please maintain sufficient balance. -Actyv`,\n    \"templateId\": \"1107168060088252646\",\n    // \"entityId\": \"1101387620000035571\",\n    // \"messageType\": \"Transactional\"\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 2500,
        "wires": [
            [
                "a64f3212f7b061a0"
            ]
        ]
    },
    {
        "id": "a64f3212f7b061a0",
        "type": "http request",
        "z": "fb44a60890b22361",
        "d": true,
        "name": "sendSmsReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 440,
        "y": 2500,
        "wires": [
            [
                "09cc1dd216a3443b"
            ]
        ]
    },
    {
        "id": "09cc1dd216a3443b",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "sendSmsReq",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 2500,
        "wires": []
    },
    {
        "id": "cde0c14bd7259f1c",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "Invoice",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 2280,
        "wires": []
    },
    {
        "id": "a82158089e4d1cf4",
        "type": "inject",
        "z": "fb44a60890b22361",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1480,
        "wires": [
            [
                "5f0c4794df7ad75a"
            ]
        ]
    },
    {
        "id": "860bab8216ec179f",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "drawdowns completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 800,
        "wires": []
    },
    {
        "id": "56560921c7bf5fb0",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "mandates completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 600,
        "wires": []
    },
    {
        "id": "6054f663b92c4d4b",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "drawdown",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 880,
        "wires": []
    },
    {
        "id": "593dd79ce35ad075",
        "type": "inject",
        "z": "fb44a60890b22361",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 06 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "d3cf84bc71704c3e",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "debug 475",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 1120,
        "wires": []
    },
    {
        "id": "03714a18ae4463dc",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "debug 476",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 560,
        "wires": []
    },
    {
        "id": "fe7e46daf12f9d42",
        "type": "inject",
        "z": "2659280b75890366",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 80,
        "wires": [
            [
                "ddc477c43f610f97"
            ]
        ]
    },
    {
        "id": "ddc477c43f610f97",
        "type": "function",
        "z": "2659280b75890366",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst CKPL_ENTERPRISE_ADMIN_EMAIL = env.get('CKPL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": CKPL_ENTERPRISE_ADMIN_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 160,
        "wires": [
            [
                "b20057e3af625311"
            ]
        ]
    },
    {
        "id": "b20057e3af625311",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "AuthenticateEnterpriseUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 480,
        "y": 160,
        "wires": [
            [
                "78147953ae503396"
            ]
        ]
    },
    {
        "id": "78147953ae503396",
        "type": "function",
        "z": "2659280b75890366",
        "name": "saveEnterpriseToken",
        "func": "flow.set(\"enterpriseToken\",msg.payload.idToken)\nconsole.log({enterpriseToken:msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 160,
        "wires": [
            [
                "424115e178180516"
            ]
        ]
    },
    {
        "id": "424115e178180516",
        "type": "function",
        "z": "2659280b75890366",
        "name": "AuthenticateBankUserReq",
        "func": "\nconst AXIS_BANK_ADMIN_EMAIL = env.get('AXIS_BANK_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": PASSWORD,\n    \"email\": AXIS_BANK_ADMIN_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 240,
        "wires": [
            [
                "f239c3ec3c688aa2"
            ]
        ]
    },
    {
        "id": "f239c3ec3c688aa2",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "AuthenticateBankUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 460,
        "y": 240,
        "wires": [
            [
                "6aa483a499a0b08e"
            ]
        ]
    },
    {
        "id": "6aa483a499a0b08e",
        "type": "function",
        "z": "2659280b75890366",
        "name": "saveBankToken",
        "func": "flow.set(\"bankToken\",msg.payload.idToken)\n// console.log({bankToken:msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 240,
        "wires": [
            [
                "df37a096241c2a90"
            ]
        ]
    },
    {
        "id": "df37a096241c2a90",
        "type": "function",
        "z": "2659280b75890366",
        "name": "AuthenticateActyvUserReq",
        "func": "\nconst ACTYV_ENTITY_USER_EMAIL = env.get('ACTYV_ENTITY_USER_EMAIL')\nconst ACTYV_ENTITY_USER_PASSWORD = env.get('ACTYV_ENTITY_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": ACTYV_ENTITY_USER_PASSWORD,\n    \"email\": ACTYV_ENTITY_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 310,
        "wires": [
            [
                "938b5a82c1a6f8f5"
            ]
        ]
    },
    {
        "id": "938b5a82c1a6f8f5",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "AuthenticateActyvUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 460,
        "y": 310,
        "wires": [
            [
                "bc251b5e754eadde"
            ]
        ]
    },
    {
        "id": "bc251b5e754eadde",
        "type": "function",
        "z": "2659280b75890366",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\n// console.log({bankToken:msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 310,
        "wires": [
            [
                "7c5e8649ab4534c7"
            ]
        ]
    },
    {
        "id": "7c5e8649ab4534c7",
        "type": "function",
        "z": "2659280b75890366",
        "name": "getAllBanks",
        "func": "\nconst BANK_USER_EMAIL = env.get('BANK_USER_EMAIL')\nconst BANK_USER_PASSWORD = env.get('BANK_USER_PASSWORD')\nconst GO_URL = env.get('GO_URL');\n\n\nmsg.url = `${GO_URL}/bank`;\nmsg.method = \"GET\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 400,
        "wires": [
            [
                "46dbd0c48fbeec28"
            ]
        ]
    },
    {
        "id": "46dbd0c48fbeec28",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "getAllBanks",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 400,
        "wires": [
            [
                "f7b2a665c1057e7d",
                "5c2862deb50d9ac5"
            ]
        ]
    },
    {
        "id": "f7b2a665c1057e7d",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "getAllBanks",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 380,
        "wires": []
    },
    {
        "id": "5c2862deb50d9ac5",
        "type": "function",
        "z": "2659280b75890366",
        "name": "loopThroughBanks",
        "func": "\n\nfor(let bank of msg.payload){\n    node.send({\n        payload : bank,\n        isComplete: false\n    })\n}\n\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 560,
        "wires": [
            [
                "384311afc1483c64"
            ]
        ]
    },
    {
        "id": "384311afc1483c64",
        "type": "switch",
        "z": "2659280b75890366",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 580,
        "wires": [
            [
                "ab8faed087d4253b"
            ],
            []
        ]
    },
    {
        "id": "ab8faed087d4253b",
        "type": "function",
        "z": "2659280b75890366",
        "name": "getAllMandates",
        "func": "\nconst PAYMENT_SERVICE_URL = env.get('PAYMENT_SERVICE_URL');\n\n\nmsg.url = `${PAYMENT_SERVICE_URL}/api/actyv/getMandatesOfBusiness`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \"bankID\": msg.payload._id\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 200,
        "wires": [
            [
                "838d1dd3923a5811"
            ]
        ]
    },
    {
        "id": "838d1dd3923a5811",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "getAllMandates",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1540,
        "y": 200,
        "wires": [
            [
                "af757f306facacf9",
                "0c9f6483819ab9d5"
            ]
        ]
    },
    {
        "id": "af757f306facacf9",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "getAllMandates",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1780,
        "y": 200,
        "wires": []
    },
    {
        "id": "0c9f6483819ab9d5",
        "type": "switch",
        "z": "2659280b75890366",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1250,
        "y": 320,
        "wires": [
            [
                "924d7a107a303287"
            ],
            [
                "2a57f9890255dbe9"
            ]
        ]
    },
    {
        "id": "924d7a107a303287",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "No mandates",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 280,
        "wires": []
    },
    {
        "id": "2a57f9890255dbe9",
        "type": "function",
        "z": "2659280b75890366",
        "name": "loopThroughMandates",
        "func": "\nfor (let mandate of msg.payload) {\n    if (mandate.businessPartnerID.length > 20) {\n        if (mandate.businessPartnerID == '63ca983b9f179c258fb5e545') {\n            node.send({\n                ...msg,\n                payload: mandate,\n                actyvMandateID: mandate.id,\n                businessPartnerID: mandate.businessPartnerID,\n                bankID: mandate.bankID,\n                borrowerID: mandate.businessPartnerID,\n                isComplete: false\n            });\n        }\n    }\n}\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 360,
        "wires": [
            [
                "1318ca93b4258351"
            ]
        ]
    },
    {
        "id": "1318ca93b4258351",
        "type": "switch",
        "z": "2659280b75890366",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1690,
        "y": 360,
        "wires": [
            [],
            [
                "ae57edd78f0bdfe4"
            ]
        ]
    },
    {
        "id": "ae57edd78f0bdfe4",
        "type": "function",
        "z": "2659280b75890366",
        "name": "fetchAllDrawdowns",
        "func": "const actyvToken = flow.get(\"actyvToken\")\nconst PAYLATER_URL = env.get('PAYLATER_URL');\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY');\n\n\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown/service/fetch`;\nmsg.headers = {\n    Authorization: `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\nmsg.method = \"POST\"\nmsg.payload = {\n    \"bankID\": msg.bankID,\n    // \"borrowerID\": msg.borrowerID,\n    \"drawdownStatus\": \"paid\",\n    \"beforeDueDate\": moment().local().add(2, \"day\").toISOString().split(\"T\")[0],\n    \"afterDueDate\": moment().local().add(1, \"day\").toISOString().split(\"T\")[0],\n    // \"beforeDueDate\": \"2023-03-30\",\n    // \"afterDueDate\": \"2023-03-01\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1270,
        "y": 460,
        "wires": [
            [
                "bb3a2660bb6f4213"
            ]
        ]
    },
    {
        "id": "bb3a2660bb6f4213",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "fetchAllDrawdowns",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1510,
        "y": 460,
        "wires": [
            [
                "a1a643b91992c22d",
                "8b0a5fd1415d3b5c"
            ]
        ]
    },
    {
        "id": "a1a643b91992c22d",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "fetchAllDrawdowns",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 460,
        "wires": []
    },
    {
        "id": "8b0a5fd1415d3b5c",
        "type": "function",
        "z": "2659280b75890366",
        "name": "loopThroughDrawdown",
        "func": "\nfor(let drawdown of msg.payload.slice(0,1)){\n    node.send({\n        ...msg,\n        payload: {},\n        drawdown:drawdown,\n        isComplete: false\n    });\n}\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 560,
        "wires": [
            [
                "0b131ee2afd11ce8"
            ]
        ]
    },
    {
        "id": "0b131ee2afd11ce8",
        "type": "switch",
        "z": "2659280b75890366",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1510,
        "y": 560,
        "wires": [
            [],
            [
                "6b423e35ceaf2abc",
                "cb4421e404053567"
            ]
        ]
    },
    {
        "id": "6b423e35ceaf2abc",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "debug 288",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 600,
        "wires": []
    },
    {
        "id": "cb4421e404053567",
        "type": "function",
        "z": "2659280b75890366",
        "name": "raiseMandate",
        "func": "\nconst PAYMENT_SERVICE_URL = env.get('PAYMENT_SERVICE_URL');\nconst dueDate = msg.drawdown.dueDate.split(\"T\")[0]\nconst { disbursedAmount, paidDisbursedAmount, interestAmount, paidInterestAmount, penaltyInterest } = msg.drawdown\nconst amount = disbursedAmount + interestAmount + penaltyInterest - paidDisbursedAmount - paidInterestAmount\nmsg.url = `${PAYMENT_SERVICE_URL}/api/actyv/chargeMandateByActyvMandateID`;\nmsg.method = \"PUT\"\nmsg.payload = {\n    \"actyvMandateID\": msg.actyvMandateID,\n    \"presentmentDate\": dueDate,\n    \"amount\": msg.drawdown.disbursedAmount - msg.drawdown.paidDisbursedAmount\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1260,
        "y": 700,
        "wires": [
            [
                "c2ea2b34c5f14313",
                "5b4638ac4c8a0d54"
            ]
        ]
    },
    {
        "id": "c2ea2b34c5f14313",
        "type": "http request",
        "z": "2659280b75890366",
        "d": true,
        "name": "raiseMandate",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1500,
        "y": 700,
        "wires": [
            [
                "27844f896312c2ae"
            ]
        ]
    },
    {
        "id": "27844f896312c2ae",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "raiseMandate",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1740,
        "y": 700,
        "wires": []
    },
    {
        "id": "3044180646315674",
        "type": "inject",
        "z": "2659280b75890366",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1220,
        "y": 820,
        "wires": [
            [
                "f05899e682425089"
            ]
        ]
    },
    {
        "id": "f05899e682425089",
        "type": "function",
        "z": "2659280b75890366",
        "name": "function 168",
        "func": "const date = moment().add(0, \"day\").toISOString().split(\"T\")[0]\nmsg.payload = date\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1450,
        "y": 820,
        "wires": [
            [
                "a2063ebca045d0a7"
            ]
        ]
    },
    {
        "id": "a2063ebca045d0a7",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "debug 289",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 820,
        "wires": []
    },
    {
        "id": "fe279328b0b8a2eb",
        "type": "function",
        "z": "2659280b75890366",
        "name": "getAllEnterprises",
        "func": "const GO_URL = env.get('GO_URL');\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${GO_URL}/enterprise/service`;\nmsg.method = \"GET\"\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1020,
        "wires": [
            [
                "67cf776f7ced2556"
            ]
        ]
    },
    {
        "id": "67cf776f7ced2556",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "getAllEnterprises",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 1020,
        "wires": [
            [
                "6e7f81b3b1b6e9d3",
                "86a2e8065fcd4b52"
            ]
        ]
    },
    {
        "id": "6e7f81b3b1b6e9d3",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "getAllEnterprises",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1000,
        "wires": []
    },
    {
        "id": "86a2e8065fcd4b52",
        "type": "function",
        "z": "2659280b75890366",
        "name": "loopThroughEnterprise",
        "func": "\n\nfor(let enterprise of msg.payload.slice(0,1)){\n    node.send({\n        payload : enterprise,\n        isComplete: false\n    })\n}\n\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 1140,
        "wires": [
            [
                "d040082ff0219404"
            ]
        ]
    },
    {
        "id": "d040082ff0219404",
        "type": "switch",
        "z": "2659280b75890366",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 1140,
        "wires": [
            [],
            [
                "7f4709b8740c4637"
            ]
        ]
    },
    {
        "id": "7f4709b8740c4637",
        "type": "function",
        "z": "2659280b75890366",
        "name": "getAllMandates",
        "func": "\nconst PAYMENT_SERVICE_URL = env.get('PAYMENT_SERVICE_URL');\n\n\nmsg.url = `${PAYMENT_SERVICE_URL}/api/actyv/getMandatesOfBusiness`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \"enterpriseID\": msg.payload._id\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1240,
        "wires": [
            [
                "c772cb04202a792d"
            ]
        ]
    },
    {
        "id": "c772cb04202a792d",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "getAllMandates",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 480,
        "y": 1240,
        "wires": [
            [
                "c8bebcf17caf4851",
                "9fdb821383dc5368"
            ]
        ]
    },
    {
        "id": "c8bebcf17caf4851",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "getAllMandates",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 1240,
        "wires": []
    },
    {
        "id": "9fdb821383dc5368",
        "type": "function",
        "z": "2659280b75890366",
        "name": "mockMandates",
        "func": "msg.payload = [\n    {\n        \"id\": \"222f3a88-fbfc-4169-b3a2-65b01fbcf726\",\n        \"createdAt\": \"2023-03-27T10:31:15.132Z\",\n        \"mandateConfigID\": \"d3d7126d-cdbe-4cbb-98cc-acec9c271f65\",\n        \"bankID\": null,\n        \"enterpriseID\": \"638c73f16ea52ce57470c1a9\",\n        \"businessPartnerID\": \"638ca85f7bc8de661c102a02\",\n        \"mandateType\": \"E_MANDATE\",\n        \"emailAddress\": \"thoufique@gmail.com\",\n        \"mobileNumber\": \"8248885227\",\n        \"accountHolderName\": \"Mohamed Thoufique\",\n        \"bankCode\": \"HDFC\",\n        \"bankAccountNumber\": \"501000007654321\",\n        \"accountType\": \"SAVINGS\",\n        \"ifsc\": \"HDFC0000786\",\n        \"branchName\": \"Coimbatore\",\n        \"amount\": \"500\",\n        \"frequency\": \"ANYTIME\",\n        \"validFrom\": \"2045-12-31\",\n        \"validTill\": \"2044-06-26\",\n        \"mandateVerificationResource\": \"https://uat21.qchk.in/QuickZip/MandateDetails.aspx?ID=44a1e633b414a4c6c0f8ea173e6be878\",\n        \"status\": \"Success\",\n        \"umrn\": \"\",\n        \"pgMandateID\": \"900014032760114916\"\n    }\n]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 1340,
        "wires": [
            [
                "075bcaa4ac160561"
            ]
        ]
    },
    {
        "id": "075bcaa4ac160561",
        "type": "switch",
        "z": "2659280b75890366",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 1340,
        "wires": [
            [
                "6508146c3996a36a"
            ],
            [
                "97ab2a0a909c7f71"
            ]
        ]
    },
    {
        "id": "6508146c3996a36a",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "No mandates",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 1320,
        "wires": []
    },
    {
        "id": "97ab2a0a909c7f71",
        "type": "function",
        "z": "2659280b75890366",
        "name": "loopThroughMandates",
        "func": "\nfor(let mandate of msg.payload){\n    if (mandate.businessPartnerID){\n        node.send({\n            ...msg,\n            payload: mandate,\n            actyvMandateID: mandate.id,\n            businessPartnerID: mandate.businessPartnerID,\n            enterpriseID: mandate.enterpriseID,\n            borrowerID: mandate.businessPartnerID,\n            isComplete: false\n        });\n    }\n}\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1500,
        "wires": [
            [
                "0ee394a69e035551"
            ]
        ]
    },
    {
        "id": "0ee394a69e035551",
        "type": "switch",
        "z": "2659280b75890366",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 630,
        "y": 1500,
        "wires": [
            [],
            [
                "407df09095233670"
            ]
        ]
    },
    {
        "id": "407df09095233670",
        "type": "function",
        "z": "2659280b75890366",
        "name": "fetchAllInvoices",
        "func": "const actyvToken = flow.get(\"actyvToken\")\nconst PAYLATER_URL = env.get('PAYLATER_URL');\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY');\n\nconst {\n    enterpriseID,\n    borrowerID\n} = msg\n// const dueDate = moment().add(1, \"day\").toISOString().split(\"T\")[0]\nconst dueDate = \"2023-04-16\"\nmsg.url = `${PAYLATER_URL}/v1/invoices/service?enterpriseID=${enterpriseID}&dueDate=${dueDate}&distributorID=${borrowerID}`;\nmsg.headers = {\n    \"x-actyv-api-config-key\":X_ACTYV_API_CONFIG_KEY\n}\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 200,
        "y": 1600,
        "wires": [
            [
                "dfb96d76d12ce601"
            ]
        ]
    },
    {
        "id": "dfb96d76d12ce601",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "fetchAllInvoices",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 440,
        "y": 1600,
        "wires": [
            [
                "cdda61491ee42028",
                "a31451c4bf2c9a56"
            ]
        ]
    },
    {
        "id": "cdda61491ee42028",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "fetchAllInvoices",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 1600,
        "wires": []
    },
    {
        "id": "a31451c4bf2c9a56",
        "type": "function",
        "z": "2659280b75890366",
        "name": "loopThroughInvoices",
        "func": "console.log({before:msg.payload.length})\nmsg.payload = msg.payload.filter((invoice) => !invoice.loanDrawdown)\nconsole.log({ after: msg.payload.length })\n\nfor(let invoice of msg.payload.slice(0,1)){\n    node.send({\n        ...msg,\n        payload: {},\n        invoice,\n        isComplete: false\n    });\n}\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1720,
        "wires": [
            [
                "b192f30d00a1b06f"
            ]
        ]
    },
    {
        "id": "b192f30d00a1b06f",
        "type": "switch",
        "z": "2659280b75890366",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 1720,
        "wires": [
            [],
            [
                "235b934d1cce0224",
                "41a2789bfb2fdd3b"
            ]
        ]
    },
    {
        "id": "4b746b685a347774",
        "type": "function",
        "z": "2659280b75890366",
        "name": "getBP_UsersReq",
        "func": "\nconst ACTYV_ENTITY_USER_EMAIL = env.get('ACTYV_ENTITY_USER_EMAIL')\nconst ACTYV_ENTITY_USER_PASSWORD = env.get('ACTYV_ENTITY_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst borrowerID = msg.borrowerID\n\nmsg.headers = {\n    \"x-actyv-api-config-key\":X_ACTYV_API_CONFIG_KEY\n}\nmsg.url = `${ADMIN_URL}/api/business-partner-user/get/all/${borrowerID}`;\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 2040,
        "wires": [
            [
                "912f23a563a40f04"
            ]
        ]
    },
    {
        "id": "235b934d1cce0224",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "Invoice",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "invoice",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 1700,
        "wires": []
    },
    {
        "id": "912f23a563a40f04",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "getBP_Users",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 490,
        "y": 2040,
        "wires": [
            [
                "a3c96420b941deb3"
            ]
        ]
    },
    {
        "id": "a3c96420b941deb3",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "getBP_Users",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 2040,
        "wires": []
    },
    {
        "id": "1d148b034d587a7f",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "raiseMandate",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 460,
        "y": 1820,
        "wires": [
            [
                "db485f54dc25d498"
            ]
        ]
    },
    {
        "id": "41a2789bfb2fdd3b",
        "type": "function",
        "z": "2659280b75890366",
        "name": "raiseMandate",
        "func": "\nconst PAYMENT_SERVICE_URL = env.get('PAYMENT_SERVICE_URL');\nconst dueDate = msg.invoice.dueDate.split(\"T\")[0]\nconst amount = msg.invoice.amount\n\nmsg.url = `${PAYMENT_SERVICE_URL}/api/actyv/chargeMandateByActyvMandateID`;\nmsg.method = \"PUT\"\nmsg.payload = {\n    \"actyvMandateID\": \"809e2b5b-0e79-460f-a813-1de73614459c\",//msg.actyvMandateID,\n    \"presentmentDate\": \"2023-04-02\",//dueDate\n    \"amount\": 1\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 220,
        "y": 1820,
        "wires": [
            [
                "d27a0f9787d2d856"
            ]
        ]
    },
    {
        "id": "db485f54dc25d498",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "raiseMandate",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 1820,
        "wires": []
    },
    {
        "id": "6177e81f5172af11",
        "type": "inject",
        "z": "2659280b75890366",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 163,
        "y": 674,
        "wires": [
            [
                "ef57e15480854020"
            ]
        ]
    },
    {
        "id": "ef57e15480854020",
        "type": "function",
        "z": "2659280b75890366",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst CKPL_ENTERPRISE_ADMIN_EMAIL = env.get('CKPL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": CKPL_ENTERPRISE_ADMIN_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 233,
        "y": 754,
        "wires": [
            [
                "341ddf0cbdb44ec8"
            ]
        ]
    },
    {
        "id": "341ddf0cbdb44ec8",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "AuthenticateEnterpriseUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 523,
        "y": 754,
        "wires": [
            [
                "e26cb16a15c51506"
            ]
        ]
    },
    {
        "id": "e26cb16a15c51506",
        "type": "function",
        "z": "2659280b75890366",
        "name": "saveEnterpriseToken",
        "func": "flow.set(\"enterpriseToken\",msg.payload.idToken)\nconsole.log({enterpriseToken:msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 823,
        "y": 754,
        "wires": [
            [
                "5891659a1da30ef4"
            ]
        ]
    },
    {
        "id": "5891659a1da30ef4",
        "type": "function",
        "z": "2659280b75890366",
        "name": "AuthenticateBankUserReq",
        "func": "\nconst AXIS_BANK_ADMIN_EMAIL = env.get('AXIS_BANK_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": PASSWORD,\n    \"email\": AXIS_BANK_ADMIN_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 223,
        "y": 834,
        "wires": [
            [
                "83d0281f41991134"
            ]
        ]
    },
    {
        "id": "83d0281f41991134",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "AuthenticateBankUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 503,
        "y": 834,
        "wires": [
            [
                "93573a86f18238a5"
            ]
        ]
    },
    {
        "id": "93573a86f18238a5",
        "type": "function",
        "z": "2659280b75890366",
        "name": "saveBankToken",
        "func": "flow.set(\"bankToken\",msg.payload.idToken)\n// console.log({bankToken:msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 803,
        "y": 834,
        "wires": [
            [
                "dcfd7a1df92c698b"
            ]
        ]
    },
    {
        "id": "dcfd7a1df92c698b",
        "type": "function",
        "z": "2659280b75890366",
        "name": "AuthenticateActyvUserReq",
        "func": "\nconst ACTYV_ENTITY_USER_EMAIL = env.get('ACTYV_ENTITY_USER_EMAIL')\nconst ACTYV_ENTITY_USER_PASSWORD = env.get('ACTYV_ENTITY_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": ACTYV_ENTITY_USER_PASSWORD,\n    \"email\": ACTYV_ENTITY_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 223,
        "y": 904,
        "wires": [
            [
                "6743e756c25cdba3"
            ]
        ]
    },
    {
        "id": "6743e756c25cdba3",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "AuthenticateActyvUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 503,
        "y": 904,
        "wires": [
            [
                "e99a658115621f16"
            ]
        ]
    },
    {
        "id": "e99a658115621f16",
        "type": "function",
        "z": "2659280b75890366",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\n// console.log({bankToken:msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 803,
        "y": 904,
        "wires": [
            [
                "fe279328b0b8a2eb"
            ]
        ]
    },
    {
        "id": "d27a0f9787d2d856",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "debug 296",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 1900,
        "wires": []
    },
    {
        "id": "5b4638ac4c8a0d54",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "debug 477",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 760,
        "wires": []
    },
    {
        "id": "0177d6a97fbe107b",
        "type": "inject",
        "z": "32607aaaf853d8ed",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 390,
        "y": 300,
        "wires": [
            [
                "7a16a0a765ad49fb"
            ]
        ]
    },
    {
        "id": "7a16a0a765ad49fb",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "Set env variables",
        "func": "\n\n\nconst ENV_VARIABLES = new Map();\n\nENV_VARIABLES.set('PAYLATER_URL',\"https://actyv-platform-paylater-service-v1.qa.actyv.com\")\nENV_VARIABLES.set('GO_URL',\"https://actyv-platform-go-service.qa.actyv.com/api\")\nENV_VARIABLES.set('ADMIN_URL',\"https://actyv-platform-admin-service.qa.actyv.com\")\n\nENV_VARIABLES.set('BUSINESS_IDENTIFIER',\"ABBCB2066P\")\nENV_VARIABLES.set('BUSINESS_TYPE',\"ENTERPRISE\")\nENV_VARIABLES.set('BANK_KEY',\"msl\")\nENV_VARIABLES.set('X_ACTYV_API_CONFIG_KEY',\"8HhkIWzVMSnSgvlhxr\")\n\nglobal.set('envVariables',ENV_VARIABLES)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 300,
        "wires": [
            [
                "b36f7c054f8a278d"
            ]
        ]
    },
    {
        "id": "b36f7c054f8a278d",
        "type": "SFTP-main",
        "z": "32607aaaf853d8ed",
        "path": "/",
        "method": "list",
        "remoteFilePath": "/sftpdir/test/shravan",
        "remoteFilePathType": "str",
        "localFilePath": "C:\\Users\\Ayush Rarg\\OneDrive - actyv.ai\\Desktop\\node-red",
        "localFilePathType": "str",
        "server": "e890793010d7a406",
        "outputs": 1,
        "debug": false,
        "name": "lisitng the files from sftp",
        "x": 880,
        "y": 300,
        "wires": [
            [
                "dbcae6d835b6fba5"
            ]
        ]
    },
    {
        "id": "799e620e57672d0e",
        "type": "SFTP-main",
        "z": "32607aaaf853d8ed",
        "path": "/",
        "method": "get",
        "remoteFilePath": "payload",
        "remoteFilePathType": "msg",
        "localFilePath": "/Users/shravanpm/Desktop/node-red",
        "localFilePathType": "str",
        "server": "e890793010d7a406",
        "outputs": 1,
        "debug": false,
        "name": "get a single file from sftp",
        "x": 1480,
        "y": 300,
        "wires": [
            [
                "80292021a81a8a72",
                "9023b9050b196e17"
            ]
        ]
    },
    {
        "id": "cbc7edc577363bf0",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "mapJsonFromXLSX",
        "func": "\nconst bankDetails = flow.get('bankDetails') || {}\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n// msg.payload = msg.payload.splice(7,1)\n// return msg\n\nif (msg.payload.length > 0) {\n\n    for (let row of msg.payload.splice(7,msg.payload.length)) {\n        await sleep(500)\n        node.send({\n            switchCondition: handleSwitchCondition(row[\"F\"]),\n            bankDetails: bankDetails,\n            payload: {\n                \"sr.No\" : row[\"MATURITY REPORT\"],\n                \"Dealer Name\":row[\"B\"],\n                \"Account No\":row[\"C\"],\n                \"Dealer Code\":row[\"D\"],\n                \"Transaction Date\":row[\"E\"],\n                \"Particular\": row[\"F\"],\n                \"Invoice Date\": row[\"G\"],\n                \"Transaction Amount\": row[\"H\"],\n                \"Outstanding Amount\": row[\"I\"],\n                \"Outstanding Days\": row[\"J\"],\n                \"Credit Period\": row[\"K\"],\n                \"Maturity Date\": row[\"L\"],\n                \"Overdue Amount\": row[\"M\"],\n                \"Overdue Days\": row[\"N\"],\n                \"Availed Adhoc\": row[\"M\"],\n            }\n        }           \n        )\n    }\n\n}\n\nfunction handleSwitchCondition(payload){\n    // console.log(\"ssss\", payload)\n    if (payload?.includes(\"INTEREST\")){\n        return \"INTEREST\"\n    } else if ((!payload?.includes(\"Total\"))&&payload){\n        return \"PRINCIPAL\"\n    } else if (payload?.includes(\"Sub Total\")){\n        return \"null\"\n    }\n    console.log(\"ssss\",payload)\n    return \"null\"\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 640,
        "wires": [
            [
                "47df4b46f74630a4"
            ]
        ]
    },
    {
        "id": "98f3ca10d90eba99",
        "type": "alafile in",
        "z": "32607aaaf853d8ed",
        "name": "",
        "filename": "",
        "format": "xls",
        "columns": "*",
        "headers": true,
        "x": 380,
        "y": 640,
        "wires": [
            [
                "20ead5358e4fb136"
            ]
        ]
    },
    {
        "id": "110afad24fd8188c",
        "type": "SFTP-main",
        "z": "32607aaaf853d8ed",
        "g": "330045778eef98cf",
        "path": "/",
        "method": "put",
        "remoteFilePath": "successPath",
        "remoteFilePathType": "msg",
        "localFilePath": "localPath",
        "localFilePathType": "msg",
        "server": "e890793010d7a406",
        "outputs": 1,
        "debug": false,
        "name": "move to success folder",
        "x": 710,
        "y": 500,
        "wires": [
            [
                "9572b589acd33875"
            ]
        ]
    },
    {
        "id": "dd9a74d8f33afc5b",
        "type": "debug",
        "z": "32607aaaf853d8ed",
        "g": "330045778eef98cf",
        "name": "Deleted file from SFTP existing directory",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 500,
        "wires": []
    },
    {
        "id": "9572b589acd33875",
        "type": "SFTP-main",
        "z": "32607aaaf853d8ed",
        "g": "330045778eef98cf",
        "path": "/",
        "method": "delete",
        "remoteFilePath": "remotePath",
        "remoteFilePathType": "msg",
        "localFilePath": "filepath",
        "localFilePathType": "msg",
        "server": "e890793010d7a406",
        "outputs": 1,
        "debug": false,
        "name": "delete from existing folder",
        "x": 980,
        "y": 500,
        "wires": [
            [
                "dd9a74d8f33afc5b"
            ]
        ]
    },
    {
        "id": "dbcae6d835b6fba5",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "function 13",
        "func": "const sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\n// for(let i=0;i<1;i++){\n//     sleep(2000)\n    \n//     node.send({payload:[msg.payload[i]],fileName:msg.payload[i]});\n// }\nmsg.payload = [msg.payload[0]]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 300,
        "wires": [
            [
                "799e620e57672d0e"
            ]
        ]
    },
    {
        "id": "f41781cc386e8d2b",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "Interest",
        "func": "msg.data = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 820,
        "wires": [
            [
                "872e5b6050425464"
            ]
        ]
    },
    {
        "id": "47df4b46f74630a4",
        "type": "switch",
        "z": "32607aaaf853d8ed",
        "name": "",
        "property": "switchCondition",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "INTEREST",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PRINCIPAL",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "null",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 370,
        "y": 1020,
        "wires": [
            [
                "f41781cc386e8d2b"
            ],
            [
                "cb8071afc688c24c"
            ],
            []
        ]
    },
    {
        "id": "c3615a78be027ad0",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "updateDrawdownTablePaidPrincipalReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\n\nmsg.method = \"PATCH\";\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown`\nmsg.payload = {\n    // requestUniqueCode: msg.data[\"Particular\"],\n    requestUniqueCode: \"ACTY3891670570284214\",\n    // drawdownStatus:\"paid\"\n    paidDisbursedAmount: Number(msg.data[\"Transaction Amount\"]) - Number(msg.data[\"Outstanding Amount\"])\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "b95b9dfb8ac1cb5a",
        "type": "debug",
        "z": "32607aaaf853d8ed",
        "name": "updatedAccruedInterest",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 820,
        "wires": []
    },
    {
        "id": "80292021a81a8a72",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "g": "330045778eef98cf",
        "name": "setRemotePath",
        "func": "msg.filename = msg.payload[0].split('.')[0] // filename without extension\n// msg.filename = \"/Users/shravanpm/Downloads/Lead Push and Response Format\"// filename without extension\n\nconst folderPath = msg.payload[0].split(\"/\")\nconst fileName = folderPath[folderPath.length - 1]\n\nflow.set('filename', fileName) // filename with extension\n\nconsole.log({ fileName:msg.filename })\n\n// msg.filepath = `/Users/ramu/Desktop/node-red/${fileName}`\nmsg.successPath = `/sftpdir/test/ramu/success`\n// msg.localPath = `/Users/ramu/Desktop/node-red/${fileName}`\nmsg.remotePath = `/sftpdir/test/ramu/limits/${fileName}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 500,
        "wires": [
            [
                "98f3ca10d90eba99"
            ]
        ]
    },
    {
        "id": "ace7545bd12b8317",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "updateDrawdownTableForPaidInterestReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\n\nmsg.method = \"PATCH\";\nmsg.url=`${PAYLATER_URL}/v1/loan-drawdown`\nmsg.payload = {\n    requestUniqueCode: \"ACTY3891670570284214\",\n    // requestUniqueCode: msg.data[\"Particular\"].split(\"_INTEREST\")[0]\n    // drawdownStatus:\"paid\"\n    paidInterestAmount: Number(msg.data[\"Transaction Amount\"]) - Number(msg.data[\"Outstanding Amount\"])\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 820,
        "wires": [
            [
                "6acf99389fd7fbfc"
            ]
        ]
    },
    {
        "id": "6acf99389fd7fbfc",
        "type": "http request",
        "z": "32607aaaf853d8ed",
        "name": "updateDrawdownTableForPaidInterest",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1380,
        "y": 820,
        "wires": [
            [
                "b95b9dfb8ac1cb5a"
            ]
        ]
    },
    {
        "id": "ece700ce6aca5da4",
        "type": "http request",
        "z": "32607aaaf853d8ed",
        "name": "updateDrawdownTablePaidPrincipal",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1420,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "872e5b6050425464",
        "type": "debug",
        "z": "32607aaaf853d8ed",
        "name": "ReadInterestAccrued",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 680,
        "wires": []
    },
    {
        "id": "e11bb2e7db832689",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "cb8071afc688c24c",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "Principal",
        "func": "msg.data = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1200,
        "wires": [
            [
                "4b34b927572725de",
                "5d88bda11b1b4e6d",
                "c3615a78be027ad0"
            ]
        ]
    },
    {
        "id": "5d88bda11b1b4e6d",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "getDrawdownTableReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\n\nlet requestUniqueCode;\n\n// if (msg.switchCondition ===\"PRINCIPAL\"){\n//     requestUniqueCode = msg.payload.Particular\n// }else{\n//     requestUniqueCode = msg.payload.Particular.split(\"_INTEREST\")[0];\n// }\n\n// msg.url = `${PAYLATER_URL}/v1/loan-drawdown/findByRequestUniqueCode/${requestUniqueCode}`;\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown/findByRequestUniqueCode/${\"ACTY3891670570284214\"}`;\n\nmsg.method = \"GET\";\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1380,
        "wires": [
            [
                "b848bcdf2d10f8fe"
            ]
        ]
    },
    {
        "id": "b848bcdf2d10f8fe",
        "type": "http request",
        "z": "32607aaaf853d8ed",
        "name": "getDrawdownTable",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1230,
        "y": 1380,
        "wires": [
            [
                "096a7f9675e7d91e"
            ]
        ]
    },
    {
        "id": "90484c43d60fc018",
        "type": "comment",
        "z": "32607aaaf853d8ed",
        "name": "Updating drawdown table with paid disbursed amount",
        "info": "",
        "x": 900,
        "y": 980,
        "wires": []
    },
    {
        "id": "630f77cd34f8be1a",
        "type": "comment",
        "z": "32607aaaf853d8ed",
        "name": "checking for data mismatching",
        "info": "",
        "x": 870,
        "y": 1140,
        "wires": []
    },
    {
        "id": "096a7f9675e7d91e",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "verifyData",
        "func": "msg.data ={}\nmsg.data[\"Outstanding Amount\"] = -10;\nmsg.drawdown = msg.payload\nlet outstandingAmount = msg.payload.disbursedAmount - msg.payload.paidDisbursedAmount;\nif (outstandingAmount == msg.data[\"Outstanding Amount\"]){\n    msg.status = \"true\";\n}else{\n    msg.status = \"false\";\n}\nmsg.outstandingAmount = outstandingAmount\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 1380,
        "wires": [
            [
                "21dcbfc85e2eaad2"
            ]
        ]
    },
    {
        "id": "e36ed238b4b8d742",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "update drawdownStatusToPaidReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\n\nmsg.method = \"PATCH\";\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown`\nmsg.payload = {\n    // requestUniqueCode: msg.data[\"Particular\"],\n    requestUniqueCode: \"ACTY3891670570284214\",\n    drawdownStatus:\"paid\"\n    \n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 1200,
        "wires": [
            [
                "31f97649ea0b362d"
            ]
        ]
    },
    {
        "id": "4b34b927572725de",
        "type": "switch",
        "z": "32607aaaf853d8ed",
        "name": "",
        "property": "payload[\"Outstanding Amount\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 930,
        "y": 1200,
        "wires": [
            [
                "e36ed238b4b8d742"
            ]
        ]
    },
    {
        "id": "e6739a22c85d8f52",
        "type": "debug",
        "z": "32607aaaf853d8ed",
        "name": "debug 36",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1740,
        "y": 1200,
        "wires": []
    },
    {
        "id": "21dcbfc85e2eaad2",
        "type": "switch",
        "z": "32607aaaf853d8ed",
        "name": "",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1610,
        "y": 1380,
        "wires": [
            [],
            [
                "39f38dc0dd9c546e"
            ]
        ]
    },
    {
        "id": "39f38dc0dd9c546e",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "raiseAnExcemptionReq",
        "func": "const envVariables = global.get('envVariables')\nconst ADMIN_URL = envVariables.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = envVariables.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\n\nmsg.payload = {\n\n    \"from\": \"paylater@actyv.com\",\n    // \"to\": \"sunil.pn@actyv.com\",\n    \"to\":\"shravan.pm@actyv.com\",\n    \"subject\": `Number mismatch on ${msg.drawdown.id} in outstanding amount`,\n\n    \"html\": `<html>For drawdown id ${msg.drawdown.id} is outstanding amount by axis is ${msg.data[\"Outstanding Amount\"]}</html>`,\n    \"priority\": \"high\"\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1540,
        "wires": [
            [
                "de4c7acfda0fa6a1"
            ]
        ]
    },
    {
        "id": "31f97649ea0b362d",
        "type": "http request",
        "z": "32607aaaf853d8ed",
        "name": "update drawdownStatusToPaid",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1490,
        "y": 1200,
        "wires": [
            [
                "e6739a22c85d8f52"
            ]
        ]
    },
    {
        "id": "9522f24524fb9327",
        "type": "debug",
        "z": "32607aaaf853d8ed",
        "name": "debug 41",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 1540,
        "wires": []
    },
    {
        "id": "de4c7acfda0fa6a1",
        "type": "http request",
        "z": "32607aaaf853d8ed",
        "name": "raiseAnExcemption",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1330,
        "y": 1540,
        "wires": [
            [
                "9522f24524fb9327"
            ]
        ]
    },
    {
        "id": "f3f26bc87968e203",
        "type": "comment",
        "z": "32607aaaf853d8ed",
        "name": "Remove hardcoded data",
        "info": "get drawdown table\nverify data\nraise an exception",
        "x": 990,
        "y": 1300,
        "wires": []
    },
    {
        "id": "ef48006a4270b357",
        "type": "comment",
        "z": "32607aaaf853d8ed",
        "name": "Remove hardcoded data",
        "info": "get drawdown table\nverify data\nraise an exception",
        "x": 1250,
        "y": 980,
        "wires": []
    },
    {
        "id": "c2ebfbaddb14d4c4",
        "type": "comment",
        "z": "32607aaaf853d8ed",
        "name": "Remove hardcoded data",
        "info": "set status to paid",
        "x": 1210,
        "y": 1160,
        "wires": []
    },
    {
        "id": "450f726c782e918b",
        "type": "comment",
        "z": "32607aaaf853d8ed",
        "name": "Updating drawdown table with paid interest amount",
        "info": "",
        "x": 1343.333251953125,
        "y": 753.3333129882812,
        "wires": []
    },
    {
        "id": "6cb76dd8e54476f9",
        "type": "comment",
        "z": "32607aaaf853d8ed",
        "name": "Error handling",
        "info": "Send an email if any error occurs",
        "x": 350,
        "y": 1720,
        "wires": []
    },
    {
        "id": "a6ee841ca781c1fe",
        "type": "catch",
        "z": "32607aaaf853d8ed",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 340,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "0bc96a00af49cf5e",
        "type": "debug",
        "z": "32607aaaf853d8ed",
        "name": "error",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 1780,
        "wires": []
    },
    {
        "id": "6a91f185cef02482",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "sendEmailReq",
        "func": "const envVariables = global.get('envVariables')\nconst ADMIN_URL = envVariables.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = envVariables.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\n\nmsg.payload = {\n    // \"from\": \"ramu.bugudi@actyv.com\",\n    \"from\": \"shravan.pm@actyv.com\",\n    \"to\": \"ramu.bugudi@actyv.com\",\n    \"subject\": `Error occured - ${msg.error.message}`,\n    // \"html\": `${msg.error}`,\n    \"html\": `\n    <html>\n        <body>\n            <p></p>\n            <p><b>FLOW NAME:</b> ${env.get(\"NR_FLOW_NAME\")} <b>FLOW ID:</b> ${env.get(\"NR_FLOW_ID\")} <b>PATH:</b> ${env.get(\"NR_NODE_PATH\")}</p>\n            <p>${msg.error.message}</p>\n            <p>Name: ${msg.error.source.name} - Type: ${msg.error.source.type}</p>\n            <p>Stacktrace: ${msg.error.stack}</p>\n        </body>\n    </html>`,\n    \"priority\": \"high\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1780,
        "wires": [
            [
                "739bdbd50c70d749"
            ]
        ]
    },
    {
        "id": "739bdbd50c70d749",
        "type": "http request",
        "z": "32607aaaf853d8ed",
        "name": "sendEmail",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 790,
        "y": 1780,
        "wires": [
            [
                "0bc96a00af49cf5e"
            ]
        ],
        "info": "Get bank product config id"
    },
    {
        "id": "36961446534ea717",
        "type": "status",
        "z": "32607aaaf853d8ed",
        "name": "",
        "scope": null,
        "x": 340,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "118101764de9dc3f",
        "type": "debug",
        "z": "32607aaaf853d8ed",
        "name": "debug 290",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 580,
        "wires": []
    },
    {
        "id": "9023b9050b196e17",
        "type": "debug",
        "z": "32607aaaf853d8ed",
        "name": "debug 291",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 200,
        "wires": []
    },
    {
        "id": "20ead5358e4fb136",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "function 169",
        "func": "console.log({payload:msg.payload})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 600,
        "wires": [
            [
                "118101764de9dc3f"
            ]
        ]
    },
    {
        "id": "39201cadacee673b",
        "type": "inject",
        "z": "dca724589f9513c8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 100,
        "wires": [
            [
                "4b8e2322be805f7d"
            ]
        ]
    },
    {
        "id": "a61b989e4e5260f3",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "setFlowVariable",
        "func": "const bankAccount = {\n    \"enterpriseId\": \"635f75f6d988fd561700d1d2\",\n    \"bankAccountNo\": \"SFS564\",\n    \"bankIfsc\": \"565\",\n    \"bankName\": \"Sbi\"\n}\nflow.set('bankAccount', bankAccount)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 100,
        "wires": [
            [
                "7dc315ff5b6e1ce9"
            ]
        ]
    },
    {
        "id": "4b8e2322be805f7d",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "Set env variables",
        "func": "\n\n\nconst ENV_VARIABLES = new Map();\n\nENV_VARIABLES.set('PAYLATER_URL', env.get(\"PAYLATER_URL\"))\nENV_VARIABLES.set('GO_URL', env.get(\"GO_URL\"))\nENV_VARIABLES.set('ADMIN_URL', env.get(\"ADMIN_URL\"))\n\nENV_VARIABLES.set('BUSINESS_IDENTIFIER', env.get(\"BUSINESS_IDENTIFIER\"))\nENV_VARIABLES.set('BUSINESS_TYPE', env.get(\"BUSINESS_TYPE\"))\nENV_VARIABLES.set('BANK_KEY', env.get(\"BANK_KEY\"))\nENV_VARIABLES.set('BANK_PRODUCT_KEY', env.get(\"BANK_PRODUCT_KEY\"))\nENV_VARIABLES.set('X_ACTYV_API_CONFIG_KEY', env.get(\"X_ACTYV_API_CONFIG_KEY\"))\nENV_VARIABLES.set('EMAIL', env.get(\"EMAIL\"))\nENV_VARIABLES.set('PASSWORD', env.get(\"PASSWORD\"))\nENV_VARIABLES.set('CONFIG_KEY', env.get(\"CONFIG_KEY\"))\nENV_VARIABLES.set('BANK_UNIQUE_IDENTIFIER', env.get(\"BANK_UNIQUE_IDENTIFIER\"))\n\nglobal.set('envVariables',ENV_VARIABLES)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 100,
        "wires": [
            [
                "a61b989e4e5260f3"
            ]
        ]
    },
    {
        "id": "678e876b30242c50",
        "type": "SFTP-main",
        "z": "dca724589f9513c8",
        "path": "/",
        "method": "list",
        "remoteFilePath": "/sftpdir/test/shravan",
        "remoteFilePathType": "str",
        "localFilePath": "C:\\Users\\Ayush Rarg\\OneDrive - actyv.ai\\Desktop\\node-red",
        "localFilePathType": "str",
        "server": "e890793010d7a406",
        "outputs": 1,
        "debug": false,
        "name": "lisitng the files from sftp",
        "x": 547.142822265625,
        "y": 332.8571472167969,
        "wires": [
            [
                "ce8c4300bdce8901"
            ]
        ]
    },
    {
        "id": "266ef574ee62cbe9",
        "type": "SFTP-main",
        "z": "dca724589f9513c8",
        "path": "/",
        "method": "get",
        "remoteFilePath": "payload",
        "remoteFilePathType": "msg",
        "localFilePath": "/Users/shravanpm/Desktop/node-red",
        "localFilePathType": "str",
        "server": "e890793010d7a406",
        "outputs": 1,
        "debug": false,
        "name": "get a single file from sftp",
        "x": 1187.142822265625,
        "y": 332.8571472167969,
        "wires": [
            [
                "45b8eb1406dfc508",
                "0d6c2523e13c9b4f"
            ]
        ]
    },
    {
        "id": "2ed0fe15d86cf75f",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "mapJsonFromXLSX",
        "func": "// console.log(\"agsdvghasvd\",msg.payload)\n// return\nconst bankDetails = flow.get('bankDetails') || {}\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n// msg.payload = msg.payload.splice(7,1)\n// return msg\nlet startIndex;\nfor (let i = 0; i < msg.payload.length - 1; i++) {\n    if (msg.payload[i][\"A\"] === \"DEALER UTILIZATION REPORT\") {\n        startIndex = i;\n        break;\n    }\n\n};\nconsole.log({length:msg.payload.length,startIndex})\nfor (let i = startIndex + 2; i < msg.payload.length; i++) {\n  \n    let obj = {\n        \"SR NO.\":msg.payload[i][\"A\"],\n        \"IM NAME\":msg.payload[i][\"B\"],\n        \"DEALER NAME\":msg.payload[i]['C'],\n        \"DEALER ACCOUNT NO.\":msg.payload[i][\"D\"],\n        \"DEALER CODE\":msg.payload[i][\"E\"],\n        \"SANCTION LIMIT\":msg.payload[i][\"F\"],\n        \"DRAWING POWER\":msg.payload[i][\"G\"],\n        \"LIMIT UTILIZED\":msg.payload[i][\"H\"],\n        \"LIMIT AVAILABLE\":msg.payload[i][\"I\"],\n        \"LIMIT EXPIRY DATE\":msg.payload[i][\"J\"],\n        \"ADHOC SANCTION LIMIT\":msg.payload[i][\"K\"],\n        \"ADHOC LIMIT UTILIZED\":msg.payload[i][\"L\"],\n        \"ADHOC LIMIT AVAILABLE\":msg.payload[i][\"M\"],\n        \"ADHOC EXPIRY DATE\":msg.payload[i][\"N\"],\n        \"TOTAL LIMIT AVAILABLE\":msg.payload[i][\"O\"],\n        \"ACCOUNT STATUS\":msg.payload[i][\"P\"],\n        \"OVERDUE DAYS\":msg.payload[i][\"Q\"],\n        \"TOTAL OVERDUE AMOUNT\":msg.payload[i][\"R\"],\n        \"BRANCH CODE\":msg.payload[i][\"S\"],\n        \"SME CENTER\":msg.payload[i][\"T\"]\n    }\n    console.log({obj})\n    if(obj[\"DEALER CODE\"]){\n        node.send({ payload: {},row:obj });\n    }\n   \n}\n\nfunction handleSwitchCondition(payload) {\n    // console.log(\"ssss\", payload)\n    if (payload?.includes(\"INTEREST\")) {\n        return \"INTEREST\"\n    } else if ((!payload?.includes(\"Total\")) && payload) {\n        return \"PRINCIPAL\"\n    } else if (payload?.includes(\"Sub Total\")) {\n        return \"null\"\n    }\n    console.log(\"ssss\", payload)\n    return \"dd\"\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 680,
        "wires": [
            [
                "93256fb3260804af"
            ]
        ]
    },
    {
        "id": "999d35f0f287ef43",
        "type": "alafile in",
        "z": "dca724589f9513c8",
        "name": "",
        "filename": "",
        "format": "xls",
        "columns": "*",
        "headers": true,
        "x": 110,
        "y": 680,
        "wires": [
            [
                "2ed0fe15d86cf75f"
            ]
        ]
    },
    {
        "id": "ce8c4300bdce8901",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "function 14",
        "func": "const sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nfor(let i=0;i<msg.payload.length;i++){\n    sleep(2000)\n    \n    node.send({payload:[msg.payload[i]],fileName:msg.payload[i]});\n}\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 847.142822265625,
        "y": 332.8571472167969,
        "wires": [
            [
                "266ef574ee62cbe9"
            ]
        ]
    },
    {
        "id": "921a2dacbec97d1b",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "Interest",
        "func": "msg.data = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 2840,
        "wires": [
            []
        ]
    },
    {
        "id": "25609547d9f83b87",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "Principal",
        "func": "msg.data = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 3040,
        "wires": [
            []
        ]
    },
    {
        "id": "88e82ceaa468076f",
        "type": "switch",
        "z": "dca724589f9513c8",
        "name": "",
        "property": "switchCondition",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "INTEREST",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PRINCIPAL",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "null",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 270,
        "y": 2940,
        "wires": [
            [
                "921a2dacbec97d1b"
            ],
            [
                "25609547d9f83b87",
                "bc96a999377a7616"
            ],
            []
        ]
    },
    {
        "id": "e06aa5902caf6875",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "update drawdown table",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\n\n\nmsg.method = \"PATCH\";\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown`\nmsg.payload = {\n    requestUniqueCode: \"ACTY3891670570284214\",\n    // drawdownStatus:\"paid\"\n    paidDisbursedAmount: Number(msg.data[\"Transaction Amount\"]) - Number(msg.data[\"Outstanding Amount\"])\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 3040,
        "wires": [
            [
                "37ecbfa040739388"
            ]
        ]
    },
    {
        "id": "1944c0e378678edc",
        "type": "debug",
        "z": "dca724589f9513c8",
        "name": "debug 37",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 2840,
        "wires": []
    },
    {
        "id": "4022dc8aa82d94a8",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "updateDrawdownTableForPaidInterest",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\n\nmsg.method = \"PATCH\";\nmsg.url=`${PAYLATER_URL}/v1/loan-drawdown`;\nmsg.payload = {\n    requestUniqueCode: \"ACTY3891670570284214\",\n    // drawdownStatus:\"paid\"\n    paidInterestAmount: Number(msg.data[\"Transaction Amount\"]) - Number(msg.data[\"Outstanding Amount\"])\n}\n\nreturn msg;\n\n/**\n *  \"sr.No\" : row[\"MATURITY REPORT\"],\n                \"Dealer Name\":row[\"B\"],\n                \"Account No\":row[\"C\"],\n                \"Dealer Code\":row[\"D\"],\n                \"Transaction Date\":row[\"E\"],\n                \"Particular\": row[\"F\"],\n                \"Invoice Date\": row[\"G\"],\n                \"Transaction Amount\": row[\"H\"],\n                \"Outstanding Amount\": row[\"I\"],\n                \"Outstanding Days\": row[\"J\"],\n                \"Credit Period\": row[\"K\"],\n                \"Maturity Date\": row[\"L\"],\n                \"Overdue Amount\": row[\"M\"],\n                \"Overdue Days\": row[\"N\"],\n                \"Availed Adhoc\": row[\"M\"],\n */",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 2840,
        "wires": [
            [
                "31fcfa5cda73aadb"
            ]
        ]
    },
    {
        "id": "31fcfa5cda73aadb",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1170,
        "y": 2840,
        "wires": [
            [
                "1944c0e378678edc"
            ]
        ]
    },
    {
        "id": "37ecbfa040739388",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1130,
        "y": 3040,
        "wires": [
            []
        ]
    },
    {
        "id": "84336a1f98cf2e12",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 3040,
        "wires": [
            []
        ]
    },
    {
        "id": "bc96a999377a7616",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "Principal",
        "func": "msg.data = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 3200,
        "wires": [
            [
                "fd418f453d1d3553"
            ]
        ]
    },
    {
        "id": "f93dfd3d1d88bd22",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "update drawdown table",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\n\n\n\nlet requestUniqueCode;\n\nif (msg.switchCondition ===\"PRINCIPAL\"){\n    requestUniqueCode = msg.payload.Particular\n}else{\n    requestUniqueCode = msg.payload.Particular.split(\"_INTEREST\")[0];\n}\n\n// msg.url = `${PAYLATER_URL}/v1/loan-drawdown/findByRequestUniqueCode/${requestUniqueCode}`;\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown/findByRequestUniqueCode/${\"ACTY3891670570284214\"}`;\n\nmsg.method = \"GET\";\n// msg.payload = {\n//     // requestUniqueCode,\n//     requestUniqueCode:\"ACTY3891670570284214\",\n//     drawdownStatus:\"paid\"\n// }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 3360,
        "wires": [
            [
                "a0efbc6ef573121f"
            ]
        ]
    },
    {
        "id": "a0efbc6ef573121f",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 730,
        "y": 3360,
        "wires": [
            [
                "7024f21bc61f1edc"
            ]
        ]
    },
    {
        "id": "9c4c9ac90eead4c2",
        "type": "comment",
        "z": "dca724589f9513c8",
        "name": "Updating drawdown table with paid disbursed amount",
        "info": "",
        "x": 780,
        "y": 2980,
        "wires": []
    },
    {
        "id": "b536446b9b83ed4a",
        "type": "comment",
        "z": "dca724589f9513c8",
        "name": "checking for data mismatching",
        "info": "",
        "x": 750,
        "y": 3140,
        "wires": []
    },
    {
        "id": "7024f21bc61f1edc",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "verifyData",
        "func": "let outstandingAmount = msg.payload.disbursedAmount - msg.payload.paidDisbursedAmount;\nif (outstandingAmount == msg.data[\"Outstanding Amount\"]){\n    msg.status = \"true\";\n}else{\n    msg.status = \"false\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 3360,
        "wires": [
            [
                "31ddd51cb35b6fb8"
            ]
        ]
    },
    {
        "id": "1a9c99bef5094fbf",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "update drawdownStatus to paid",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\n\n\nmsg.method = \"PATCH\";\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown`\nmsg.payload = {\n    // requestUniqueCode: msg.data[\"Particular\"],\n    requestUniqueCode: \"ACTY3891670570284214\",\n    drawdownStatus:\"paid\"\n    \n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 3100,
        "wires": [
            [
                "1bb7f50f46b83ae1"
            ]
        ]
    },
    {
        "id": "fd418f453d1d3553",
        "type": "switch",
        "z": "dca724589f9513c8",
        "name": "",
        "property": "payload[\"Outstanding Amount\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 3200,
        "wires": [
            [
                "1a9c99bef5094fbf"
            ],
            [
                "f93dfd3d1d88bd22"
            ]
        ]
    },
    {
        "id": "75fbe8b11a3be1ad",
        "type": "debug",
        "z": "dca724589f9513c8",
        "name": "debug 39",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 3100,
        "wires": []
    },
    {
        "id": "31ddd51cb35b6fb8",
        "type": "switch",
        "z": "dca724589f9513c8",
        "name": "",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 3360,
        "wires": [
            [],
            [
                "db9fbf5382199d92"
            ]
        ]
    },
    {
        "id": "db9fbf5382199d92",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "raiseAnExcemption",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 3440,
        "wires": [
            []
        ]
    },
    {
        "id": "1bb7f50f46b83ae1",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1310,
        "y": 3100,
        "wires": [
            [
                "75fbe8b11a3be1ad"
            ]
        ]
    },
    {
        "id": "9e89c0628dae798d",
        "type": "SFTP-main",
        "z": "dca724589f9513c8",
        "g": "c61f6fd5ccf5ede8",
        "path": "/",
        "method": "put",
        "remoteFilePath": "successPath",
        "remoteFilePathType": "msg",
        "localFilePath": "localPath",
        "localFilePathType": "msg",
        "server": "e890793010d7a406",
        "outputs": 1,
        "debug": false,
        "name": "move to success folder",
        "x": 417.142822265625,
        "y": 532.8571472167969,
        "wires": [
            [
                "ce2076e6cdd3b758"
            ]
        ]
    },
    {
        "id": "ab60355897d8a01d",
        "type": "debug",
        "z": "dca724589f9513c8",
        "g": "c61f6fd5ccf5ede8",
        "name": "Deleted file from SFTP existing directory",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1057.142822265625,
        "y": 532.8571472167969,
        "wires": []
    },
    {
        "id": "ce2076e6cdd3b758",
        "type": "SFTP-main",
        "z": "dca724589f9513c8",
        "g": "c61f6fd5ccf5ede8",
        "path": "/",
        "method": "delete",
        "remoteFilePath": "remotePath",
        "remoteFilePathType": "msg",
        "localFilePath": "filepath",
        "localFilePathType": "msg",
        "server": "e890793010d7a406",
        "outputs": 1,
        "debug": false,
        "name": "delete from existing folder",
        "x": 697.142822265625,
        "y": 532.8571472167969,
        "wires": [
            [
                "ab60355897d8a01d"
            ]
        ]
    },
    {
        "id": "45b8eb1406dfc508",
        "type": "function",
        "z": "dca724589f9513c8",
        "g": "c61f6fd5ccf5ede8",
        "name": "setRemotePath",
        "func": "msg.filename = msg.payload[0].split('.')[0] // filename without extension\n\nconst folderPath = msg.payload[0].split(\"/\")\nconst fileName = folderPath[folderPath.length - 1]\nflow.set('filename', fileName) // filename with extension\n\n// msg.filepath = `/Users/ramu/Desktop/node-red/${fileName}`\nmsg.successPath = `/sftpdir/test/ramu/success`\nmsg.localPath = `/Users/ramu/Desktop/node-red/${fileName}`\nmsg.remotePath = `/sftpdir/test/ramu/limits/${fileName}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 117.142822265625,
        "y": 532.8571472167969,
        "wires": [
            [
                "999d35f0f287ef43"
            ]
        ]
    },
    {
        "id": "68c517589c1028ab",
        "type": "comment",
        "z": "dca724589f9513c8",
        "name": "Error handling",
        "info": "Send an email if any error occurs",
        "x": 150,
        "y": 2680,
        "wires": []
    },
    {
        "id": "0ce2a8fe5841fb80",
        "type": "catch",
        "z": "dca724589f9513c8",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 140,
        "y": 2740,
        "wires": [
            []
        ]
    },
    {
        "id": "714716f08e83f963",
        "type": "debug",
        "z": "dca724589f9513c8",
        "name": "error",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 2740,
        "wires": []
    },
    {
        "id": "2976d18eebf42b2b",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "sendEmailReq",
        "func": "const envVariables = global.get('envVariables')\nconst ADMIN_URL = envVariables.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = envVariables.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\n\nmsg.payload = {\n    // \"from\": \"ramu.bugudi@actyv.com\",\n    \"from\": \"shravan.pm@actyv.com\",\n    \"to\": \"ramu.bugudi@actyv.com\",\n    \"subject\": `Error occured - ${msg.error.message}`,\n    // \"html\": `${msg.error}`,\n    \"html\": `\n    <html>\n        <body>\n            <p></p>\n            <p><b>FLOW NAME:</b> ${env.get(\"NR_FLOW_NAME\")} <b>FLOW ID:</b> ${env.get(\"NR_FLOW_ID\")} <b>PATH:</b> ${env.get(\"NR_NODE_PATH\")}</p>\n            <p>${msg.error.message}</p>\n            <p>Name: ${msg.error.source.name} - Type: ${msg.error.source.type}</p>\n            <p>Stacktrace: ${msg.error.stack}</p>\n        </body>\n    </html>`,\n    \"priority\": \"high\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 2740,
        "wires": [
            [
                "552cbcbbc04b435a"
            ]
        ]
    },
    {
        "id": "552cbcbbc04b435a",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "sendEmail",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 590,
        "y": 2740,
        "wires": [
            [
                "714716f08e83f963"
            ]
        ],
        "info": "Get bank product config id"
    },
    {
        "id": "e682d706b627bcce",
        "type": "status",
        "z": "dca724589f9513c8",
        "name": "",
        "scope": null,
        "x": 140,
        "y": 2800,
        "wires": [
            []
        ]
    },
    {
        "id": "7e334742249167d9",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "fetchLoanTermByCrn",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\n\n\nmsg.data = {...msg.payload}\nmsg.method = \"POST\";\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/fetchByCrnNumber`;\nmsg.payload= {\n    \"crnNumber\": msg.payload[\"DEALER CODE\"]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 2520,
        "wires": [
            [
                "884fddf5f4fccb30"
            ]
        ]
    },
    {
        "id": "884fddf5f4fccb30",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 910,
        "y": 2520,
        "wires": [
            [
                "48b30d999aef9395",
                "4ee1e97a1a06e2c9"
            ]
        ]
    },
    {
        "id": "48b30d999aef9395",
        "type": "debug",
        "z": "dca724589f9513c8",
        "name": "Loan terms",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 2600,
        "wires": []
    },
    {
        "id": "4ee1e97a1a06e2c9",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "updateLoanTerm",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\n\n\n\nmsg.method = \"PATCH\";\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/update`;\nmsg.payload = {\n    \"crnNumber\": msg.data[\"DEALER CODE\"],\n    \"loanTermsID\": msg.payload.id,\n    \"loanAmount\": msg.data[\"LIMIT UTILIZED\"],\n    // \"loanAmount\": msg.data[\"SANCTION LIMIT\"] - msg.data[\"LIMIT AVAILABLE\"],\n    // \"validTill\": msg.data[\"LIMIT EXPIRY DATE\"]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 2620,
        "wires": [
            [
                "6b07b4ce4103694a"
            ]
        ]
    },
    {
        "id": "6b07b4ce4103694a",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 410,
        "y": 2620,
        "wires": [
            [
                "ecd5f3fa104b371f"
            ]
        ]
    },
    {
        "id": "ecd5f3fa104b371f",
        "type": "debug",
        "z": "dca724589f9513c8",
        "name": "End",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 2620,
        "wires": []
    },
    {
        "id": "1b1fd2ad6c842595",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "getBusinsessPartnerReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\n// console.log({ X_ACTYV_API_CONFIG_KEY, GO_URL })\nconst row = msg.payload\n\nmsg.url = `${GO_URL}/business-partner/service/XX${row[\"Pan Card\"]}XXX`\nmsg.method = 'GET'\nmsg.headers = {};\nmsg.headers['x-actyv-api-config-key'] = X_ACTYV_API_CONFIG_KEY;\n\nmsg.row = row\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 780,
        "wires": [
            [
                "73f3cacc7fea8209"
            ]
        ]
    },
    {
        "id": "73f3cacc7fea8209",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "getBusinessPartner",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 550,
        "y": 780,
        "wires": [
            [
                "a14d4a7ae5e51feb",
                "b32ad76e4d0ff5e4"
            ]
        ]
    },
    {
        "id": "a14d4a7ae5e51feb",
        "type": "debug",
        "z": "dca724589f9513c8",
        "name": "getBusinessPartner",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 780,
        "wires": []
    },
    {
        "id": "b32ad76e4d0ff5e4",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "getAllBankApplicationReq",
        "func": "const GO_URL = env.get('GO_URL')\n\nconst businessPartnerId = msg.payload._id\nmsg.businessPartnerId = msg.payload._id\n\n// flow.set('bankProductConfigId', msg.payload.id)\nconst bankId = msg.bankId\n\n\nmsg.url = `${GO_URL}/bank-application?bankID=${bankId}&businessPartner=${businessPartnerId}&bankProductConfigKey=${msg.payload.id}`\n// console.log(\"URL\",msg.url)\nmsg.method = 'GET'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1000,
        "wires": [
            [
                "194f5c0af91ddc45"
            ]
        ]
    },
    {
        "id": "194f5c0af91ddc45",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "getAllBankApplication",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 540,
        "y": 1000,
        "wires": [
            [
                "d6f3fe1d5b19ba16",
                "b87577c002b43b0d"
            ]
        ]
    },
    {
        "id": "b87577c002b43b0d",
        "type": "debug",
        "z": "dca724589f9513c8",
        "name": "getAllBankApplications",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 1000,
        "wires": []
    },
    {
        "id": "d6f3fe1d5b19ba16",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "updateBankApplicationStatusReq",
        "func": "const GO_URL = env.get('GO_URL')\n\nconst token = flow.get(\"enterpriseToken\")\n\nmsg.url = `${GO_URL}/bank-application/decision/update`\nmsg.method = 'POST'\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.payload = {\n    remarks: \"approved\",//msg.row[\"Reason For rejection\"], // actual message\n    // remarks: \"APPROVE\", // actual message\n    decision: {\n        label: \"approved\",//msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? \"Approve\" : \"Reject\",\n        value: \"approved\",//msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? \"APPROVE\" : \"REJECT\",\n        // value: false ? \"APPROVE\" : \"REJECT\",\n        variableName: \"bankapprover_action\",\n        actionType: \"DECISION\",\n    },\n    bankApplicationId: msg.payload[0]._id || \"63fc9febc7d9bb697685ab4a\",\n    correctionItems: {\n        documentIds: [],\n    },\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1100,
        "wires": [
            [
                "515f570cee9bf6eb"
            ]
        ]
    },
    {
        "id": "515f570cee9bf6eb",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "updateBankApplicationStatus",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 610,
        "y": 1100,
        "wires": [
            [
                "197ed52dfe16f25c"
            ]
        ]
    },
    {
        "id": "197ed52dfe16f25c",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "createLoanTermReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\nconst bankToken = flow.get(\"bankToken\")\n\n\nconst bankAccount = flow.get(\"bankAccount\") || {}\n\nconst bankDetails = flow.get('bankDetails') || {}\n// const businessPartnerId = flow.get('businessPartnerId')\nconst businessPartnerId = \"\"\n\n\nconst enterpriseID = msg.enterpriseId\nconst bankId = msg.bankId\n\nconst row = msg.row\n\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.headers = {\n        Authorization: `Bearer ${actyvToken}`,\n        bankid: msg.bankid\n}\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms`\nmsg.method = 'POST'\n\nmsg.payload = {\n        bankID: bankId,\n        borrowerID: businessPartnerId,\n        enterpriseID,\n        productType: \"BNPL\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1100,
        "wires": [
            [
                "c31c4989580066b9"
            ]
        ]
    },
    {
        "id": "c31c4989580066b9",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "createLoanTerm",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 200,
        "y": 1200,
        "wires": [
            [
                "e432d21ed567ca10"
            ]
        ]
    },
    {
        "id": "e432d21ed567ca10",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "updateLoanTermReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst row = msg.row\n\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.headers = {\n        Authorization: `Bearer ${actyvToken}`,\n        \"x-actyv-api-config\":X_ACTYV_API_CONFIG_KEY,\n}\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/service/update`\nmsg.method = 'PATCH',\n\nmsg.payload = {\n        loanTermsID: msg.payload.id,\n        approvedLimit: msg.row[\"SANCTION LIMIT\"],\n        // loanAmount: row[\"Loan Accepted Amount\"],\n        loanAmount: 0,\n        crnNumber: row[\"DEALER ACCOUNT NO.\"],\n        validTill: msg.row[\"LIMIT EXPIRY DATE\"] ,\n        loanGrantStatus: \"APPROVED\",\n       \n}\n\nfunction calculateValidTill(inputDate){\n        let date = inputDate\n        let split = date.split(\"/\")\n        let addOneYear = Number(split[split.length - 1]) + 1\n        split[split.length - 1] = addOneYear\n        let joined = split.join('-')\n        return joined\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1200,
        "wires": [
            [
                "a87981adfddb275e"
            ]
        ]
    },
    {
        "id": "a87981adfddb275e",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "updateLoanTerm",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 810,
        "y": 1200,
        "wires": [
            [
                "21e5858a53aeb17c"
            ]
        ]
    },
    {
        "id": "21e5858a53aeb17c",
        "type": "switch",
        "z": "dca724589f9513c8",
        "name": "",
        "property": "row[\"Loan Approved (Y/N)\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "N",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Y",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 1300,
        "wires": [
            [],
            [
                "78e4e46049ef0bcc"
            ]
        ]
    },
    {
        "id": "78e4e46049ef0bcc",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "createTernorAndRateSpreadReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst bankAccount = flow.get(\"bankAccount\") || {}\nconst bankDetails = flow.get('bankDetails') || {}\nconst benchmarkRateID = flow.get(\"benchmarkRateID\") || \"\"\n\nconsole.log(\"benchmarkRateID\", benchmarkRateID)\n\nconst bankId = msg.bankId\n\nconst row = msg.row\n\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.headers = {\n        Authorization: `Bearer ${actyvToken}`,\n        bankid:bankId\n}\n\nmsg.url = `${PAYLATER_URL}/v1/tenor-and-rate-spread`\nmsg.method = 'POST'\nmsg.payload = {\n        bankID: bankId,\n        loanID: msg.payload.id,\n        fromDuration: \"P0D\",\n        benchmarkRateID: benchmarkRateID,\n        toDuration: \"P45D\",\n        loanProductID: \"BNPL\",\n        bankSpread: row[\"ROI\"],\n        actyvSpread: 1,\n        additionalCashbackCodes: []\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1320,
        "wires": [
            [
                "d9ae4454cfe8bd3e"
            ]
        ]
    },
    {
        "id": "d9ae4454cfe8bd3e",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "createTenorAndRateSpread",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 800,
        "y": 1320,
        "wires": [
            [
                "3a6394a23a6bc801"
            ]
        ]
    },
    {
        "id": "3a6394a23a6bc801",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "createBusinessRelationship(D-B)Req",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst bankAccount = flow.get(\"bankAccount\") || {}\nconst bankDetails = flow.get('bankDetails') || {}\n\nconst {  bankAccountNo,\n        bankIfsc,\n        bankName, } = bankAccount\n\nconst enterpriseId = msg.enterpriseId\nconst bankId = msg.bankId\nconst businessPartnerId = flow.get('businessPartnerId') || \"\"\n\nconst row = msg.row\n\nmsg.url = `${GO_URL}/business-relationship/service`\nmsg.method = 'POST'\nmsg.headers = {};\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = {\n        businessId: businessPartnerId,\n        parentBusinessId: enterpriseId,\n        identifierByParent: row[\"Dealer Code\"],\n        bankAccountNumber: bankAccountNo,\n        bankIFSC: bankIfsc,\n        bankName: bankName,\n        relationType: \"DISTRIBUTOR-BANK\"\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1420,
        "wires": [
            [
                "08c54125f4a6e061"
            ]
        ]
    },
    {
        "id": "08c54125f4a6e061",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "createBusinessRelationship(D-B)",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 740,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "7dc315ff5b6e1ce9",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "getBankProductConfigReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\n\nflow.set('businessPartnerId', msg.payload._id)\nmsg.businessPartnerId = msg.payload._id\n\nmsg.url = `${GO_URL}/bank-application-config/key/${BANK_PRODUCT_KEY}`\nmsg.method = 'GET'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 200,
        "wires": [
            [
                "df74436e240c815a"
            ]
        ]
    },
    {
        "id": "df74436e240c815a",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "getBankProductConfig",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 580,
        "y": 200,
        "wires": [
            [
                "6b22819cf3564460",
                "f0acb4faa80693b8"
            ]
        ]
    },
    {
        "id": "6b22819cf3564460",
        "type": "debug",
        "z": "dca724589f9513c8",
        "name": "getBankProduct",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 60,
        "wires": []
    },
    {
        "id": "f0acb4faa80693b8",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "function 170",
        "func": "msg.bankId = msg.payload.bank\nmsg.enterpriseId = msg.payload.allowedEnterprises[0]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 200,
        "wires": [
            [
                "8e44ba1cebb310a1"
            ]
        ]
    },
    {
        "id": "8e44ba1cebb310a1",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst ENTERPRISE_USER_EMAIL = env.get('ENTERPRISE_USER_EMAIL')\nconst ENTERPRISE_USER_PASSWORD = env.get('ENTERPRISE_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": ENTERPRISE_USER_PASSWORD,\n    \"email\": ENTERPRISE_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 260,
        "wires": [
            [
                "470ab6de2bb07b8d"
            ]
        ]
    },
    {
        "id": "470ab6de2bb07b8d",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "AuthenticateEnterpriseUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 580,
        "y": 260,
        "wires": [
            [
                "f90879aa6accee3b"
            ]
        ]
    },
    {
        "id": "f90879aa6accee3b",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "saveEnterpriseToken",
        "func": "flow.set(\"enterpriseToken\",msg.payload.idToken)\n// console.log(msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 260,
        "wires": [
            [
                "27bbfaf0ca473c52"
            ]
        ]
    },
    {
        "id": "27bbfaf0ca473c52",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "AuthenticateBankUserReq",
        "func": "\nconst BANK_USER_EMAIL = env.get('BANK_USER_EMAIL')\nconst BANK_USER_PASSWORD = env.get('BANK_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": BANK_USER_PASSWORD,\n    \"email\": BANK_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 260,
        "wires": [
            [
                "a17ef445d395e297"
            ]
        ]
    },
    {
        "id": "a17ef445d395e297",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "AuthenticateBankUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1460,
        "y": 260,
        "wires": [
            [
                "50c0c4186daf2822"
            ]
        ]
    },
    {
        "id": "50c0c4186daf2822",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "saveBankToken",
        "func": "flow.set(\"bankToken\",msg.payload.idToken)\n// console.log(msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 260,
        "wires": [
            [
                "678e876b30242c50"
            ]
        ]
    },
    {
        "id": "93256fb3260804af",
        "type": "debug",
        "z": "dca724589f9513c8",
        "name": "debug 299",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 680,
        "wires": []
    },
    {
        "id": "0d6c2523e13c9b4f",
        "type": "debug",
        "z": "dca724589f9513c8",
        "name": "debug 300",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 420,
        "wires": []
    },
    {
        "id": "15af80948e9ac06e",
        "type": "inject",
        "z": "79f42ae3a90a4604",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "7614ad5653e43821"
            ]
        ]
    },
    {
        "id": "7614ad5653e43821",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "Set env variables",
        "func": "\n// let v8 = global.get(\"v8\");\n// const totalHeapSize = v8.getHeapStatistics().total_available_size;\n// let totalHeapSizeInMB = (totalHeapSize / 1024 / 1024).toFixed(2)\n// node.warn(\"V8 Total Heap Size \"+totalHeapSize+\" bytes\");\n\nconst ENV_VARIABLES = new Map();\n\nENV_VARIABLES.set('PAYLATER_URL', \"https://actyv-platform-paylater-service-v1.qa.actyv.com\")\nENV_VARIABLES.set('GO_URL', \"https://actyv-platform-go-service.qa.actyv.com\")\nENV_VARIABLES.set('ADMIN_URL', \"https://actyv-platform-admin-service.qa.actyv.com\")\n\nENV_VARIABLES.set('BUSINESS_IDENTIFIER', \"ABBCB2066P\")\nENV_VARIABLES.set('BUSINESS_TYPE', \"ENTERPRISE\")\nENV_VARIABLES.set('BANK_KEY', \"msl\")\nENV_VARIABLES.set('X_ACTYV_API_CONFIG_KEY', \"8HhkIWzVMSnSgvlhxr\")\nENV_VARIABLES.set('BANK_UNIQUE_IDENTIFIER', \"AASCA2089A\")\nENV_VARIABLES.set('BASE_URL', \"https://iifl-atlas-uat.finfluxtrial.io\")\nENV_VARIABLES.set('tenant_id', \"iifl-qa\")\nENV_VARIABLES.set('BANK_PRODUCT_KEY', \"axis-sabari-product\")\n\nENV_VARIABLES.set('BNPL_USER', \"surajkumar@aplapollo.com\")\nENV_VARIABLES.set('BNPL_USER_PASSWORD', \"890ioP@12\")\nENV_VARIABLES.set('IIFL_USER', \"demoUser1\")\nENV_VARIABLES.set('IIFL_USER_PASSWORD', \"fc895Tbr2i&w@\")\n\nglobal.set('envVariables', ENV_VARIABLES)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 60,
        "wires": [
            [
                "5827270d43b4b34f"
            ]
        ]
    },
    {
        "id": "5827270d43b4b34f",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "AuthenticateBNPLUserReq",
        "func": "\nconst AXIS_BANK_ADMIN_EMAIL = env.get('AXIS_BANK_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": AXIS_BANK_ADMIN_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 160,
        "wires": [
            [
                "fe0316920aacfed3"
            ]
        ]
    },
    {
        "id": "fe0316920aacfed3",
        "type": "http request",
        "z": "79f42ae3a90a4604",
        "name": "AuthenticateBNPLUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 160,
        "wires": [
            [
                "f3de3f65301d35f2"
            ]
        ]
    },
    {
        "id": "f3de3f65301d35f2",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 160,
        "wires": [
            [
                "a16bca435637d56e"
            ]
        ]
    },
    {
        "id": "a16bca435637d56e",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "getBankProductKeyReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY_CKPL_AXIS = env.get('BANK_PRODUCT_KEY_CKPL_AXIS')\n\nmsg.url = `${GO_URL}/bank-application-config/key/${BANK_PRODUCT_KEY_CKPL_AXIS}`\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 300,
        "wires": [
            [
                "044365b73baabfe2",
                "aafbda910088ae42"
            ]
        ]
    },
    {
        "id": "044365b73baabfe2",
        "type": "http request",
        "z": "79f42ae3a90a4604",
        "name": "getBankProductKeyReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 300,
        "wires": [
            [
                "9c2b3ad499bbc929",
                "b5edfd435c6aeebe"
            ]
        ]
    },
    {
        "id": "9c2b3ad499bbc929",
        "type": "debug",
        "z": "79f42ae3a90a4604",
        "name": "bankProductConfig",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 300,
        "wires": []
    },
    {
        "id": "b5edfd435c6aeebe",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "getPendingBankApplicationsReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst AXIS_LEAD_PUSH_APPLICATION_STATUS = env.get(\"AXIS_LEAD_PUSH_APPLICATION_STATUS\")\nmsg.bankId = msg.payload.bank\nmsg.enterpriseId = msg.payload.allowedEnterprises[0]\n\nmsg.url = `${GO_URL}/bank-application?bankID=${msg.bankId}&enterpriseID=${msg.enterpriseId}&applicationStatus=${AXIS_LEAD_PUSH_APPLICATION_STATUS}`\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 420,
        "wires": [
            [
                "57f74692223072bb"
            ]
        ]
    },
    {
        "id": "57f74692223072bb",
        "type": "http request",
        "z": "79f42ae3a90a4604",
        "name": "getPendingBankApplications",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 420,
        "wires": [
            [
                "48891c366afe52c5",
                "d6ea866aa8624a41"
            ]
        ]
    },
    {
        "id": "48891c366afe52c5",
        "type": "debug",
        "z": "79f42ae3a90a4604",
        "name": "pendingBankApplications",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 420,
        "wires": []
    },
    {
        "id": "d6ea866aa8624a41",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "mockBankApplication",
        "func": "msg.payload = [\n    { \"_id\": \"64378d661a74df4e2b28827a\", \"createdOn\": \"Thu, 13 Apr 2023 05:04:19 GMT\", \"createdBy\": \"63930e951ab619b3fdaa5035\", \"updatedOn\": \"Thu, 13 Apr 2023 05:09:13 GMT\", \"isDeleted\": false, \"bankApplicationDocumentConfigKey\": \"642d489aebc96fa3e9daf1ae\", \"bankName\": \"IIFL Finance\", \"productFamily\": \"PAYLATER\", \"productType\": \"PAYLATER\", \"productKey\": \"cavinkare-iifl-PayLater\", \"status\": \"CREDIT_ANALYST_REVIEW\", \"businessPartnerName\": \"MC ENTERPRISES\", \"businessPartnerID\": \"63930e95390a05e1ee21d58e\", \"productGranularity\": \"product\", \"bankApplicationConfigId\": \"64363fc74516a3ea3c8b86d9\", \"bankId\": \"642d3bc0ebc96f31f3daebe9\", \"enterpriseId\": \"637670c7f8e9564da0dea656\", \"workflowTaskID\": \"b15f0e5c-d9b8-11ed-a3df-0242ac110002\", \"approvedLimit\": null, \"availableLimit\": null }\n]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 500,
        "wires": [
            [
                "75b154ea4505acb5"
            ]
        ]
    },
    {
        "id": "75b154ea4505acb5",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "LoopOverBankApplication",
        "func": "\nfor(let bankApplication of msg.payload){\n    // console.log({bankApplication})\n    node.send({\n        businessPartnerId: bankApplication.businessPartnerID,\n        bankId: bankApplication.bankId,\n        enterpriseId: bankApplication.enterpriseId,\n        bankProductConfigId: bankApplication.bankProductConfigId\n    })\n}\n\n// return msg;\n\n/**\n *  \"_id\": \"63f4abd94f0acc5aa73d9e46\",\n        \"createdOn\": \"Tue, 21 Feb 2023 11:32:41 GMT\",\n        \"createdBy\": \"63750a1995a6a16f696d2f7b\",\n        \"updatedOn\": \"Tue, 21 Feb 2023 11:32:42 GMT\",\n        \"isDeleted\": false,\n        \"bankApplicationDocumentConfigKey\": \"63cfbc85edee8f7eee6f3d6e\",\n        \"bankName\": \"Axis Bank Limited\",\n        \"productFamily\": \"PAYLATER\",\n        \"productType\": \"PAYLATER\",\n        \"status\": \"DOCUMENT_CAPTURE\",\n        \"businessPartnerName\": \"Shri Durga Metalex\",\n        \"businessPartnerID\": \"63750a19ca608a344ae556d6\",\n        \"productGranularity\": \"product\",\n        \"bankProductConfigId\": \"63cfbe250c729962c86ec8a7\",\n        \"bankId\": \"63c8fa075f1c5afda77bae5e\",\n        \"bankApplicationLabel\": \"Continue Bank Application\",\n        \"bankApplicationURL\": \"www.google.com\",\n        \"enterpriseId\": \"638c73f16ea52ce57470c1a9\",\n        \"approvedLimit\": null,\n        \"availableLimit\": null\n */",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 500,
        "wires": [
            [
                "14473f2c443feb9f",
                "b6479afe6d9945a4"
            ]
        ]
    },
    {
        "id": "14473f2c443feb9f",
        "type": "debug",
        "z": "79f42ae3a90a4604",
        "name": "bankApplication",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 500,
        "wires": []
    },
    {
        "id": "b6479afe6d9945a4",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "getBusinessPartnerDataReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\n\nmsg.url = `${GO_URL}/business-partner/data/${msg.businessPartnerId}`\n\nmsg.headers = {\n    \"x-actyv-api-config-key\" : X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 580,
        "wires": [
            [
                "1c385c62550d383e"
            ]
        ]
    },
    {
        "id": "1c385c62550d383e",
        "type": "http request",
        "z": "79f42ae3a90a4604",
        "name": "getBusinessPartnerData",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 580,
        "wires": [
            [
                "1dc3970b6e4281e0",
                "523c8dd2eff3de5e"
            ]
        ]
    },
    {
        "id": "1dc3970b6e4281e0",
        "type": "debug",
        "z": "79f42ae3a90a4604",
        "name": "businessPartnerData",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 580,
        "wires": []
    },
    {
        "id": "523c8dd2eff3de5e",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "attach bp id",
        "func": "node.send({\n    data: msg.payload,\n    businessPartnerId: msg.businessPartnerId,\n    bankId: msg.bankId,\n    enterpriseId: msg.enterpriseId,\n    bankProductConfigId: msg.bankProductConfigId,\n    dataPartDone: false\n});\n\n\nmsg.dataPartDone = true;\n\n// msg.payload = msg.payload;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 660,
        "wires": [
            [
                "074feb34f27baba7"
            ]
        ]
    },
    {
        "id": "769e306407660c6d",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "getDealerCodeReq",
        "func": "\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.url = `${env.get(\"GO_URL\")}/business-relationship/${msg.businessPartnerId}/${msg.enterpriseId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 800,
        "wires": [
            [
                "7b529b7627a765ae"
            ]
        ]
    },
    {
        "id": "7b529b7627a765ae",
        "type": "http request",
        "z": "79f42ae3a90a4604",
        "name": "getDealerCode",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 420,
        "y": 800,
        "wires": [
            [
                "dba01a8f0388fa76",
                "bce516dfb4ec9cfa"
            ]
        ]
    },
    {
        "id": "dba01a8f0388fa76",
        "type": "debug",
        "z": "79f42ae3a90a4604",
        "name": "dealerCode",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 800,
        "wires": []
    },
    {
        "id": "074feb34f27baba7",
        "type": "switch",
        "z": "79f42ae3a90a4604",
        "name": "",
        "property": "dataPartDone",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 660,
        "wires": [
            [
                "6de85123b44cbca1"
            ],
            [
                "769e306407660c6d"
            ]
        ]
    },
    {
        "id": "bce516dfb4ec9cfa",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "Scrapping Documents of a particular Business Partner",
        "func": "let c = 0\nconst arr = msg.data.documents;\nconst businessPartnerId = msg.businessPartnerId;\nconst gst_regex = new RegExp(/^GST/);\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nconst dealerCode = msg.payload.identifierByParent\n\n// const lp = msg.LOCAL_PATH;\n\nlet documents = [\n    'AADHAAR', 'BANK_STATEMENT',\n    'ITR', 'BUSINESS_PAN',\n    'PERSONAL_PAN', 'GST',\n    'GST', 'GSTR3B_RETSUM',\n    'GSTR2A_B2B', 'GSTR2A_RETSUM',\n    'GSTR1_EXP', 'GSTR1_B2B',\n    'GSTR1_CDNR', 'GSTR1_HSNSUM',\n    'GSTR1_CDNUR', 'GSTR1_B2CL',\n    'GSTR1_CDN', 'GSTR1_NIL',\n    'GSTR1_B2CS', 'GSTR_FILES',\n    'BANK_FORM_1'\n]\n\nfor(let document of msg.data?.documents){\n    \n    \n    switch (true) {\n        case /^AADHAAR/.test(document?.documentType):\n            node.send({\n                payload: document,\n                businessPartnerId: msg.businessPartnerId,\n                bankId: msg.bankId,\n                enterpriseId: msg.enterpriseId,\n                bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                dealerCode\n            });\n            // console.log(document.documentType);\n            break\n        case /^BANK_STATEMENT/.test(document?.documentType):\n        break;\n            node.send({\n                payload: document,\n                businessPartnerId: msg.businessPartnerId,\n                bankId: msg.bankId,\n                enterpriseId: msg.enterpriseId,\n                bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",dealerCode\n            });\n            // console.log(document.documentType);\n            break;\n        case /^ITR/.test(document?.documentType):\n        break;\n            node.send({\n                payload: document,\n                businessPartnerId: msg.businessPartnerId,\n                bankId: msg.bankId,\n                enterpriseId: msg.enterpriseId,\n                bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                dealerCode\n            });\n            // console.log(document.documentType);\n            break\n        case /^BUSINESS_PAN/.test(document?.documentType):\n        break;\n            node.send({\n                payload: document,\n                businessPartnerId: msg.businessPartnerId,\n                bankId: msg.bankId,\n                enterpriseId: msg.enterpriseId,\n                bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                dealerCode\n            });\n            // console.log(document.documentType);\n            break\n        case /^PERSONAL_PAN/.test(document?.documentType):\n        break;\n            node.send({\n                payload: document,\n                businessPartnerId: msg.businessPartnerId,\n                bankId: msg.bankId,\n                enterpriseId: msg.enterpriseId,\n                bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                dealerCode\n            });\n            // console.log(document.documentType);\n            break\n        case /^GST/.test(document?.documentType):\n        break;\n            node.send({\n                payload: document,\n                businessPartnerId: msg.businessPartnerId,\n                bankId: msg.bankId,\n                enterpriseId: msg.enterpriseId,\n                bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                dealerCode\n            });\n            // console.log(document.documentType);\n            break\n        // case /GSTR3B_RETSUM/.test(document?.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode\n        //     });\n        //     // console.log(document.documentType);\n        //     break\n        // case /GSTR2A_B2B/.test(document?.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode\n        //     });\n        //     // console.log(document.documentType);\n        //     break\n        // case /GSTR2A_RETSUM/.test(document?.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode\n        //     });\n        //     // console.log(document.documentType);\n        //     break\n        // case /GSTR1_EXP/.test(document?.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode\n        //     });\n        //     // console.log(document.documentType);\n        //     break\n        // case /GSTR1_B2B/.test(document?.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode\n        //     });\n        //     // console.log(document.documentType);\n        //     break\n        // case /GSTR1_CDNR/.test(document?.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode\n        //     });\n        //     // console.log(document.documentType);\n        //     break\n        // case /GSTR1_HSNSUM/.test(document?.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode\n        //     });\n        //     // console.log(document.documentType);\n        //     break\n        // case /GSTR1_CDNUR/.test(document?.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode\n        //     });\n        //     // console.log(document.documentType);\n        //     break\n\n        // case /GSTR1_B2CL/.test(document?.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode\n        //     });\n        //     // console.log(document.documentType);\n        //     break\n\n        // case /GSTR1_CDN/.test(document.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode\n        //     });\n        //     // console.log(document.documentType);\n        //     break\n\n        // case /GSTR1_NIL/.test(document.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode\n        //     });\n        //     // console.log(document.documentType);\n        //     break\n\n        // case /GSTR1_B2CS/.test(document.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode\n        //     });\n        //     // console.log(document.documentType);\n        //     break\n\n        // case /GSTR_FILES/.test(document.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode\n        //     });\n        //     // console.log(document.documentType);\n        //     break\n\n        case /BANK_FORM_1/.test(document.documentType):\n            node.send({\n                payload: document,\n                businessPartnerId: msg.businessPartnerId,\n                bankId: msg.bankId,\n                enterpriseId: msg.enterpriseId,\n                bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                dealerCode\n            });\n            // console.log(document.documentType);\n            break\n        \n        \n\n        default: node.send({\n            payload: {\n                files:[]\n            },\n            businessPartnerId: msg.businessPartnerId,\n            bankId: msg.bankId,\n            enterpriseId: msg.enterpriseId,\n            bankProductConfigId: msg.bankProductConfigId,\n            transferDone: \"false\",\n            dealerCode\n        });\n    }\n};\n\n\nconst reqDocsFromFieldValue = []\n\nfor (let i = 0; i < msg.data.fieldValues;i++){\n    if(reqDocsFromFieldValue.includes(msg.data.fieldValues[i].key)){\n        node.send({\n            payload: msg.data.fieldValues[i].fileId,\n            businessPartnerId: msg.businessPartnerId,\n            bankId: msg.bankId,\n            enterpriseId: msg.enterpriseId,\n            bankProductConfigId: msg.bankProductConfigId,\n            transferDone: \"false\",\n            dealerCode\n        });\n    }\n}\n\n\nmsg.transferDone = \"true\";\n// msg.LOCAL_PATH = lp;\nreturn msg;\n\n/**\n    businessPartnerId: msg.businessPartnerId,\n    bankId: msg.bankId,\n    enterpriseId: msg.enterpriseId,\n    bankProductConfigId: msg.bankProductConfigId,\n */",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 880,
        "wires": [
            [
                "c6a08f66ab39b1c5"
            ]
        ]
    },
    {
        "id": "c6a08f66ab39b1c5",
        "type": "switch",
        "z": "79f42ae3a90a4604",
        "name": "",
        "property": "transferDone",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 880,
        "wires": [
            [
                "b0255c24137ffd5f"
            ],
            [
                "ec7dd8babc047235"
            ]
        ]
    },
    {
        "id": "b0255c24137ffd5f",
        "type": "debug",
        "z": "79f42ae3a90a4604",
        "name": "document part completed",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 860,
        "wires": []
    },
    {
        "id": "ec7dd8babc047235",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "sendFilesToReaderReq",
        "func": "\nfor(let file of msg?.payload?.files){\n    \nnode.send({\n    file: file,\n    businessPartnerId: msg.businessPartnerId,\n    bankId: msg.bankId,\n    enterpriseId: msg.enterpriseId,\n    bankProductConfigId: msg.bankProductConfigId,\n    dealerCode : msg.dealerCode\n})\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 980,
        "wires": [
            [
                "82a53870c976cc6a"
            ]
        ]
    },
    {
        "id": "82a53870c976cc6a",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "function 161",
        "func": "// console.log({file:msg.file})\nif(msg.file){\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 980,
        "wires": [
            [
                "d7b8e32941d26f08"
            ]
        ]
    },
    {
        "id": "e9310dd57b665272",
        "type": "debug",
        "z": "79f42ae3a90a4604",
        "name": "email send for file size lesser than limit",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 1420,
        "wires": []
    },
    {
        "id": "2ca993596c00fdd5",
        "type": "debug",
        "z": "79f42ae3a90a4604",
        "name": "email send for file size greater than limit",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1340,
        "wires": []
    },
    {
        "id": "a660903159afecd9",
        "type": "http request",
        "z": "79f42ae3a90a4604",
        "name": "sendEmail",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 1340,
        "wires": [
            [
                "2ca993596c00fdd5"
            ]
        ],
        "info": "Get bank product config id"
    },
    {
        "id": "949afc5f7d185360",
        "type": "http request",
        "z": "79f42ae3a90a4604",
        "name": "sendEmail",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 1420,
        "wires": [
            [
                "e9310dd57b665272"
            ]
        ],
        "info": "Get bank product config id"
    },
    {
        "id": "f1b7ec0b4dfdf26b",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "sendEmailReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst fs = global.get(\"fs\")\n\nlet fileName = msg.fid.split(\"-\");\nfileName = fileName[fileName.length - 1];\n\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\n\n\n\nmsg.payload = {\n    \"from\": \"ramu.bugudi@actyv.com\",\n    \"to\": \"shravan.pm@actyv.com\",\n    \"subject\": `Lead Push - Dealer Code :${msg.dealerCode}`,\n    // \"html\": `\n    // <html>\n    //     <body>\n\n    //     </body>\n    // </html>`,\n\n    \"html\": `\n    <html>\n        <body>\n            <p>\n            <strong>File Name</strong> : <strong>${fileName}</strong> Document\n            </p>\n            <p>\n            <strong>URL</strong> : <a target=\"_blank\" href= ${msg.fileUrl}>${msg.fileUrl}</a>\n            \n            </p>\n        </body>\n    </html>`,\n    \"priority\": \"high\",\n    \"attachments\": [\n        {\n            filename: `${fileName}.zip`,\n            encoding: 'base64',\n            content: msg.payload\n        }\n    ]\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1420,
        "wires": [
            [
                "949afc5f7d185360"
            ]
        ]
    },
    {
        "id": "d2d02cf6295d1c8b",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "sendEmailReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst fs = global.get(\"fs\")\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\n\nlet fileName = msg.fid.split(\"-\");\nfileName = fileName[fileName.length-1];\n// console.log({fileName})\n\nmsg.payload = {\n    \"from\": \"ramu.bugudi@actyv.com\",\n    \"to\": \"shravan.pm@actyv.com\",\n    // \"to\": \"ramu.bugudi@actyv.com\",\n    \"subject\": `Lead Push AXIS - Dealer Code : ${msg.dealerCode ?? \"\"}`,\n    \"html\": `\n    <html>\n        <body>\n            <p>\n            <strong>File Name</strong> : <strong>${fileName}</strong> Document\n            </p>\n            <p>\n            <strong>URL</strong> : <a target=\"_blank\" href= ${msg.fileUrl}>${msg.fileUrl}</a>\n            \n            </p>\n        </body>\n    </html>`,\n    // \"html\": `\n    // <html>\n    //     <body>\n            \n    //     </body>\n    // </html>`,\n    \"priority\": \"high\",\n    \"attachments\": [\n        {\n            filename: `${`${fileName}.zip`}`,\n            encoding: 'base64',\n            content:msg.payload\n        }\n    ]\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1340,
        "wires": [
            [
                "a660903159afecd9"
            ]
        ]
    },
    {
        "id": "9041e8ba12361dc5",
        "type": "switch",
        "z": "79f42ae3a90a4604",
        "name": "",
        "property": "fileSizeInMegaByte",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "3.15",
                "vt": "num"
            },
            {
                "t": "lte",
                "v": "3.15",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 110,
        "y": 1380,
        "wires": [
            [
                "d2d02cf6295d1c8b"
            ],
            [
                "f1b7ec0b4dfdf26b"
            ]
        ]
    },
    {
        "id": "3b589f3645b855b9",
        "type": "base64",
        "z": "79f42ae3a90a4604",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 190,
        "y": 1260,
        "wires": [
            [
                "83d12aa6c7780197"
            ]
        ]
    },
    {
        "id": "c4fbc67eb0d7553b",
        "type": "zip",
        "z": "79f42ae3a90a4604",
        "name": "Compress",
        "mode": "compress",
        "filename": "",
        "compressionlevel": "0",
        "outasstring": false,
        "x": 610,
        "y": 1160,
        "wires": [
            [
                "3b589f3645b855b9"
            ]
        ]
    },
    {
        "id": "3a41ceecd61a6324",
        "type": "base64",
        "z": "79f42ae3a90a4604",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 380,
        "y": 1160,
        "wires": [
            [
                "c4fbc67eb0d7553b"
            ]
        ]
    },
    {
        "id": "94291135e2a16816",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "detectMimeType",
        "func": "const signatures = {\n    JVBERi0: \"application/pdf\",\n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"application/vnd.openxmlformats-officedocument.\",\n    PK: \"application/zip\",\n};\n\nlet filePath;\nlet fileName;\nlet extension;\nconst base64String = msg.payload;\n\nfor (let ext in signatures) {\n    const base64Sig = base64String.slice(0, ext.length)\n    if (base64Sig === ext) {\n        fileName = msg.fid\n        extension = getExtension(ext)\n        filePath = `${msg.LOCAL_PATH}/${fileName}${msg.ind}.${extension}`\n    }\n}\nlet name = msg.fid.split(\"-\")\nname = name[name.length-1]\nconsole.log({name})\nmsg.filename = `${name}.${extension}`\n\n// console.log({fun:msg.filename})\n\nmsg.filePath = filePath\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1160,
        "wires": [
            [
                "3a41ceecd61a6324"
            ]
        ]
    },
    {
        "id": "652eee24a663514d",
        "type": "base64",
        "z": "79f42ae3a90a4604",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 620,
        "y": 1080,
        "wires": [
            [
                "94291135e2a16816"
            ]
        ]
    },
    {
        "id": "da37bc80b99bc745",
        "type": "http request",
        "z": "79f42ae3a90a4604",
        "name": "read file",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "x-actyv-api-config-key",
                "valueType": "other",
                "valueValue": "8HhkIWzVMSnSgvlhxr"
            }
        ],
        "x": 440,
        "y": 1080,
        "wires": [
            [
                "652eee24a663514d"
            ]
        ]
    },
    {
        "id": "d7b8e32941d26f08",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "Setting fileID of a particular file",
        "func": "msg.fid = msg.file.fileId;\n\nmsg.method = \"GET\"\nmsg.url = `${env.get(\"GO_URL\")}/file/read/${msg.file.fileId}`;\nmsg.fileUrl = `${env.get(\"GO_URL\")}/file/read/${msg.file.fileId}`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 1080,
        "wires": [
            [
                "da37bc80b99bc745"
            ]
        ]
    },
    {
        "id": "83d12aa6c7780197",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "getTheFileSize",
        "func": "let fileName = msg.fid.split(\"-\");\nfileName = fileName[fileName.length - 1];\nlet base64String = msg.payload\nvar fileSizeInMegaByte = Buffer.byteLength(base64String)/1024/1024\nconsole.log({fileSizeInMegaByte,fileName})\nmsg.fileSizeInMegaByte = fileSizeInMegaByte\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1260,
        "wires": [
            [
                "9041e8ba12361dc5"
            ]
        ]
    },
    {
        "id": "6de85123b44cbca1",
        "type": "debug",
        "z": "79f42ae3a90a4604",
        "name": "completed loop over bank Applications",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 640,
        "wires": []
    },
    {
        "id": "aafbda910088ae42",
        "type": "debug",
        "z": "79f42ae3a90a4604",
        "name": "debug 340",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 260,
        "wires": []
    },
    {
        "id": "9c67530aec4acef6",
        "type": "inject",
        "z": "f5c81779c63cb9e6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 200,
        "wires": [
            [
                "3a32d5b5986feb77"
            ]
        ]
    },
    {
        "id": "3a32d5b5986feb77",
        "type": "function",
        "z": "f5c81779c63cb9e6",
        "name": "",
        "func": "msg.url = \"https://ewpportalfrontendadapter.services.tatacapital.com/rest/ewpPortal/v1.0/sap/setLimit\"\nmsg.headers = {\n    Authorization: \"Basic OTY1ODMzMWM6bTJ1YXQ=\",\n    \"ConversationID\": \"123345678\",\n    \"SourceName\": \"EWP\",\n    \"Content-Type\": \"application/xml\"\n}\n\nmsg.method = \"GET\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 200,
        "wires": [
            [
                "577be50984ba5e6c"
            ]
        ]
    },
    {
        "id": "577be50984ba5e6c",
        "type": "http request",
        "z": "f5c81779c63cb9e6",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 200,
        "wires": [
            [
                "af3a2dc5caa13a8b"
            ]
        ]
    },
    {
        "id": "af3a2dc5caa13a8b",
        "type": "debug",
        "z": "f5c81779c63cb9e6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 280,
        "wires": []
    },
    {
        "id": "f136b1bd5e3ff6e1",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "fetch new tenors",
        "func": "const PAYLATER_URL = env.get(\"PAYLATER_URL\")\nconst token = flow.get(\"token\") || \"\"\nconst [first, second] = new Date().toISOString().split(\"T\")\n// const ISO8601_FORMAT_TODAY = `${first} ${second.split(\".\")[0]}`\nconst ISO8601_FORMAT_TODAY = `${first} 00:00:00+00`\n\nconst payload = {\n    // validFrom: \"2023-03-24 06:40:52+00\",//ISO8601_FORMAT_TODAY\n    validFrom: ISO8601_FORMAT_TODAY\n};\n\n\nmsg.url = `${PAYLATER_URL}/v1/tenor-and-rate-spread/fetch`\nmsg.method = 'POST',\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.payload = payload\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 215,
        "y": 306,
        "wires": [
            [
                "6df3c8a5077375d0"
            ]
        ]
    },
    {
        "id": "6df3c8a5077375d0",
        "type": "http request",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 475,
        "y": 306,
        "wires": [
            [
                "81d6d82b791ca7b5",
                "7c36f0c21d6b54b6"
            ]
        ]
    },
    {
        "id": "7c36f0c21d6b54b6",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "New Tenors",
        "func": "const newTenors = msg.payload\n\nmsg.newTenors = newTenors;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 195,
        "y": 406,
        "wires": [
            [
                "c058c8b2ea81fa66",
                "454c2515831305c3"
            ]
        ]
    },
    {
        "id": "454c2515831305c3",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "fetch old tenors",
        "func": "const PAYLATER_URL = env.get(\"PAYLATER_URL\")\nconst token = flow.get(\"token\")\n\n\nconst ISO8601_FORMAT_YESTERDAY = moment().subtract(1, \"days\").toDate();\nconst [first, second] = ISO8601_FORMAT_YESTERDAY.toISOString().split(\"T\")\n\nconst ISO8601_FORMAT_YESTERDAY_FORMAT = `${first} 23:59:59+00`\nlet count = 1\n\n// for (let row of msg.newTenors) {\n//     count += 1\n//     node.send({\n//         ...msg,\n//         count,\n//         newSpreadId: row.id,\n//         payload: {\n//             // \"loanID\": row.loanID,\n//             // \"bankID\": row.bankID,\n//             // \"benchmarkRateID\": row.benchmarkRateID,\n//             \"validTill\": ISO8601_FORMAT_YESTERDAY_FORMAT,\n//         },\n//         isComplete: false,\n//     })\n// }\n\n\nmsg.url = `${PAYLATER_URL}/v1/tenor-and-rate-spread/fetch`\nmsg.method = 'POST',\n  \nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.payload = {\n    // \"loanID\": row.loanID,\n    // \"bankID\": row.bankID,\n    // \"benchmarkRateID\": row.benchmarkRateID,\n    \"validTill\": ISO8601_FORMAT_YESTERDAY_FORMAT,\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 205,
        "y": 609,
        "wires": [
            [
                "0cc7747b0ab512dc"
            ]
        ]
    },
    {
        "id": "0cc7747b0ab512dc",
        "type": "http request",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 450,
        "y": 600,
        "wires": [
            [
                "fa9e5449c87c4f95",
                "68759d4015fca344"
            ]
        ]
    },
    {
        "id": "3368d5c78145f0a1",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "fetch bnpl preference by spread id",
        "func": "const PAYLATER_URL = env.get(\"PAYLATER_URL\")\nconst token = flow.get(\"token\")\n\n// console.log(msg.payload.id,\"New tenors\")\nmsg.defaultSpreadId = msg.payload.id\n// By using above id fetch BNPL preference and Update with newSpreadId\nmsg.url = `${PAYLATER_URL}/v1/bnpl-preference/fetch`\nmsg.method = 'POST',\nmsg.payload = {\n    defaultSpreadID: msg.payload.id\n}\n\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 260,
        "y": 820,
        "wires": [
            [
                "2b94e3431c03db78"
            ]
        ]
    },
    {
        "id": "2b94e3431c03db78",
        "type": "http request",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 530,
        "y": 820,
        "wires": [
            [
                "0f0750d084463e6f",
                "13cea92a2354b3df"
            ]
        ]
    },
    {
        "id": "d5e442e17f0e9f12",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst EMAIL = \"surajkumar@aplapollo.com\"\n// const EMAIL = \"deepakgoyal@aplapollo.com\"\nconst PASSWORD = \"890ioP@12\"\n\nflow.set(\"arr\", [])\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": EMAIL,\n    \"password\": PASSWORD\n};\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 316,
        "y": 202,
        "wires": [
            [
                "c214f9da08c184a7"
            ]
        ]
    },
    {
        "id": "c214f9da08c184a7",
        "type": "http request",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 496,
        "y": 202,
        "wires": [
            [
                "f644a0351c6b4ddb"
            ]
        ]
    },
    {
        "id": "f644a0351c6b4ddb",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "setToken",
        "func": "flow.set('token', msg.payload.idToken);\nconsole.log({token:msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 666,
        "y": 202,
        "wires": [
            [
                "f136b1bd5e3ff6e1"
            ]
        ]
    },
    {
        "id": "13cea92a2354b3df",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "update bnpl preference by new spread id",
        "func": "// const arr = flow.get(\"arr\")\n// if (msg.payload[0]?.id){\n// arr.push(msg.payload[0]?.id)\n// }\n\n\n// flow.set('arr', arr)\n// console.log(flow.get('arr'))\n\n// if(msg.payload){\n//     console.log(msg.payload[0]?.id, \"HELLO\")\n// }\n\n// console.log(msg.payload[0]?.id)\n\nconst PAYLATER_URL = env.get(\"PAYLATER_URL\")\n\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\n// By using above id fetch BNPL preference and Update with newSpreadId\n\nmsg.url = `${PAYLATER_URL}/v1/bnpl-preference/service`\nmsg.method = 'PATCH',\n    msg.payload = {\n        // @ts-ignore\n        bnplPreferenceID: msg.payload.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt))[0]?.id,\n        // bnplPreferenceID: msg.payload[0]?.id,\n        defaultSpreadID: msg.newSpreadId\n    }\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n\nif (msg.payload?.bnplPreferenceID){\n    console.log(msg.payload.bnplPreferenceID)\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 280,
        "y": 900,
        "wires": [
            [
                "676b1f80e97c7be2"
            ]
        ]
    },
    {
        "id": "676b1f80e97c7be2",
        "type": "http request",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 550,
        "y": 900,
        "wires": [
            [
                "a2bae1419e0dbb70"
            ]
        ]
    },
    {
        "id": "81d6d82b791ca7b5",
        "type": "debug",
        "z": "ad42c8b5ca08905f",
        "name": "new tenors",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 695,
        "y": 306,
        "wires": []
    },
    {
        "id": "d63f4b334ac134db",
        "type": "debug",
        "z": "ad42c8b5ca08905f",
        "name": "debug 284",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 520,
        "wires": []
    },
    {
        "id": "0f0750d084463e6f",
        "type": "debug",
        "z": "ad42c8b5ca08905f",
        "name": "matched BNPL",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 820,
        "wires": []
    },
    {
        "id": "a2bae1419e0dbb70",
        "type": "debug",
        "z": "ad42c8b5ca08905f",
        "name": "debug 287",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 900,
        "wires": []
    },
    {
        "id": "e3e77f04ab4da2f1",
        "type": "http in",
        "z": "ad42c8b5ca08905f",
        "name": "update-tenor",
        "url": "/api/update-tenor",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 60,
        "wires": [
            [
                "3da127987697f73d"
            ]
        ]
    },
    {
        "id": "3da127987697f73d",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "checkTheHeaders",
        "func": "const X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nif(msg.req.headers[\"x-actyv-api-config-key\"]===X_ACTYV_API_CONFIG_KEY){\n    msg.isKeyPresent = true\n}else{\n    msg.isKeyPresent = false\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 60,
        "wires": [
            [
                "9f85fa8b8e54a3a2"
            ]
        ]
    },
    {
        "id": "9f85fa8b8e54a3a2",
        "type": "switch",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "property": "isKeyPresent",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 60,
        "wires": [
            [
                "1cb6167b24084f8d"
            ],
            [
                "d5e442e17f0e9f12"
            ]
        ]
    },
    {
        "id": "1cb6167b24084f8d",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "func": "msg.payload = {\n    \"statusCode\": 403,\n    \"message\": \"Unauthorized\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 60,
        "wires": [
            [
                "ab0589c4aafbb6d0"
            ]
        ]
    },
    {
        "id": "ab0589c4aafbb6d0",
        "type": "http response",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1010,
        "y": 60,
        "wires": []
    },
    {
        "id": "fa9e5449c87c4f95",
        "type": "debug",
        "z": "ad42c8b5ca08905f",
        "name": "old tenors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 600,
        "wires": []
    },
    {
        "id": "1b632f1545e941a0",
        "type": "inject",
        "z": "ad42c8b5ca08905f",
        "name": "7 AM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 01 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "d9b4a1ba7f8b5a66",
        "type": "inject",
        "z": "ad42c8b5ca08905f",
        "name": "7 PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 13 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "d8307768fbea396c",
        "type": "inject",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 120,
        "wires": [
            [
                "d5e442e17f0e9f12"
            ]
        ]
    },
    {
        "id": "cd07e3aedc252418",
        "type": "inject",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 195,
        "y": 1011,
        "wires": [
            [
                "eb335f58f6138938"
            ]
        ]
    },
    {
        "id": "eb335f58f6138938",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "fetch old tenors",
        "func": "const PAYLATER_URL = env.get(\"PAYLATER_URL\")\nconst token = flow.get(\"token\")\n\nconst ISO8601_FORMAT_YESTERDAY = moment().subtract(1, \"days\").toDate();\nconst [first, second] = ISO8601_FORMAT_YESTERDAY.toISOString().split(\"T\")\n\nconst ISO8601_FORMAT_YESTERDAY_FORMAT = `${first} 23:59:59+00`\n\nconst payload = {\n    \"validTill\": ISO8601_FORMAT_YESTERDAY_FORMAT,\n}\n\nmsg.url = `${PAYLATER_URL}/v1/tenor-and-rate-spread/fetch`\nmsg.method = 'POST',\nmsg.payload = payload\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 375,
        "y": 1011,
        "wires": [
            [
                "d7b7ccd227f5dd8c"
            ]
        ]
    },
    {
        "id": "d7b7ccd227f5dd8c",
        "type": "http request",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 585,
        "y": 1011,
        "wires": [
            [
                "8f9c604689fd2b5b"
            ]
        ]
    },
    {
        "id": "8f9c604689fd2b5b",
        "type": "debug",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 765,
        "y": 1011,
        "wires": []
    },
    {
        "id": "c058c8b2ea81fa66",
        "type": "debug",
        "z": "ad42c8b5ca08905f",
        "name": "new tenors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "newTenors",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 360,
        "wires": []
    },
    {
        "id": "68759d4015fca344",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "uniqueSortedTenors",
        "func": "// @ts-nocheck\nlet oldTenors = msg.payload.sort((a, b) => new Date(a.validTill) - new Date(b.validTill))\nlet pre = -1;\nlet cur = -1;\n\nfor(let i=1;i<oldTenors.length;i++){\n    if (oldTenors[i].benchmarkRateID !== oldTenors[i - 1].benchmarkRateID){\n        pre = cur;\n        cur = i\n    }\n}\n\n\nmsg.oldTenors = oldTenors//msg.payload\n// const uniqueSortedBenchMarks = msg.payload.filter((obj, index) => {\n//     return index === msg.payload.findIndex(o => obj.benchmarkRateID === o.benchmarkRateID)\n// })\n// .sort((a, b) => new Date(b.validTill) - new Date(a.validTill))\n\n// msg.uniqueSortedBenchMarks = uniqueSortedBenchMarks\n\n// const latestTenors = msg.payload\n//     .filter(tenor => tenor.benchmarkRateID === uniqueSortedBenchMarks[0]?.benchmarkRateID)\n\n// console.log({latestTenors: latestTenors.length,uniqueSortedBenchMarks: uniqueSortedBenchMarks,allTenors: msg.payload.length})\n// console.log({latestTenors: latestTenors.map(e => e.id)})\nmsg.payload = oldTenors\nmsg.oldTenors = oldTenors.slice(cur,oldTenors.length)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 220,
        "y": 700,
        "wires": [
            [
                "8e89c725fd55a649",
                "be254a631022f6a1"
            ]
        ]
    },
    {
        "id": "b5e5cccbb3aa2be1",
        "type": "switch",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "property": "count",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "newTenors.length",
                "vt": "msg"
            },
            {
                "t": "neq",
                "v": "newTenors.length",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 700,
        "wires": [
            [
                "d2d96811d3145aba"
            ],
            []
        ]
    },
    {
        "id": "be254a631022f6a1",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "Loop",
        "func": "const ISO8601_FORMAT_YESTERDAY = moment().subtract(1, \"days\").toDate();\nconst [first, second] = ISO8601_FORMAT_YESTERDAY.toISOString().split(\"T\")\n\nconst ISO8601_FORMAT_YESTERDAY_FORMAT = `${first} 23:59:59+00`\n\n// console.log({id: msg.newSpreadId})\nlet arr = []\nfor (let row of msg.oldTenors) {\n    const newSpreadId = msg.newTenors.filter((tenor)=>tenor.loanID == row.loanID)\n    if(newSpreadId.id){\n        arr.push(newSpreadId.id)\n    }\n   \n    node.send({\n        ...msg,\n        payload : row,\n        newSpreadId: newSpreadId[0].id\n    })\n}\n\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 290,
        "y": 760,
        "wires": [
            [
                "489f6f9325535616",
                "3368d5c78145f0a1"
            ]
        ]
    },
    {
        "id": "d2d96811d3145aba",
        "type": "debug",
        "z": "ad42c8b5ca08905f",
        "name": "Equals",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 660,
        "wires": []
    },
    {
        "id": "8e89c725fd55a649",
        "type": "debug",
        "z": "ad42c8b5ca08905f",
        "name": "updatedOldTenors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 660,
        "wires": []
    },
    {
        "id": "489f6f9325535616",
        "type": "debug",
        "z": "ad42c8b5ca08905f",
        "name": "newSpreadId",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 760,
        "wires": []
    },
    {
        "id": "5e8e26cacf6d9404",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "Loop",
        "func": "const ISO8601_FORMAT_YESTERDAY = moment().subtract(1, \"days\").toDate();\nconst [first, second] = ISO8601_FORMAT_YESTERDAY.toISOString().split(\"T\")\n\nconst ISO8601_FORMAT_YESTERDAY_FORMAT = `${first} 23:59:59+00`\nlet count = 1\n\nfor (let row of msg.newTenors) {\n    count += 1\n    node.send({\n        ...msg,\n        count,\n        newSpreadId: row.id,\n        payload: {\n            // \"loanID\": row.loanID,\n            // \"bankID\": row.bankID,\n            // \"benchmarkRateID\": row.benchmarkRateID,\n            \"validTill\": ISO8601_FORMAT_YESTERDAY_FORMAT,\n        },\n        isComplete: false,\n    })\n}\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 490,
        "y": 1260,
        "wires": [
            [
                "6f91fb43695543f3"
            ]
        ]
    },
    {
        "id": "6f91fb43695543f3",
        "type": "switch",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 285,
        "y": 1354,
        "wires": [
            [
                "e4535d66befc2dec"
            ],
            []
        ]
    },
    {
        "id": "e4535d66befc2dec",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "func": "msg.payload = {\n    \"statusCode\": 200,\n    \"message\": \"Success\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 495,
        "y": 1334,
        "wires": [
            [
                "c4d84097ef4d1b9b"
            ]
        ]
    },
    {
        "id": "c4d84097ef4d1b9b",
        "type": "http response",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 725,
        "y": 1334,
        "wires": []
    },
    {
        "id": "5b5b18f40c9f61fe",
        "type": "inject",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "1525bb33e5bcb3bf",
        "type": "debug",
        "z": "ad42c8b5ca08905f",
        "name": "debug 312",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 1700,
        "wires": []
    },
    {
        "id": "72f1535c4e01cc80",
        "type": "inject",
        "z": "6438b3204074b24c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 80,
        "wires": [
            [
                "de3b92af45360950"
            ]
        ]
    },
    {
        "id": "91367188f9982063",
        "type": "function",
        "z": "6438b3204074b24c",
        "name": "AuthenticateBNPLUserReq",
        "func": "const BNPL_USER = env.get('CKPL_ENTERPRISE_ADMIN_EMAIL')\nconst BNPL_USER_PASSWORD = env.get('BNPL_USER_PASSWORD')\n\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": BNPL_USER_PASSWORD,\n    \"email\": BNPL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 180,
        "wires": [
            [
                "7989beefb6945f36"
            ]
        ]
    },
    {
        "id": "7989beefb6945f36",
        "type": "http request",
        "z": "6438b3204074b24c",
        "name": "AuthenticateBNPLUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 180,
        "wires": [
            [
                "0dd7a00fa634b425"
            ]
        ]
    },
    {
        "id": "0dd7a00fa634b425",
        "type": "function",
        "z": "6438b3204074b24c",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 180,
        "wires": [
            [
                "6a1db5be94c52c6c"
            ]
        ]
    },
    {
        "id": "6a1db5be94c52c6c",
        "type": "function",
        "z": "6438b3204074b24c",
        "name": "getBankProductReq",
        "func": "\nconst GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY_CKPL_IIFL')\n\nmsg.headers = {}\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank-application-config/key/${BANK_PRODUCT_KEY}`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 280,
        "wires": [
            [
                "9de2359b39b89a57"
            ]
        ]
    },
    {
        "id": "9de2359b39b89a57",
        "type": "http request",
        "z": "6438b3204074b24c",
        "name": "getBankProduct",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 280,
        "wires": [
            [
                "d7f7cd2cac9156ff",
                "c7c8df47ce341f4b"
            ]
        ]
    },
    {
        "id": "d7f7cd2cac9156ff",
        "type": "debug",
        "z": "6438b3204074b24c",
        "name": "bankProduct",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 280,
        "wires": []
    },
    {
        "id": "c7c8df47ce341f4b",
        "type": "function",
        "z": "6438b3204074b24c",
        "name": "getAllBusinessPartnersReq",
        "func": "\nconst GO_URL = env.get('GO_URL');\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.bankId = msg.payload.bank\nmsg.enterpriseId = msg.payload.allowedEnterprises[0]\nmsg.bankProductId = msg.payload.id\n\nmsg.url = `${GO_URL}/enterprise-partner-mapping/business-partners/enterprise/${msg.enterpriseId}`;\nmsg.method = \"POST\"\n\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 400,
        "wires": [
            [
                "72106c5eb8c0e39a"
            ]
        ]
    },
    {
        "id": "72106c5eb8c0e39a",
        "type": "http request",
        "z": "6438b3204074b24c",
        "name": "getAllBusinessPartners",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 400,
        "wires": [
            [
                "16d69cc87ce26b13",
                "ce1967b18dd59af2"
            ]
        ]
    },
    {
        "id": "16d69cc87ce26b13",
        "type": "debug",
        "z": "6438b3204074b24c",
        "name": "getAllBusinessPartners",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 400,
        "wires": []
    },
    {
        "id": "ce1967b18dd59af2",
        "type": "function",
        "z": "6438b3204074b24c",
        "name": "loopOverBusinessPartners",
        "func": "\n// for (let bp of msg.payload.dropdown.slice(1, msg.payload.dropdown.length)){\nfor (let bp of msg.payload.dropdown) {\n\n    node.send({\n        ...msg,\n        payload : \"\",\n        businessPartnerId:bp.key\n    })\n}\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 500,
        "wires": [
            [
                "bf6c602c28e44871"
            ]
        ]
    },
    {
        "id": "bf6c602c28e44871",
        "type": "function",
        "z": "6438b3204074b24c",
        "name": "getBPSalesSummaryReq",
        "func": "\nconst GO_URL = env.get('GO_URL');\nconst actyvToken = flow.get(\"actyvToken\")\n\nconst { businessPartnerId,enterpriseId} = msg\n\n\nmsg.url = `${GO_URL}/business-partner-sales-summary?businessPartner=${businessPartnerId}&enterprise=${enterpriseId}`;\nmsg.method = \"GET\"\n\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 580,
        "wires": [
            [
                "fc30cea32291b95d",
                "d09296ec3612b587"
            ]
        ]
    },
    {
        "id": "fc30cea32291b95d",
        "type": "http request",
        "z": "6438b3204074b24c",
        "name": "getBPSalesSummary",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 520,
        "y": 580,
        "wires": [
            [
                "de420ade885176ca",
                "d34953e3f2771a16"
            ]
        ]
    },
    {
        "id": "de420ade885176ca",
        "type": "debug",
        "z": "6438b3204074b24c",
        "name": "getBPSalesSummary",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 560,
        "wires": []
    },
    {
        "id": "17e46cc501131fcc",
        "type": "function",
        "z": "6438b3204074b24c",
        "name": "calculateTenatativeEligibility",
        "func": "const TENURE = 365\n\n// Sales summary for last 12 month\nlet salesSummarySum = msg.payload\n    .sort((a, b) => {\n        if (b.year == a.year) {\n            return b.month - a.month\n        } else {\n            return b.year - a.year\n        }\n    })\n    .slice(0, 12)\n    .reduce((accumulater, currentValue) => accumulater + currentValue.totalSalesAmount, 0)\n\nif (msg.payload.length < 12) {\n    salesSummarySum = (salesSummarySum / msg.payload.length) * 12\n}\n\nconst tentativelimit = (salesSummarySum / 12)\nif(isNaN(salesSummarySum) || isNaN(tentativelimit)){\n    console.log({ salesSummarySum, tentativelimit, payload: msg.payload, bankProductId: msg.bankProductId,businessPartnerId: msg.businessPartnerId})\n}\n\nmsg.tentativeLimit = tentativelimit\n\nreturn msg.payload.length > 0 ? msg : null;\n// return null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 680,
        "wires": [
            [
                "85c0baf53f98da24",
                "1b29fa0a2792438f"
            ]
        ]
    },
    {
        "id": "85c0baf53f98da24",
        "type": "debug",
        "z": "6438b3204074b24c",
        "name": "tentativeLimit",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "tentativeLimit",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 680,
        "wires": []
    },
    {
        "id": "2e3fd2df11c73955",
        "type": "function",
        "z": "6438b3204074b24c",
        "name": "saveTentativeLimitReq",
        "func": "const actyvToken = flow.get(\"actyvToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/service`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    enterpriseid: msg.enterpriseId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"tentative_limit\",\n    \"value\": msg.tentativeLimit,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankProductId,\n    \"enterpriseId\": msg.enterpriseId,\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 920,
        "wires": [
            [
                "6a542a23fcdf8089"
            ]
        ]
    },
    {
        "id": "6a542a23fcdf8089",
        "type": "http request",
        "z": "6438b3204074b24c",
        "name": "saveTentativeLimit",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 920,
        "wires": [
            [
                "32340e8506a10c9b"
            ]
        ]
    },
    {
        "id": "32340e8506a10c9b",
        "type": "debug",
        "z": "6438b3204074b24c",
        "name": "Save Field Value",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 920,
        "wires": []
    },
    {
        "id": "1fb16ce92e8e0fd6",
        "type": "http request",
        "z": "6438b3204074b24c",
        "name": "findFieldValue",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 400,
        "y": 780,
        "wires": [
            [
                "04011261ba0c9b52",
                "f6db50c23c5c9fed"
            ]
        ]
    },
    {
        "id": "1b29fa0a2792438f",
        "type": "function",
        "z": "6438b3204074b24c",
        "name": "findFieldValue",
        "func": "const actyvToken = flow.get(\"actyvToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/find-field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"tentative_limit\",\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankProductId,\n    \"enterpriseId\": msg.enterpriseId,\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 780,
        "wires": [
            [
                "1fb16ce92e8e0fd6"
            ]
        ]
    },
    {
        "id": "04011261ba0c9b52",
        "type": "debug",
        "z": "6438b3204074b24c",
        "name": "findFieldValue",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 780,
        "wires": []
    },
    {
        "id": "70bb8b62316851af",
        "type": "http request",
        "z": "6438b3204074b24c",
        "name": "updateFieldValue",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 860,
        "wires": [
            [
                "e10653e89c36f90e"
            ]
        ]
    },
    {
        "id": "d128d06d6608cd48",
        "type": "function",
        "z": "6438b3204074b24c",
        "name": "updateFieldValue",
        "func": "const bank_token = flow.get(\"bank_token\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/${msg?.payload[0]?._id}`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"PUT\"\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n    \"Authorization\": `Bearer ${bank_token}`\n}\n\nmsg.payload = {\n    \"key\": \"tentative_limit\",\n    value: msg.tentativeLimit\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 860,
        "wires": [
            [
                "70bb8b62316851af"
            ]
        ]
    },
    {
        "id": "e10653e89c36f90e",
        "type": "debug",
        "z": "6438b3204074b24c",
        "name": "Update Field Value",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 860,
        "wires": []
    },
    {
        "id": "de3b92af45360950",
        "type": "function",
        "z": "6438b3204074b24c",
        "name": "Bank user",
        "func": "const BNPL_USER = env.get('IIFL_BANK_ADMIN_EMAIL')\nconst BNPL_USER_PASSWORD = env.get('BNPL_USER_PASSWORD')\n\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": BNPL_USER_PASSWORD,\n    \"email\": BNPL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 80,
        "wires": [
            [
                "0540eaec876fbcfb"
            ]
        ]
    },
    {
        "id": "0540eaec876fbcfb",
        "type": "http request",
        "z": "6438b3204074b24c",
        "name": "bank user",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 540,
        "y": 80,
        "wires": [
            [
                "097d12006570f774"
            ]
        ]
    },
    {
        "id": "097d12006570f774",
        "type": "function",
        "z": "6438b3204074b24c",
        "name": "saveActyvToken",
        "func": "flow.set(\"bank_token\",msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 80,
        "wires": [
            [
                "91367188f9982063"
            ]
        ]
    },
    {
        "id": "f6db50c23c5c9fed",
        "type": "switch",
        "z": "6438b3204074b24c",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 130,
        "y": 900,
        "wires": [
            [
                "d128d06d6608cd48"
            ],
            [
                "2e3fd2df11c73955"
            ]
        ]
    },
    {
        "id": "d09296ec3612b587",
        "type": "debug",
        "z": "6438b3204074b24c",
        "name": "debug 315",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 520,
        "wires": []
    },
    {
        "id": "d34953e3f2771a16",
        "type": "switch",
        "z": "6438b3204074b24c",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 570,
        "y": 620,
        "wires": [
            [
                "17e46cc501131fcc"
            ]
        ]
    },
    {
        "id": "ffdcf98353fd0a01",
        "type": "inject",
        "z": "b77a80e15cf9f8c6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 140,
        "wires": [
            [
                "5672f1ee2f229147"
            ]
        ]
    },
    {
        "id": "5672f1ee2f229147",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst AXIS_BANK_ADMIN_EMAIL = env.get('AXIS_BANK_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": AXIS_BANK_ADMIN_EMAIL,\n    \"password\": PASSWORD\n};\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 100,
        "wires": [
            [
                "e8a10e3319727002"
            ]
        ]
    },
    {
        "id": "e8a10e3319727002",
        "type": "http request",
        "z": "b77a80e15cf9f8c6",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 450,
        "y": 100,
        "wires": [
            [
                "59622b8f04324774"
            ]
        ]
    },
    {
        "id": "59622b8f04324774",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "set Bank Token",
        "func": "flow.set('bank_token', msg.payload.idToken);\n\nmsg.bank_token = msg.payload.idToken\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 100,
        "wires": [
            [
                "22dcd48ef95efe1b"
            ]
        ]
    },
    {
        "id": "22dcd48ef95efe1b",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get(\"ADMIN_URL\")\n// const ENTERPRISE_EMAIL = env.get(\"CKPL_ENTERPRISE_ADMIN_EMAIL\")\nconst ENTERPRISE_EMAIL = \"shravan.pm@actyv.com\"\nconst PASSWORD = env.get(\"PASSWORD\")\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": ENTERPRISE_EMAIL,\n    \"password\": PASSWORD\n};\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 180,
        "wires": [
            [
                "5326d44030eef0fe"
            ]
        ]
    },
    {
        "id": "5326d44030eef0fe",
        "type": "http request",
        "z": "b77a80e15cf9f8c6",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 470,
        "y": 180,
        "wires": [
            [
                "b262738495c02360",
                "08b9545c9e5ebd9d"
            ]
        ]
    },
    {
        "id": "b262738495c02360",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "set Enterprise Token",
        "func": "flow.set('ent_token', msg.payload.idToken);\n\nmsg.ent_token = msg.payload.idToken\nconsole.log({ent_token: msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 180,
        "wires": [
            [
                "7eb56e8d5bc7671c"
            ]
        ]
    },
    {
        "id": "2a2290563a82e86d",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "get all permissions",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst ENTERPRISE_EMAIL = env.get('ENTERPRISE_USER_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\n\nmsg.headers = {}\nmsg.method = \"GET\"\nmsg.url = `${ADMIN_URL}/api/permission`;\nmsg.headers[\"content-type\"] = \"application/json\"\nmsg.headers[\"Authorization\"] = `Bearer ${flow.get(\"ent_token\")}`\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 280,
        "wires": [
            [
                "2b4237e4eec825d7"
            ]
        ]
    },
    {
        "id": "2b4237e4eec825d7",
        "type": "http request",
        "z": "b77a80e15cf9f8c6",
        "name": "get all permissions",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 280,
        "wires": [
            [
                "cd1a6ce0e8f1582d",
                "cf86b0ebfcf17003"
            ]
        ]
    },
    {
        "id": "cd1a6ce0e8f1582d",
        "type": "debug",
        "z": "b77a80e15cf9f8c6",
        "name": "All permissions",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 280,
        "wires": []
    },
    {
        "id": "cf86b0ebfcf17003",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "function 178",
        "func": "let permissions = [];\n\nfor(let permission of msg.payload){\npermissions.push(permission._id)\n}\nmsg.payload = {}\nmsg.permissions = permissions\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 360,
        "wires": [
            [
                "aefb565fab23e33b"
            ]
        ]
    },
    {
        "id": "a0ac44dff80ebe80",
        "type": "inject",
        "z": "b77a80e15cf9f8c6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1160,
        "wires": [
            [
                "de1310e4c6aa48fd"
            ]
        ]
    },
    {
        "id": "de1310e4c6aa48fd",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "download multiple files from sftp",
        "func": "const Client = ssh2SftpClient;\nconst sftp = new Client();\nconst options = {\n    host: '43.204.74.60',\n    port: 22, // sftp\n    username: 'axis_sftp',\n    password: 'qjnE8hDZjT12j4fgo3gE'\n};\n\nsftp.connect(options)\n    .then(async () => {\n        const files = await sftp.list('/sftpdir/lead push');\n        console.log({files})\n        node.send({payload: files});\n        for (const file of files) {\n            if (file.type == \"-\") {\n                const remoteFile =`/sftpdir/lead push/${file.name}` // remote file dir path\n                const localFile = `/Users/shravanpm/Desktop/Enterprises/test/${file.name}`// local file dir path\n            try {\n                    await sftp.fastGet(remoteFile, localFile)\n                }\n                catch (err){\n                    console.log(err)\n                node.send({ payload: err })\n            };\n          } \n        }\n    })\n    .catch (err => {\n        node.send({payload: err})\n        console.log(err)})\n    .finally(() => {\n    sftp.end();\n});\n\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "ssh2SftpClient",
                "module": "ssh2-sftp-client"
            }
        ],
        "x": 380,
        "y": 1160,
        "wires": [
            [
                "c5fa387399307747"
            ]
        ]
    },
    {
        "id": "c5fa387399307747",
        "type": "debug",
        "z": "b77a80e15cf9f8c6",
        "name": "debug 424",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 1160,
        "wires": []
    },
    {
        "id": "49c77b722818ea7a",
        "type": "inject",
        "z": "b77a80e15cf9f8c6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1260,
        "wires": [
            [
                "9ff1e81fa55a3a1b"
            ]
        ]
    },
    {
        "id": "9ff1e81fa55a3a1b",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "upload multiple files to sftp",
        "func": "var files = fs.readdirSync('/Users/shravanpm/Desktop/Enterprises/test')\nmsg.payload = files\n\n\nconst Client = ssh2SftpClient;\nconst sftp = new Client();\nconst options = {\n    host: '43.204.74.60',\n    port: 22, // sftp\n    username: 'axis_sftp',\n    password: 'qjnE8hDZjT12j4fgo3gE'\n};\n\nsftp.connect(options)\n    .then(async () => {\n        // const files = await sftp.list('/sftpdir/lead push');\n        // console.log({files})\n        // node.send({payload: files});\n        for (const file of files) {\n            if (file !== \".DS_Store\") {\n                const remoteFile =`/sftpdir/discounting` // remote file dir path\n                const localFile = `/Users/shravanpm/Desktop/Enterprises/test/${file.name}`// local file dir path\n            try {\n                    await sftp.fastPut(remoteFile, localFile)\n                }\n                catch (err){\n                    console.log(err)\n                node.send({ payload: err })\n            };\n          } \n        }\n    })\n    .catch (err => {\n        node.send({payload: err})\n        console.log(err)})\n    .finally(() => {\n    sftp.end();\n});\n\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "ssh2SftpClient",
                "module": "ssh2-sftp-client"
            },
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 380,
        "y": 1260,
        "wires": [
            [
                "1625acdff0ebf376"
            ]
        ]
    },
    {
        "id": "1625acdff0ebf376",
        "type": "debug",
        "z": "b77a80e15cf9f8c6",
        "name": "debug 425",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1260,
        "wires": []
    },
    {
        "id": "5e185fe2a89801d7",
        "type": "inject",
        "z": "b77a80e15cf9f8c6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 1440,
        "wires": [
            [
                "c179187ca6a39d79"
            ]
        ]
    },
    {
        "id": "c179187ca6a39d79",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "function 188",
        "func": "const sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nfor(let i=0;i<10;i++){\n    node.send({...msg})\n    await sleep(10000)\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1440,
        "wires": [
            [
                "c7ce387407164eca"
            ]
        ]
    },
    {
        "id": "c7ce387407164eca",
        "type": "debug",
        "z": "b77a80e15cf9f8c6",
        "name": "debug 426",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 1440,
        "wires": []
    },
    {
        "id": "7a85711fa7576ff8",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "get roles by type",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst ENTERPRISE_EMAIL = env.get('CKPL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\n\nmsg.headers = {}\nmsg.method = \"GET\"\nmsg.url = `${ADMIN_URL}/api/role/get-all/actyv-entity`;\nmsg.headers[\"content-type\"] = \"application/json\"\nmsg.headers[\"Authorization\"] = `Bearer ${flow.get(\"ent_token\")}`\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 440,
        "wires": [
            [
                "72ebb13730b4614c"
            ]
        ]
    },
    {
        "id": "72ebb13730b4614c",
        "type": "http request",
        "z": "b77a80e15cf9f8c6",
        "name": "get roles by type",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 440,
        "wires": [
            [
                "32d1b7ab379ab50b",
                "820934e11427ff21"
            ]
        ]
    },
    {
        "id": "32d1b7ab379ab50b",
        "type": "debug",
        "z": "b77a80e15cf9f8c6",
        "name": "get roles by user type",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 440,
        "wires": []
    },
    {
        "id": "08b9545c9e5ebd9d",
        "type": "debug",
        "z": "b77a80e15cf9f8c6",
        "name": "Authentication",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 140,
        "wires": []
    },
    {
        "id": "2d04e10e98472179",
        "type": "inject",
        "z": "b77a80e15cf9f8c6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1100,
        "wires": [
            [
                "45b04756f7e7cc5b"
            ]
        ]
    },
    {
        "id": "45b04756f7e7cc5b",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "function 191",
        "func": "msg.payload = env.get(\"ADMIN_URL\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1100,
        "wires": [
            [
                "c192d3591ed8f1f5"
            ]
        ]
    },
    {
        "id": "c192d3591ed8f1f5",
        "type": "debug",
        "z": "b77a80e15cf9f8c6",
        "name": "debug 435",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 1100,
        "wires": []
    },
    {
        "id": "820934e11427ff21",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "get role Id",
        "func": "const ROLE_NAME = msg.roleName\n\nconst role = msg.payload.filter((r)=>r.name === ROLE_NAME)\nconst roleId = role[0]?._id || \"\"\n\nmsg.roleId = roleId\nmsg.role = role\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 520,
        "wires": [
            [
                "3ecd74d4177aa5e0"
            ]
        ]
    },
    {
        "id": "7eb56e8d5bc7671c",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "Setting User Id and role name",
        "func": "const ROLE_NAME = \"actyv_entity_role_alln\"\nconst USER_ID = \"\"\nmsg.roleName = ROLE_NAME\nmsg.userId = \"\"\nmsg.userType = \"enterprise-user\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 220,
        "wires": [
            [
                "2a2290563a82e86d"
            ]
        ]
    },
    {
        "id": "3ecd74d4177aa5e0",
        "type": "switch",
        "z": "b77a80e15cf9f8c6",
        "name": "",
        "property": "roleId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 760,
        "wires": [
            [
                "15a270ce905adc42"
            ],
            [
                "a00b97aab584e604"
            ]
        ]
    },
    {
        "id": "15a270ce905adc42",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "create role",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst ENTERPRISE_EMAIL = env.get('CKPL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/role/add`;\nmsg.headers[\"content-type\"] = \"application/json\"\nmsg.headers[\"Authorization\"] = `Bearer ${flow.get(\"ent_token\")}`\nmsg.payload = {\n    \"name\": msg.roleName,\n    \"displayName\": msg.roleName,\n    \"enterprise\": msg.enterpriseId? msg.enterpriseId : \"\",\n    \"bank\": msg.bankId? msg.bankId : \"\",\n    \"actyvEntity\": msg.actyvEntityId? msg.actyvEntityId: \"\",\n    \"permissions\": msg.permissions,\n    \"templates\": [\n    ],\n    \"userType\": msg.userType\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 540,
        "wires": [
            [
                "e87a79ba9b1b3768"
            ]
        ]
    },
    {
        "id": "e87a79ba9b1b3768",
        "type": "http request",
        "z": "b77a80e15cf9f8c6",
        "name": "create role",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 540,
        "wires": [
            [
                "3be0469fd543fbec",
                "89c8fe0a052c5f71"
            ]
        ]
    },
    {
        "id": "3be0469fd543fbec",
        "type": "debug",
        "z": "b77a80e15cf9f8c6",
        "name": "create role",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 540,
        "wires": []
    },
    {
        "id": "89c8fe0a052c5f71",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "create role-user mapping",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst ENTERPRISE_EMAIL = env.get('CKPL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/role-user-mapping`;\nmsg.headers[\"content-type\"] = \"application/json\"\nmsg.headers[\"Authorization\"] = `Bearer ${flow.get(\"ent_token\")}`\nmsg.payload = {\n    \"roleId\": msg.payload._id,\n    \"userId\": msg.userId,\n    \"businessPartnerId\": msg.businessPartnerId ? msg.businessPartnerId: \"\",\n    \"enterpriseId\": msg.enterpriseId ? msg.enterpriseId : \"\",\n    \"bankId\": msg.bankId ? msg.bankId : \"\",\n    \"actyvEntityId\": msg.actyvEntityId ? msg.actyvEntityId : \"\"\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 620,
        "wires": [
            [
                "b34c2fbcfd9d70bb"
            ]
        ]
    },
    {
        "id": "b34c2fbcfd9d70bb",
        "type": "http request",
        "z": "b77a80e15cf9f8c6",
        "name": "create role-user mapping",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 770,
        "y": 620,
        "wires": [
            [
                "044cf9d0ff16d3a5"
            ]
        ]
    },
    {
        "id": "044cf9d0ff16d3a5",
        "type": "debug",
        "z": "b77a80e15cf9f8c6",
        "name": "create role-user mapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 620,
        "wires": []
    },
    {
        "id": "a00b97aab584e604",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "create role",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst ENTERPRISE_EMAIL = env.get('CKPL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/role/${msg.roleId}`;\nmsg.headers[\"content-type\"] = \"application/json\"\nmsg.headers[\"Authorization\"] = `Bearer ${flow.get(\"ent_token\")}`\nmsg.payload = {\n    \"name\": msg.role.name,\n    \"displayName\": msg.role.displayName,\n    \"enterprise\": msg.enterpriseId? msg.enterpriseId : \"\",\n    \"bank\": msg.bankId? msg.bankId : \"\",\n    \"actyvEntity\": msg.actyvEntityId? msg.actyvEntityId: \"\",\n    \"permissions\": msg.permissions,\n    \"templates\": [\n    ],\n    \"userType\": msg.userType\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 800,
        "wires": [
            [
                "af3ad8855fc01b50"
            ]
        ]
    },
    {
        "id": "af3ad8855fc01b50",
        "type": "http request",
        "z": "b77a80e15cf9f8c6",
        "name": "create role",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 800,
        "wires": [
            [
                "c2d189d1ee071a6c"
            ]
        ]
    },
    {
        "id": "c2d189d1ee071a6c",
        "type": "debug",
        "z": "b77a80e15cf9f8c6",
        "name": "create role",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 800,
        "wires": []
    },
    {
        "id": "aefb565fab23e33b",
        "type": "debug",
        "z": "b77a80e15cf9f8c6",
        "name": "debug 465",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 360,
        "wires": []
    },
    {
        "id": "caee6a05a1789ec4",
        "type": "inject",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 320,
        "wires": [
            [
                "48da8a6b9546ba39"
            ]
        ]
    },
    {
        "id": "44acdb26eb29a40a",
        "type": "SFTP-main",
        "z": "5bf29b5d3a6e7fb3",
        "path": "/",
        "method": "list",
        "remoteFilePath": "/sftpdir/invoices",
        "remoteFilePathType": "str",
        "localFilePath": "C:\\Users\\Ayush Rarg\\OneDrive - actyv.ai\\Desktop\\node-red",
        "localFilePathType": "str",
        "server": "8713902662c7b8a4",
        "outputs": 1,
        "debug": false,
        "name": "lisitng the files from sftp",
        "x": 150,
        "y": 800,
        "wires": [
            [
                "e04ed38cf42c2391",
                "aa22267742bfe05c"
            ]
        ]
    },
    {
        "id": "aa0d6208e5c36a34",
        "type": "SFTP-main",
        "z": "5bf29b5d3a6e7fb3",
        "path": "/",
        "method": "get",
        "remoteFilePath": "payload",
        "remoteFilePathType": "msg",
        "localFilePath": "LOCAL_PATH",
        "localFilePathType": "env",
        "server": "8713902662c7b8a4",
        "outputs": 1,
        "debug": false,
        "name": "get a single file from sftp",
        "x": 750,
        "y": 800,
        "wires": [
            [
                "776ef2ceea9801b3",
                "9121900b816e24de"
            ]
        ]
    },
    {
        "id": "7a5d72233377e8e4",
        "type": "file in",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "filename": "filename",
        "format": "stream",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 1000,
        "y": 740,
        "wires": [
            [
                "5cd4e2d3c96108ad"
            ]
        ]
    },
    {
        "id": "2e23337669b59f84",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "setFilename",
        "func": "const folderPath = msg.payload[0].split(\"/\")\nconst fileName = folderPath[folderPath.length - 1]\nflow.set('filename', fileName)\nmsg.filename = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 740,
        "wires": [
            [
                "7a5d72233377e8e4"
            ]
        ]
    },
    {
        "id": "5cd4e2d3c96108ad",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getFilename",
        "func": "msg.filename = flow.get(\"filename\") || \"test.xlsx\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 740,
        "wires": [
            [
                "9677ee12dbec87a4"
            ]
        ]
    },
    {
        "id": "8543a4c4b58fcb9d",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getFilename",
        "func": "const filename = flow.get(\"filename\") || \"sample.xlsx\"\n// const s3Url = `https://nodered-test.s3.ap-northeast-1.amazonaws.com/${filename}`\nconst s3Url = `https://actyv-test-bucket.s3.amazonaws.com/ftpFiles/${filename}`\n\n// Assign filename and s3Url to flow variables\nflow.set(\"filename\",filename)\nflow.set(\"s3Url\",s3Url)\n\nmsg.filename = filename;\nmsg.s3Url = s3Url;\nmsg.filepath = `/home/ec2-user/data/${filename}`\n\nconst PAYLATER_URL = env.get(\"PAYLATER_URL\")\nconst CONFIG_KEY = env.get(\"CKPL_CONFIG_KEY\")\n\nmsg.url = `${PAYLATER_URL}/v1/configuration/service/config-key/${CONFIG_KEY}`\nmsg.method = \"GET\"\nconst token = flow.get(\"actyvToken\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\nmsg.headers[\"x-actyv-api-config-key\"] = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.logger = `Get the configuration for config-key #${CONFIG_KEY}`\n\nreturn msg;\n\n// Right now don't check the file present in s3 or not just hardcode the path with the real file name path",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1120,
        "wires": [
            [
                "e5e63b7203f4468b"
            ]
        ]
    },
    {
        "id": "472c56c783df3bc2",
        "type": "comment",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Get s3 link using filename",
        "info": "",
        "x": 134.99998474121094,
        "y": 854.9999980926514,
        "wires": []
    },
    {
        "id": "62aea988a57ed9c1",
        "type": "comment",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Upload to s3",
        "info": "",
        "x": 1374.999984741211,
        "y": 514.9999980926514,
        "wires": []
    },
    {
        "id": "231882aca6bd340a",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Get env variables",
        "func": "msg.PAYLATER_URL = env.get(\"PAYLATER_URL\")\nmsg.GO_URL = env.get(\"GO_URL\")\nmsg.ADMIN_URL = env.get(\"ADMIN_URL\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1240,
        "wires": [
            [
                "aa492dd62740c861"
            ]
        ]
    },
    {
        "id": "434cac9c6be0d102",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "setDataSourceConfig",
        "func": "flow.set('dataSourceConfig',msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1240,
        "wires": [
            [
                "231882aca6bd340a"
            ]
        ]
    },
    {
        "id": "aa492dd62740c861",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "dataSourceConfigReq",
        "func": "const dataSourceConfig = flow.get(\"dataSourceConfig\") || {}\nconst body = {\n    dataSourceConfigId: dataSourceConfig.id,\n    direction: dataSourceConfig.direction,\n    fileOriginalName: `${msg.filename}`,\n    fileDestinationPath: `${msg.s3Url}`,\n    isValid: true,\n    noOfRows: null,\n    parsedOn: null,\n    parseAttempts: 0,\n    parseStatus: \"ingested\",\n    statusComment: null,\n    transmissionStatus: \"pending\",\n}\nmsg.payload = body;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1240,
        "wires": [
            [
                "1ecf16e3b972d78f",
                "bf9c98522d05d890"
            ]
        ]
    },
    {
        "id": "1ecf16e3b972d78f",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Update data source config",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 1180,
        "wires": []
    },
    {
        "id": "cfc49ea3b3ec90d9",
        "type": "comment",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Invoice creation",
        "info": "",
        "x": 124.99998474121094,
        "y": 1294.9999980926514,
        "wires": []
    },
    {
        "id": "eeb046043b4c86c4",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getPendingFiles",
        "func": "\nconst pendingFiles = msg.payload.filter(\n    (item) =>\n        item.parseStatus == \"failure\" \n        ||\n        item.parseStatus == \"ingested\",\n);\nmsg.payload = pendingFiles;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1380,
        "wires": [
            [
                "08cac7b5283843b8",
                "a393457526f8ded2"
            ]
        ]
    },
    {
        "id": "08cac7b5283843b8",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "loopOverPendingFiles",
        "func": "// let pendingFiles = [...msg.payload]\n// for (let i = 0; i < pendingFiles.length; i++) {\n//     msg.payload = pendingFiles[i]\n//     node.send(msg);\n//     // console.log(\"\\n\\n\",\"sd\",i,\"\\n\\n\")\n// }\n\n// // return msg\n\n\n// for (let i = 0; i < msg.payload.length; i++) {\nfor (let i = 0; i < 1; i++) {\n    flow.set(\"fileId\", msg.payload[i].id)\n    node.send(msg,{payload: msg.payload[i]});\n    // console.log(\"\\n\\n\",\"sd\",i,\"\\n\\n\")\n}\n\n// return msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 1380,
        "wires": [
            [
                "4e0cddad5edb8207",
                "145ffd90a0dc5736"
            ]
        ]
    },
    {
        "id": "4e0cddad5edb8207",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getFlowVariables",
        "func": "const s3Url = flow.get('s3Url') || \"\"\nconst filename = flow.get('filename') || \"\"\n\nconst PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst url = msg.payload.fileDestinationPath\nconst fileId = flow.get(\"fileId\") || \"\"\n// msg.fileId = \"aff9a6b8-c94c-4b2b-bef8-2150841d234d\"\nmsg.url = `${PAYLATER_URL}/v1/file/service/patchParsingStatus/${fileId}`\nmsg.method = 'PATCH'\nconst token = flow.get(\"actyvToken\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\nmsg.headers[\"x-actyv-api-config-key\"] = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.payload = {\n    \"parseStatus\": \"parsing\",\n    \"statusComment\": \"File parsed successfully from File Parser service\"\n}\n\nmsg.logger = `Update file parsing state for fileID #${fileId}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1520,
        "wires": [
            [
                "bf3fa0b70f31a220"
            ]
        ]
    },
    {
        "id": "c92b63da44fd9746",
        "type": "http request",
        "z": "5bf29b5d3a6e7fb3",
        "name": "File parser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 274.99998474121094,
        "y": 1414.9999980926514,
        "wires": [
            []
        ]
    },
    {
        "id": "340af3066d09a2c1",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "fileParserRequest",
        "func": "msg.filename = `${env.get('LOCAL_PATH')}/${msg.filename.split(\".\").slice(0, -1).join(\".\").trimLeft()}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1520,
        "wires": [
            [
                "55cef45f7c9eca9f"
            ]
        ]
    },
    {
        "id": "e8978861854254ea",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getOutstandingInvoices",
        "func": "// const outstandingInvoices = msg.payload.data[\"Sheet1\"][\"valid\"]\n// msg.outstandingInvoices = outstandingInvoices\n// return msg;\nconst data = msg.payload.filter((d)=>{\n    if (d.DocumentNo){\n        return d\n    }\n})\nmsg.outstandingInvoices = data\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1660,
        "wires": [
            [
                "5dc3de06a69c5386",
                "77c020c3f12969f9"
            ]
        ]
    },
    {
        "id": "77c020c3f12969f9",
        "type": "switch",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "property": "outstandingInvoices.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lte",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 1660,
        "wires": [
            [
                "7cea4f7083f289c9"
            ],
            [
                "db14297651a64868"
            ]
        ]
    },
    {
        "id": "db14297651a64868",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getDistributorByERPID",
        "func": "\nconst PAYLATER_URL = env.get('PAYLATER_URL')\n\nmsg.url = `${PAYLATER_URL}/v1/business-relationship/getByBulkDistributorERP`\nmsg.method = 'POST'\nconst token = flow.get(\"actyvToken\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\nmsg.payload = {\n erpIDList: msg.enterpriseId \n}\n\nmsg.logger = `Get distributors erpID for enterpriseID #${msg.enterpriseId}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1680,
        "wires": [
            [
                "9f3bd1a0872e4ebb"
            ]
        ]
    },
    {
        "id": "1f29d0d2158a705b",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "invoiceRawFormat",
        "func": "const sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\nconst chunkSize = 50;\nconst fileId = flow.get('fileId') || \"\"\nlet chunks = []\n\nfor (let i = 0; i < msg.payload.length; i += chunkSize) {\n    chunks.push(msg.payload.slice(i, i + chunkSize));\n\n    // do whatever\n}\n\n// chunks = chunks.slice(0,2)\n// chunk the large array into multiple with (100 each)\n// loop through main array [1000 -> [[100],[100],...]\n// 100 -> push into invoiceRaw and send \n\nif (msg.payload.length > 0) {\n    let invoiceDate;\n    let actualDays;\n    let formatDueDate;\n    for (let i = 0; i < chunks.length; i++) {\n        const invoiceRaw = []\n        await sleep(250)\n\n        for (let j = 0; j < chunks[i].length; j++) {\n            let outstandingFile = chunks[i][j];\n            invoiceDate = sheetDateToJSDate(outstandingFile[\"Doc. Date\"]);\n            // let invoiceDate = \"2023-01-28\";\n\n            var date = new Date();\n            actualDays = addDays(0, invoiceDate)\n            // formatDueDate = `${new Date(actualDays).getDate()}-${new Date(actualDays).getMonth() + 1}-${new Date(actualDays).getFullYear()}`\n\n            fixDate({ ...outstandingFile, dueDate: formatDueDate, sytemDueDate: invoiceDate });\n            if (outstandingFile?.[\"DocumentNo\"]) {\n                // let businessID = outstandingFile[\"New account\"] ? msg.erpIdAndBusinessIdMapping[`${outstandingFile[\"New account\"]}${outstandingFile[\"Account\"]}`] : msg.erpIdAndBusinessIdMapping[`${outstandingFile[\"Account\"]}`]\n                let businessID = msg.erpIdAndBusinessIdMapping[outstandingFile[\"New account\"]] \n                invoiceRaw.push({\n                    // businessID: msg.erpIdAndBusinessIdMapping[outstandingFile.RetailerCode],\n                    businessID: businessID ?? null,\n                    enterpriseID: msg.enterpriseId,\n                    fileID: fileId,\n                    // erpID: outstandingFile[\"New account\"] ? `${outstandingFile[\"New account\"]}${outstandingFile[\"Account\"]}` : `${outstandingFile[\"New account\"]}`,\n                    erpID: outstandingFile[\"New account\"] ? `${outstandingFile[\"New account\"]}` : `${outstandingFile[\"New account\"]}`,\n                    documentNo: outstandingFile[\"DocumentNo\"].toString() ?? \"\",\n                    amount: outstandingFile[\"   Amt in loc.cur.\"],\n                    dueDate: actualDays,\n                    documentDate: new Date(invoiceDate)?.toISOString(),\n                    remitTo: \"\",\n                    remitAccount: \"\",\n                    paymentTerm: \"\",\n                    rawData: JSON.parse(JSON.stringify(outstandingFile)) || {},\n                })\n            }\n        }\n        console.log({ invoiceRaw })\n        node.send({\n            payload: invoiceRaw,\n            isCompleted: \"false\",\n            invoiceDate,\n            formatDueDate,\n            actualDays,\n            length: i,\n            enterpriseId: msg.enterpriseId,\n            bankId: msg.bankId\n        })\n    }\n\n}\n\n// }\n\nfunction fixDate(invoice) {\n    let tempDocDate = new Date(invoice.postingDate);\n    let tempSystemDueDate = new Date(invoice.sytemDueDate);\n    let tempDueDate = new Date(invoice.dueDate);\n\n    tempDocDate.setTime(tempDocDate.getTime() + 1000 * 60);\n    tempDocDate.setHours(0, 0, 0);\n    tempSystemDueDate.setTime(tempSystemDueDate.getTime() + 1000 * 60);\n    tempSystemDueDate.setHours(0, 0, 0);\n    tempDueDate.setTime(tempDueDate.getTime() + 1000 * 60);\n    tempDueDate.setHours(0, 0, 0);\n\n    invoice.docDate = convertToISO(tempDocDate);\n    invoice.sytemDueDate = convertToISO(tempSystemDueDate);\n    invoice.dueDate = convertToISO(tempDueDate);\n}\n\nfunction convertToISO(date) {\n    return (\n        date.getFullYear() +\n        \"-\" +\n        (date.getMonth() + 1) +\n        \"-\" +\n        date.getDate() +\n        \" 00:00:00.000+00\"\n    );\n}\n\nfunction sliceIntoChunks(arr, chunkSize) {\n    const res = [];\n\n    for (let k = 0; k < arr.length; k += chunkSize) {\n        const chunk = arr.slice(k, k + chunkSize);\n        res.push(chunk);\n    }\n\n    return res;\n};\n\nfunction addDays(days, invoiceDate) {\n    var date = new Date(invoiceDate);\n    date.setDate(date.getDate() + days);\n    return date;\n}\n\nfunction formatDates(inputDate) {\n    const date = inputDate\n    const [day, month, year] = date.toString()?.split(\"/\")\n    const result = new Date(year, month - 1, day).toLocaleDateString('en-GB');\n    return result.split(\"/\").reverse().join(\"-\")\n}\n\nfunction sheetDateToJSDate(n) {\n    // const d = new Date(1899, 11, 30)\n    const d = new Date(1899, 11, 30)\n    d.setDate(d.getDate() + n)\n    // Rounds milliseconds to seconds\n    d.setSeconds(d.getSeconds() + Math.round(d.getMilliseconds() / 1000))\n    d.setMilliseconds(0)\n    // return `${d.getDate()}-${d.getMonth() + 1}-${d.getFullYear()}`\n    return `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`\n}\n\nmsg.isCompleted = \"true\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 2100,
        "wires": [
            [
                "15c43056d3741821",
                "ed42b818da0ec289"
            ]
        ]
    },
    {
        "id": "f76b3481add7cdbf",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "addInvoiceBulk",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${PAYLATER_URL}/v1/invoice-raw/service/bulk-insert`\nmsg.method = 'POST'\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = {\n invoiceRawDataArray: msg.payload\n}\n\nmsg.logger = `add invoice bulk`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 1900,
        "wires": [
            [
                "1d0a7fbf8a477abd",
                "a6d7fc28fc119303"
            ]
        ]
    },
    {
        "id": "7af3b0b894fc94a2",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "totalInvoices",
        "func": "let totalInvoiceRawInserted = {};\ntotalInvoiceRawInserted = {\n    ...totalInvoiceRawInserted,\n    ...msg.payload,\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 2020,
        "wires": [
            [
                "9f8104113af678da"
            ]
        ]
    },
    {
        "id": "9f8104113af678da",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "updateFileParsingStatus",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst fileId = flow.get(\"fileId\") || \"\";\n\nmsg.url = `${PAYLATER_URL}/v1/file/service/patchParsingStatus/${fileId}`\nmsg.method = 'PATCH'\nconst token = flow.get(\"actyvToken\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\nmsg.headers[\"x-actyv-api-config-key\"] = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.payload = {\n    \"parseStatus\": \"aggregated\",\n    \"statusComment\": \"File parsed successfully from File Parser service\"\n}\nmsg.logger = `Update file parsing state for fileID #${fileId}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 2020,
        "wires": [
            [
                "9a15dfe15783bb04"
            ]
        ]
    },
    {
        "id": "7cea4f7083f289c9",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "updateFileParsingStatus",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nmsg.url = `${PAYLATER_URL}/v1/file/service/patchParsingStatus/${msg.fileId}`\nmsg.method = 'PATCH'\nconst token = flow.get(\"actyvToken\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"x-actyv-api-config-key\"] = env.get(\"X_ACTYV_API_CONFIG_KEY\")\nmsg.payload = {\n    \"parseStatus\": \"ingested\",\n    \"statusComment\": \"File parsed successfully from File Parser service\"\n}\n\nmsg.logger = `Update file parsing state for fileID #${msg.fileId}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1620,
        "wires": [
            [
                "8c80910861f7f1e9"
            ]
        ]
    },
    {
        "id": "57c9a54137a3a67a",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "callCopyInvoiceSP",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst fileId =flow.get('fileId') || \"\"\n\nmsg.url = `${PAYLATER_URL}/v1/invoice-raw/copy-invoices-sp/${fileId}`\nmsg.method = 'POST'\nconst token = flow.get(\"actyvToken\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\n\nmsg.logger = `callCopyInvoiceSP`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 2180,
        "wires": [
            [
                "afba504550d6ff35",
                "ceccf1106f47974b"
            ]
        ]
    },
    {
        "id": "5492afb8ec691487",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "updatePreviousInvoicesToPaid",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\nconst BP_TYPE = \"DISTRIBUTOR\"\n\nmsg.url = `${PAYLATER_URL}/v1/invoices/service/status/${msg.enterpriseId}?bpType=${BP_TYPE}`\nmsg.method = 'POST'\nconst token = flow.get(\"ent_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n// msg.headers[\"Authorization\"] = `Bearer ${token}`\n// msg.headers[\"enterpriseid\"] = msg.enterpriseId\n\nmsg.logger = `update Previous Invoices To Paid`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 2260,
        "wires": [
            [
                "91c918c4ddd002c7"
            ]
        ]
    },
    {
        "id": "5860c5cb8c5667dd",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "computeNetInvoice",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nmsg.url = `${PAYLATER_URL}/v1/invoices/compute-net-invoice-amount/${msg.fileId}`\nmsg.method = 'POST'\n\nmsg.logger = `Compute net invoice`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 2360,
        "wires": [
            [
                "ad750d6df13e8090"
            ]
        ]
    },
    {
        "id": "7ad2974088fcd69b",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "updateFileParsingStatusReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst fileId = flow.get('fileId') || \"\"\n\nmsg.url = `${PAYLATER_URL}/v1/file/service/patchParsingStatus/${fileId}`\nmsg.method = 'PATCH'\nmsg.payload = {\n    \"parseStatus\": \"aggregated\",\n    \"statusComment\": \"File parsed successfully from File Parser service\"\n}\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.logger = `Update file parsing state for fileID #${fileId}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 2420,
        "wires": [
            [
                "2090357173e7b6f7"
            ]
        ]
    },
    {
        "id": "945d1c23f160a73b",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "debug 327",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2060,
        "y": 2260,
        "wires": []
    },
    {
        "id": "18eeb6d042584c06",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "erpIdAndBusinessIdMapping",
        "func": "msg.erpIdAndBusinessIdMapping = msg.payload\nmsg.payload = msg.outstandingInvoices\nreturn msg;\n\n// Response Type\n// {\n//   \"101104\": \"635f8ebfd988fd7c1800d8c9\"\n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 2100,
        "wires": [
            [
                "1f29d0d2158a705b",
                "677846ab51f80e19"
            ]
        ]
    },
    {
        "id": "377c87779fc498cc",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2150,
        "y": 2020,
        "wires": []
    },
    {
        "id": "15c43056d3741821",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "invoiceRawFormat",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 2160,
        "wires": []
    },
    {
        "id": "ed42b818da0ec289",
        "type": "switch",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "property": "isCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 890,
        "y": 2100,
        "wires": [
            [
                "f76b3481add7cdbf",
                "7916a9ea3a8207d6"
            ],
            [
                "7af3b0b894fc94a2",
                "369d1f893387ee78"
            ]
        ]
    },
    {
        "id": "55cef45f7c9eca9f",
        "type": "alafile in",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "filename": "",
        "format": "xlsx",
        "columns": "*",
        "headers": true,
        "x": 270,
        "y": 1660,
        "wires": [
            [
                "9db84ff72964d2cd",
                "e8978861854254ea"
            ]
        ]
    },
    {
        "id": "0f0d9ac041c444e1",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Update file parsing status to ingested",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 1620,
        "wires": []
    },
    {
        "id": "5d14e2c7eb801bb2",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Add invoice bulk",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 1900,
        "wires": []
    },
    {
        "id": "afba504550d6ff35",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "debug 329",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 2140,
        "wires": []
    },
    {
        "id": "bf9c98522d05d890",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "createFileReq",
        "func": "\nconst PAYLATER_URL = env.get(\"PAYLATER_URL\")\n\nmsg.url = `${PAYLATER_URL}/v1/file/service`\nmsg.method = \"POST\"\nconst token = flow.get(\"actyvToken\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\nmsg.headers[\"x-actyv-api-config-key\"] = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.logger = `Create file`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1244.999984741211,
        "y": 1234.9999980926514,
        "wires": [
            [
                "4579b4696fb40a9e",
                "47d30f5b9d5b2ef4"
            ]
        ]
    },
    {
        "id": "bc13694782348c9d",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getFileByConfigKeyReq",
        "func": "\nconst PAYLATER_URL = env.get(\"PAYLATER_URL\")\nconst CONFIG_KEY = env.get(\"CKPL_CONFIG_KEY\")\n\nmsg.url = `${PAYLATER_URL}/v1/file/config-key/${CONFIG_KEY}`\nmsg.method = \"GET\"\nconst token = flow.get(\"actyvToken\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\n\nmsg.logger = `Get file by config key #${CONFIG_KEY}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1380,
        "wires": [
            [
                "a2b38d058bcfbe66"
            ]
        ]
    },
    {
        "id": "e04ed38cf42c2391",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getSingleFilename",
        "func": "\nconst files = msg.payload\nlet file;\nif (files.length > 0) {\n    file = files[0]\n}\nconst s = \"13 thaprQAActyv Invoice Format.XLSX\"\nconst fileName = file.split(\".\")[-1]\n\n// msg.payload =  [file]\nmsg.payload = [`/sftpdir/invoices/OUTSTANDING_251122 (2).xlsx`]\nmsg.logger = `Read file from sftp`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 800,
        "wires": [
            [
                "967f847d0b116c88",
                "2e23337669b59f84"
            ]
        ]
    },
    {
        "id": "7fed2a4556a37d44",
        "type": "inject",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Every 10 minutes",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "5dc3de06a69c5386",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1760,
        "wires": []
    },
    {
        "id": "c925dd30e1de412b",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "distributor Id from erpID",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 1680,
        "wires": []
    },
    {
        "id": "677846ab51f80e19",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "erpIdAndBusinessIdMapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 2040,
        "wires": []
    },
    {
        "id": "e7cfa83ca2e70958",
        "type": "inject",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1020,
        "y": 2200,
        "wires": [
            [
                "57c9a54137a3a67a"
            ]
        ]
    },
    {
        "id": "b5980ae8773c4e30",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "sleep",
        "func": "const sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\nawait sleep(5000)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 2100,
        "wires": [
            [
                "57c9a54137a3a67a"
            ]
        ]
    },
    {
        "id": "bff20954da9fa981",
        "type": "comment",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Move file to failure folder",
        "info": "Send an email if any error occurs",
        "x": 514.9999847412109,
        "y": 2434.9999980926514,
        "wires": []
    },
    {
        "id": "3e5bc4acfc23c9df",
        "type": "catch",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 464.99998474121094,
        "y": 2494.9999980926514,
        "wires": [
            []
        ]
    },
    {
        "id": "aafe38dff2875569",
        "type": "SFTP-main",
        "z": "5bf29b5d3a6e7fb3",
        "path": "/",
        "method": "put",
        "remoteFilePath": "successPath",
        "remoteFilePathType": "msg",
        "localFilePath": "localPath",
        "localFilePathType": "msg",
        "server": "8713902662c7b8a4",
        "outputs": 1,
        "debug": false,
        "name": "move to success folder",
        "x": 1254.999984741211,
        "y": 774.9999980926514,
        "wires": [
            [
                "c0b62a5ef2481a0b"
            ]
        ]
    },
    {
        "id": "09bd748f9f813586",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Deleted file from SFTP existing directory",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1844.999984741211,
        "y": 774.9999980926514,
        "wires": []
    },
    {
        "id": "c0b62a5ef2481a0b",
        "type": "SFTP-main",
        "z": "5bf29b5d3a6e7fb3",
        "path": "/",
        "method": "delete",
        "remoteFilePath": "remotePath",
        "remoteFilePathType": "msg",
        "localFilePath": "filepath",
        "localFilePathType": "msg",
        "server": "8713902662c7b8a4",
        "outputs": 1,
        "debug": false,
        "name": "delete from existing folder",
        "x": 1534.999984741211,
        "y": 774.9999980926514,
        "wires": [
            [
                "09bd748f9f813586"
            ]
        ]
    },
    {
        "id": "9121900b816e24de",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "setRemotePath",
        "func": "msg.filename = msg.payload[0].split(\".\").slice(0, -1).join(\".\") // filename without extension\n\nconst folderPath = msg.payload[0].split(\"/\")\nconst fileName = folderPath[folderPath.length - 1]\nflow.set('filename', fileName) // filename with extension\nglobal.set('filename', fileName) // filename with extension\n\n// msg.filepath = `/Users/ramu/Desktop/node-red/${fileName}`\nmsg.successPath = `${env.get(\"SFTP_SUCCESS_FOLDER\")}`\nmsg.localPath = `${env.get(\"LOCAL_PATH\")}/${fileName}`\nmsg.remotePath = `${env.get(\"REMOTE_PATH_OUT\")}/${fileName}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 920,
        "wires": [
            [
                "8543a4c4b58fcb9d"
            ]
        ]
    },
    {
        "id": "c80f0d7b534bc578",
        "type": "SFTP-main",
        "z": "5bf29b5d3a6e7fb3",
        "path": "/",
        "method": "put",
        "remoteFilePath": "failurePath",
        "remoteFilePathType": "msg",
        "localFilePath": "localPath",
        "localFilePathType": "msg",
        "server": "8713902662c7b8a4",
        "outputs": 1,
        "debug": false,
        "name": "move to failure folder",
        "x": 864.9999847412109,
        "y": 2494.9999980926514,
        "wires": [
            [
                "2f9a79a69db4041f"
            ]
        ]
    },
    {
        "id": "c82282802c214df8",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Deleted file from SFTP existing directory",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 864.9999847412109,
        "y": 2594.9999980926514,
        "wires": []
    },
    {
        "id": "2f9a79a69db4041f",
        "type": "SFTP-main",
        "z": "5bf29b5d3a6e7fb3",
        "path": "/",
        "method": "delete",
        "remoteFilePath": "remotePath",
        "remoteFilePathType": "msg",
        "localFilePath": "filepath",
        "localFilePathType": "msg",
        "server": "8713902662c7b8a4",
        "outputs": 1,
        "debug": false,
        "name": "delete from existing folder",
        "x": 534.9999847412109,
        "y": 2594.9999980926514,
        "wires": [
            [
                "c82282802c214df8"
            ]
        ]
    },
    {
        "id": "3075dba0f42b4ec0",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "setRemotePath",
        "func": "const fileName = global.get('filename') // filename with extension\n\nmsg.failurePath = `${env.get(\"SFTP_FAILURE_FOLDER\")}`\nmsg.localPath = `${env.get(\"LOCAL_PATH\")}/${fileName}`\nmsg.remotePath = `${env.get(\"REMOTE_PATH_OUT\")}/${fileName}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 644.9999847412109,
        "y": 2494.9999980926514,
        "wires": [
            [
                "eb6a02edbec33c8d"
            ]
        ]
    },
    {
        "id": "eb6a02edbec33c8d",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "debug 330",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 784.9999847412109,
        "y": 2414.9999980926514,
        "wires": []
    },
    {
        "id": "1ecee91eb0ac1ff7",
        "type": "comment",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Error handling",
        "info": "Send an email if any error occurs",
        "x": 434.99998474121094,
        "y": 2814.9999980926514,
        "wires": []
    },
    {
        "id": "0234ce105d3f54a5",
        "type": "catch",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 424.99998474121094,
        "y": 2874.9999980926514,
        "wires": [
            []
        ]
    },
    {
        "id": "40ef5ac3332a61b0",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "error",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1074.999984741211,
        "y": 2874.9999980926514,
        "wires": []
    },
    {
        "id": "68d8437f36701beb",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "sendEmailReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\n\nmsg.payload = {\n    // \"from\": \"ramu.bugudi@actyv.com\",\n    \"from\": \"shravan.pm@actyv.com\",\n    \"to\": \"ramu.bugudi@actyv.com\",\n    \"subject\": `Error occured - ${msg.error.message}`,\n    // \"html\": `${msg.error}`,\n    \"html\": `\n    <html>\n        <body>\n            <p></p>\n            <p><b>FLOW NAME:</b> ${env.get(\"NR_FLOW_NAME\")} <b>FLOW ID:</b> ${env.get(\"NR_FLOW_ID\")} <b>PATH:</b> ${env.get(\"NR_NODE_PATH\")}</p>\n            <p>${msg.error.message}</p>\n            <p>Name: ${msg.error.source.name} - Type: ${msg.error.source.type}</p>\n            <p>Stacktrace: ${msg.error.stack}</p>\n        </body>\n    </html>`,\n    \"priority\": \"high\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 644.9999847412109,
        "y": 2874.9999980926514,
        "wires": [
            [
                "b94aeb03438674d6"
            ]
        ]
    },
    {
        "id": "b94aeb03438674d6",
        "type": "http request",
        "z": "5bf29b5d3a6e7fb3",
        "name": "sendEmail",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 874.9999847412109,
        "y": 2874.9999980926514,
        "wires": [
            [
                "40ef5ac3332a61b0"
            ]
        ],
        "info": "Get bank product config id"
    },
    {
        "id": "145ffd90a0dc5736",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 1460,
        "wires": []
    },
    {
        "id": "098856cdba207396",
        "type": "comment",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Delete from local folder aswell",
        "info": "Send an email if any error occurs",
        "x": 1164.999984741211,
        "y": 2534.9999980926514,
        "wires": []
    },
    {
        "id": "ea2b4fdbe724e032",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getEnterpriseReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst BUSINESS_UNIQUE_IDENTIFIER = env.get(\"CKPL_BUSINESS_UNIQUE_IDENTIFIER\")\nconst BUSINESS_TYPE = \"ENTERPRISE\"\nmsg.headers = {}\nmsg.method = \"GET\"\nconst token = flow.get(\"ent_token\") || \"\"\nmsg.url = `${PAYLATER_URL}/v1/business/service/getByIdentifier/${BUSINESS_UNIQUE_IDENTIFIER}/${BUSINESS_TYPE}`;\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n// msg.headers[\"Authorization\"] = `Bearer ${token}`\n\nmsg.logger = `Get enterprise for business unique identifier #${BUSINESS_UNIQUE_IDENTIFIER}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 680,
        "wires": [
            [
                "2385363a5e2870f8"
            ]
        ]
    },
    {
        "id": "a09ad89d2ab1f626",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Save Enterprise ID",
        "func": "const enterpriseId = msg.payload?.id\n\nmsg.enterpriseId = enterpriseId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 680,
        "wires": [
            [
                "e285fb1701e1102a",
                "44acdb26eb29a40a"
            ]
        ]
    },
    {
        "id": "9677ee12dbec87a4",
        "type": "amazon s3 out",
        "z": "5bf29b5d3a6e7fb3",
        "aws": "5d210162c7877d54",
        "bucket": "actyv-test-bucket",
        "filename": "",
        "localFilename": "",
        "region": "ap-south-1",
        "name": "Upload to s3",
        "x": 1390,
        "y": 740,
        "wires": []
    },
    {
        "id": "588f059fa9101cae",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst ENTERPRISE_EMAIL = env.get('CKPL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": ENTERPRISE_EMAIL,\n    \"password\": PASSWORD\n};\nmsg.logger = `Autheticate ${ENTERPRISE_EMAIL}`\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 220,
        "wires": [
            [
                "7de7b70a4f11e7bd"
            ]
        ]
    },
    {
        "id": "d0f1274f88feedf0",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "set Enterprise Token",
        "func": "flow.set('ent_token', msg.payload.idToken);\n\nmsg.ent_token = msg.payload.idToken\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 220,
        "wires": [
            [
                "cc12235f4f617a1a"
            ]
        ]
    },
    {
        "id": "c8c1b6d1a2b6339d",
        "type": "inject",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 564.9999847412109,
        "y": 74.99999809265137,
        "wires": [
            [
                "625ade66ce5480a6"
            ]
        ]
    },
    {
        "id": "573140683dde2427",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 874.9999847412109,
        "y": 74.99999809265137,
        "wires": []
    },
    {
        "id": "625ade66ce5480a6",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst PAYLATER_URL = env.get('PAYLATER_URL')\nconst GO_URL = env.get('GO_URL')\nconst ENTERPRISE_EMAIL = env.get('APL_PIPES_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst CONFIG_KEY = env.get('CONFIG_KEY')\nconst APL_PIPES_CONFIG_KEY = env.get('APL_PIPES_CONFIG_KEY')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\nconst MSL_BANK_ADMIN_EMAIL = env.get('MSL_BANK_ADMIN_EMAIL')\nconst MSL_BANK_KEY = env.get('MSL_BANK_KEY')\nconst CKPL_CONFIG_KEY = env.get('CKPL_CONFIG_KEY')\nconst AXIS_BANK_KEY = env.get('AXIS_BANK_KEY')\n\nmsg.payload = {\n    ADMIN_URL, PAYLATER_URL, GO_URL,\n    ENTERPRISE_EMAIL,\n    PASSWORD,\n    CONFIG_KEY,\n    APL_PIPES_CONFIG_KEY,\n    X_ACTYV_API_CONFIG_KEY,\n    MSL_BANK_ADMIN_EMAIL,\n    MSL_BANK_KEY,\n    CKPL_CONFIG_KEY,\n    AXIS_BANK_KEY\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 714.9999847412109,
        "y": 74.99999809265137,
        "wires": [
            [
                "573140683dde2427"
            ]
        ]
    },
    {
        "id": "15f2897e52a313d7",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getFileName",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 1120,
        "wires": []
    },
    {
        "id": "1f25d6d6b581c117",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "createFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 1240,
        "wires": []
    },
    {
        "id": "9376fe9c22d5527f",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "updateFileParsingStatus",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 1480,
        "wires": []
    },
    {
        "id": "7916a9ea3a8207d6",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Switch False",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 2000,
        "wires": []
    },
    {
        "id": "369d1f893387ee78",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Switch True",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 2160,
        "wires": []
    },
    {
        "id": "a393457526f8ded2",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getFileByConfigKey",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1340,
        "wires": []
    },
    {
        "id": "45a66bf6a0c19fd3",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst AXIS_BANK_ADMIN_EMAIL = env.get('AXIS_BANK_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": AXIS_BANK_ADMIN_EMAIL,\n    \"password\": PASSWORD\n};\n\nmsg.loggerNewLine = true;\nmsg.logger = `Autheticate ${AXIS_BANK_ADMIN_EMAIL}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 140,
        "wires": [
            [
                "9d6f1186d73f149f"
            ]
        ]
    },
    {
        "id": "53c2d13dda9cd05b",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "set Bank Token",
        "func": "flow.set('bank_token', msg.payload.idToken);\n\nmsg.bank_token = msg.payload.idToken\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 140,
        "wires": [
            [
                "588f059fa9101cae"
            ]
        ]
    },
    {
        "id": "cc12235f4f617a1a",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getBankReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_KEY = env.get(\"BANK_KEY\")\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank/key/${BANK_KEY}`;\nmsg.logger = `Get bank for bankKey #${BANK_KEY}`\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 300,
        "wires": [
            [
                "45dd06f4f70b5ecf"
            ]
        ]
    },
    {
        "id": "1b9cb532519299e5",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Save Bank ID",
        "func": "const bankId = msg.payload?._id\nmsg.bankId = bankId\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "1d0a7fbf8a477abd",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Add invoice bulk req",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1404.999984741211,
        "y": 1814.9999980926514,
        "wires": []
    },
    {
        "id": "4579b4696fb40a9e",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "createFile Req",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1584.999984741211,
        "y": 1174.9999980926514,
        "wires": []
    },
    {
        "id": "776ef2ceea9801b3",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "debug 331",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 800,
        "wires": []
    },
    {
        "id": "aa22267742bfe05c",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "debug 332",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 880,
        "wires": []
    },
    {
        "id": "e285fb1701e1102a",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "debug 333",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1154.999984741211,
        "y": 654.9999980926514,
        "wires": []
    },
    {
        "id": "9db84ff72964d2cd",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "debug 334",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 434.99998474121094,
        "y": 1754.9999980926514,
        "wires": []
    },
    {
        "id": "9d6f1186d73f149f",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "x": 750,
        "y": 140,
        "wires": [
            [
                "53c2d13dda9cd05b"
            ],
            []
        ]
    },
    {
        "id": "7de7b70a4f11e7bd",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "x": 770,
        "y": 220,
        "wires": [
            [
                "d0f1274f88feedf0"
            ],
            []
        ]
    },
    {
        "id": "45dd06f4f70b5ecf",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getBankReq",
        "x": 750,
        "y": 300,
        "wires": [
            [
                "1b9cb532519299e5"
            ],
            []
        ]
    },
    {
        "id": "2385363a5e2870f8",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getEnterprise",
        "x": 750,
        "y": 680,
        "wires": [
            [
                "a09ad89d2ab1f626"
            ],
            []
        ]
    },
    {
        "id": "967f847d0b116c88",
        "type": "subflow:951a533bb3498fe6",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "x": 560,
        "y": 800,
        "wires": [
            [
                "aa0d6208e5c36a34"
            ]
        ]
    },
    {
        "id": "e5e63b7203f4468b",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "x": 630,
        "y": 1120,
        "wires": [
            [
                "15f2897e52a313d7",
                "434cac9c6be0d102"
            ],
            [
                "15f2897e52a313d7"
            ]
        ]
    },
    {
        "id": "47d30f5b9d5b2ef4",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "x": 1470,
        "y": 1240,
        "wires": [
            [
                "1f25d6d6b581c117",
                "bc13694782348c9d"
            ],
            [
                "1f25d6d6b581c117"
            ]
        ]
    },
    {
        "id": "a2b38d058bcfbe66",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "x": 690,
        "y": 1380,
        "wires": [
            [
                "eeb046043b4c86c4"
            ],
            []
        ]
    },
    {
        "id": "bf3fa0b70f31a220",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "5bf29b5d3a6e7fb3",
        "name": "updateFileParseStatus",
        "x": 660,
        "y": 1520,
        "wires": [
            [
                "340af3066d09a2c1",
                "9376fe9c22d5527f"
            ],
            [
                "9376fe9c22d5527f"
            ]
        ]
    },
    {
        "id": "8c80910861f7f1e9",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "5bf29b5d3a6e7fb3",
        "name": "updateFileParseStatus",
        "x": 1160,
        "y": 1620,
        "wires": [
            [
                "0f0d9ac041c444e1"
            ],
            [
                "0f0d9ac041c444e1"
            ]
        ]
    },
    {
        "id": "9f3bd1a0872e4ebb",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Get Distributor By ERP ID",
        "x": 1170,
        "y": 1680,
        "wires": [
            [
                "18eeb6d042584c06",
                "c925dd30e1de412b"
            ],
            [
                "c925dd30e1de412b"
            ]
        ]
    },
    {
        "id": "a6d7fc28fc119303",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "x": 1500,
        "y": 1900,
        "wires": [
            [
                "5d14e2c7eb801bb2"
            ],
            [
                "5d14e2c7eb801bb2"
            ]
        ]
    },
    {
        "id": "9a15dfe15783bb04",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "5bf29b5d3a6e7fb3",
        "name": "updateFileParseStatus",
        "x": 1860,
        "y": 2020,
        "wires": [
            [
                "377c87779fc498cc",
                "b5980ae8773c4e30"
            ],
            [
                "377c87779fc498cc",
                "b5980ae8773c4e30"
            ]
        ]
    },
    {
        "id": "ceccf1106f47974b",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Call Copy Invoice SP",
        "x": 1600,
        "y": 2180,
        "wires": [
            [
                "41208ff8db625beb"
            ],
            [
                "41208ff8db625beb"
            ]
        ]
    },
    {
        "id": "41208ff8db625beb",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "join",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 2180,
        "wires": [
            [
                "945d1c23f160a73b",
                "5492afb8ec691487"
            ]
        ]
    },
    {
        "id": "91c918c4ddd002c7",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Update Previous Invoices To Paid",
        "x": 1650,
        "y": 2260,
        "wires": [
            [
                "4e9e9652f20cf4c9"
            ],
            [
                "4e9e9652f20cf4c9"
            ]
        ]
    },
    {
        "id": "4e9e9652f20cf4c9",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "join",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 2260,
        "wires": [
            [
                "945d1c23f160a73b",
                "5860c5cb8c5667dd"
            ]
        ]
    },
    {
        "id": "ad750d6df13e8090",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Compute Net Invoice",
        "x": 1560,
        "y": 2360,
        "wires": [
            [
                "302ac4ef806ffe51"
            ],
            [
                "302ac4ef806ffe51"
            ]
        ]
    },
    {
        "id": "302ac4ef806ffe51",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "join",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 2360,
        "wires": [
            [
                "945d1c23f160a73b",
                "7ad2974088fcd69b"
            ]
        ]
    },
    {
        "id": "2090357173e7b6f7",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "5bf29b5d3a6e7fb3",
        "name": "updateFileParseStatus",
        "x": 1620,
        "y": 2420,
        "wires": [
            [
                "634a064a685c41d5"
            ],
            [
                "634a064a685c41d5"
            ]
        ]
    },
    {
        "id": "634a064a685c41d5",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "join",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 2420,
        "wires": [
            [
                "945d1c23f160a73b"
            ]
        ]
    },
    {
        "id": "48da8a6b9546ba39",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Setting Global Variables",
        "func": "const ENV_VARIABLES = {\n    \"ADMIN_EMAIL\": \"darkhorse@gmail.com\",\n    \"ADMIN_PASSWORD\": \"User@123\",\n    \"ACTYV_ENTITY_URL\": \"https://actyv1-platform.uat.actyv.com\"\n}\n\nglobal.set(\"ENV_VARIABLES\", ENV_VARIABLES);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 380,
        "wires": [
            [
                "53c71b299e1081db"
            ]
        ]
    },
    {
        "id": "53c71b299e1081db",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "AuthenticateActyvUserReq",
        "func": "// const envVariables = global.get('envVariables')\nconst ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\nconst EMAIL = ENV_VARIABLES.ADMIN_EMAIL;\nconst PASSWORD = ENV_VARIABLES.ADMIN_PASSWORD\n\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 460,
        "wires": [
            [
                "86d09e647709b5f0"
            ]
        ]
    },
    {
        "id": "86d09e647709b5f0",
        "type": "subflow:0cbd918f05921aae",
        "z": "5bf29b5d3a6e7fb3",
        "name": "AuthenticateActyvUser",
        "x": 720,
        "y": 460,
        "wires": [
            [
                "037914bb81a82cf7"
            ],
            []
        ]
    },
    {
        "id": "037914bb81a82cf7",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 460,
        "wires": [
            [
                "c284ccbee647cf94"
            ]
        ]
    },
    {
        "id": "c284ccbee647cf94",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getActyvEntityUser",
        "func": "\n\nconst GO_URL = env.get('GO_URL');\n\n\nmsg.url = `${GO_URL}/actyv-entity`;\nmsg.method = \"GET\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 560,
        "wires": [
            [
                "e4a2b2f19a57adfd"
            ]
        ]
    },
    {
        "id": "e4a2b2f19a57adfd",
        "type": "subflow:0cbd918f05921aae",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getCurrentUser",
        "x": 560,
        "y": 560,
        "wires": [
            [
                "f861213656beba08"
            ],
            []
        ]
    },
    {
        "id": "f861213656beba08",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Save actyv entity ID",
        "func": "const found = msg.payload.find(entity => entity.key === \"dark_horse\") ?? undefined\n\nconsole.log(found?._id)\nif (found) {\n    flow.set(\"actyvEntityId\", found?._id);\n    msg.actyvEntityId = found?._id\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 560,
        "wires": [
            [
                "ea2b4fdbe724e032"
            ]
        ]
    },
    {
        "id": "c08deda24fa318b3",
        "type": "inject",
        "z": "a29923d1b01e690c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "d6e005c9863988e6"
            ]
        ]
    },
    {
        "id": "452ebc12894bc21c",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "AuthenticateActyvUserReq",
        "func": "// const envVariables = global.get('envVariables')\nconst ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\nconst EMAIL = ENV_VARIABLES.ADMIN_EMAIL;\nconst PASSWORD = ENV_VARIABLES.ADMIN_PASSWORD\n\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 180,
        "wires": [
            [
                "a887550dc244ce38"
            ]
        ]
    },
    {
        "id": "a887550dc244ce38",
        "type": "http request",
        "z": "a29923d1b01e690c",
        "name": "AuthenticateActyvUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 560,
        "y": 180,
        "wires": [
            [
                "ae29762669bb49f2"
            ]
        ]
    },
    {
        "id": "ae29762669bb49f2",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 180,
        "wires": [
            [
                "b0c56964a2981737"
            ]
        ]
    },
    {
        "id": "2bed794a8fb63428",
        "type": "node-red-contrib-graph-oauth-login",
        "z": "a29923d1b01e690c",
        "name": "",
        "scope": "https://graph.microsoft.com/.default",
        "redirecturi": "",
        "code": "",
        "encoding": false,
        "logintype": "Application",
        "refreshtimer": "300",
        "x": 170,
        "y": 580,
        "wires": [
            [
                "8f2ae5ca02812d70"
            ]
        ]
    },
    {
        "id": "8f2ae5ca02812d70",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "Get All Messages",
        "func": "let data=msg.payload;\nflow.set(\"token\",msg.at);\n// let userID=\"User Id from microsoft Graph\"\n\nlet userID = env.get(\"OUTLOOKUSERID\")\n// let sender =\"rahul.jain@actyv.com\"\nlet sender =\"ramu.bugudi@actyv.com\"\n//2023 - 03 - 31T04: 53: 15.736Z\nconst date = moment().toISOString().split(\"T\")[0].split(\"-\")\nconst today = `${date[0]}/${date[1]}/${date[2]}`//\"2023/04/04\"\nconst subject = \"Corporate Wise Maturity Report for the Corporate CAVINKARE PRIVATE LTD PHYSICAL SBB:CPLPCFCLB\"\nconst folderId = \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABT4dnQAAA=\"\nconsole.log({token:msg.at})\nconsole.log({today})\n\n// msg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages?$search=\"received:${today} AND from:${sender} AND subject:${subject}\"`\n// msg.url = `https://graph.microsoft.com/v1.0/users/${userID}/mailFolders/${folderId}/messages?$search=\"received:${today} AND from:${sender} AND subject:${subject}\"`\n// msg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages?$search=\"received:${today} AND from:${sender}\"`\nmsg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages?$search=\"subject:${subject} AND from:${sender} AND received:${today}\"`\nmsg.method=\"GET\";\nmsg.headers={\n    // \"Authorization\":`${data.access_token}`\n    \"Authorization\": `${msg.at}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 410,
        "y": 580,
        "wires": [
            [
                "8c765ed0e19aadb6",
                "d5f518b08ac874c5"
            ]
        ]
    },
    {
        "id": "8c765ed0e19aadb6",
        "type": "http request",
        "z": "a29923d1b01e690c",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 130,
        "y": 660,
        "wires": [
            [
                "88064390ccace136",
                "a6b95c291b2a40a9"
            ]
        ]
    },
    {
        "id": "d5f518b08ac874c5",
        "type": "debug",
        "z": "a29923d1b01e690c",
        "name": "debug 319",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 580,
        "wires": []
    },
    {
        "id": "88064390ccace136",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "each Msg",
        "func": "// let data=msg.payload;\nlet data = msg.payload.value;\n\n// console.log({valubhchnve:msg.value})\n\n\n// let parsedData = msg.payload.value\n// console.log(\"dsfd\", parsedData)\nfor (let index = 0; index < data.length; index++) {\n    // console.log(\"dhvhsgav\",data[index])\n    node.send({payload:data[index]});\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 660,
        "wires": [
            [
                "ade913f4bbfac2ce"
            ]
        ]
    },
    {
        "id": "a6b95c291b2a40a9",
        "type": "debug",
        "z": "a29923d1b01e690c",
        "name": "debug 320",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 700,
        "wires": []
    },
    {
        "id": "ade913f4bbfac2ce",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "Searching Attachment",
        "func": "let data = msg.payload;\nlet token=flow.get(\"token\");\nflow.set(\"msg\",data);\nlet userID = env.get(\"OUTLOOKUSERID\")\n// msg.url = `https://graph.microsoft.com/v1.0/users/1870cd49-a831-4b52-ba5e-b680441f9f70/messages/${data.id}/attachments`\nmsg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages/${data.id}/attachments`\n\nmsg.method = \"GET\";\nmsg.headers = {\n    // \"Authorization\": `${token.access_token}`\n    \"Authorization\": `${token}`\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 660,
        "wires": [
            [
                "452241cf6557f306"
            ]
        ]
    },
    {
        "id": "452241cf6557f306",
        "type": "http request",
        "z": "a29923d1b01e690c",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 750,
        "y": 660,
        "wires": [
            [
                "082908735ce97502",
                "819d68efa1c0be0a"
            ]
        ]
    },
    {
        "id": "082908735ce97502",
        "type": "debug",
        "z": "a29923d1b01e690c",
        "name": "debug 321",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 660,
        "wires": []
    },
    {
        "id": "819d68efa1c0be0a",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "function 177",
        "func": "let data=msg.payload;\n\nmsg.payload = data.value[0].contentBytes.toString();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 760,
        "wires": [
            [
                "c18fe70ae0c39cbe"
            ]
        ]
    },
    {
        "id": "c18fe70ae0c39cbe",
        "type": "base64",
        "z": "a29923d1b01e690c",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 290,
        "y": 760,
        "wires": [
            [
                "e084b1a55c9e380f"
            ]
        ]
    },
    {
        "id": "e084b1a55c9e380f",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "read xls",
        "func": "let data = xlsx.read(msg.payload, { type: \"buffer\" })\nconst wsname = data.SheetNames[0];\nconst ws = data.Sheets[wsname];\nconst payload = xlsx.utils.sheet_to_json(ws);\nmsg.payload = payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "xlsx",
                "module": "xlsx"
            }
        ],
        "x": 470,
        "y": 760,
        "wires": [
            [
                "7043eac116654ff5",
                "8265dad1b39c7f79"
            ]
        ]
    },
    {
        "id": "7043eac116654ff5",
        "type": "debug",
        "z": "a29923d1b01e690c",
        "name": "xls to json",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 760,
        "wires": []
    },
    {
        "id": "8265dad1b39c7f79",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "mapJsonFromXLSX",
        "func": "// console.log(\"agsdvghasvd\",msg.payload)\n// return\nlet data = msg.payload\nconst bankDetails = flow.get('bankDetails') || {}\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n// msg.payload = msg.payload.splice(7,1)\n// return msg\n\nlet keys = {\n    __EMPTY: \"Sr No.\",\n    __EMPTY_1: \"DEALER NAME\",\n    __EMPTY_2: \"ACCOUNT NO\",\n    __EMPTY_3: \"DEALER CODE\",\n    __EMPTY_4: \"TRANSACTION DATE\",\n    __EMPTY_5: \"PARTICULARS\",\n    __EMPTY_6: \"INVOICE DATE\",\n    __EMPTY_7: \"TRANSACTION AMOUNT\",\n    __EMPTY_8: \"OUTSTANDING AMOUNT\",\n    __EMPTY_9: \"OUTSTANDING DAYS\",\n    __EMPTY_10: \"CREDIT PERIOD\",\n    __EMPTY_11: \"MATURITY DATE\",\n    __EMPTY_12: \"OVERDUE AMOUNT\",\n    __EMPTY_13: \"OVERDUE DAYS\",\n    __EMPTY_14: \"AVAILED ADHOC\",\n}\n\nlet filteredData = data.filter((d) => d[\"__EMPTY_5\"]?.includes(\"ACTY\"))\nfilteredData.forEach((d) => {\n    for (let key in d) {\n        d[keys[key]] = d[key]\n        delete d[key]\n    }\n    // d[\"Sr No.\"] = d[\"__EMPTY\"],\n    // delete d[\"__EMPTY\"]\n})\n\n// msg.payload = filteredData\nfor(let row of filteredData){\n    if(row.PARTICULARS.includes(\"INTEREST\")){\n        node.send({\n            ...msg,\n            row,\n            payload: {},\n            dataType: \"interest\"\n        })\n    }else{\n        node.send({\n            ...msg,\n            row,\n            payload: {},\n            dataType: \"principal\"\n        })\n    }\n    \n}\n// return msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 860,
        "wires": [
            [
                "0bf7156326538a9e",
                "0eb9e17be74f46cd"
            ]
        ]
    },
    {
        "id": "0bf7156326538a9e",
        "type": "debug",
        "z": "a29923d1b01e690c",
        "name": "formated output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 860,
        "wires": []
    },
    {
        "id": "a96980578f36b617",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "updateDrawdown",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst actyvToken = flow.get(\"actyvToken\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\n\n// flow.set('bankProductConfigId', msg.payload.id)\nconst actyvEntityId = msg.actyvEntityId\n\n\nmsg.url = `${PAYLATER_URL}/api/`\n// console.log(\"URL\",msg.url)\nmsg.method = 'PATCH'\nmsg.headers = {\n    Authorization: `Bearer ${actyvToken}`,\n    actyventityid: actyvEntityId\n}\nmsg.payload = {\n    \"requestUniqueCode\": msg.row.PARTICULARS.slice(1, -1),\n    // \"dueDate\": changeDateFormat(msg.row[\"MATURITY DATE\"])\n    drawdownStatus: msg.row[\"OUTSTANDING AMOUNT\"] == 0 ? \"closed\" : \"\"\n}\n\nfunction changeDateFormat(date) {\n    let newDate = date.split(\"/\")\n    return `${newDate[2] - newDate[1] - newDate[0]}`\n}\nif (msg.row[\"OUTSTANDING AMOUNT\"] === 0) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1120,
        "wires": [
            [
                "abbcc1097f32c7a5"
            ]
        ]
    },
    {
        "id": "abbcc1097f32c7a5",
        "type": "http request",
        "z": "a29923d1b01e690c",
        "d": true,
        "name": "updateDrawdown",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 390,
        "y": 1120,
        "wires": [
            [
                "54b235eac729701a"
            ]
        ]
    },
    {
        "id": "54b235eac729701a",
        "type": "debug",
        "z": "a29923d1b01e690c",
        "name": "updateDrawdown",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1120,
        "wires": []
    },
    {
        "id": "b9bae2daa830b015",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "AuthenticateBankUserReq",
        "func": "\nconst BANK_USER_EMAIL = env.get('BANK_USER_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": PASSWORD,\n    \"email\": BANK_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 360,
        "wires": [
            [
                "8204daf628d1136c"
            ]
        ]
    },
    {
        "id": "8204daf628d1136c",
        "type": "http request",
        "z": "a29923d1b01e690c",
        "name": "AuthenticateBankUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 540,
        "y": 360,
        "wires": [
            [
                "a896148cb23019db"
            ]
        ]
    },
    {
        "id": "a896148cb23019db",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "saveBankToken",
        "func": "flow.set(\"bankToken\",msg.payload.idToken)\n// console.log({bankToken: msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 360,
        "wires": [
            [
                "81379ccc8e833a1d"
            ]
        ]
    },
    {
        "id": "81379ccc8e833a1d",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "getBankProductKeyReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\n\nmsg.url = `${GO_URL}/bank-application-config/key/${BANK_PRODUCT_KEY}`\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 460,
        "wires": [
            [
                "559d6e7393e9ecfa"
            ]
        ]
    },
    {
        "id": "559d6e7393e9ecfa",
        "type": "http request",
        "z": "a29923d1b01e690c",
        "name": "getBankProductKeyReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 460,
        "wires": [
            [
                "2da0d4cb882fbf6a",
                "c23c71e7a7e023f0"
            ]
        ]
    },
    {
        "id": "c23c71e7a7e023f0",
        "type": "debug",
        "z": "a29923d1b01e690c",
        "name": "bankProductConfig",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 420,
        "wires": []
    },
    {
        "id": "2da0d4cb882fbf6a",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "save bank id",
        "func": "msg.bankId = msg.payload.bank\nmsg.bankApplicationConfigId = msg.payload.id\nmsg.enterpriseId = msg.payload?.allowedEnterprises[0]?.id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 460,
        "wires": [
            [
                "2bed794a8fb63428"
            ]
        ]
    },
    {
        "id": "0eb9e17be74f46cd",
        "type": "switch",
        "z": "a29923d1b01e690c",
        "name": "",
        "property": "dataType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "interest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "principal",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 110,
        "y": 980,
        "wires": [
            [
                "16771f3ae41aedaf",
                "421181908d394e41"
            ],
            [
                "a96980578f36b617",
                "787cfd9e57cba4ee"
            ]
        ]
    },
    {
        "id": "16771f3ae41aedaf",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "updateDrawdown",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst actyvToken = flow.get(\"actyvToken\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\n\n// flow.set('bankProductConfigId', msg.payload.id)\nconst actyvEntityId = msg.actyvEntityId\n\n\nmsg.url = `${PAYLATER_URL}/api/`\n// console.log(\"URL\",msg.url)\nmsg.method = 'PATCH'\nmsg.headers = {\n    Authorization: `Bearer ${actyvToken}`,\n    actyventityid : actyvEntityId\n}\nmsg.payload = {\n    \"requestUniqueCode\": msg.row.PARTICULARS.slice(1,-1),\n    // \"dueDate\": changeDateFormat(msg.row[\"MATURITY DATE\"])\n    drawdownStatus: msg.row[\"OUTSTANDING AMOUNT\"]==0?\"closed\":\"\"\n}\n\nfunction changeDateFormat(date){\n    let newDate = date.split(\"/\")\n    return `${newDate[2]-newDate[1]-newDate[0]}`\n}\nif (msg.row[\"OUTSTANDING AMOUNT\"] === 0){\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 940,
        "wires": [
            [
                "6dbab91f92d63cf4"
            ]
        ]
    },
    {
        "id": "6dbab91f92d63cf4",
        "type": "http request",
        "z": "a29923d1b01e690c",
        "d": true,
        "name": "updateDrawdown",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 570,
        "y": 940,
        "wires": [
            [
                "126832a20ce44b3e"
            ]
        ]
    },
    {
        "id": "126832a20ce44b3e",
        "type": "debug",
        "z": "a29923d1b01e690c",
        "name": "updateDrawdown",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 940,
        "wires": []
    },
    {
        "id": "d6e005c9863988e6",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "Setting Global Variables",
        "func": "const ENV_VARIABLES = {\n    \"ADMIN_EMAIL\": \"darkhorse@gmail.com\",\n    \"ADMIN_PASSWORD\": \"User@123\",\n    \"ACTYV_ENTITY_URL\": \"https://actyv1-platform.qa.actyv.com\"\n}\n\nglobal.set(\"ENV_VARIABLES\", ENV_VARIABLES);\n\n// msg.payload = `${XLSX_FILE_PATH}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 100,
        "wires": [
            [
                "452ebc12894bc21c"
            ]
        ]
    },
    {
        "id": "b0c56964a2981737",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "Getting Actyv User",
        "func": "const ADMIN_URL = env.get('ADMIN_URL');\nconst ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\nconst ACTYV_ENTITY_URL = ENV_VARIABLES['ACTYV_ENTITY_URL']\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow.get(\"actyvToken\")}`,\n}\n\nmsg.url = `${ADMIN_URL}/api/user/getCurrentUser?url=${ACTYV_ENTITY_URL}`;\nmsg.method = \"GET\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 280,
        "wires": [
            [
                "4d66d53a0e162c22"
            ]
        ]
    },
    {
        "id": "4d66d53a0e162c22",
        "type": "subflow:0cbd918f05921aae",
        "z": "a29923d1b01e690c",
        "name": "getActyvUser",
        "x": 420,
        "y": 280,
        "wires": [
            [
                "2be25477cb5b3218"
            ],
            []
        ]
    },
    {
        "id": "2be25477cb5b3218",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "save actyv_entity_id",
        "func": "flow.set(\"actyvEntityId\", msg.payload.actyvEntityId);\nmsg.actyvEntityId = msg.payload.actyvEntityId\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 280,
        "wires": [
            [
                "b9bae2daa830b015"
            ]
        ]
    },
    {
        "id": "421181908d394e41",
        "type": "debug",
        "z": "a29923d1b01e690c",
        "name": "row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 980,
        "wires": []
    },
    {
        "id": "787cfd9e57cba4ee",
        "type": "debug",
        "z": "a29923d1b01e690c",
        "name": "Principal",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "row",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 1040,
        "wires": []
    },
    {
        "id": "4285b3ad93f2d6ab",
        "type": "node-red-contrib-graph-oauth-login",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "scope": "https://graph.microsoft.com/.default",
        "redirecturi": "",
        "code": "",
        "encoding": false,
        "logintype": "Application",
        "refreshtimer": "300",
        "x": 230,
        "y": 726,
        "wires": [
            [
                "d002e29b719484d0",
                "3eee908f81678d03"
            ]
        ]
    },
    {
        "id": "d002e29b719484d0",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "Get All Messages",
        "func": "let data=msg.payload;\nconst ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\nflow.set(\"token\",msg.at);\n// let userID=\"User Id from microsoft Graph\"\n\nlet userID = ENV_VARIABLES.OUTLOOK_USER_ID\n// let sender =\"rahul.jain@actyv.com\"\nlet sender =\"ramu.bugudi@actyv.com\"\n// let sender =\"paylater@actyv.com\"\n//2023 - 03 - 31T04: 53: 15.736Z\nconst date = moment().toISOString().split(\"T\")[0].split(\"-\")\n// const today = `${date[0]}/${date[1]}/${date[2]}`//\"2023/04/26\"\nconst today = `${date[0]}/${date[1]}/${date[2]}`//\"2023/04/26\"\nconst subject = \"Corporate Wise Utilization Report for the Corporate\"\n// const folderId = \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABT4dnQAAA=\"\n// const folderId = \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABT4dnQAAA=\"\nconst folderId = ENV_VARIABLES.AXIS_READ_FOLDER_ID\nconsole.log({token:msg.at})\n\n\n// msg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages?$search=\"received:${today} AND from:${sender} AND subject:${subject}\"`\nmsg.url = `https://graph.microsoft.com/v1.0/users/${userID}/mailFolders/${folderId}/messages?$search=\"received:${today} AND from:${sender} AND subject:${subject}\"`\n// msg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages?$search=\"received:${today} AND from:${sender} AND subject:${subject}\"`\nmsg.method=\"GET\";\nmsg.headers={\n    // \"Authorization\":`${data.access_token}`\n    \"Authorization\": `${msg.at}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 470,
        "y": 726,
        "wires": [
            [
                "fec9e3ea96fbd84d"
            ]
        ]
    },
    {
        "id": "fec68c4dc60abca5",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "each Msg",
        "func": "// let data=msg.payload;\nlet data = msg.payload.value;\n\n// console.log({valubhchnve:msg.value})\n\n\n// let parsedData = msg.payload.value\n// console.log(\"dsfd\", parsedData)\nfor (let index = 0; index < data.length; index++) {\n    // console.log(\"dhvhsgav\",data[index])\n    node.send({...msg,payload:data[index]});\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 806,
        "wires": [
            [
                "6e310564c94954df"
            ]
        ]
    },
    {
        "id": "6e310564c94954df",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "Searching Attachment",
        "func": "const ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\n\nlet data = msg.payload;\nlet token=flow.get(\"token\");\nflow.set(\"msg\",data);\nlet userID = ENV_VARIABLES.OUTLOOK_USER_ID\n// msg.url = `https://graph.microsoft.com/v1.0/users/1870cd49-a831-4b52-ba5e-b680441f9f70/messages/${data.id}/attachments`\nmsg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages/${data.id}/attachments`\n\nmsg.method = \"GET\";\nmsg.headers = {\n    // \"Authorization\": `${token.access_token}`\n    \"Authorization\": `${token}`\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 806,
        "wires": [
            [
                "b7a40fff1ba56615"
            ]
        ]
    },
    {
        "id": "ddf94dcbdb27c29f",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "debug 304",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 806,
        "wires": []
    },
    {
        "id": "490a5249fd37c90c",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "function 174",
        "func": "let data=msg.payload;\nmsg.emailId = data.value[0].id\nmsg.payload = data.value[0].contentBytes.toString();\nlet userID = env.get(\"OUTLOOKUSERID\")\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 906,
        "wires": [
            [
                "a75aa3751c6d6719"
            ]
        ]
    },
    {
        "id": "a75aa3751c6d6719",
        "type": "base64",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 400,
        "y": 906,
        "wires": [
            [
                "9d21364ccac450e9"
            ]
        ]
    },
    {
        "id": "9d21364ccac450e9",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "read xls",
        "func": "let data = xlsx.read(msg.payload, { type: \"buffer\" })\nconst wsname = data.SheetNames[0];\nconst ws = data.Sheets[wsname];\nconst payload = xlsx.utils.sheet_to_json(ws);\nmsg.payload = payload\nmsg.logger = `Received data from email`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "xlsx",
                "module": "xlsx"
            }
        ],
        "x": 580,
        "y": 906,
        "wires": [
            [
                "17596962c29211eb"
            ]
        ]
    },
    {
        "id": "be632d80dce035fc",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "mapJsonFromXLSX",
        "func": "// console.log(\"agsdvghasvd\",msg.payload)\n// return\nconst bankDetails = flow.get('bankDetails') || {}\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n// msg.payload = msg.payload.splice(7,1)\n// return msg\nlet startIndex;\nfor (let i = 0; i < msg.payload.length - 1; i++) {\n    if (msg.payload[i][\"__EMPTY\"] === \"DEALER UTILIZATION REPORT\") {\n        startIndex = i;\n        break;\n    }\n\n};\nconsole.log({length:msg.payload.length,startIndex})\n\nlet filteredArr = []\nfor (let i = startIndex + 2; i < msg.payload.length; i++) {\n\n    let obj = {\n        \"SR NO.\": msg.payload[i][\"__EMPTY\"],\n        \"IM NAME\": msg.payload[i][\"__EMPTY_1\"],\n        \"DEALER NAME\": msg.payload[i]['__EMPTY_2'],\n        \"DEALER ACCOUNT NO.\": msg.payload[i][\"__EMPTY_3\"],\n        \"DEALER CODE\": msg.payload[i][\"__EMPTY_4\"],\n        \"SANCTION LIMIT\": msg.payload[i][\"__EMPTY_5\"],\n        \"DRAWING POWER\": msg.payload[i][\"__EMPTY_6\"],\n        \"LIMIT UTILIZED\": msg.payload[i][\"__EMPTY_7\"],\n        \"LIMIT AVAILABLE\": msg.payload[i][\"__EMPTY_8\"],\n        \"LIMIT EXPIRY DATE\": msg.payload[i][\"__EMPTY_9\"],\n        \"ADHOC SANCTION LIMIT\": msg.payload[i][\"__EMPTY_10\"],\n        \"ADHOC LIMIT UTILIZED\": msg.payload[i][\"__EMPTY_11\"],\n        \"ADHOC LIMIT AVAILABLE\": msg.payload[i][\"__EMPTY_12\"],\n        \"ADHOC EXPIRY DATE\": msg.payload[i][\"__EMPTY_13\"],\n        \"TOTAL LIMIT AVAILABLE\": msg.payload[i][\"__EMPTY_14\"],\n        \"ACCOUNT STATUS\": msg.payload[i][\"__EMPTY_15\"],\n        \"OVERDUE DAYS\": msg.payload[i][\"__EMPTY_16\"],\n        \"TOTAL OVERDUE AMOUNT\": msg.payload[i][\"__EMPTY_17\"],\n        \"BRANCH CODE\": msg.payload[i][\"__EMPTY_18\"],\n        \"SME CENTER\": msg.payload[i][\"__EMPTY_19\"]\n    }\n    \n    if(obj[\"DEALER CODE\"]){\n        // node.send({ payload: {},row:obj,isComplete:false });\n        // await sleep(1000)\n        filteredArr.push({ payload: {}, row: obj, isComplete: false })\n    }\n   \n}\n\nfor(let [key,row] of filteredArr.entries()){\n    node.send({\n        ...msg,\n        row: row.row,\n        isComplete: false,\n        isFileProcesCompleted: key == filteredArr.length-1?true: false\n    })\n    // await sleep(250)\n}\n\nawait sleep(filteredArr.length* 2000)\nmsg.isComplete = true\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1020,
        "wires": [
            [
                "3aec3290079ad86c"
            ]
        ]
    },
    {
        "id": "752b5363ecdd4d7d",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "xls to json",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 906,
        "wires": []
    },
    {
        "id": "768781467d84d04e",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "getLoanTermByCrnReq",
        "func": "\nconst PAYLATER_URL = env.get('PAYLATER_URL');\nconst actyvToken = flow.get(\"actyToken\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/fetchByCrnNumber`;\nmsg.method = \"POST\";\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`,\n    actyventityid: flow.get(\"actyvEntityId\")\n}\nmsg.crnNumber = msg.payload.identifierByParent\nmsg.payload = { \n    crnNumber: `${msg.row[\"DEALER CODE\"]}`\n    // crnNumber:\"SGFLTD101104\"\n    }\n\nmsg.logger = `get loan term by crn for #${msg.row[\"DEALER CODE\"]}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 1126,
        "wires": [
            [
                "5f7bc3963ace71b2",
                "3a32376d4dd2a211"
            ]
        ]
    },
    {
        "id": "32e164b43b538e4a",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "getLoanTermReq",
        "func": "msg.loanID = msg.payload.id\n// msg.loanID = \"1e035bf2-00b2-4ac3-80d6-2c405461a5e5\"\n\nconst PAYLATER_URL = env.get('PAYLATER_URL');\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/service/fetch`;\nmsg.method = \"POST\";\nmsg.headers = {\n    Authorization: `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\" : env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"actyventityid\": flow.get(\"actyvEntityId\")\n}\nmsg.payload = {\n    // crnNumber: msg.payload.identifierByParent\n    \"loanTermsID\": msg.loanID,\n    \"toMask\": false\n}\n\nmsg.logger = `Get loan term for loanID #${msg.loanID}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1340,
        "wires": [
            [
                "20cb1a7a87f650e3"
            ]
        ]
    },
    {
        "id": "41d36fea836cc51a",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "get loan term",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 1326,
        "wires": []
    },
    {
        "id": "e2076f4aa23eda49",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "get loan term id",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 1106,
        "wires": []
    },
    {
        "id": "ab4fc70a19b44dff",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "validate Data against bank",
        "func": "let approvedLimitChanged = false;\nlet loanAmountChanged = false;\nconst dataMismatch = flow.get(\"dataMismatch\")\nif (+msg.payload[0].loanAmount !== msg.row[\"LIMIT UTILIZED\"]){\n    loanAmountChanged = true\n}\n\nif (+msg.payload[0].approvedLimit !== +msg.row[\"SANCTION LIMIT\"]){\napprovedLimitChanged = true\n}\nlet excemption\nif(approvedLimitChanged && loanAmountChanged){\nexcemption = {\n    approvedLimitChanged: true,\n    loanAmountChanged: true,\n    newApprovedLimit: +msg.row[\"SANCTION LIMIT\"],\n    newLoanAmount: msg.row[\"LIMIT UTILIZED\"],\n    oldApprovedLimit: +msg.payload[0].approvedLimit ,\n    oldLoanAmount: +msg.payload[0].loanAmount\n}\n}else if(approvedLimitChanged){\n    excemption = {\n        approvedLimitChanged: true,\n        loanAmountChanged: false,\n        newApprovedLimit: +msg.row[\"SANCTION LIMIT\"],\n        newLoanAmount: msg.row[\"LIMIT UTILIZED\"],\n        oldApprovedLimit: +msg.payload[0].approvedLimit,\n        oldLoanAmount: +msg.payload[0].loanAmount\n    }\n}else if(loanAmountChanged){\n    excemption = {\n        approvedLimitChanged: false,\n        loanAmountChanged: true,\n        newApprovedLimit: +msg.row[\"SANCTION LIMIT\"],\n        newLoanAmount: msg.row[\"LIMIT UTILIZED\"],\n        oldApprovedLimit: +msg.payload[0].approvedLimit,\n        oldLoanAmount: +msg.payload[0].loanAmount\n    }\n}\nif(excemption){\n    excemption.dealerCode = msg.row[\"DEALER CODE\"]\n    excemption.dealerName = msg.row[\"DEALER NAME\"]\n    msg.mismatchData = true\n    msg.excemption = excemption\n    dataMismatch.push(excemption)\n    flow.set(\"dataMismatch\",dataMismatch)\n    return msg\n}\nmsg.excemption = excemption\nmsg.mismatchData = false\nmsg.logger = `Validate data for dealer code ${msg.row[\"DEALER CODE\"]}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1440,
        "wires": [
            [
                "2e451bcd73842751",
                "b6e27d34d4848169"
            ]
        ]
    },
    {
        "id": "f011fb858dd78b4f",
        "type": "switch",
        "z": "58e110d7c2bbe19a",
        "name": "Mismatch Data",
        "property": "mismatchData",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 220,
        "y": 1566,
        "wires": [
            [
                "2163a192fb7cf582"
            ],
            [
                "14bde1eba7a5ae1e"
            ]
        ]
    },
    {
        "id": "2163a192fb7cf582",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "No mismatch",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 1500,
        "wires": []
    },
    {
        "id": "14bde1eba7a5ae1e",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "updateLoanTermReq",
        "func": "\n// msg.loanID = \"1e035bf2-00b2-4ac3-80d6-2c405461a5e5\"\nconst { approvedLimitChanged, loanAmountChanged, newApprovedLimit,newLoanAmount} = msg.excemption\nconst PAYLATER_URL = env.get('PAYLATER_URL');\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/service/update`;\nmsg.method = \"PATCH\";\nmsg.headers = {\n    Authorization: `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\" : env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"actyventityid\": flow.get(\"actyvEntityId\")\n}\n\nmsg.payload = {}\nmsg.payload[\"loanTermsID\"] = msg.loanID\n\nif(approvedLimitChanged){\n   \n    msg.payload[\"approvedLimit\"] = newApprovedLimit\n}\n\nif(loanAmountChanged){\n    msg.payload[\"loanAmount\"] = newLoanAmount\n}\n\nmsg.logger = `Update loan term`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1640,
        "wires": [
            [
                "76bad9db67d9feee"
            ]
        ]
    },
    {
        "id": "83ee3024943c99f7",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "updateLoanTermReq",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 1700,
        "wires": []
    },
    {
        "id": "76bad9db67d9feee",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "updateLoanTerm",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 1600,
        "wires": []
    },
    {
        "id": "3aec3290079ad86c",
        "type": "switch",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 1020,
        "wires": [
            [],
            [
                "9321259058ca947c",
                "768781467d84d04e"
            ]
        ]
    },
    {
        "id": "9321259058ca947c",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "Formated output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "row",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 1040,
        "wires": []
    },
    {
        "id": "7025c2857ad9a772",
        "type": "switch",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "201",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "201",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 1206,
        "wires": [
            [
                "8dd4d441b097a5e8"
            ],
            []
        ]
    },
    {
        "id": "8dd4d441b097a5e8",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "debug 423",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 1180,
        "wires": []
    },
    {
        "id": "552c740ac3aaf64d",
        "type": "inject",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 60,
        "wires": [
            [
                "86572e061bcba84e"
            ]
        ]
    },
    {
        "id": "86572e061bcba84e",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "Setting Global Variables",
        "func": "\n\n/*----------------------------    QA  ---------------------------*/\n\nlet userID = env.get(\"OUTLOOKUSERID\")\n\nconst ENV_VARIABLES = {\n    \"ADMIN_EMAIL\": \"darkhorse@gmail.com\",\n    \"ADMIN_PASSWORD\": \"User@123\",\n    \"ACTYV_ENTITY_URL\": \"https://actyv1-platform.qa.actyv.com\",\n    \"ACTYV_ENTITY_KEY\": \"dark_horse\",\n    \"AXIS_READ_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABT4dnQAAA=\",\n    \"AXIS_SUCCESS_FOLDER_ID\":\"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIwAAA=\",\n    \"AXIS_FAILURE_FOLDER_ID\":\"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIxAAA=\",\n    \"OUTLOOK_USER_ID\": userID\n}\n\n\n/*----------------------------    PROD  ---------------------------*/\n// const ENV_VARIABLES = {\n//     \"ADMIN_EMAIL\": \"darkhorse1@gmail.com\",\n//     \"ADMIN_PASSWORD\": \"890ioP@darkhorse\",\n//     \"ACTYV_ENTITY_URL\": \"https://actyv1-platform.qa.actyv.com\",\n//     \"ACTYV_ENTITY_KEY\": \"dark_horse\",\n//     \"AXIS_READ_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABT4dnQAAA=\",\n//     \"AXIS_SUCCESS_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIwAAA=\",\n//     \"AXIS_FAILURE_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIxAAA=\",\n//     \"OUTLOOK_USER_ID\": userID\n// }\n\nglobal.set(\"ENV_VARIABLES\", ENV_VARIABLES);\n\n// msg.payload = `${XLSX_FILE_PATH}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 60,
        "wires": [
            [
                "d68d3b232bfdf014"
            ]
        ]
    },
    {
        "id": "d68d3b232bfdf014",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "AuthenticateActyvUserReq",
        "func": "// const envVariables = global.get('envVariables')\nconst ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\nconst EMAIL = ENV_VARIABLES.ADMIN_EMAIL;\nconst PASSWORD = ENV_VARIABLES.ADMIN_PASSWORD\n\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 160,
        "wires": [
            [
                "6041c51e097eb450",
                "6cce79b060fbdd3d"
            ]
        ]
    },
    {
        "id": "857713a26fa62a06",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 160,
        "wires": [
            [
                "5525cd4a60bfc75a"
            ]
        ]
    },
    {
        "id": "2e451bcd73842751",
        "type": "switch",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "property": "isFileProcesCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 1440,
        "wires": [
            [
                "ee6191f86fef6fbc",
                "ee518b85da8c3a6f"
            ]
        ]
    },
    {
        "id": "ee6191f86fef6fbc",
        "type": "delay",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 660,
        "y": 1440,
        "wires": [
            [
                "3b50d9437f0e4f13",
                "94ef83dedd2331d9"
            ]
        ]
    },
    {
        "id": "3b50d9437f0e4f13",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "setPayloadOfDataMismatch",
        "func": "msg.payload = flow.get(\"dataMismatch\")\nmsg.logger = `Data mismatch`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1426,
        "wires": [
            [
                "a49e4a2fe67e5d13"
            ]
        ]
    },
    {
        "id": "a49e4a2fe67e5d13",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "sendEmailReq",
        "func": "const ADMIN_URL = env.get(\"ADMIN_URL\");\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\");\n\nconst formatAmount = (amount) => {\n    return new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(+amount)\n}\n\nconst dataMismatch = msg.payload;\n// const date = moment().toISOString().split(\"T\")[0]\nconst date = new Date().toLocaleDateString();\nlet table = ``;\nfor (const data of dataMismatch) {\n    table += `\\n<tr>\n<td>${data.dealerName}</td>\n<td>${data.dealerCode}</td>\n<td>${formatAmount(data.oldLoanAmount)}</td>\n<td>${formatAmount(data.newLoanAmount)}</td>\n<td>${data.loanAmountChanged ? \"Y\" : \"N\"}</td>\n<td>${formatAmount(data.oldApprovedLimit)}</td>\n<td>${formatAmount(data.newApprovedLimit)}</td>\n<td>${data.approvedLimitChanged ? \"Y\" : \"N\"}</td>\n<tr/>`;\n}\nconsole.log({ table });\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n};\nmsg.method = \"POST\";\n\nmsg.payload = {\n    \"from\": \"ramu.bugudi@actyv.com\",\n    \"to\": [\"shravan.pm@actyv.com\",\n     \"ramu.bugudi@actyv.com\"\n     ],\n    subject: `Utilization Report Updates On - ${date}`,\n    html: `\n    <html>\n        <head>\n            <style>\n                table, th, td {\n                border: 1px solid #000000;\n                border-collapse: collapse;\n                padding: .5rem;\n                text-align: center\n                }\n            </style>\n        </head>\n        <body>\n           <table>\n                <tr>\n                    <th>Dealer Name</th>\n                    <th>Dealer Code</th>\n                    <th>Old Loan Amount</th>\n                    <th>New Loan Amount</th>\n                    <th>Loan Amount Changed</th>\n                    <th>Old Approved Limit</th>\n                    <th>New Approved Limit</th>\n                    <th>Approved Limit Changed</th>\n                </tr>\n                <tbody>\n                    ${table}\n                </tbody>\n           </table>\n        </body>\n    </html>`,\n    priority: \"low\",\n    attachments: [],\n};\n\nmsg.logger = `Email send`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1200,
        "y": 1406,
        "wires": [
            [
                "2bafd0186cebbb11",
                "aba38f0f061fe84d"
            ]
        ]
    },
    {
        "id": "55b4f19d481ccdb2",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "email send",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 1386,
        "wires": []
    },
    {
        "id": "ee518b85da8c3a6f",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 1400,
        "wires": []
    },
    {
        "id": "1ef3df6b573d46f2",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "list down folders",
        "func": "let userID = env.get(\"OUTLOOKUSERID\")\nlet token = flow.get(\"token\");\nconst folderId =\"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABT4dnQAAA=\"\nconst failureFolderId = \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIxAAA=\"\nconst successFailureFolderId ='AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIwAAA='\nmsg.url = `https://graph.microsoft.com/v1.0/users/${userID}/mailFolders/${folderId}/childFolders`\nmsg.headers = {\n    // \"Authorization\": `${token.access_token}`\n    \"Authorization\": `${token}`\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1820,
        "wires": [
            [
                "aa3c6aa71b018cd5"
            ]
        ]
    },
    {
        "id": "5154c889a4725030",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "debug 471",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 1820,
        "wires": []
    },
    {
        "id": "aa3c6aa71b018cd5",
        "type": "http request",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1210,
        "y": 1820,
        "wires": [
            [
                "5154c889a4725030"
            ]
        ]
    },
    {
        "id": "94ef83dedd2331d9",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "moveEmail",
        "func": "let data = msg.payload;\nconst ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\nlet token=flow.get(\"token\");\nflow.set(\"msg\",data);\nlet userID = env.get(\"OUTLOOKUSERID\")\nconst emailId = msg.emailId\nconst successFolderId = ENV_VARIABLES.AXIS_SUCCESS_FOLDER_ID\nconst destinationFolderId = 'AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABT4dnQAAA='\n// msg.url = `https://graph.microsoft.com/v1.0/users/1870cd49-a831-4b52-ba5e-b680441f9f70/messages/${data.id}/attachments`\nmsg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages/${emailId}/move`\n\nmsg.method = \"POST\";\nmsg.headers = {\n    // \"Authorization\": `${token.access_token}`\n    \"Authorization\": `${token}`\n}\nmsg.payload={\n    destinationId: successFolderId\n}\n\nmsg.logger = `Move email`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "b39d9d18942cb747",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "Mail moved to successfull",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 1480,
        "wires": []
    },
    {
        "id": "5525cd4a60bfc75a",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "getAllActyvUsers",
        "func": "\n\nconst GO_URL = env.get('GO_URL');\nconst BANK_KEY = env.get(\"BANK_KEY\")\n\nmsg.url = `${GO_URL}/actyv-entity`;\nmsg.method = \"GET\"\n// msg.headers = {}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 320,
        "wires": [
            [
                "2598f5e89b23d950",
                "267d82c1e2c3617f"
            ]
        ]
    },
    {
        "id": "fb6a32ba1a59be19",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "saveActyvId",
        "func": "// msg.bankId = msg.payload._id\nflow.set(\"dataMismatch\",[])\nconst ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\nconst actyvKey = ENV_VARIABLES.ACTYV_ENTITY_KEY\nconst actyvEntity = msg.payload.filter((actyv)=>actyv.key === actyvKey)\nflow.set(\"actyvEntityId\", actyvEntity[0]._id);\nmsg.actyvEntityId = actyvEntity[0]._id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 320,
        "wires": [
            [
                "36978c12bbaf32e6"
            ]
        ]
    },
    {
        "id": "2598f5e89b23d950",
        "type": "subflow:0cbd918f05921aae",
        "z": "58e110d7c2bbe19a",
        "name": "getAllActyvUsers",
        "x": 470,
        "y": 320,
        "wires": [
            [
                "fb6a32ba1a59be19",
                "5588b6598df4f56a"
            ],
            [
                "5588b6598df4f56a"
            ]
        ]
    },
    {
        "id": "fec9e3ea96fbd84d",
        "type": "subflow:0cbd918f05921aae",
        "z": "58e110d7c2bbe19a",
        "name": "getAllMessages",
        "x": 220,
        "y": 806,
        "wires": [
            [
                "fec68c4dc60abca5",
                "e418cb7bcc270fd9"
            ],
            [
                "e418cb7bcc270fd9"
            ]
        ]
    },
    {
        "id": "b7a40fff1ba56615",
        "type": "subflow:0cbd918f05921aae",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "x": 810,
        "y": 806,
        "wires": [
            [
                "ddf94dcbdb27c29f",
                "490a5249fd37c90c"
            ],
            [
                "914538ba5f1af887"
            ]
        ]
    },
    {
        "id": "5f7bc3963ace71b2",
        "type": "subflow:0cbd918f05921aae",
        "z": "58e110d7c2bbe19a",
        "name": "getLoanTermByCrn",
        "x": 490,
        "y": 1126,
        "wires": [
            [
                "3a4a401af5344f34"
            ],
            [
                "e8613046783778e8",
                "2260c262258a6b81"
            ]
        ]
    },
    {
        "id": "20cb1a7a87f650e3",
        "type": "subflow:0cbd918f05921aae",
        "z": "58e110d7c2bbe19a",
        "name": "getLoanTerm",
        "x": 510,
        "y": 1340,
        "wires": [
            [
                "41d36fea836cc51a",
                "ab4fc70a19b44dff"
            ],
            []
        ]
    },
    {
        "id": "2bafd0186cebbb11",
        "type": "subflow:0cbd918f05921aae",
        "z": "58e110d7c2bbe19a",
        "name": "sendEmail",
        "x": 1410,
        "y": 1406,
        "wires": [
            [
                "50727dcd2cb6f605"
            ],
            [
                "50727dcd2cb6f605"
            ]
        ]
    },
    {
        "id": "ea5fe63f3d588221",
        "type": "subflow:0cbd918f05921aae",
        "z": "58e110d7c2bbe19a",
        "name": "moveEmail",
        "x": 1050,
        "y": 1494,
        "wires": [
            [
                "3db6fcce26efd4bb"
            ],
            [
                "3db6fcce26efd4bb"
            ]
        ]
    },
    {
        "id": "6897d8c5c1fbe470",
        "type": "subflow:0cbd918f05921aae",
        "z": "58e110d7c2bbe19a",
        "name": "updateLoanTermReq",
        "x": 540,
        "y": 1634,
        "wires": [
            [
                "963f96efdeb6296c"
            ],
            [
                "963f96efdeb6296c"
            ]
        ]
    },
    {
        "id": "17596962c29211eb",
        "type": "subflow:951a533bb3498fe6",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "x": 740,
        "y": 906,
        "wires": [
            [
                "752b5363ecdd4d7d",
                "be632d80dce035fc"
            ]
        ]
    },
    {
        "id": "3a4a401af5344f34",
        "type": "subflow:951a533bb3498fe6",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "x": 700,
        "y": 1106,
        "wires": [
            [
                "e2076f4aa23eda49",
                "7025c2857ad9a772"
            ]
        ]
    },
    {
        "id": "50727dcd2cb6f605",
        "type": "subflow:951a533bb3498fe6",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "x": 1580,
        "y": 1386,
        "wires": [
            [
                "55b4f19d481ccdb2"
            ]
        ]
    },
    {
        "id": "b6e27d34d4848169",
        "type": "subflow:951a533bb3498fe6",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "x": 200,
        "y": 1506,
        "wires": [
            [
                "f011fb858dd78b4f"
            ]
        ]
    },
    {
        "id": "963f96efdeb6296c",
        "type": "subflow:951a533bb3498fe6",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "x": 700,
        "y": 1700,
        "wires": [
            [
                "83ee3024943c99f7"
            ]
        ]
    },
    {
        "id": "3db6fcce26efd4bb",
        "type": "subflow:951a533bb3498fe6",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "x": 1220,
        "y": 1480,
        "wires": [
            [
                "b39d9d18942cb747"
            ]
        ]
    },
    {
        "id": "6041c51e097eb450",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "debug 505",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 220,
        "wires": []
    },
    {
        "id": "12d31e3e43692cc5",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "debug 506",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 120,
        "wires": []
    },
    {
        "id": "5588b6598df4f56a",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "debug 507",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 280,
        "wires": []
    },
    {
        "id": "267d82c1e2c3617f",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "debug 508",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 280,
        "wires": []
    },
    {
        "id": "6cce79b060fbdd3d",
        "type": "subflow:0cbd918f05921aae",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "x": 570,
        "y": 160,
        "wires": [
            [
                "857713a26fa62a06"
            ],
            []
        ]
    },
    {
        "id": "914538ba5f1af887",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "debug 509",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 746,
        "wires": []
    },
    {
        "id": "e418cb7bcc270fd9",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "debug 510",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 766,
        "wires": []
    },
    {
        "id": "e8613046783778e8",
        "type": "subflow:951a533bb3498fe6",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "x": 680,
        "y": 1186,
        "wires": [
            [
                "e9b9e70af8f3d48b"
            ]
        ]
    },
    {
        "id": "2260c262258a6b81",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "debug 511",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1246,
        "wires": []
    },
    {
        "id": "3a32376d4dd2a211",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "getLoanTermByCrnReq",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 1086,
        "wires": []
    },
    {
        "id": "e9b9e70af8f3d48b",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "get BP by Dealer code",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY = env.get(\"BANK_PRODUCT_KEY\")\nconst actyvToken = flow.get(\"actyvToken\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\nconst businessPartnerId = msg.payload._id\nmsg.businessPartnerId = msg.payload._id\nconst dealerCode = msg.row[\"DEALER CODE\"]\n// flow.set('bankProductConfigId', msg.payload.id)\nconst bankId = msg.bankId\n\n\nmsg.url = `${GO_URL}/business-relationship/getByIdentifierByParent/CKPL${dealerCode}`\n// console.log(\"URL\",msg.url)\nmsg.method = 'GET'\nmsg.headers = {\n    Authorization: `Bearer ${actyvToken}`,\n    \"x-actyv-api-config\": X_ACTYV_API_CONFIG_KEY,\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 800,
        "wires": [
            [
                "1c623a269de7a614"
            ]
        ]
    },
    {
        "id": "8f2eedaf0b09c6bd",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "get BP by Dealer code",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2240,
        "y": 800,
        "wires": []
    },
    {
        "id": "7904035913fdf65c",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "getAllBankApplicationReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst AXIS_CKPL_BANK_PRODUCT_KEY = env.get(\"AXIS_CKPL_BANK_PRODUCT_KEY\")\nconst businessPartnerId = msg.payload[0]._id\nmsg.businessPartnerId = msg.payload[0]._id\n\n// flow.set('bankProductConfigId', msg.payload.id)\nconst bankId = msg.bankId\n\n\nmsg.url = `${GO_URL}/bank-application?businessPartner=${businessPartnerId}&bankApplicationConfigKey=${AXIS_CKPL_BANK_PRODUCT_KEY}`\n// console.log(\"URL\",msg.url)\nmsg.method = 'GET'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 900,
        "wires": [
            [
                "00f4bc857defbd28"
            ]
        ]
    },
    {
        "id": "03941bd2f8593542",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "d": true,
        "name": "updateBankApplicationStatusReq",
        "func": "const GO_URL = env.get('GO_URL')\n\nconst token = flow.get(\"enterpriseToken\")\n\nmsg.url = `${GO_URL}/bank-application/decision/update`\nmsg.method = 'POST'\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.payload = {\n    remarks: \"approved\",//msg.row[\"Reason For rejection\"], // actual message\n    // remarks: \"APPROVE\", // actual message\n    decision: {\n        label: \"approved\",//msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? \"Approve\" : \"Reject\",\n        value: \"approved\",//msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? \"APPROVE\" : \"REJECT\",\n        // value: false ? \"APPROVE\" : \"REJECT\",\n        variableName: \"bankapprover_action\",\n        actionType: \"DECISION\",\n    },\n    bankApplicationId: msg.payload[0]._id || \"63fc9febc7d9bb697685ab4a\",\n    correctionItems: {\n        documentIds: [],\n    },\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1000,
        "wires": [
            [
                "f76e699eb71a4a15"
            ]
        ]
    },
    {
        "id": "331c598d8ea31648",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "getAllBankApplications",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 906,
        "wires": []
    },
    {
        "id": "61dd7c71d0984db5",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "createLoanTermReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\nconst bankToken = flow.get(\"bankToken\")\n\n\nconst bankAccount = flow.get(\"bankAccount\") || {}\n\nconst bankDetails = flow.get('bankDetails') || {}\n// const businessPartnerId = flow.get('businessPartnerId')\nconst businessPartnerId = msg.businessPartnerId || \"\"\n\n\nconst enterpriseID = msg.enterpriseId\nconst bankId = msg.bankId\n\nconst row = msg.row\n\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.headers = {\n        Authorization: `Bearer ${actyvToken}`,\n        bankid: msg.bankid\n}\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms`\nmsg.method = 'POST'\n\nmsg.payload = {\n        bankID: bankId,\n        borrowerID: businessPartnerId,\n        enterpriseID,\n        bankApplicationConfigID: msg.bankApplicationConfigId,\n        approvedLimit: msg.row[\"SANCTION LIMIT\"],\n        // loanAmount: row[\"Loan Accepted Amount\"]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2260,
        "y": 1000,
        "wires": [
            [
                "f72c63b99374f448"
            ]
        ]
    },
    {
        "id": "60385acb908b5e5a",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "updateLoanTermReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst row = msg.row\n\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.headers = {\n        Authorization: `Bearer ${actyvToken}`,\n        \"x-actyv-api-config-key\":X_ACTYV_API_CONFIG_KEY,\n}\n\nmsg.loanId = msg.payload.id\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/service/update`\nmsg.method = 'PATCH',\n\nmsg.payload = {\n        loanTermsID: msg.payload.id,\n        approvedLimit: msg.row[\"SANCTION LIMIT\"],\n        // loanAmount: row[\"Loan Accepted Amount\"],\n        loanAmount: 0,\n        crnNumber: row[\"DEALER ACCOUNT NO.\"],\n        validTill: msg.row[\"LIMIT EXPIRY DATE\"] ,\n        loanGrantStatus: \"APPROVED\",\n       \n}\n\nfunction calculateValidTill(inputDate){\n        let date = inputDate\n        let split = date.split(\"/\")\n        let addOneYear = Number(split[split.length - 1]) + 1\n        split[split.length - 1] = addOneYear\n        let joined = split.join('-')\n        return joined\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 1080,
        "wires": [
            [
                "84665dd5b673d34f"
            ]
        ]
    },
    {
        "id": "f341fb982a076b6e",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "createBusinessRelationship(D-B)Req",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst bankAccount = flow.get(\"bankAccount\") || {}\nconst bankDetails = flow.get('bankDetails') || {}\n\nconst {  bankAccountNo,\n        bankIfsc,\n        bankName, } = bankAccount\n\n\nconst bankId = msg.bankId\nconst businessPartnerId = msg.businessPartnerId\n\nconst row = msg.row\n\nmsg.url = `${GO_URL}/business-relationship/service`\nmsg.method = 'POST'\nmsg.headers = {};\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = {\n        businessId: businessPartnerId,\n        parentBusinessId: bankId,\n        identifierByParent: row[\"DEALER CODE\"],\n        bankAccountNumber: bankAccountNo,\n        bankIFSC: bankIfsc,\n        bankName: bankName,\n        relationType: \"DISTRIBUTOR-BANK\"\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1300,
        "wires": [
            [
                "7d89b060f5afa964"
            ]
        ]
    },
    {
        "id": "aba38f0f061fe84d",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "debug 605",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 1266,
        "wires": []
    },
    {
        "id": "84080d83966b8008",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "debug 606",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2490,
        "y": 1086,
        "wires": []
    },
    {
        "id": "0198084823a4f59a",
        "type": "switch",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1650,
        "y": 860,
        "wires": [
            [
                "7904035913fdf65c"
            ]
        ]
    },
    {
        "id": "36978c12bbaf32e6",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "getBankProductKeyReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst AXIS_CKPL_BANK_PRODUCT_KEY = env.get('AXIS_CKPL_BANK_PRODUCT_KEY')\n\nmsg.url = `${GO_URL}/bank-application-config/key/${AXIS_CKPL_BANK_PRODUCT_KEY}`\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 440,
        "wires": [
            [
                "1c2f65133ff4f12b"
            ]
        ]
    },
    {
        "id": "b0a57e51e18783a3",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "bankProductConfig",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 440,
        "wires": []
    },
    {
        "id": "1c2f65133ff4f12b",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "58e110d7c2bbe19a",
        "name": "getBankProductKeyReq",
        "x": 510,
        "y": 440,
        "wires": [
            [
                "b0a57e51e18783a3",
                "7817757c837879c8"
            ],
            []
        ]
    },
    {
        "id": "7817757c837879c8",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "save bank and enterprise",
        "func": "const bankId = msg.payload.bank;\nconst enterpriseId = msg.payload.allowedEnterprises[0];\n\nmsg.bankId = bankId;\nmsg.enterpriseId = enterpriseId;\nmsg.bankApplicationConfigId = msg?.payload?.id\n\nflow.set(\"bankAccount\", {\n    bankAccountNo:\"\",\n    bankIfsc:\"\",\n    bankName:\"\"})\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 560,
        "wires": [
            [
                "4285b3ad93f2d6ab"
            ]
        ]
    },
    {
        "id": "1c623a269de7a614",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "58e110d7c2bbe19a",
        "name": "get BP by Dealer code",
        "x": 1880,
        "y": 800,
        "wires": [
            [
                "8f2eedaf0b09c6bd",
                "0198084823a4f59a"
            ],
            [
                "8f2eedaf0b09c6bd"
            ]
        ]
    },
    {
        "id": "00f4bc857defbd28",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "58e110d7c2bbe19a",
        "name": "getAllBankApplication",
        "x": 1920,
        "y": 900,
        "wires": [
            [
                "331c598d8ea31648",
                "03941bd2f8593542",
                "61dd7c71d0984db5"
            ],
            []
        ]
    },
    {
        "id": "f76e699eb71a4a15",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "58e110d7c2bbe19a",
        "d": true,
        "name": "updateBankApplicationStatus",
        "x": 1970,
        "y": 1000,
        "wires": [
            [
                "61dd7c71d0984db5"
            ],
            []
        ]
    },
    {
        "id": "84665dd5b673d34f",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "58e110d7c2bbe19a",
        "name": "updateLoanTerm",
        "x": 2190,
        "y": 1080,
        "wires": [
            [
                "f11e95a5a001d896",
                "84080d83966b8008"
            ],
            [
                "84080d83966b8008"
            ]
        ]
    },
    {
        "id": "963d243751d24585",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "58e110d7c2bbe19a",
        "name": "createBusinessRelationship(D-B)",
        "x": 2040,
        "y": 1300,
        "wires": [
            [
                "be702da01bae4bd1"
            ],
            [
                "be702da01bae4bd1"
            ]
        ]
    },
    {
        "id": "be702da01bae4bd1",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "debug 607",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2390,
        "y": 1300,
        "wires": []
    },
    {
        "id": "f72c63b99374f448",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "58e110d7c2bbe19a",
        "name": "createLoanTerm",
        "x": 1600,
        "y": 1080,
        "wires": [
            [
                "60385acb908b5e5a",
                "9edf794d15b265d8"
            ],
            [
                "9edf794d15b265d8"
            ]
        ]
    },
    {
        "id": "f11e95a5a001d896",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "Payload For fetching TenorAndRateSpread",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nconst sleep = async (milliseconds) => {\n  await new Promise(resolve => {\n    return setTimeout(resolve, milliseconds)\n  });\n};\n\nconst PAYLATER_URL = env.get(\"PAYLATER_URL\")\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n  \"Authorization\": `Bearer ${actyvToken}`,\n  \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\")\n}\n// if (msg.statusCode === 200) {\n//   msg.result[\"Update Loan Term\"] = `Updated: ${msg.loanTermId}`;\n// }\n// else {\n//   msg.result[\"Update Loan Term\"] = `${msg.statusCode} Error`;\n// }\n\nmsg.payload = {\n  \"bankID\": msg.bankId,\n  \"loanID\": msg.loanId,\n}\n\nmsg.url = `${PAYLATER_URL}/v1/tenor-and-rate-spread/fetch`;\nmsg.method = 'POST';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 1180,
        "wires": [
            [
                "6a7d58243299f472",
                "78445546c61351d1"
            ]
        ]
    },
    {
        "id": "6a7d58243299f472",
        "type": "http request",
        "z": "58e110d7c2bbe19a",
        "name": "Fetching TenorAndRateSpread",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2230,
        "y": 1180,
        "wires": [
            [
                "3317a22e86ef02d3",
                "d5737a94bff11764"
            ]
        ]
    },
    {
        "id": "3317a22e86ef02d3",
        "type": "switch",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "201",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "201",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2510,
        "y": 1180,
        "wires": [
            [],
            [
                "9d2ceacf6d9e19e1"
            ]
        ]
    },
    {
        "id": "a8e5adc89891b7ac",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "Setting Payload for creating BNPL preference",
        "func": "// const env_var = global.get(\"ENV_VARIABLES\")\n// const flow_var = flow.get(\"FLOW_VARIABLES\")\n\n// msg.headers = {\n//     \"Authorization\": `Bearer ${flow.get(\"bp_token\")}`,\n//     \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n//     \"businesspartnerid\": flow.get(\"actyv_bp_id\"),\n//     \"bankid\": msg.BANK_ID\n// }\n\n// msg.DEFAULT_SPREAD_ID = msg.payload[0].id;\n\n// if (msg.statusCode === 201){\n//     msg.result[\"Fetch Tenor\"] = `Tenor Fetched ${msg.DEFAULT_SPREAD_ID}`\n// }\n// else{\n//     msg.result[\"Fetch Tenor\"] = `${msg.statusCode} Error`\n// }\n\n// msg.payload = {\n//     borrowerID: msg.obj.businessPartnerId,\n//     productTypeID: msg.product_type_id,\n//     defaultBankID: msg.BANK_ID,\n//     defaultSpreadID: msg.DEFAULT_SPREAD_ID,\n//     minInvoiceAmountThreshold: env_var.MIN_INVOICE_AMOUNT_THRESHOLD\n// }\n// msg.url = env_var.BNPL_PREFERENCE;\n// msg.method = 'post';\n\n// return msg;\n\nconst env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\nconst PAYLATER_URL = env.get(\"PAYLATER_URL\")\n// const actyvToken = flow.get(\"actyvToken\")\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow.get(\"actyvToken\") }`,\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    // \"businesspartnerid\": flow.get(\"actyv_bp_id\"),\n    \"bankid\": msg.bankId,\n    \"actyventityid\": msg.actyvEntityId\n}\n\nmsg.DEFAULT_SPREAD_ID = msg.payload[0].id;\n\n// if (msg.statusCode === 201) {\n//     msg.result[\"Fetch Tenor\"] = `Tenor Fetched ${msg.DEFAULT_SPREAD_ID}`\n// }\n// else {\n//     msg.result[\"Fetch Tenor\"] = `${msg.statusCode} Error`\n// }\n\nmsg.payload = {\n    borrowerID: msg.businessPartnerId,\n    bankApplicationConfigID: msg.bankApplicationConfigId,\n    defaultBankID: msg.bankId,\n    defaultSpreadID: msg.DEFAULT_SPREAD_ID,\n    minInvoiceAmountThreshold: 10//env_var.MIN_INVOICE_AMOUNT_THRESHOLD\n}\nmsg.url = `${PAYLATER_URL}/v1/bnpl-preference`;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 1240,
        "wires": [
            [
                "fade22688eefc315"
            ]
        ]
    },
    {
        "id": "fade22688eefc315",
        "type": "http request",
        "z": "58e110d7c2bbe19a",
        "name": "Create BNPL Preference",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2250,
        "y": 1240,
        "wires": [
            [
                "fc0d8a64491bc26b",
                "f341fb982a076b6e"
            ]
        ]
    },
    {
        "id": "9d2ceacf6d9e19e1",
        "type": "switch",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2650,
        "y": 1180,
        "wires": [
            [
                "a8e5adc89891b7ac"
            ],
            []
        ]
    },
    {
        "id": "3eee908f81678d03",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "debug 608",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 660,
        "wires": []
    },
    {
        "id": "9edf794d15b265d8",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "debug 609",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 1160,
        "wires": []
    },
    {
        "id": "d5737a94bff11764",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "debug 610",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2510,
        "y": 1140,
        "wires": []
    },
    {
        "id": "78445546c61351d1",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "debug 611",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2270,
        "y": 1140,
        "wires": []
    },
    {
        "id": "fc0d8a64491bc26b",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "debug 612",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2570,
        "y": 1240,
        "wires": []
    },
    {
        "id": "7d89b060f5afa964",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "debug 613",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2290,
        "y": 1420,
        "wires": []
    },
    {
        "id": "5f188d0f3aaa2002",
        "type": "inject",
        "z": "e546fa9119a2d093",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 80,
        "wires": [
            [
                "6ca830f983947d34"
            ]
        ]
    },
    {
        "id": "6ca830f983947d34",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Setting Global Variables",
        "func": "let userID = env.get(\"OUTLOOKUSERID\")\n\n/*----------------------------    QA  ---------------------------*/\n\n\n\nconst ENV_VARIABLES = {\n    \"ADMIN_EMAIL\": \"darkhorse@gmail.com\",\n    \"ADMIN_PASSWORD\": \"User@123\",\n    \"ACTYV_ENTITY_URL\": \"https://actyv1-platform.qa.actyv.com\",\n    \"ACTYV_ENTITY_KEY\": \"dark_horse\",\n    \"AXIS_READ_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABT4dnQAAA=\",\n    \"AXIS_SUCCESS_FOLDER_ID\":\"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIwAAA=\",\n    \"AXIS_FAILURE_FOLDER_ID\":\"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIxAAA=\",\n    \"OUTLOOK_USER_ID\": userID\n}\n\n/*----------------------------    UAT  ---------------------------*/\n\n\n\n// const ENV_VARIABLES = {\n//     \"ADMIN_EMAIL\": \"darkhorse@gmail.com\",\n//     \"ADMIN_PASSWORD\": \"User@123\",\n//     \"ACTYV_ENTITY_URL\": \"https://actyv1-platform.uat.actyv.com\",\n//     \"ACTYV_ENTITY_KEY\": \"dark_horse\",\n//     \"AXIS_READ_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABT4dnQAAA=\",\n//     \"AXIS_SUCCESS_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIwAAA=\",\n//     \"AXIS_FAILURE_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIxAAA=\",\n//     \"OUTLOOK_USER_ID\": userID\n// }\n\n/*----------------------------    PROD  ---------------------------*/\n// const ENV_VARIABLES = {\n//     \"ADMIN_EMAIL\": \"darkhorse1@gmail.com\",\n//     \"ADMIN_PASSWORD\": \"890ioP@darkhorse\",\n//     \"ACTYV_ENTITY_URL\": \"https://actyv1-platform.qa.actyv.com\",\n//     \"ACTYV_ENTITY_KEY\": \"dark_horse1\",\n//     \"AXIS_READ_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABT4dnQAAA=\",\n//     \"AXIS_SUCCESS_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIwAAA=\",\n//     \"AXIS_FAILURE_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIxAAA=\",\n//     \"OUTLOOK_USER_ID\": userID\n// }\n\nglobal.set(\"ENV_VARIABLES\", ENV_VARIABLES);\n\n// msg.payload = `${XLSX_FILE_PATH}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 423,
        "y": 81,
        "wires": [
            [
                "4d9969ceb05ffe22"
            ]
        ]
    },
    {
        "id": "4d9969ceb05ffe22",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst EMAIL = env.get('APL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 223,
        "y": 141,
        "wires": [
            [
                "dff15b9989892df3"
            ]
        ]
    },
    {
        "id": "dff15b9989892df3",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "AuthenticateActyvUserReq",
        "func": "// const envVariables = global.get('envVariables')\nconst ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\nconst EMAIL = ENV_VARIABLES.ADMIN_EMAIL;\nconst PASSWORD = ENV_VARIABLES.ADMIN_PASSWORD\n\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 193,
        "y": 301,
        "wires": [
            [
                "e31547eeca54006b"
            ]
        ]
    },
    {
        "id": "e31547eeca54006b",
        "type": "subflow:0cbd918f05921aae",
        "z": "e546fa9119a2d093",
        "name": "authentic actyv entity user",
        "x": 513,
        "y": 301,
        "wires": [
            [
                "0d0a6c62b5c163ea"
            ],
            []
        ]
    },
    {
        "id": "0d0a6c62b5c163ea",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\nconsole.log({actyvToken: msg.payload.idToken})\nmsg.actyvToken = msg.payload.idToken\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 793,
        "y": 301,
        "wires": [
            [
                "73f9a974de5a8fea"
            ]
        ]
    },
    {
        "id": "73f9a974de5a8fea",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "getAllActyvUsers",
        "func": "\n\nconst GO_URL = env.get('GO_URL');\nconst BANK_KEY = env.get(\"BANK_KEY\")\n\nmsg.url = `${GO_URL}/actyv-entity`;\nmsg.method = \"GET\"\n// msg.headers = {}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 183,
        "y": 381,
        "wires": [
            [
                "61185c4f7dbebbf9"
            ]
        ]
    },
    {
        "id": "61185c4f7dbebbf9",
        "type": "subflow:0cbd918f05921aae",
        "z": "e546fa9119a2d093",
        "name": "getAllActyvUsers",
        "x": 463,
        "y": 381,
        "wires": [
            [
                "507cfdfdf9de40c5"
            ],
            []
        ]
    },
    {
        "id": "507cfdfdf9de40c5",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "save actyv_entity_id",
        "func": "const ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\nconst actyvKey = ENV_VARIABLES.ACTYV_ENTITY_KEY\nconst actyvEntity = msg.payload.filter((actyv) => actyv.key === actyvKey)\nflow.set(\"actyvEntityId\", actyvEntity[0]._id);\nmsg.actyvEntityId = actyvEntity[0]._id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 793,
        "y": 381,
        "wires": [
            [
                "5dc975df9c21bcaa",
                "e8644e9a97fa862e"
            ]
        ]
    },
    {
        "id": "5dc975df9c21bcaa",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "debug 539",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 943,
        "y": 341,
        "wires": []
    },
    {
        "id": "e8644e9a97fa862e",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Setting Payload For Fetching INITIATED Status Files",
        "func": "const actyvToken = flow.get(\"actyvToken\")\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/fileInfoBySeedingStatus/INITIATED`;\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"actyventityid\": msg.actyvEntityId\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'GET';\nmsg.logger = \"seeding files fetched in Initiated State\"\nmsg.loggerNewLine = true\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 273,
        "y": 521,
        "wires": [
            [
                "38ebc9ea382d6b64",
                "6d3774716c6ae73b"
            ]
        ]
    },
    {
        "id": "38ebc9ea382d6b64",
        "type": "subflow:0cbd918f05921aae",
        "z": "e546fa9119a2d093",
        "name": "getInitiatedFiles",
        "x": 653,
        "y": 521,
        "wires": [
            [
                "e2dae932af2cbab4",
                "779881a7b7b12b07",
                "70e458de7b9ebc28"
            ],
            [
                "e2dae932af2cbab4",
                "779881a7b7b12b07"
            ]
        ]
    },
    {
        "id": "6d3774716c6ae73b",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "debug 540",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 563,
        "y": 481,
        "wires": []
    },
    {
        "id": "e2dae932af2cbab4",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "debug 541",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 803,
        "y": 461,
        "wires": []
    },
    {
        "id": "779881a7b7b12b07",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 873,
        "y": 521,
        "wires": [
            [
                "aacabb05e3bee334"
            ]
        ]
    },
    {
        "id": "70e458de7b9ebc28",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Looping and Segregating Files",
        "func": "const files = msg.payload.fileInfo.filter((file) => file.seedingType == \"GO_SEEDING\");\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nfor (const file of files) {\n    // if (file.seedingType == \"GO_SEEDING\" && file.fileName === \"Format_File_GO_Seeding (5) (2).xlsx\") {\n    if (file.seedingType == \"GO_SEEDING\") {\n        node.send({\n            ...file,\n            ...msg,\n            payload: file.fileId,\n            seedingType: file.seedingType,\n            isComplete: false,\n            logger : \"fileId for go seeding\"\n        })\n        await sleep(200000)\n    }\n}\nmsg.isComplete= true\nmsg.logger = \"No file found for Go seeding\"\nreturn msg\n// ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 285,
        "y": 619,
        "wires": [
            [
                "610cfee5930692fe"
            ]
        ]
    },
    {
        "id": "aacabb05e3bee334",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "Fetch initiated files",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1083,
        "y": 521,
        "wires": []
    },
    {
        "id": "610cfee5930692fe",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 545,
        "y": 619,
        "wires": [
            [
                "92ca1739188bc494"
            ],
            [
                "cb990ab683163566"
            ]
        ]
    },
    {
        "id": "92ca1739188bc494",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 735,
        "y": 599,
        "wires": [
            [
                "b862d45d4c5d543b"
            ]
        ]
    },
    {
        "id": "cb990ab683163566",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\nflow.set(\"succeededRows\", [])\nflow.set(\"failedRows\", []) \n\nflow.set(\"succeeded_Create_BP\", [])\nflow.set(\"failed_Create_BP\", []) \n\nmsg.fileId = msg.payload\nconsole.log(msg.fileId);\nconsole.log(msg.seedingType);\nmsg.method = \"GET\"\nmsg.headers = {\n    fileType: \"xlsx\"\n}\nmsg.url = `${GO_URL}/file/read/${msg.fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 143,
        "y": 681,
        "wires": [
            [
                "56ad92cf7a465b3b"
            ]
        ]
    },
    {
        "id": "b862d45d4c5d543b",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "Files completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 895,
        "y": 599,
        "wires": []
    },
    {
        "id": "56ad92cf7a465b3b",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "read file",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 333,
        "y": 681,
        "wires": [
            [
                "38f64ba5630fe114",
                "0e72ef866d130108"
            ]
        ]
    },
    {
        "id": "38f64ba5630fe114",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "Read file",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 675,
        "y": 679,
        "wires": []
    },
    {
        "id": "0e72ef866d130108",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 505,
        "y": 719,
        "wires": [
            [
                "49014a24c48e9020"
            ],
            [
                "3e46fd010fde7971"
            ]
        ]
    },
    {
        "id": "49014a24c48e9020",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n\n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if (failedRow.length === 0) {\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         \"businessPartnerNotFound\": `${msg.payload}`,\n\n//     })\n// } else {\n//     failedRows.forEach((row) => {\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"]) {\n//             row[\"businessPartnerNotFound\"] = `${msg.payload}`\n//         }\n\n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: \"ALL\",\n    message: `File processing failed, couldn't read file,  Please contact administrator.`\n})\nmsg.remark = `File processing failed, couldn't read file,  Please contact administrator.`\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\n\nmsg.allFailed = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 723,
        "y": 721,
        "wires": [
            [
                "9a44b7c71d4fd9e6"
            ]
        ]
    },
    {
        "id": "3e46fd010fde7971",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "read xls",
        "func": "let data = xlsx.read(msg.payload, { type: \"buffer\" })\nconst wsname = data.SheetNames[0];\nconst ws = data.Sheets[wsname];\nconst payload = xlsx.utils.sheet_to_json(ws);\nmsg.seedingData = payload.filter((d) => d[\"Business Partner GST\"] !== undefined)\nmsg.completedSeeding = [],\nmsg.failedSeeding = []\nmsg.anchored = false;\nif(msg.enterpriseId){\n    msg.anchored = true\n}\nmsg.payload = payload\nmsg.numOfRows = msg.seedingData.length\n\nmsg.logger = \"read xlsx\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "xlsx",
                "module": "xlsx"
            }
        ],
        "x": 135,
        "y": 819,
        "wires": [
            [
                "dfe16af26f6f0fff"
            ]
        ]
    },
    {
        "id": "9a44b7c71d4fd9e6",
        "type": "subflow:9c6db570ab89ba16",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 973,
        "y": 721,
        "wires": [
            [
                "0787d67c0befd8f5"
            ]
        ]
    },
    {
        "id": "dfe16af26f6f0fff",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 293,
        "y": 821,
        "wires": [
            [
                "89f82e5b1b8e7f8e",
                "4d0bd8ec7fd061c3"
            ]
        ]
    },
    {
        "id": "0787d67c0befd8f5",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1243,
        "y": 721,
        "wires": []
    },
    {
        "id": "89f82e5b1b8e7f8e",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "xlsx to json",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "seedingData",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 445,
        "y": 819,
        "wires": []
    },
    {
        "id": "4d0bd8ec7fd061c3",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "check number of rows",
        "property": "seedingData.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "100",
                "vt": "num"
            },
            {
                "t": "lte",
                "v": "100",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 175,
        "y": 899,
        "wires": [
            [
                "2d1ffb9ca2909044"
            ],
            [
                "4c858f494974cc2c"
            ]
        ]
    },
    {
        "id": "2d1ffb9ca2909044",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Logger",
        "func": "msg.logger = \"No of rows greater than 100 not processing the file\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 495,
        "y": 879,
        "wires": [
            [
                "8625cdc12de47e4e"
            ]
        ]
    },
    {
        "id": "4c858f494974cc2c",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Logger",
        "func": "msg.logger = `file processing started for #${msg.seedingData.length} rows`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 135,
        "y": 979,
        "wires": [
            [
                "358ec75f55b4fa37"
            ]
        ]
    },
    {
        "id": "8625cdc12de47e4e",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 655,
        "y": 879,
        "wires": [
            [
                "0c27fb04d86a50de",
                "ba1b6cddf489f019"
            ]
        ]
    },
    {
        "id": "358ec75f55b4fa37",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 355,
        "y": 979,
        "wires": [
            [
                "735d20395eed12c3"
            ]
        ]
    },
    {
        "id": "0c27fb04d86a50de",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "File is not processed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 893,
        "y": 861,
        "wires": []
    },
    {
        "id": "ba1b6cddf489f019",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n\n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if (failedRow.length === 0) {\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         \"businessPartnerNotFound\": `${msg.payload}`,\n\n//     })\n// } else {\n//     failedRows.forEach((row) => {\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"]) {\n//             row[\"businessPartnerNotFound\"] = `${msg.payload}`\n//         }\n\n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: \"ALL\",\n    message: `Limit exceeded for file processing, Please contact administrator.`\n})\n\nmsg.allFailed = true\n\nmsg.remark = `Limit exceeded for file processing, Please contact administrator.`\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 563,
        "y": 961,
        "wires": [
            [
                "acb98546055eaa55"
            ]
        ]
    },
    {
        "id": "735d20395eed12c3",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "checkAnchoredOrNot",
        "property": "anchored",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 175,
        "y": 1079,
        "wires": [
            [],
            [
                "b340e80c4c23fe8f"
            ]
        ]
    },
    {
        "id": "acb98546055eaa55",
        "type": "subflow:9c6db570ab89ba16",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 773,
        "y": 961,
        "wires": [
            [
                "378513cb73c550db"
            ]
        ]
    },
    {
        "id": "b340e80c4c23fe8f",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "fetchEnterpriseConfig",
        "func": "\nconst enterpriseId = msg.enterpriseId\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\")\n}\nmsg.url = `${env.get(\"GO_URL\")}/enterprise-seeding-config/${enterpriseId}`;\nmsg.method = 'GET';\nmsg.logger = `fetch enterprise config with enterprise id= #${enterpriseId}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 173,
        "y": 1181,
        "wires": [
            [
                "f5862d69ee2d9157"
            ]
        ]
    },
    {
        "id": "378513cb73c550db",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1023,
        "y": 961,
        "wires": []
    },
    {
        "id": "f5862d69ee2d9157",
        "type": "subflow:0cbd918f05921aae",
        "z": "e546fa9119a2d093",
        "name": "fetchEnterpriseConfig",
        "x": 473,
        "y": 1181,
        "wires": [
            [
                "9d0f94997328a7aa"
            ],
            [
                "9d0f94997328a7aa"
            ]
        ]
    },
    {
        "id": "9d0f94997328a7aa",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 713,
        "y": 1181,
        "wires": [
            [
                "eb0d4d26ddcdfe5b",
                "f36f8f66455424b7"
            ]
        ]
    },
    {
        "id": "eb0d4d26ddcdfe5b",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "fetchEnterpriseConfig",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 953,
        "y": 1181,
        "wires": []
    },
    {
        "id": "f36f8f66455424b7",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "enterpriseConfigExistOrNot",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 195,
        "y": 1379,
        "wires": [
            [
                "c8e9749ce8b1a110",
                "5fec84c2e117444a"
            ],
            [
                "474b8449a85a9017"
            ]
        ]
    },
    {
        "id": "c8e9749ce8b1a110",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Logger",
        "func": "msg.logger = \"Enterprise config is not exist for the user so the file is not processed\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 455,
        "y": 1339,
        "wires": [
            [
                "dccce7076afb916c"
            ]
        ]
    },
    {
        "id": "5fec84c2e117444a",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n\n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if (failedRow.length === 0) {\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         \"businessPartnerNotFound\": `${msg.payload}`,\n\n//     })\n// } else {\n//     failedRows.forEach((row) => {\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"]) {\n//             row[\"businessPartnerNotFound\"] = `${msg.payload}`\n//         }\n\n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: \"ALL\",\n    message : `Enterprise config not present for enterprise`\n})\n\nmsg.remark = `Enterprise config not present for enterprise.`\n\n\nmsg.allFailed = true\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 583,
        "y": 1281,
        "wires": [
            [
                "2d4e26aa8a51e33d"
            ]
        ]
    },
    {
        "id": "474b8449a85a9017",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "checkEnterpriseConfig",
        "func": "const {\n    canCreateBusinessPartner = false,\n    canCreateBusinessPartnerUser = false,\n} = msg.payload.result;\nif (\n    [canCreateBusinessPartner, canCreateBusinessPartnerUser].includes(\n        true\n    )\n) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 153,
        "y": 1541,
        "wires": [
            [
                "8c323aa8791a0e9b"
            ]
        ]
    },
    {
        "id": "dccce7076afb916c",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 615,
        "y": 1339,
        "wires": [
            [
                "ee08d79ff7be5b9b"
            ]
        ]
    },
    {
        "id": "2d4e26aa8a51e33d",
        "type": "subflow:9c6db570ab89ba16",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 793,
        "y": 1281,
        "wires": [
            [
                "3b6508a9b0f19fd1"
            ]
        ]
    },
    {
        "id": "8c323aa8791a0e9b",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "fetchEnterpriseConfig",
        "func": "\nconst enterpriseId = msg.enterpriseId\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\")\n}\nmsg.url = `${env.get(\"GO_URL\")}/enterprise/get/${enterpriseId}`;\nmsg.method = 'GET';\nmsg.logger = `fetch enterprise with enterprise id= #${enterpriseId}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 173,
        "y": 1601,
        "wires": [
            [
                "42fd55c673568a70"
            ]
        ]
    },
    {
        "id": "ee08d79ff7be5b9b",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "No enterprise config",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 853,
        "y": 1341,
        "wires": []
    },
    {
        "id": "3b6508a9b0f19fd1",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1063,
        "y": 1281,
        "wires": []
    },
    {
        "id": "42fd55c673568a70",
        "type": "subflow:0cbd918f05921aae",
        "z": "e546fa9119a2d093",
        "name": "fetchEnterpriseConfig",
        "x": 413,
        "y": 1601,
        "wires": [
            [
                "42ec03fa6e546c0c"
            ],
            [
                "7c15aaf3b0ace153"
            ]
        ]
    },
    {
        "id": "42ec03fa6e546c0c",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "function 238",
        "func": "const key = msg?.payload?.key?.toUpperCase();\nmsg.dealerCodePrefix = key\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 603,
        "y": 1601,
        "wires": [
            [
                "7c15aaf3b0ace153"
            ]
        ]
    },
    {
        "id": "7c15aaf3b0ace153",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 773,
        "y": 1601,
        "wires": [
            [
                "ce44c95d09d338ef",
                "538c5068a905f5a6"
            ]
        ]
    },
    {
        "id": "ce44c95d09d338ef",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "fetchEnterpriseConfig",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 953,
        "y": 1601,
        "wires": []
    },
    {
        "id": "538c5068a905f5a6",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Loop",
        "func": "const sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nfor(let [key,row] of msg.seedingData.entries()){\n    node.send({\n        ...msg,\n        row,\n        isCompleted : false,\n        isFileProcessingCompleted: key == msg.seedingData.length-1? true:false\n    })\n    await sleep(2000)\n}\nawait sleep(30000)\nmsg.isCompleted = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 383,
        "y": 1701,
        "wires": [
            [
                "d2ca0c9ebc5b819c",
                "46801fa05c77314c"
            ]
        ]
    },
    {
        "id": "d2ca0c9ebc5b819c",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "debug 542",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "row",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 543,
        "y": 1661,
        "wires": []
    },
    {
        "id": "46801fa05c77314c",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "checkLoopCompletedOrNot",
        "property": "isCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 133,
        "y": 1841,
        "wires": [
            [],
            [
                "1279ad330ce44073"
            ]
        ]
    },
    {
        "id": "1279ad330ce44073",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "checkValidations",
        "func": "let transactionHistorys = [\n    \"Transaction History M1\",\n    \"Transaction History M2\",\n    \"Transaction History M3\",\n    \"Transaction History M4\",\n    \"Transaction History M5\",\n    \"Transaction History M6\",\n    \"Transaction History M7\",\n    \"Transaction History M8\",\n    \"Transaction History M9\",\n    \"Transaction History M10\",\n    \"Transaction History M11\",\n    \"Transaction History M12\",\n];\n\nfunction checkAllMandatoryFieldsPresentOrNot(row) {\n    if (\n        +row[\"Transaction History M1\"] >= 0 &&\n        +row[\"Transaction History M2\"] >= 0 &&\n        +row[\"Transaction History M3\"] >= 0 &&\n        +row[\"Transaction History M4\"] >= 0 &&\n        +row[\"Transaction History M5\"] >= 0 &&\n        +row[\"Transaction History M6\"] >= 0 &&\n        row[\"Business Partner Customer No\"] &&\n        row[\"Primary User First Name\"] &&\n        row[\"Primary User Last Name\"] &&\n        row[\"Business Partner Company Name\"] &&\n        validatePan(row[\"Business Partner PAN\"]) &&\n        validateGst(row[\"Business Partner GST\"]) &&\n        validatePhone(row[\"Business Partner Phone\"]) &&\n        validateEmail(row[\"Business Partner Email\"]) &&\n        row[\"Business Partner City\"] &&\n        validateDistributorType(row[\"Business Partner Type\"]) &&\n        row[\"Business Partner Account with Enterprise\"] &&\n        row[\"Business Partner Bank Name with Enterprise\"] &&\n        validateIFSC(row[\"Business Partner Bank IFSC with Enterprise\"])\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n\n//Check email\nfunction validateEmail(email) {\n    const emailPattern = /^([a-zA-Z0-9._%+-]+)@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})$/;\n\n    if (emailPattern.test(email)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n//Check phone number\nfunction validatePhone(phone) {\n    phone = phone.toString();\n    const phoneNumber = phone.length === 10 ? phone : phone.slice(3, 13);\n    const phoneNumberPattern = /^[1-9]\\d{9}$/;\n\n    if (phoneNumberPattern.test(phoneNumber)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction validateDistributorType(type) {\n    if (type.toLowerCase() === \"distributor\" || type.toLowerCase() === \"vendor\") {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction validatePan(pan) {\n    const panPattern = /^([A-Z]{5}[0-9]{4}[A-Z]{1})$/;\n\n    if (panPattern.test(pan)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction validateGst(gst) {\n    const gstinPattern =\n        /^([0-9]{2}[a-zA-Z]{5}[0-9]{4}[a-zA-Z]{1}[1-9A-Za-z]{1}Z[0-9A-Za-z]{1})$/;\n\n    if (gstinPattern.test(gst)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n//   /^[A-Za-z]{4}[0-9]{6,7}$/\nfunction validateIFSC(ifsc) {\n    const IFSC_pattern = /^[A-Z]{4}0[A-Z0-9]{6}$/;\n\n    if (IFSC_pattern.test(ifsc)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n//****************************************************************************************************************************************** */\n\n\nconst row = msg.row;\nlet checkAllMandatoryFieldPresent = checkAllMandatoryFieldsPresentOrNot(\n    msg.row\n);\n\nlet message = checkAllMandatoryFieldPresent? \"\":\"Mandatory fields are not present\"\n\n\nif(\n    !(+row[\"Transaction History M1\"] >= 0 &&\n    +row[\"Transaction History M2\"] >= 0 &&\n    +row[\"Transaction History M3\"] >= 0 &&\n    +row[\"Transaction History M4\"] >= 0 &&\n    +row[\"Transaction History M5\"] >= 0 &&\n    +row[\"Transaction History M6\"] >= 0) ){\n    message = \"Transaction history is not valid\"\n    }\n\n/**\nvalidateDistributorType(row[\"Business Partner Type\"]) &&\n */\n\nconst isDistributorTypeValid = validateDistributorType(row[\"Business Partner Type\"])\nif (!isDistributorTypeValid) {\n    message = \"Borrower type is not valid\"\n}\n\nconst isIfscValid = validateIFSC(row[\"Business Partner Bank IFSC with Enterprise\"])\nif (!isIfscValid) {\n    console.log(\"IFSC\", isIfscValid, row[\"Business Partner Bank IFSC with Enterprise\"])\n    message = \"IFSC number is not valid\"\n}\n\nconst isValidPan = validatePan(msg.row[\"Business Partner PAN\"])\nif (!isValidPan) {\n    message = \"PAN number is not valid\"\n}\n\nconst isGstValid = validateGst(row[\"Business Partner GST\"])\nif (!isGstValid) {\n    message = \"GST number is not valid\"\n}\n\nconst isPhoneValid = validatePhone(row[\"Business Partner Phone\"])\nif (!isPhoneValid) {\n    message = \"Mobile number is not valid\"\n}\n\nconst isEmailValid = validateEmail(row[\"Business Partner Email\"])\nif (!isEmailValid) {\n    message = \"Email is not valid\"\n}\n\n\n\nmsg.primaryChecks = false\nmsg.message = message\nmsg.logger = \"primary check\"\nif(checkAllMandatoryFieldPresent){\n    msg.primaryChecks = true\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 108,
        "y": 2003,
        "wires": [
            [
                "9b737b53ffbefafa"
            ]
        ]
    },
    {
        "id": "9b737b53ffbefafa",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "primaryChecks",
        "property": "primaryChecks",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 358,
        "y": 2003,
        "wires": [
            [
                "c96dc89e6db6b335",
                "b7c79d9def3d4ee2"
            ],
            [
                "30a6651ac845fd18"
            ]
        ]
    },
    {
        "id": "c96dc89e6db6b335",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if (failedRow.length === 0) {\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         \"businessPartnerNotFound\": `${msg.payload}`,\n\n//     })\n// } else {\n//     failedRows.forEach((row) => {\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"]) {\n//             row[\"businessPartnerNotFound\"] = `${msg.payload}`\n//         }\n\n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: msg.row[\"Business Partner Email\"],\n    message: msg.message\n})\n\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nmsg.allFailed = false\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 563,
        "y": 1961,
        "wires": [
            [
                "30f734d20196048e"
            ]
        ]
    },
    {
        "id": "b7c79d9def3d4ee2",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 633,
        "y": 1881,
        "wires": [
            [
                "a1cf6fbaa5e51ca5"
            ]
        ]
    },
    {
        "id": "30a6651ac845fd18",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Get business relation with erpId",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\nconst businessPartnerId = msg.payload?._id\nmsg.businessPartnerId = businessPartnerId\nmsg.url = `${GO_URL}/business-relationship/service/getByIdentifierByParent/${msg.row[\"Business Partner Customer No\"]}`;\nmsg.method = \"GET\"\nmsg.headers = {}\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n}\nmsg.logger = `Get business relation with erpId #${msg.row[\"Business Partner Customer No\"]}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 143,
        "y": 2101,
        "wires": [
            [
                "b5d2a8c3599387b8"
            ]
        ]
    },
    {
        "id": "30f734d20196048e",
        "type": "subflow:9c6db570ab89ba16",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 793,
        "y": 1961,
        "wires": [
            [
                "15bf3910e16407ae"
            ]
        ]
    },
    {
        "id": "a1cf6fbaa5e51ca5",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "debug 543",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 863,
        "y": 1881,
        "wires": []
    },
    {
        "id": "b5d2a8c3599387b8",
        "type": "subflow:0cbd918f05921aae",
        "z": "e546fa9119a2d093",
        "name": "get business relation with erpId",
        "x": 503,
        "y": 2101,
        "wires": [
            [
                "76174415745c629d"
            ],
            [
                "76174415745c629d"
            ]
        ]
    },
    {
        "id": "15bf3910e16407ae",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1083,
        "y": 1961,
        "wires": []
    },
    {
        "id": "76174415745c629d",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 733,
        "y": 2101,
        "wires": [
            [
                "f70b8d6d8aab6540",
                "abef44ed9c81edfe"
            ]
        ]
    },
    {
        "id": "f70b8d6d8aab6540",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "get relation",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 948,
        "y": 2103,
        "wires": []
    },
    {
        "id": "abef44ed9c81edfe",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 88,
        "y": 2223,
        "wires": [
            [
                "9d59cd575079ab69"
            ],
            [
                "fd5df3d0e13ab4eb"
            ]
        ]
    },
    {
        "id": "9d59cd575079ab69",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n\n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if (failedRow.length === 0) {\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         \"msg\": `Dealer code already exist`,\n\n//     })\n// } else {\n//     failedRows.forEach((row) => {\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"]) {\n//             row[\"msg\"] = `Dealer code already exist`\n//         }\n\n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: msg.row[\"Business Partner Email\"],\n    \"message\": `Dealer code already exist`,\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\n\nmsg.allFailed = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 323,
        "y": 2201,
        "wires": [
            [
                "a5eae030322b2672"
            ]
        ]
    },
    {
        "id": "fd5df3d0e13ab4eb",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "postBusinessPartner",
        "func": "\n\nconst {row,enterpriseId} = msg\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \n}\nmsg.url = `${env.get(\"GO_URL\")}/business-partner`;\n// msg.url = `http://localhost:4003/api/business-partner`;\nmsg.method = 'POST';\n\nconst DEFAULT_PASSWORD = env.get(\"DEFAULT_PASSWORD\")\n\nmsg.payload = {\n    \n  \"gstin\": row[\"Business Partner GST\"],\n  \"businessName\": row[\"Business Partner Company Name\"],\n  \"applicantMobile\": row[\"Business Partner Phone\"].toString().includes[\"+91\"] ? row[\"Business Partner Phone\"].toString().replace(\"+91\",\"\") : `${row[\"Business Partner Phone\"]}`,\n  \"applicantEmail\": row[\"Business Partner Email\"],\n  \"password\": DEFAULT_PASSWORD,\n  \"inviteId\": \"\",\n  \"registerAsAnchor\": \"\",\n  \"firstName\": row[\"Primary User First Name\"], //?\n  \"lastName\": row[\"Primary User Last Name\"] || \".\", //?\n  \"isConsentAccepted\": true,\n  \"autoConfirmUser\": true,\n  \"origin\": \"seed\",\n  \"stateCode\": \"\" //?\n\n}\nmsg.logger = \"Post business partner\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 118,
        "y": 2363,
        "wires": [
            [
                "12f052754351bfb1"
            ]
        ]
    },
    {
        "id": "a5eae030322b2672",
        "type": "subflow:9c6db570ab89ba16",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 533,
        "y": 2201,
        "wires": [
            [
                "07d381a0d9d75b35"
            ]
        ]
    },
    {
        "id": "12f052754351bfb1",
        "type": "subflow:0cbd918f05921aae",
        "z": "e546fa9119a2d093",
        "name": "post Business partner",
        "x": 433,
        "y": 2361,
        "wires": [
            [
                "b608f3493e22674f"
            ],
            [
                "b608f3493e22674f"
            ]
        ]
    },
    {
        "id": "07d381a0d9d75b35",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 803,
        "y": 2201,
        "wires": []
    },
    {
        "id": "b608f3493e22674f",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 693,
        "y": 2361,
        "wires": [
            [
                "2a6d2a3f70a9e416",
                "b3810e83f1947be1"
            ]
        ]
    },
    {
        "id": "2a6d2a3f70a9e416",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "postBusinessPartner",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 933,
        "y": 2361,
        "wires": []
    },
    {
        "id": "b3810e83f1947be1",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "statusOfCreate_BP",
        "property": "payload.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "SUCCESS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 108,
        "y": 2443,
        "wires": [
            [
                "2a39e089dcd73e47"
            ],
            [
                "d361e05781d18b81"
            ]
        ]
    },
    {
        "id": "2a39e089dcd73e47",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n \n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if(failedRow.length === 0){\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         createBusinessPartnerFailed: `${msg.payload}`,\n   \n//     })\n// }else{\n//     failedRows.forEach((row) =>{\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"])\n//         {\n//            row.createBusinessPartnerFailed = `${msg.payload}`\n//         }\n        \n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: msg.row[\"Business Partner Email\"],\n    message: `${msg.payload.message ||\"Unable to create business partner, Please contact administrator.\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\",failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 403,
        "y": 2421,
        "wires": [
            [
                "6e28925f5386659e"
            ]
        ]
    },
    {
        "id": "d361e05781d18b81",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "createEnterprise_BP_mapping",
        "func": "\nconst succeededRows = flow.get(\"succeededRows\") ||[]\n\n\n\n\nconst {row,enterpriseId} = msg\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\")\n}\nmsg.url = `${env.get(\"GO_URL\")}/enterprise-partner-mapping/create`;\n\nmsg.completedSeeding.push({\n  businessPartnerId: msg.payload.businessPartnerId,\n  applicantEmail: msg.row[\"Business Partner Email\"],\n})\n\nsucceededRows.push({\n  businessPartnerId: msg.payload.businessPartnerId,\n  applicantEmail: msg.row[\"Business Partner Email\"]\n})\nflow.set(\"succeededRows\",succeededRows)\nflow.set(\"succeeded_Create_BP\", succeededRows)\nmsg.businessPartnerId = msg.payload.businessPartnerId\nmsg.method = 'POST';\nmsg.payload = {\n  enterpriseId,\n  businessPartnerId: msg.payload.businessPartnerId\n\n}\nmsg.logger = \"createEnterprise_BP_mapping\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 148,
        "y": 2523,
        "wires": [
            [
                "1df2cb67e1c91bc1"
            ]
        ]
    },
    {
        "id": "6e28925f5386659e",
        "type": "subflow:9c6db570ab89ba16",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 613,
        "y": 2421,
        "wires": [
            [
                "a67362e5fae0c45f"
            ]
        ]
    },
    {
        "id": "1df2cb67e1c91bc1",
        "type": "subflow:0cbd918f05921aae",
        "z": "e546fa9119a2d093",
        "name": "createEnterprise_BP_mapping",
        "x": 463,
        "y": 2521,
        "wires": [
            [
                "a8f7acbf88ba7535",
                "816893cbb63f5197"
            ],
            [
                "a8f7acbf88ba7535"
            ]
        ]
    },
    {
        "id": "a67362e5fae0c45f",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 883,
        "y": 2421,
        "wires": []
    },
    {
        "id": "a8f7acbf88ba7535",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 693,
        "y": 2521,
        "wires": [
            [
                "423f9aabcd377eac"
            ]
        ]
    },
    {
        "id": "816893cbb63f5197",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "createEnterprise_BP_mapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 823,
        "y": 2461,
        "wires": []
    },
    {
        "id": "423f9aabcd377eac",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "",
        "property": "payload._id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 843,
        "y": 2521,
        "wires": [
            [
                "65892524259b3e61"
            ],
            [
                "0d9e83ef721e8b1f"
            ]
        ]
    },
    {
        "id": "65892524259b3e61",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n\n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if (failedRow.length === 0) {\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         \"createBusinessPartner-enterpriseMappingFailed\": `${msg.payload}`,\n\n//     })\n// } else {\n//     failedRows.forEach((row) => {\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"]) {\n//             row[\"createBusinessPartner-enterpriseMappingFailed\"] = `${msg.payload}`\n//         }\n\n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: msg.row[\"Business Partner Email\"],\n    \"message\": `Unable to create business partner - enterprise mapping failed, Please contact administrator.`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1003,
        "y": 2601,
        "wires": [
            [
                "6c041ab98477da74"
            ]
        ]
    },
    {
        "id": "0d9e83ef721e8b1f",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Create business relation with erpId",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nmsg.url = `${GO_URL}/business-relationship/service`;\nmsg.method = \"POST\"\nmsg.headers = {}\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n}\nconst {businessPartnerId,enterpriseId} = msg\nconst key = msg.dealerCodePrefix\n\nmsg.payload = {\n    \"businessId\": businessPartnerId,\n    \"parentBusinessId\": enterpriseId,\n    \"identifierByParent\": `${msg.row[\"Business Partner Customer No\"]}`,\n    \"bankAccountNumber\": msg.row[\"Business Partner Account with Enterprise\"],\n    \"bankIFSC\": msg.row[\"Business Partner Bank IFSC with Enterprise\"],\n    \"bankName\": msg.row[\"Business Partner Bank Name with Enterprise\"],\n    \"relationType\": checkRelationType(msg.row[\"Business Partner Type\"]) \n}\nmsg.logger = `Create business relation with erpId #${msg.row[\"Business Partner Customer No\"]}`\n\n\nfunction checkRelationType(str){\n    if(str.toLowerCase() === \"distributor\"){\n        return \"DISTRIBUTOR-ENTERPRISE\"\n    } else if (str.toLowerCase() === \"vendor\"){\n        return \"VENDOR-ENTERPRISE\"\n    }\n    return \"\"\n}\nconsole.log(msg.payload)\nreturn msg\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 173,
        "y": 2641,
        "wires": [
            [
                "25d8e61cfcacf144"
            ]
        ]
    },
    {
        "id": "6c041ab98477da74",
        "type": "subflow:9c6db570ab89ba16",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 1223,
        "y": 2601,
        "wires": [
            [
                "99ad5db10bf14c8e"
            ]
        ]
    },
    {
        "id": "25d8e61cfcacf144",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 373,
        "y": 2721,
        "wires": [
            [
                "a70172c8145082a6"
            ]
        ]
    },
    {
        "id": "99ad5db10bf14c8e",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1523,
        "y": 2601,
        "wires": []
    },
    {
        "id": "a70172c8145082a6",
        "type": "subflow:0cbd918f05921aae",
        "z": "e546fa9119a2d093",
        "name": "Create business relation with erpId",
        "x": 613,
        "y": 2721,
        "wires": [
            [
                "66c95ec64756456a"
            ],
            [
                "66c95ec64756456a"
            ]
        ]
    },
    {
        "id": "66c95ec64756456a",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 873,
        "y": 2721,
        "wires": [
            [
                "ce6c45b199aaeae2",
                "83f7ce9379b720a8"
            ]
        ]
    },
    {
        "id": "ce6c45b199aaeae2",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "Create business relation with erpId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1173,
        "y": 2721,
        "wires": []
    },
    {
        "id": "83f7ce9379b720a8",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "",
        "property": "payload.businessRelationship._id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 563,
        "y": 2821,
        "wires": [
            [
                "09787b3e8872fb86"
            ],
            [
                "353806d261a75fb1",
                "28778b350a6fe75d"
            ]
        ]
    },
    {
        "id": "09787b3e8872fb86",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n \n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if(failedRow.length === 0){\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         createRelationshipFailed: `${msg.payload}`,\n   \n//     })\n// }else{\n//     failedRows.forEach((row) =>{\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"])\n//         {\n//            row.createRelationshipFailed = `${msg.payload}`\n//         }\n        \n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: msg.row[\"Business Partner Email\"],\n    message: `Unable to create relationship between enterprise and business partner, Please contact administrator.`,\n\n})\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\n\n\nflow.set(\"failedRows\",failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 723,
        "y": 2801,
        "wires": [
            [
                "94f7ce8ac24576dd"
            ]
        ]
    },
    {
        "id": "63927075291e97ef",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Format sales summary",
        "func": "\n\nconst salesSummary = []\nconst {businessPartnerId,enterpriseId} = msg\nfor(let key in msg.row){\n    if (key.includes(\"Transaction History\")){\n        let monthSplit = key.split(\"M\")\n        \n        let month = monthSplit[monthSplit.length-1]\n        if (msg.row[key]){\n            salesSummary.push(\n                {\n                    \"businessPartner\": businessPartnerId,\n                    \"enterprise\": enterpriseId,\n                    \"year\": +getMonthAndYear(month).split(\"-\")[0],\n                    \"month\": +getMonthAndYear(month).split(\"-\")[1],\n                    \"totalSalesAmount\": msg.row[key],\n                    \"totalSalesProjected\": msg.row[key],\n                    \"isUsedInEligibility\":false\n                }\n            )\n        }\n        \n    }\n}\n// msg.payload = salesSummary\n\nfunction getMonthAndYear(month){\n    let date = moment().subtract(Number(month), 'months').format()\n    date = date.split(\"T\")[0]\n   \n    return date\n}\nfor (let [key, req] of salesSummary.entries()){\n    node.send({\n        ...msg,\n        req,\n        isComplete : false,\n        salesSummaryLoopCompleted: key == salesSummary.length - 1 ? true : false\n    })\n   \n}\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 340,
        "y": 3500,
        "wires": [
            [
                "2cb4ea8e1521346e"
            ]
        ]
    },
    {
        "id": "353806d261a75fb1",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "switch",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 783,
        "y": 2861,
        "wires": []
    },
    {
        "id": "94f7ce8ac24576dd",
        "type": "subflow:9c6db570ab89ba16",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 923,
        "y": 2801,
        "wires": [
            [
                "01ed1839c9eac56c"
            ]
        ]
    },
    {
        "id": "2cb4ea8e1521346e",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 532,
        "y": 3498,
        "wires": [
            [
                "bb4358e42a2fd414"
            ],
            [
                "30c78fd778b72622"
            ]
        ]
    },
    {
        "id": "01ed1839c9eac56c",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1163,
        "y": 2801,
        "wires": []
    },
    {
        "id": "bb4358e42a2fd414",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "seedingData",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 725,
        "y": 3478,
        "wires": []
    },
    {
        "id": "30c78fd778b72622",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "post business-partner-sales-summary",
        "func": "const GO_URL = env.get(\"GO_URL\")\n\nmsg.url = `${GO_URL}/business-partner-sales-summary`,\nmsg.method = \"POST\"\nmsg.payload = msg.req\nmsg.logger = `post business-partner-sales-summary with ${JSON.stringify(msg.payload)}`\nmsg.headers = {}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 385,
        "y": 3578,
        "wires": [
            [
                "094156ea94609d14",
                "22a0b4bd6303871f"
            ]
        ]
    },
    {
        "id": "094156ea94609d14",
        "type": "subflow:0cbd918f05921aae",
        "z": "e546fa9119a2d093",
        "name": "post business-partner-sales-summary",
        "x": 745,
        "y": 3578,
        "wires": [
            [
                "ae76e5bf59847fcb"
            ],
            [
                "ae76e5bf59847fcb"
            ]
        ]
    },
    {
        "id": "ae76e5bf59847fcb",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 1020,
        "y": 3580,
        "wires": [
            [
                "e28ca678221cdf48",
                "283f13f2a9a0e42b"
            ]
        ]
    },
    {
        "id": "e28ca678221cdf48",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "post business-partner-sales-summary",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 3580,
        "wires": []
    },
    {
        "id": "283f13f2a9a0e42b",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "salesSummaryLoopCompleted?",
        "property": "salesSummaryLoopCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 832,
        "y": 3678,
        "wires": [
            [
                "80698e1da227ca04",
                "f8a1567c285d19ed"
            ]
        ]
    },
    {
        "id": "80698e1da227ca04",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "debug 544",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 965,
        "y": 3778,
        "wires": []
    },
    {
        "id": "f8a1567c285d19ed",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\n\n\nflow.set(\"failedRows\",failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1085,
        "y": 3678,
        "wires": [
            [
                "c240490d1aeecee2"
            ]
        ]
    },
    {
        "id": "c240490d1aeecee2",
        "type": "subflow:9c6db570ab89ba16",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 1285,
        "y": 3678,
        "wires": [
            [
                "8d6224279fef47ab"
            ]
        ]
    },
    {
        "id": "8d6224279fef47ab",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1545,
        "y": 3678,
        "wires": []
    },
    {
        "id": "28778b350a6fe75d",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "getUserId",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nconst { businessPartnerId, enterpriseId } = msg\n\nmsg.url = `${ADMIN_URL}/api/business-partner-user/all/businessPartner/${businessPartnerId}`;\nmsg.method = \"GET\"\nmsg.headers = {}\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n}\n\n\n\nreturn msg\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 2940,
        "wires": [
            [
                "af7b67089a2b80ae",
                "461bc26aa8b56140"
            ]
        ]
    },
    {
        "id": "af7b67089a2b80ae",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e546fa9119a2d093",
        "name": "getUserId",
        "x": 540,
        "y": 2940,
        "wires": [
            [
                "345c19740efc6a41",
                "f091f86320975c97"
            ],
            [
                "f091f86320975c97"
            ]
        ]
    },
    {
        "id": "21f94ecf7e32dbdd",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n \n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if(failedRow.length === 0){\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         createRelationshipFailed: `${msg.payload}`,\n   \n//     })\n// }else{\n//     failedRows.forEach((row) =>{\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"])\n//         {\n//            row.createRelationshipFailed = `${msg.payload}`\n//         }\n        \n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: msg.row[\"Business Partner Email\"],\n    message: `Unable to get userID, Please contact administrator.`,\n\n})\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\n\n\nflow.set(\"failedRows\",failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 2960,
        "wires": [
            [
                "cf361a380c1af798"
            ]
        ]
    },
    {
        "id": "cf361a380c1af798",
        "type": "subflow:9c6db570ab89ba16",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 1010,
        "y": 2960,
        "wires": [
            [
                "d3e33bb2a7ab04cd"
            ]
        ]
    },
    {
        "id": "d3e33bb2a7ab04cd",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 2960,
        "wires": []
    },
    {
        "id": "345c19740efc6a41",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 3020,
        "wires": [
            [
                "21f94ecf7e32dbdd"
            ],
            [
                "583805729ccff456"
            ]
        ]
    },
    {
        "id": "583805729ccff456",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Get role id",
        "func": "const data = msg.payload;\nmsg.userId = data[0]?.userId;\nconsole.log({data})\nmsg.result = {}\nmsg.result[\"User ID\"] = data[0].userId;\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n   \n}\n\nmsg.method = 'POST';\nmsg.url = `${env.get(\"ADMIN_URL\")}/api/role/query`\nmsg.payload = {\n    \"query\": {\n        \"name\": \"financial_products\"\n    }\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 3100,
        "wires": [
            [
                "95b803582ad446c7",
                "df651ed8fc8c3236"
            ]
        ]
    },
    {
        "id": "95b803582ad446c7",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "Get role id",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 3100,
        "wires": [
            [
                "246606f8dd86db20",
                "f47df6c2c0affbfd"
            ]
        ]
    },
    {
        "id": "246606f8dd86db20",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "set roleId",
        "func": "msg.roleId = msg.payload[0][\"_id\"]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 3100,
        "wires": [
            [
                "dddb8ac0f1589596"
            ]
        ]
    },
    {
        "id": "dddb8ac0f1589596",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Check if RoleUserMapping exists",
        "func": "\nconst ADMIN_URL = env.get(\"ADMIN_URL\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\n    const data = msg.payload;\n    \n    msg.result[\"User ID\"] = `${msg.userId}`;\n\n    msg.headers = {\n        \"Authorization\": `Bearer ${env.get(\"actyvToken\")}`,\n        \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n    }\n\nmsg.url = `${ADMIN_URL}/api/role-user-mapping/roles/user/${msg.userId}`;\n    msg.method = 'get';\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 3160,
        "wires": [
            [
                "144b829e711c303d"
            ]
        ]
    },
    {
        "id": "144b829e711c303d",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "Check Role User Mapping",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 770,
        "y": 3160,
        "wires": [
            [
                "b27802976c99c9fa",
                "7432e5d653cce449"
            ]
        ]
    },
    {
        "id": "b27802976c99c9fa",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Result of Check Role User Mapping",
        "func": "const mappings = msg.payload.rolesIds;\n\nvar flag = 0;\nfor (const mapping of mappings) {\n    if(mapping.roleId == msg.roleId){\n        flag = 1;\n        break;\n    }\n};\n\nif(flag === 1){\n    msg.userExists = \"true\";\n    msg.result[\"Role User Mapping\"] = `Exists`;\n}\nelse{\n    msg.userExists = \"false\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 3240,
        "wires": [
            [
                "739c73ab31b50372"
            ]
        ]
    },
    {
        "id": "739c73ab31b50372",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "",
        "property": "userExists",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 3240,
        "wires": [
            [],
            [
                "63927075291e97ef",
                "f621887eebf6309d"
            ]
        ]
    },
    {
        "id": "f621887eebf6309d",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Setting payload for roleUserMapping",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\n\n\nconst ADMIN_URL = env.get(\"ADMIN_URL\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst userId = msg.userId;\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow.get(\"actyvToken\")}`,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\n\n\n\nmsg.payload = {\n    userId : userId,\n    roleId: msg.roleId,\n    businessPartnerId : msg.businessPartnerId,\n}\nmsg.url = `${ADMIN_URL}/api/role-user-mapping`;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 3220,
        "wires": [
            [
                "89cbed5212638862"
            ]
        ]
    },
    {
        "id": "89cbed5212638862",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "Role User Mapping",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1250,
        "y": 3220,
        "wires": [
            [
                "3d15216bc8e2760e"
            ]
        ]
    },
    {
        "id": "3d15216bc8e2760e",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "Result of roleUserMapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 3220,
        "wires": []
    },
    {
        "id": "f091f86320975c97",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "getUser",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 2920,
        "wires": []
    },
    {
        "id": "df651ed8fc8c3236",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "debug 583",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 3040,
        "wires": []
    },
    {
        "id": "f47df6c2c0affbfd",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "debug 584",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 3040,
        "wires": []
    },
    {
        "id": "461bc26aa8b56140",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "debug 585",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 2900,
        "wires": []
    },
    {
        "id": "7432e5d653cce449",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "debug 587",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 3140,
        "wires": []
    },
    {
        "id": "22a0b4bd6303871f",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "debug 588",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 3680,
        "wires": []
    },
    {
        "id": "8909068d758dce17",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "Loop",
        "func": "const users = msg.seedingData;\nconst ENTERPRISE_ID = msg.enterpriseId;\nconst BANK_ID = msg.bankId;\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nfor (const [key,user] of users.entries()) {\n    node.send({\n        ...msg,\n        payload : user,\n        isCompleted : \"false\",\n        ENTERPRISE_ID: ENTERPRISE_ID,\n        BANK_ID: BANK_ID,\n        isFileProcessingCompleted: key == users.length - 1 ? true : false\n    })\n    await sleep(10000);\n}\n\nmsg.isCompleted = \"true\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1000,
        "wires": [
            [
                "92cd83a86e167ac3"
            ]
        ]
    },
    {
        "id": "0b1ab184397e3d7a",
        "type": "inject",
        "z": "ced2a26ef4f97d80",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 620,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "92cd83a86e167ac3",
        "type": "switch",
        "z": "ced2a26ef4f97d80",
        "name": "",
        "property": "isCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 1000,
        "wires": [
            [
                "b2b49a194d3f9b0c"
            ],
            [
                "e2da19067a74849a"
            ]
        ]
    },
    {
        "id": "b2b49a194d3f9b0c",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "Flow Done",
        "func": "const fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/changeStatus/${msg.fileId}`;\nconst flow_var = flow.get('FLOW_VARIABLES');\nconsole.log(\"request\", fetchInitiatedFiles)\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${flow_var.token}`,\n    \"bankid\": `${flow.get(\"actyv_id\")}`\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'PATCH';\nmsg.payload = {\n    \"fileId\":msg.fileId,\n    \"seedingStatus\":\"COMPLETED\"\n}\nreturn msg;\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1000,
        "wires": [
            [
                "7a2999cc4330665a",
                "0fbcc8a22c83e677"
            ]
        ]
    },
    {
        "id": "b49eb04917784a6f",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "name": "Flow Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1040,
        "wires": []
    },
    {
        "id": "689633e29f46fe1c",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "Get BP_ID",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 350,
        "y": 1180,
        "wires": [
            [
                "a0deab5d62a0c1e1"
            ]
        ]
    },
    {
        "id": "a0deab5d62a0c1e1",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "Get userId from businessPartnerId",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${flow_var.token}`\n}\n\nif (msg.statusCode === 200){\n    const data = msg.payload;\n    msg.obj.businessPartnerId = data._id;\n    msg.result[\"Business Partner ID\"] = `${msg.obj.businessPartnerId}`;\n    msg.method = 'get';\n    msg.url = `${env_var.CHECK_BP_RELATIONSHIP}/${msg.obj.businessPartnerId}/${msg.ENTERPRISE_ID}`\n    // msg.url = `${env_var.BP_USER}/${msg.obj.businessPartnerId}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1180,
        "wires": [
            [
                "2e0751502448ec7e"
            ]
        ]
    },
    {
        "id": "ed6a341b8c1b5db3",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "Get User_ID",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 1240,
        "wires": [
            [
                "274950bd79f3474f"
            ]
        ]
    },
    {
        "id": "d3e2793ff1e8a8be",
        "type": "switch",
        "z": "ced2a26ef4f97d80",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 170,
        "y": 2060,
        "wires": [
            [
                "19b29090b9a70c40"
            ],
            [
                "63747b6725757db2"
            ]
        ]
    },
    {
        "id": "8e38a2e4c49588cc",
        "type": "switch",
        "z": "ced2a26ef4f97d80",
        "name": "",
        "property": "userExists",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 1780,
        "wires": [
            [
                "63f280a67f79ac66"
            ],
            [
                "bc1963a56b571703"
            ]
        ]
    },
    {
        "id": "7ccce1a0d94ef454",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "name": "Row condition falied",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 1100,
        "wires": []
    },
    {
        "id": "628baece23ce92b3",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "Setting Global Variables",
        "func": "const ENVIRONMENT = env.get(\"ENVIRONMENT\");\nconst CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\");\n// const ROLE_ID = env.get(\"ROLE_ID\");\nconst ROLE_ID = \"638392e70882f1495a970cfb\";\nconst SLEEP_TIME = 500;\nconst MIN_INVOICE_AMOUNT_THRESHOLD = 1000;\n\nconst GO_SERVICE_URL = `https://actyv-platform-go-service.${ENVIRONMENT}.actyv.com/api`;\nconst PAYLATER_SERVICE_URL = `https://actyv-platform-paylater-service-v1.${ENVIRONMENT}.actyv.com/v1`;\nconst ADMIN_SERVICE_URL = `https://actyv-platform-admin-service.${ENVIRONMENT}.actyv.com/api`;\n\nconst ENV_VARIABLES = {\n    \"GO_SERVICE_URL\": GO_SERVICE_URL,\n    \"PAYLATER_SERVICE_URL\": PAYLATER_SERVICE_URL,\n    \"ADMIN_SERVICE_URL\": ADMIN_SERVICE_URL,\n    \"GET_BP\": `${GO_SERVICE_URL}/business-partner/service`,\n    \"BP_USER\": `${ADMIN_SERVICE_URL}/business-partner-user/get/all`,\n    \"USER\": `${ADMIN_SERVICE_URL}/user`,\n    \"ROLE_USER_MAPPING\": `${ADMIN_SERVICE_URL}/role-user-mapping`,\n    \"BP_SALES_SUMMARY\": `${GO_SERVICE_URL}/business-partner-sales-summary`,\n    \"BP_BANK_RELATIONSHIP\": `${GO_SERVICE_URL}/business-relationship`,\n    \"LOAN_TERM\": `${PAYLATER_SERVICE_URL}/loan-terms`,\n    \"BNPL_PREFERENCE\": `${PAYLATER_SERVICE_URL}/bnpl-preference`,\n    \"AUTH_URL\": `${ADMIN_SERVICE_URL}/user/authenticateUser`,\n    \"CHECK_ROLE_USER_MAPPING\": `${ADMIN_SERVICE_URL}/role-user-mapping/byBusinessPartnerId`,\n    \"GET_SALES_SUMMARY\": `${GO_SERVICE_URL}/business-partner-sales-summary`,\n    \"CHECK_BP_RELATIONSHIP\": `${GO_SERVICE_URL}/business-relationship/service`,\n    \"TENOR_AND_RATE_SPREAD\": `${PAYLATER_SERVICE_URL}/tenor-and-rate-spread`,\n    \"CONFIG_KEY\": `${CONFIG_KEY}`,\n    \"ROLE_ID\": `${ROLE_ID}`,\n    \"SLEEP_TIME\": `${SLEEP_TIME}`,\n    \"MIN_INVOICE_AMOUNT_THRESHOLD\": MIN_INVOICE_AMOUNT_THRESHOLD\n}\n\nglobal.set(\"ENV_VARIABLES\", ENV_VARIABLES);\n\n// msg.payload = `${XLSX_FILE_PATH}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 80,
        "wires": [
            [
                "b69212ec60a03b7c"
            ]
        ]
    },
    {
        "id": "c3721e6b65f3dd9c",
        "type": "switch",
        "z": "ced2a26ef4f97d80",
        "name": "",
        "property": "a",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 1120,
        "wires": [
            [
                "7ccce1a0d94ef454"
            ],
            [
                "689633e29f46fe1c"
            ]
        ]
    },
    {
        "id": "e2da19067a74849a",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "Creating  an Object which contains all info required in the flow",
        "func": "const env_var = global.get('ENV_VARIABLES');\nconst flow_var = flow.get('FLOW_VARIABLES');\nmsg.a = true;\nconst document = msg.payload;\nconsole.log(document);\n\nmsg.obj = {\n    pan: document[\"Business Partner PAN\"],\n    gst: document[\"Business Partner GST\"],\n    mobileNo: document[\"Business Partner Phone\"],\n    email: document[\"Business Partner Email\"],\n    bankIdentifierByParent: document[\"Bank CRN\"],\n    bankAccountNumber: document[\"Loan Repayment Account Number\"],\n    bankIFSC: document[\"Loan Repayment Account IFSC\"],\n    bankName: document[\"Loan Repayment Account Name\"],\n    approvedLimit: document[\"Approved Limit\"],\n    bankProvidedLoanCodes: document[\"Loan Account Number\"],\n    businessPartnerId: \"\",\n    token: \"\",\n    businessType: \"\",\n    bnpl_preference: document[\"Create BNPL Preference\"].toUpperCase()\n}\nconsole.log(\"ROIIIIIIIII\", document[\"Rate Of Interest\"]);\nif (document[\"Rate Of Interest\"] !== undefined){\n    msg.obj[\"rateOfInterest\"] = document[\"Rate Of Interest\"]; \n}\n\nif (document[\"Business Partner PAN\"] === undefined || document[\"Business Partner GST\"] === undefined || document[\"Bank CRN\"] === undefined || document[\"Loan Repayment Account Number\"] === undefined\n    || document[\"Loan Repayment Account IFSC\"] === undefined || document[\"Loan Repayment Account Name\"] === undefined || document[\"Approved Limit\"] === undefined\n   )\n{\n    msg.a = false;\n}\n\n\nmsg.result = {\n    \"Business Partner ID\" : \"\",\n    \"User ID\": \"\",\n    \"Role User Mapping\": \"\",\n    \"Business Partner Sales Summary for current month\": \"\",\n    \"Business-Relationship with Bank\": \"\",\n    \"Business-Relationship with Enterprise\": \"\",\n    \"Create Loan Term\": \"\",\n    \"Update Loan Term\": \"\",\n    \"Fetch Tenor\": \"\",\n    \"Create BNPL Preference\": \"\"\n}\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow_var.token}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\nmsg.url = env_var.GET_BP + \"/\" + msg.obj.gst;\nmsg.method = 'get';\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1120,
        "wires": [
            [
                "c3721e6b65f3dd9c"
            ]
        ]
    },
    {
        "id": "559ed709afd5f1ad",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "name": "debug 386",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 60,
        "wires": []
    },
    {
        "id": "c76119bcf864baea",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "Get userId from businessPartnerId",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\n\nconst data = msg.payload;\nmsg.userId = data[0].userId;\nmsg.result[\"User ID\"] = `${msg.userId}`\n\nmsg.obj[\"businessType\"] = msg.payload.relationType?.split(\"-\")[0];\n\nif (msg.obj.businessType === \"DISTRIBUTOR\") {\n    msg.product_type_id = msg.bankApplicationConfigId;\n}\nelse {\n    msg.product_type_id = msg.bankApplicationConfigId;\n}\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${flow_var.token}`\n}\n\nmsg.method = 'get';\nmsg.url = `${env_var.BP_USER}/${msg.obj.businessPartnerId}`\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1240,
        "wires": [
            [
                "ed6a341b8c1b5db3"
            ]
        ]
    },
    {
        "id": "2e0751502448ec7e",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "getting relationship type",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 910,
        "y": 1180,
        "wires": [
            [
                "c76119bcf864baea"
            ]
        ]
    },
    {
        "id": "63f280a67f79ac66",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "g": "28df55e7a361e197",
        "name": "Setting payload for roleUserMapping",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\n\nconst userId = msg.userId;\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow_var.token}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\n\n\n\n\nmsg.payload = {\n    userId : userId,\n    roleId: msg.roleId,\n    businessPartnerId : msg.obj.businessPartnerId,\n}\nmsg.url = env_var.ROLE_USER_MAPPING;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1760,
        "wires": [
            [
                "ed5825176bd9fc8e",
                "1c2f0496c7bc6466",
                "4b1f69abb5c8422b"
            ]
        ]
    },
    {
        "id": "ed5825176bd9fc8e",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "28df55e7a361e197",
        "name": "Payload for roleUserMapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 1740,
        "wires": []
    },
    {
        "id": "1c2f0496c7bc6466",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "g": "28df55e7a361e197",
        "name": "Role User Mapping",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 1780,
        "wires": [
            [
                "3789fb2fd858e425",
                "bc1963a56b571703"
            ]
        ]
    },
    {
        "id": "3789fb2fd858e425",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "28df55e7a361e197",
        "name": "Result of roleUserMapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 1780,
        "wires": []
    },
    {
        "id": "274950bd79f3474f",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "g": "28df55e7a361e197",
        "name": "Check if RoleUserMapping exists",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\nif(msg.statusCode === 200){\n    const data = msg.payload;\n    msg.userId = data[0].userId;\n    msg.result[\"User ID\"] = `${msg.userId}`;\n\n    msg.headers = {\n        \"Authorization\": `Bearer ${flow_var.token}`,\n        \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n    }\n\n    msg.url = `${env_var.CHECK_ROLE_USER_MAPPING}/${msg.obj.businessPartnerId}`;\n    msg.method = 'get';\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1600,
        "wires": [
            [
                "e890773239f9acac"
            ]
        ]
    },
    {
        "id": "e890773239f9acac",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "g": "28df55e7a361e197",
        "name": "Check Role User Mapping",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 830,
        "y": 1600,
        "wires": [
            [
                "d6a0411041bdb589",
                "4cb69be7e4f48182"
            ]
        ]
    },
    {
        "id": "d6a0411041bdb589",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "28df55e7a361e197",
        "name": "Checking RoleUser Mapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1600,
        "wires": []
    },
    {
        "id": "4cb69be7e4f48182",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "g": "28df55e7a361e197",
        "name": "Result of Check Role User Mapping",
        "func": "const mappings = msg.payload;\n\nvar flag = 0;\nfor (const mapping of mappings) {\n    if(mapping.userId == msg.userId && mapping.roleId == msg.roleId){\n        flag = 1;\n        break;\n    }\n};\n\nif(flag === 1){\n    msg.userExists = \"true\";\n    msg.result[\"Role User Mapping\"] = `Exists`;\n}\nelse{\n    msg.userExists = \"false\";\n}\nmsg.userExists = \"false\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1680,
        "wires": [
            [
                "3535ab03aafd4358",
                "8e38a2e4c49588cc"
            ]
        ]
    },
    {
        "id": "3535ab03aafd4358",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "28df55e7a361e197",
        "name": "Check Role User Mapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "userExists",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 1680,
        "wires": []
    },
    {
        "id": "19b29090b9a70c40",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "g": "93fe5307bc4762c3",
        "name": "Setting Payload for businessPartnerBankRelationship",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow_var.token}`\n}\n\nmsg.result[\"Business-Relationship with Bank\"] = \"No\"\n\nmsg.payload = {\n    businessId: msg.obj.businessPartnerId,\n    parentBusinessId: msg.BANK_ID,\n    identifierByParent: msg.obj.bankIdentifierByParent,\n    bankAccountNumber: msg.obj.bankAccountNumber,\n    bankIFSC: msg.obj.bankIFSC,\n    bankName: msg.obj.bankName,\n    relationType: `${msg.obj.businessType}-BANK`,\n    // relationType: `DISTRIBUTOR-BANK`,\n}\nmsg.url = env_var.BP_BANK_RELATIONSHIP;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 2040,
        "wires": [
            [
                "71f26c0e1f8fad42",
                "cef5adcc7e91d25c"
            ]
        ]
    },
    {
        "id": "71f26c0e1f8fad42",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "93fe5307bc4762c3",
        "name": "Payload for businessPartnerBankRelationship",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 2020,
        "wires": []
    },
    {
        "id": "cef5adcc7e91d25c",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "g": "93fe5307bc4762c3",
        "name": "Business Partner Bank Relationship",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 900,
        "y": 2060,
        "wires": [
            [
                "f0141033b31aea8c",
                "63747b6725757db2"
            ]
        ]
    },
    {
        "id": "bc1963a56b571703",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "g": "93fe5307bc4762c3",
        "name": "Checking if businessPartnerBankRelationship exists",
        "func": "const flow_var = flow.get(\"FLOW_VARIABLES\")\nconst env_var = global.get(\"ENV_VARIABLES\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${flow_var.token}`\n}\nmsg.url = `${env_var.CHECK_BP_RELATIONSHIP}/getByIdentifierByParent/${msg.obj.bankIdentifierByParent}`;\nmsg.method = 'get'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1960,
        "wires": [
            [
                "a140de239e0421a1"
            ]
        ]
    },
    {
        "id": "a140de239e0421a1",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "g": "93fe5307bc4762c3",
        "name": "Get Identifier By Parent - Bank",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 910,
        "y": 1960,
        "wires": [
            [
                "d2113b7ce3c1dadf",
                "d3e2793ff1e8a8be"
            ]
        ]
    },
    {
        "id": "f0141033b31aea8c",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "93fe5307bc4762c3",
        "name": "Business Partner Bank Relationship",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 2060,
        "wires": []
    },
    {
        "id": "d2113b7ce3c1dadf",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "93fe5307bc4762c3",
        "name": "Checking if businessPartnerBankRelationship exists",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 1960,
        "wires": []
    },
    {
        "id": "be07fd207670da4a",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "Setting Payload for creating loanTerm",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    actyventityid : msg.actyvEntityId\n}\n\nmsg.payload = {\n    bankID: msg.BANK_ID,\n    borrowerID: msg.obj.businessPartnerId,\n    enterpriseID: msg.ENTERPRISE_ID,\n    // productType: msg.bankApplicationConfigId\n    bankApplicationConfigID: msg.bankApplicationConfigId\n    // rateOfInterest: Number(msg.obj.rateOfInterest)\n}\nif(msg.obj[\"rateOfInterest\"]!==\"undefined\"){\n    msg.payload[\"rateOfInterest\"] = msg.obj.rateOfInterest;\n}\nmsg.url = env_var.LOAN_TERM;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 2320,
        "wires": [
            [
                "bfbeeaf036fc2740",
                "e366cbcd386837e1",
                "6734c4e3e7d72467"
            ]
        ]
    },
    {
        "id": "63818f2da050c30e",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "Setting Payload for udpating loanTerm",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    actyventityid: msg.actyvEntityId\n}\n\nconst data = msg.payload;\nmsg.loanTermId = data.id;\n\nif (msg.statusCode === 201 && msg.result[\"Create Loan Term\"] === \"\"){\n    msg.result[\"Create Loan Term\"] = `Loan Term Created: ${msg.loanTermId}`;\n}\n\nmsg.payload = {\n    loanTermsID : msg.loanTermId,\n    approvedLimit: msg.obj.approvedLimit,\n    validTill: \"20/11/2025\",\n    loanGrantStatus: \"APPROVED\",\n    crnNumber: msg.obj.bankIdentifierByParent,\n    awaitingBalanceRefresh: false,\n    businessType: msg.obj.businessType,\n    bankProvidedLoanCodes: msg.obj.bankProvidedLoanCodes\n}\nmsg.url = env_var.LOAN_TERM + \"/service/update\";\nmsg.method = 'patch';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 2420,
        "wires": [
            [
                "41316525dcc1cf41",
                "3316790d275b93bf"
            ]
        ]
    },
    {
        "id": "bfbeeaf036fc2740",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "Payload for creating loanTerm",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 2300,
        "wires": []
    },
    {
        "id": "41316525dcc1cf41",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "Payload for updating loanTerm",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 2400,
        "wires": []
    },
    {
        "id": "e366cbcd386837e1",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "Create Loan Term",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 850,
        "y": 2340,
        "wires": [
            [
                "63818f2da050c30e",
                "cd4c10d01f090c6f"
            ]
        ]
    },
    {
        "id": "3316790d275b93bf",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "Update Loan Term",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1270,
        "y": 2440,
        "wires": [
            [
                "2f3757e690577221",
                "54ca507a693f9f8e"
            ]
        ]
    },
    {
        "id": "cd4c10d01f090c6f",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "Create Loan Term",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 2340,
        "wires": []
    },
    {
        "id": "2f3757e690577221",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "Update Loan Term",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 2440,
        "wires": []
    },
    {
        "id": "63747b6725757db2",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "Checking If loanTerm exists",
        "func": "const flow_var = flow.get(\"FLOW_VARIABLES\")\nconst env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nif (msg.statusCode === 200) {\n    if (msg.result[\"Business-Relationship with Bank\"] === \"No\") {\n        msg.result[\"Business-Relationship with Bank\"] = `Created ${msg.payload._id}`;\n    }\n    else {\n        msg.result[\"Business-Relationship with Bank\"] = `Exists`;\n    }\n}\nelse {\n    msg.result[\"Business-Relationship with Bank\"] = `${msg.statusCode} Error`\n}\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${actyvToken}`\n}\nmsg.url = `${env_var.LOAN_TERM}/service/fetchByBankID`;\nmsg.payload = {\"borrowerID\" : msg.obj.businessPartnerId,\n            \"enterpriseID\": msg.ENTERPRISE_ID,\n            \"bankID\": msg.BANK_ID};\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 2220,
        "wires": [
            [
                "36da4c1579934909"
            ]
        ]
    },
    {
        "id": "36da4c1579934909",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "Fetch Loan Term ",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 830,
        "y": 2220,
        "wires": [
            [
                "bb04036c4186958e",
                "556f6a9a6eac7ea2"
            ]
        ]
    },
    {
        "id": "bb04036c4186958e",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "Check If Loan Term Exists",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 2220,
        "wires": []
    },
    {
        "id": "2015a2f8936088d2",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "setting up payload for updating loadn term if it already exists",
        "func": "msg.payload = msg.payload[0];\nif(msg.statusCode === 201){\n    msg.result[\"Create Loan Term\"] = `Exists: ${msg.payload.id}`;\n}\nelse{\n    msg.result[\"Create Loan Term\"] = `${msg.statusCode} Error`;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 2420,
        "wires": [
            [
                "63818f2da050c30e"
            ]
        ]
    },
    {
        "id": "556f6a9a6eac7ea2",
        "type": "switch",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 2360,
        "wires": [
            [
                "be07fd207670da4a"
            ],
            [
                "2015a2f8936088d2"
            ]
        ]
    },
    {
        "id": "6734c4e3e7d72467",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "Paylaod for creating loan_term",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 2360,
        "wires": []
    },
    {
        "id": "153face4af99e128",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "93fb9229bcd9bcd6",
        "name": "Create BNPL Preference",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 2680,
        "wires": []
    },
    {
        "id": "72c1569f3eeefc5c",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "93fb9229bcd9bcd6",
        "name": "Payload for creating BNPL preference",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 2640,
        "wires": []
    },
    {
        "id": "737828aa9a9921a3",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "g": "93fb9229bcd9bcd6",
        "name": "Create BNPL Preference",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1430,
        "y": 2680,
        "wires": [
            [
                "153face4af99e128",
                "68f0c291d32a5077"
            ]
        ]
    },
    {
        "id": "00baff346ee0b259",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "g": "93fb9229bcd9bcd6",
        "name": "Setting Payload for creating BNPL preference",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"businesspartnerid\": flow.get(\"actyv_bp_id\"),\n    \"bankid\": msg.BANK_ID,\n    \"actyventityid\": msg.actyvEntityId\n}\n\nmsg.DEFAULT_SPREAD_ID = msg.payload[0].id;\n\nif (msg.statusCode === 201){\n    msg.result[\"Fetch Tenor\"] = `Tenor Fetched ${msg.DEFAULT_SPREAD_ID}`\n}\nelse{\n    msg.result[\"Fetch Tenor\"] = `${msg.statusCode} Error`\n}\n\nmsg.payload = {\n    borrowerID: msg.obj.businessPartnerId,\n    bankApplicationConfigID: msg.product_type_id,\n    defaultBankID: msg.BANK_ID,\n    defaultSpreadID: msg.DEFAULT_SPREAD_ID,\n    minInvoiceAmountThreshold: env_var.MIN_INVOICE_AMOUNT_THRESHOLD\n}\nmsg.url = env_var.BNPL_PREFERENCE;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 2680,
        "wires": [
            [
                "737828aa9a9921a3",
                "72c1569f3eeefc5c",
                "71384a68d076afcc"
            ]
        ]
    },
    {
        "id": "8cf22f3bbd1217cf",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "g": "93fb9229bcd9bcd6",
        "name": "Payload For fetching TenorAndRateSpread",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nconst sleep = async (milliseconds) => {\n  await new Promise(resolve => {\n    return setTimeout(resolve, milliseconds)\n  });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n  \"Authorization\": `Bearer ${actyvToken}`,\n  \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n  actyventityid: msg.actyEntityId\n}\nif (msg.statusCode === 200) {\n  msg.result[\"Update Loan Term\"] = `Updated: ${msg.loanTermId}`;\n}\nelse {\n  msg.result[\"Update Loan Term\"] = `${msg.statusCode} Error`;\n}\n\nmsg.payload = {\n  \"bankID\": msg.BANK_ID,\n  \"loanID\": msg.loanTermId,\n}\n\nmsg.url = env_var.TENOR_AND_RATE_SPREAD + \"/fetch\";\nmsg.method = 'POST';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 2560,
        "wires": [
            [
                "035172bd95bd9f1c"
            ]
        ]
    },
    {
        "id": "035172bd95bd9f1c",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "g": "93fb9229bcd9bcd6",
        "name": "Fetching TenorAndRateSpread",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1410,
        "y": 2560,
        "wires": [
            [
                "00baff346ee0b259",
                "4893b32644bc4cdd"
            ]
        ]
    },
    {
        "id": "4893b32644bc4cdd",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "93fb9229bcd9bcd6",
        "name": "fetching tenor and rate spread",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 2540,
        "wires": []
    },
    {
        "id": "35b2a98fc7a47f67",
        "type": "inject",
        "z": "ced2a26ef4f97d80",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 20,
        "wires": [
            [
                "628baece23ce92b3"
            ]
        ]
    },
    {
        "id": "b69212ec60a03b7c",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "AuthenticateBankReq",
        "func": "\nconst BANK_ADMIN_EMAIL = env.get(\"SGFL_BANK_ADMIN_EMAIL\");\nconst PASSWORD =  env.get(\"PASSWORD\");\nconst ADMIN_URL = env.get('ADMIN_URL');\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \"password\": PASSWORD,\n    \"email\": BANK_ADMIN_EMAIL\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 140,
        "wires": [
            [
                "1c37389ec219f08a"
            ]
        ]
    },
    {
        "id": "1c37389ec219f08a",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "AuthenticateBankReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 720,
        "y": 140,
        "wires": [
            [
                "a54cbe35dc37e0d5"
            ]
        ]
    },
    {
        "id": "a54cbe35dc37e0d5",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "saveBankToken",
        "func": "const env_var = global.get(\"ENV_VARIABLES\");\n\nconst FLOW_VARIABLES = {\n    token: msg.payload.idToken\n}\nflow.set(\"FLOW_VARIABLES\", FLOW_VARIABLES);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 140,
        "wires": [
            [
                "91c00a09125d94c8"
            ]
        ]
    },
    {
        "id": "ead1b5f39fc74195",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "Setting Payload For Fetching INITIATED Status Files",
        "func": "// const enterpriseToken = flow.get(\"enterpriseToken\")\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/fileInfoBySeedingStatus/INITIATED`;\nconst flow_var = flow.get('FLOW_VARIABLES');\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"actyventityid\": `${msg.actyvEntityId}`\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'GET';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 580,
        "wires": [
            [
                "2eb7b84ec8ed64ff"
            ]
        ]
    },
    {
        "id": "2eb7b84ec8ed64ff",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "INITIATED Files",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 840,
        "y": 580,
        "wires": [
            [
                "d0a309466fec4ac9",
                "cb0e4eb3422d64fa"
            ]
        ]
    },
    {
        "id": "cb0e4eb3422d64fa",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "Looping and Segregating Files",
        "func": "const files = msg.payload.fileInfo.filter((file) => file.seedingType == \"BNPL_SEEDING\");\n\n\nfor (const file of files) {\n    if (file.seedingType == \"BNPL_SEEDING\" && file.fileId ===\"9d020bd2-7d17-4da8-b403-e66727d2c495-BNPL_Seeding_File\") {\n        node.send({\n            ...file,\n            actyvEntityId: msg.actyvEntityId,\n            payload: file.fileId,\n            seedingType: file.seedingType\n        })\n    }\n}\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 640,
        "wires": [
            [
                "8d31edb69a04c80d"
            ]
        ]
    },
    {
        "id": "6c4bae7d5ec3d83c",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\n\n// msg.fileId = msg.payload\nmsg.method = \"GET\"\nmsg.headers = {\n    fileType: \"xlsx\"\n}\nmsg.url = `${GO_URL}/file/read/${msg.fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 940,
        "wires": [
            [
                "fc9c0d8ceb1002cc"
            ]
        ]
    },
    {
        "id": "fc9c0d8ceb1002cc",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "readFile",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 840,
        "y": 940,
        "wires": [
            [
                "369e7601dc76350b"
            ]
        ]
    },
    {
        "id": "369e7601dc76350b",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "read xls",
        "func": "let data = xlsx.read(msg.payload, { type: \"buffer\" })\nconst wsname = data.SheetNames[0];\nconsole.log({wsname})\nconst ws = data.Sheets[wsname];\nconsole.log({ws})\nconst payload = xlsx.utils.sheet_to_json(ws);\nmsg.seedingData = payload\nmsg.completedSeeding = [],\nmsg.failedSeeding = []\nmsg.anchored = false;\nif(msg.enterpriseId){\n    msg.anchored = true\n}\n\nmsg.numOfRows = payload.length\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "xlsx",
                "module": "xlsx"
            }
        ],
        "x": 1020,
        "y": 940,
        "wires": [
            [
                "c2c9a4824a497137",
                "8909068d758dce17"
            ]
        ]
    },
    {
        "id": "fc831be01cd64c5b",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "name": "debug 394",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 60,
        "wires": []
    },
    {
        "id": "54ca507a693f9f8e",
        "type": "switch",
        "z": "ced2a26ef4f97d80",
        "name": "",
        "property": "obj[\"bnpl_preference\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Y",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "N",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 2580,
        "wires": [
            [
                "8cf22f3bbd1217cf"
            ],
            [
                "68f0c291d32a5077"
            ]
        ]
    },
    {
        "id": "076b7da88ba72242",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "saveactyvId",
        "func": "flow.set(\"actyv_id\", msg.payload.actyvEntityId);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "d52974e3ad8c1d21",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "Getting Actyv Entity User",
        "func": "const flow_var = flow.get('FLOW_VARIABLES');\nconst EMAIL = \"anand.rastogi@actyv.com\";\nconst PASSWORD =  \"890ioP@12\";\n// const EMAIL = env.get('EMAIL')\n// const PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow_var.token}`,\n}\n\nmsg.url = `${ADMIN_URL}/api/user/getCurrentUser?url=https://actyv-platform.uat.actyv.com`;\nmsg.method = \"GET\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 260,
        "wires": [
            [
                "7acb54f0221f7bb3"
            ]
        ]
    },
    {
        "id": "7acb54f0221f7bb3",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "Getting Actyv_id",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1320,
        "y": 260,
        "wires": [
            [
                "076b7da88ba72242"
            ]
        ]
    },
    {
        "id": "d0a309466fec4ac9",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "name": "debug 396",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 580,
        "wires": []
    },
    {
        "id": "68f0c291d32a5077",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "name": "debug 397",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 2780,
        "wires": []
    },
    {
        "id": "7a2999cc4330665a",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "name": "debug 408",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 1000,
        "wires": []
    },
    {
        "id": "0fbcc8a22c83e677",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "Changing seeding Status",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 890,
        "y": 1040,
        "wires": [
            [
                "b49eb04917784a6f"
            ]
        ]
    },
    {
        "id": "91c00a09125d94c8",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "AuthenticateActyvBPUserReq",
        "func": "\nconst EMAIL = env.get(\"SGFL_EXXARO_BP_EMAIL\");\nconst PASSWORD =  env.get(\"PASSWORD\");\n// const PASSWORD =  //\"User@123\"\nconst ADMIN_URL = env.get('ADMIN_URL');\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \"password\": PASSWORD,\n    \"email\": EMAIL\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 200,
        "wires": [
            [
                "7a31c6b9438ed8ef"
            ]
        ]
    },
    {
        "id": "7a31c6b9438ed8ef",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "AuthenticateActyvBPUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 200,
        "wires": [
            [
                "75dff907d3755be5"
            ]
        ]
    },
    {
        "id": "75dff907d3755be5",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "saveActyvBPUserToken",
        "func": "const bp_token = msg.payload.idToken\nflow.set(\"bp_token\", bp_token);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 200,
        "wires": [
            [
                "e66148bc41d5fcc6",
                "c95711b327c0523e"
            ]
        ]
    },
    {
        "id": "2e7a206a0491e0c6",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "save actyv_bp_id",
        "func": "flow.set(\"actyv_bp_id\", msg.payload.businessPartnerIds[0]);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 320,
        "wires": [
            [
                "4da2fb7ad9a03110"
            ]
        ]
    },
    {
        "id": "8f57567cdf053a2f",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "Getting Actyv BPUser",
        "func": "const EMAIL = env.get(\"SGFL_EXXARO_BP_EMAIL\");\nconst PASSWORD = env.get(\"PASSWORD\");\nconst ADMIN_URL = env.get('ADMIN_URL');\nconst ACTYV_BP_URL = env.get('ACTYV_BP_URL')\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow.get(\"bp_token\")}`,\n}\n\nmsg.url = `${ADMIN_URL}/api/user/getCurrentUser?url=${ACTYV_BP_URL}`;\nmsg.method = \"GET\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 320,
        "wires": [
            [
                "56195e8afbaf671c"
            ]
        ]
    },
    {
        "id": "56195e8afbaf671c",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "Getting Actyv_id",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 660,
        "y": 320,
        "wires": [
            [
                "2e7a206a0491e0c6"
            ]
        ]
    },
    {
        "id": "c95711b327c0523e",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "getSgflBankReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_KEY = env.get(\"SGFL_BANK_KEY\")\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank/key/${BANK_KEY}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 260,
        "wires": [
            [
                "9cdeccc995eb9630"
            ]
        ]
    },
    {
        "id": "9cdeccc995eb9630",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "getAxisBankReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 630,
        "y": 260,
        "wires": [
            [
                "45df28e0674b2fe9"
            ]
        ]
    },
    {
        "id": "45df28e0674b2fe9",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "Save Axis Bank ID",
        "func": "const bankId = msg.payload?._id\n\nmsg.bankId = bankId\nflow.set(\"actyv_id\", bankId);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 260,
        "wires": [
            [
                "8f57567cdf053a2f"
            ]
        ]
    },
    {
        "id": "8d31edb69a04c80d",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "get bankApplicationConfig by bank",
        "func": "const enterpriseToken = flow.get(\"enterpriseToken\")\nconst bankId = msg.bankId\n\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/bank-application-config/bank/${bankId}`;\n\n\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'GET';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 740,
        "wires": [
            [
                "7dc907d5b63bb5b6"
            ]
        ]
    },
    {
        "id": "7dc907d5b63bb5b6",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "get bankApplicationConfig by bank",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 800,
        "y": 740,
        "wires": [
            [
                "7dc37572b6e436d4",
                "8c8c51ac618e7b73"
            ]
        ]
    },
    {
        "id": "7dc37572b6e436d4",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "name": "get bankApplicationConfig by bank",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 740,
        "wires": []
    },
    {
        "id": "8c8c51ac618e7b73",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "filter bankApplnConfig by enterpriseId",
        "func": "const {enterpriseId} = msg\nlet bankApllicationConfigs = msg.payload.filter((config)=>config.allowedEnterprises[0] == enterpriseId)\nmsg.payload = bankApllicationConfigs\nmsg.bankApplicationConfigId = bankApllicationConfigs[0]?.id || \"BNPL\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 840,
        "wires": [
            [
                "32fb25ad0371477a"
            ]
        ]
    },
    {
        "id": "c2c9a4824a497137",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "name": "debug 424",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 940,
        "wires": []
    },
    {
        "id": "e66148bc41d5fcc6",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "name": "debug 410",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 200,
        "wires": []
    },
    {
        "id": "4da2fb7ad9a03110",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "AuthenticateActyvEntity",
        "func": "\nconst EMAIL = env.get('ACTYV_ADMIN_EMAIL')\nconst PASSWORD = env.get('DEFAULT_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 380,
        "wires": [
            [
                "ee530c286dfcca2e"
            ]
        ]
    },
    {
        "id": "ee530c286dfcca2e",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "AuthenticateActyvEntity",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 750,
        "y": 380,
        "wires": [
            [
                "1bc0ffcd39360548"
            ]
        ]
    },
    {
        "id": "1bc0ffcd39360548",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\n// console.log({bankToken: msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 380,
        "wires": [
            [
                "e354b69d2df84d20"
            ]
        ]
    },
    {
        "id": "e354b69d2df84d20",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "Getting Actyv User",
        "func": "const EMAIL = env.get(\"SGFL_EXXARO_BP_EMAIL\");\nconst PASSWORD = env.get(\"PASSWORD\");\nconst ADMIN_URL = env.get('ADMIN_URL');\nconst ACTYV_ENTITY_URL = env.get('ACTYV_ENTITY_URL')\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow.get(\"actyvToken\")}`,\n}\n\nmsg.url = `${ADMIN_URL}/api/user/getCurrentUser?url=${ACTYV_ENTITY_URL}`;\nmsg.method = \"GET\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 460,
        "wires": [
            [
                "1a906c9c55a9665f"
            ]
        ]
    },
    {
        "id": "1a906c9c55a9665f",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "Getting Actyv_id",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 680,
        "y": 460,
        "wires": [
            [
                "440409b68c44efdd"
            ]
        ]
    },
    {
        "id": "440409b68c44efdd",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "save actyv_entity_id",
        "func": "flow.set(\"actyv_bp_id\", msg.payload.actyvEntityId);\nmsg.actyvEntityId = msg.payload.actyvEntityId\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 460,
        "wires": [
            [
                "ead1b5f39fc74195"
            ]
        ]
    },
    {
        "id": "71384a68d076afcc",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "name": "debug 436",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 2780,
        "wires": []
    },
    {
        "id": "4b1f69abb5c8422b",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "name": "debug 437",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 1880,
        "wires": []
    },
    {
        "id": "32fb25ad0371477a",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "Get role id",
        "func": "\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n   \n}\n\nmsg.method = 'POST';\nmsg.url = `${env.get(\"ADMIN_URL\")}/api/role/query`\nmsg.payload = {\n    \"query\": {\n        \"name\": \"paylater_bp_admin\"\n    }\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 900,
        "wires": [
            [
                "e4cf3ccf8bcff7bd"
            ]
        ]
    },
    {
        "id": "e4cf3ccf8bcff7bd",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "Get role id",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 900,
        "wires": [
            [
                "5ec9fa47879b4ae3",
                "ac1351cac65782cb"
            ]
        ]
    },
    {
        "id": "5ec9fa47879b4ae3",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "set roleId",
        "func": "msg.roleId = msg.payload[0][\"_id\"]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 900,
        "wires": [
            [
                "6c4bae7d5ec3d83c"
            ]
        ]
    },
    {
        "id": "ac1351cac65782cb",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "name": "debug 438",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 840,
        "wires": []
    },
    {
        "id": "16328c7aae8b2c65",
        "type": "inject",
        "z": "46bc40aaa70da7e7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 100,
        "wires": [
            [
                "543805b1e1f44438"
            ]
        ]
    },
    {
        "id": "543805b1e1f44438",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Setting Global Variables",
        "func": "const ENVIRONMENT = env.get(\"ENVIRONMENT\");\nconst CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\");\n// const ROLE_ID = env.get(\"ROLE_ID\");\nconst ROLE_ID = \"638392e70882f1495a970cfb\";\nconst SLEEP_TIME = 500;\nconst MIN_INVOICE_AMOUNT_THRESHOLD = 1000;\n\nconst GO_SERVICE_URL = `https://actyv-platform-go-service.${ENVIRONMENT}.actyv.com/api`;\nconst PAYLATER_SERVICE_URL = `https://actyv-platform-paylater-service-v1.${ENVIRONMENT}.actyv.com/v1`;\nconst ADMIN_SERVICE_URL = `https://actyv-platform-admin-service.${ENVIRONMENT}.actyv.com/api`;\n\nconst ENV_VARIABLES = {\n    \"GO_SERVICE_URL\": GO_SERVICE_URL,\n    \"PAYLATER_SERVICE_URL\": PAYLATER_SERVICE_URL,\n    \"ADMIN_SERVICE_URL\": ADMIN_SERVICE_URL,\n    \"GET_BP\": `${GO_SERVICE_URL}/business-partner/service`,\n    \"BP_USER\": `${ADMIN_SERVICE_URL}/business-partner-user/get/all`,\n    \"USER\": `${ADMIN_SERVICE_URL}/user`,\n    \"ROLE_USER_MAPPING\": `${ADMIN_SERVICE_URL}/role-user-mapping`,\n    \"BP_SALES_SUMMARY\": `${GO_SERVICE_URL}/business-partner-sales-summary`,\n    \"BP_BANK_RELATIONSHIP\": `${GO_SERVICE_URL}/business-relationship`,\n    \"LOAN_TERM\": `${PAYLATER_SERVICE_URL}/loan-terms`,\n    \"BNPL_PREFERENCE\": `${PAYLATER_SERVICE_URL}/bnpl-preference`,\n    \"AUTH_URL\": `${ADMIN_SERVICE_URL}/user/authenticateUser`,\n    \"CHECK_ROLE_USER_MAPPING\": `${ADMIN_SERVICE_URL}/role-user-mapping/byBusinessPartnerId`,\n    \"GET_SALES_SUMMARY\": `${GO_SERVICE_URL}/business-partner-sales-summary`,\n    \"CHECK_BP_RELATIONSHIP\": `${GO_SERVICE_URL}/business-relationship/service`,\n    \"TENOR_AND_RATE_SPREAD\": `${PAYLATER_SERVICE_URL}/tenor-and-rate-spread`,\n    \"CONFIG_KEY\": `${CONFIG_KEY}`,\n    \"ROLE_ID\": `${ROLE_ID}`,\n    \"SLEEP_TIME\": `${SLEEP_TIME}`,\n    \"MIN_INVOICE_AMOUNT_THRESHOLD\": MIN_INVOICE_AMOUNT_THRESHOLD\n}\n\nglobal.set(\"ENV_VARIABLES\", ENV_VARIABLES);\n\n// msg.payload = `${XLSX_FILE_PATH}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 160,
        "wires": [
            [
                "8ed4ebed0f9c2b2d"
            ]
        ]
    },
    {
        "id": "8ed4ebed0f9c2b2d",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "AuthenticateBankReq",
        "func": "\nconst BANK_ADMIN_EMAIL = env.get(\"SGFL_BANK_ADMIN_EMAIL\");\nconst PASSWORD =  env.get(\"PASSWORD\");\nconst ADMIN_URL = env.get('ADMIN_URL');\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \"password\": PASSWORD,\n    \"email\": BANK_ADMIN_EMAIL\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 220,
        "wires": [
            [
                "905888216dec3cb5"
            ]
        ]
    },
    {
        "id": "905888216dec3cb5",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "AuthenticateBankReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 600,
        "y": 220,
        "wires": [
            [
                "638736fb6817861e"
            ]
        ]
    },
    {
        "id": "638736fb6817861e",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "saveBankToken",
        "func": "const env_var = global.get(\"ENV_VARIABLES\");\nmsg.bankToken = msg.payload.idToken\nconst FLOW_VARIABLES = {\n    token: msg.payload.idToken\n}\nflow.set(\"FLOW_VARIABLES\", FLOW_VARIABLES);\nflow.set(\"bankToken\", msg.payload.idToken)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 220,
        "wires": [
            [
                "d729f5a5f568aa04"
            ]
        ]
    },
    {
        "id": "d729f5a5f568aa04",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "AuthenticateActyvBPUserReq",
        "func": "\nconst EMAIL = env.get(\"SGFL_EXXARO_BP_EMAIL\");\n// const PASSWORD =  env.get(\"PASSWORD\");\nconst PASSWORD =  \"User@123\"\nconst ADMIN_URL = env.get('ADMIN_URL');\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \"password\": PASSWORD,\n    \"email\": EMAIL\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 280,
        "wires": [
            [
                "3eead1e1a7017a47"
            ]
        ]
    },
    {
        "id": "3eead1e1a7017a47",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "AuthenticateActyvBPUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 280,
        "wires": [
            [
                "14c49298ad69dc43"
            ]
        ]
    },
    {
        "id": "14c49298ad69dc43",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "saveActyvBPUserToken",
        "func": "const bp_token = msg.payload.idToken\nflow.set(\"bp_token\", bp_token);\nmsg.bpToken = msg.payload.idToken\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 280,
        "wires": [
            [
                "c3b3fbedf04d9fda",
                "deee16f613d452d6"
            ]
        ]
    },
    {
        "id": "c3b3fbedf04d9fda",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "debug 440",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 280,
        "wires": []
    },
    {
        "id": "deee16f613d452d6",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "getSgflBankReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_KEY = env.get(\"SGFL_BANK_KEY\")\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank/key/${BANK_KEY}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 340,
        "wires": [
            [
                "6e0c334239549676"
            ]
        ]
    },
    {
        "id": "6e0c334239549676",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "getAxisBankReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 510,
        "y": 340,
        "wires": [
            [
                "44911ba90652f7f4"
            ]
        ]
    },
    {
        "id": "44911ba90652f7f4",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Save Axis Bank ID",
        "func": "const bankId = msg.payload?._id\n\nmsg.BANKID = bankId\nflow.set(\"actyv_id\", bankId);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 340,
        "wires": [
            [
                "61eaaff3151c3a68"
            ]
        ]
    },
    {
        "id": "61eaaff3151c3a68",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Getting Actyv BPUser",
        "func": "const EMAIL = env.get(\"SGFL_EXXARO_BP_EMAIL\");\nconst PASSWORD = env.get(\"PASSWORD\");\nconst ADMIN_URL = env.get('ADMIN_URL');\nconst ACTYV_BP_URL = env.get('ACTYV_BP_URL')\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow.get(\"bp_token\")}`,\n}\n\nmsg.url = `${ADMIN_URL}/api/user/getCurrentUser?url=${ACTYV_BP_URL}`;\nmsg.method = \"GET\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 400,
        "wires": [
            [
                "f5db831d71a602e2"
            ]
        ]
    },
    {
        "id": "f5db831d71a602e2",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Getting Actyv_id",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 540,
        "y": 400,
        "wires": [
            [
                "3b95ad3268d173bf"
            ]
        ]
    },
    {
        "id": "3b95ad3268d173bf",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "save actyv_bp_id",
        "func": "flow.set(\"actyv_bp_id\", msg.payload.businessPartnerIds[0]);\nmsg.bpID = msg.payload.businessPartnerIds[0]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 400,
        "wires": [
            [
                "809e8cb11ff7dcbc"
            ]
        ]
    },
    {
        "id": "809e8cb11ff7dcbc",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "AuthenticateActyvEntity",
        "func": "\nconst EMAIL = env.get('ACTYV_ADMIN_EMAIL')\nconst PASSWORD = env.get('DEFAULT_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 460,
        "wires": [
            [
                "0378abafcf16d4ce"
            ]
        ]
    },
    {
        "id": "0378abafcf16d4ce",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "AuthenticateActyvEntity",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 630,
        "y": 460,
        "wires": [
            [
                "94f389375ae2063b"
            ]
        ]
    },
    {
        "id": "94f389375ae2063b",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\n// console.log({bankToken: msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 460,
        "wires": [
            [
                "0030ca8d721b5fcf"
            ]
        ]
    },
    {
        "id": "0030ca8d721b5fcf",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Getting Actyv User",
        "func": "const EMAIL = env.get(\"SGFL_EXXARO_BP_EMAIL\");\nconst PASSWORD = env.get(\"PASSWORD\");\nconst ADMIN_URL = env.get('ADMIN_URL');\nconst ACTYV_ENTITY_URL = env.get('ACTYV_ENTITY_URL')\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow.get(\"actyvToken\")}`,\n}\n\nmsg.url = `${ADMIN_URL}/api/user/getCurrentUser?url=${ACTYV_ENTITY_URL}`;\nmsg.method = \"GET\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 540,
        "wires": [
            [
                "f1955a7beaa8d39f"
            ]
        ]
    },
    {
        "id": "f1955a7beaa8d39f",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Getting Actyv_id",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 560,
        "y": 540,
        "wires": [
            [
                "84ada2eff5958aa6"
            ]
        ]
    },
    {
        "id": "84ada2eff5958aa6",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "save actyv_entity_id",
        "func": "flow.set(\"actyv_bp_id\", msg.payload.actyvEntityId);\nmsg.actyvEntityId = msg.payload.actyvEntityId\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 540,
        "wires": [
            [
                "faccf511f2eb5ca3"
            ]
        ]
    },
    {
        "id": "faccf511f2eb5ca3",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Setting Payload For Fetching INITIATED Status Files",
        "func": "// const enterpriseToken = flow.get(\"enterpriseToken\")\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/fileInfoBySeedingStatus/INITIATED`;\nconst flow_var = flow.get('FLOW_VARIABLES');\nconst bankToken = flow.get(\"bankToken\")\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${bankToken}`,\n    \"bankid\": `${msg.bankId}`\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'GET';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 660,
        "wires": [
            [
                "b34b81b67d9b927c"
            ]
        ]
    },
    {
        "id": "b34b81b67d9b927c",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "INITIATED Files",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 720,
        "y": 660,
        "wires": [
            [
                "c5ccc78c2e5da8b1",
                "512c6cc6cd744b34"
            ]
        ]
    },
    {
        "id": "c5ccc78c2e5da8b1",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "debug 441",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 660,
        "wires": []
    },
    {
        "id": "512c6cc6cd744b34",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Looping and Segregating Files",
        "func": "const files = msg.payload.fileInfo.filter((file) => file.seedingType == \"BNPL_SEEDING\");\n\n\nfor (const file of files) {\n    if (file.seedingType == \"BNPL_SEEDING\" && file.fileId ===\"9d020bd2-7d17-4da8-b403-e66727d2c495-BNPL_Seeding_File\") {\n        node.send({\n            ...msg,\n            ...file,\n            actyvEntityId: msg.actyvEntityId,\n            payload: file.fileId,\n            seedingType: file.seedingType\n        })\n    }\n}\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 720,
        "wires": [
            [
                "26b95a46e75ff292"
            ]
        ]
    },
    {
        "id": "26b95a46e75ff292",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "get bankApplicationConfig by bank",
        "func": "const enterpriseToken = flow.get(\"enterpriseToken\")\nconst bankId = msg.bankId\n\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/bank-application-config/bank/${bankId}`;\n\n\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'GET';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 820,
        "wires": [
            [
                "e9e14dbb606f8c2f"
            ]
        ]
    },
    {
        "id": "e9e14dbb606f8c2f",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "get bankApplicationConfig by bank",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 680,
        "y": 820,
        "wires": [
            [
                "2baeb362f96dc876",
                "481d15b8a3da8f63"
            ]
        ]
    },
    {
        "id": "2baeb362f96dc876",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "get bankApplicationConfig by bank",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 820,
        "wires": []
    },
    {
        "id": "481d15b8a3da8f63",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "filter bankApplnConfig by enterpriseId",
        "func": "const {enterpriseId} = msg\nlet bankApllicationConfigs = msg.payload.filter((config)=>config.allowedEnterprises[0] == enterpriseId)\nmsg.payload = bankApllicationConfigs\nmsg.bankApplicationConfigId = bankApllicationConfigs[0]?.id || \"BNPL\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 920,
        "wires": [
            [
                "600a825c510e0115"
            ]
        ]
    },
    {
        "id": "600a825c510e0115",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Get role id",
        "func": "\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n   \n}\n\nmsg.method = 'POST';\nmsg.url = `${env.get(\"ADMIN_URL\")}/api/role/query`\nmsg.payload = {\n    \"query\": {\n        \"name\": \"paylater_bp_admin\"\n    }\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 980,
        "wires": [
            [
                "18c9b5b0dfe32d17"
            ]
        ]
    },
    {
        "id": "18c9b5b0dfe32d17",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Get role id",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 980,
        "wires": [
            [
                "fc78a9f2b35ee4c9",
                "8985e4e51543a20a"
            ]
        ]
    },
    {
        "id": "fc78a9f2b35ee4c9",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "set roleId",
        "func": "msg.roleId = msg.payload[0][\"_id\"]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 980,
        "wires": [
            [
                "b252b6bde58d7a2c"
            ]
        ]
    },
    {
        "id": "8985e4e51543a20a",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "debug 442",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 920,
        "wires": []
    },
    {
        "id": "7526a6852c4bf63f",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\n\n// msg.fileId = msg.payload\nmsg.method = \"GET\"\nmsg.headers = {\n    fileType: \"xlsx\"\n}\nmsg.url = `${GO_URL}/file/read/${msg.fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1120,
        "wires": [
            [
                "4ec816e1243524ab"
            ]
        ]
    },
    {
        "id": "4ec816e1243524ab",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "readFile",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 740,
        "y": 1120,
        "wires": [
            [
                "37a615ce324a3f8f"
            ]
        ]
    },
    {
        "id": "37a615ce324a3f8f",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "read xls",
        "func": "let data = xlsx.read(msg.payload, { type: \"buffer\" })\nconst wsname = data.SheetNames[0];\nconsole.log({wsname})\nconst ws = data.Sheets[wsname];\nconsole.log({ws})\nconst payload = xlsx.utils.sheet_to_json(ws);\nmsg.seedingData = payload\nmsg.completedSeeding = [],\nmsg.failedSeeding = []\nmsg.anchored = false;\nif(msg.enterpriseId){\n    msg.anchored = true\n}\n\nmsg.numOfRows = payload.length\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "xlsx",
                "module": "xlsx"
            }
        ],
        "x": 920,
        "y": 1120,
        "wires": [
            [
                "1ad8afc500ea81a0"
            ]
        ]
    },
    {
        "id": "1ad8afc500ea81a0",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "debug 443",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1120,
        "wires": []
    },
    {
        "id": "dd96269dadc50da5",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Loop",
        "func": "const users = msg.seedingData;\nconst ENTERPRISE_ID = msg.enterpriseId;\nconst BANK_ID = msg.bankId;\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nfor (const user of users) {\n    node.send({\n        ...msg,\n        payload : user,\n        isCompleted : \"false\",\n        ENTERPRISE_ID: ENTERPRISE_ID,\n        BANK_ID: BANK_ID,\n    })\n    await sleep(10000);\n}\n\nmsg.isCompleted = \"true\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1300,
        "wires": [
            [
                "18fa7168290db451"
            ]
        ]
    },
    {
        "id": "18fa7168290db451",
        "type": "switch",
        "z": "46bc40aaa70da7e7",
        "name": "",
        "property": "isCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 1300,
        "wires": [
            [
                "66aba7a59ab37a2c"
            ],
            [
                "2772982c52809eab"
            ]
        ]
    },
    {
        "id": "66aba7a59ab37a2c",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Flow Done",
        "func": "const fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/changeStatus/${msg.fileId}`;\nconst flow_var = flow.get('FLOW_VARIABLES');\nconsole.log(\"request\", fetchInitiatedFiles)\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${flow_var.token}`,\n    \"bankid\": `${flow.get(\"actyv_id\")}`\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'PATCH';\nmsg.payload = {\n    \"fileId\":msg.fileId,\n    \"seedingStatus\":\"COMPLETED\"\n}\nreturn msg;\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1300,
        "wires": [
            [
                "da8f5d460633c83f",
                "0be7f023ce70bc74"
            ]
        ]
    },
    {
        "id": "2772982c52809eab",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Creating  an Object which contains all info required in the flow",
        "func": "const env_var = global.get('ENV_VARIABLES');\nconst flow_var = flow.get('FLOW_VARIABLES');\nmsg.a = true;\nconst document = msg.payload;\nconsole.log(document);\n\nmsg.obj = {\n    pan: document[\"Business Partner PAN\"],\n    gst: document[\"Business Partner GST\"],\n    mobileNo: document[\"Business Partner Phone\"],\n    email: document[\"Business Partner Email\"],\n    bankIdentifierByParent: document[\"Bank CRN\"],\n    bankAccountNumber: document[\"Loan Repayment Account Number\"],\n    bankIFSC: document[\"Loan Repayment Account IFSC\"],\n    bankName: document[\"Loan Repayment Account Name\"],\n    approvedLimit: document[\"Approved Limit\"],\n    bankProvidedLoanCodes: document[\"Loan Account Number\"],\n    businessPartnerId: \"\",\n    token: \"\",\n    businessType: \"\",\n    bnpl_preference: document[\"Create BNPL Preference\"].toUpperCase()\n}\nconsole.log(\"ROIIIIIIIII\", document[\"Rate Of Interest\"]);\nif (document[\"Rate Of Interest\"] !== undefined){\n    msg.obj[\"rateOfInterest\"] = document[\"Rate Of Interest\"]; \n}\n\nif (document[\"Business Partner PAN\"] === undefined || document[\"Business Partner GST\"] === undefined || document[\"Bank CRN\"] === undefined || document[\"Loan Repayment Account Number\"] === undefined\n    || document[\"Loan Repayment Account IFSC\"] === undefined || document[\"Loan Repayment Account Name\"] === undefined || document[\"Approved Limit\"] === undefined\n   )\n{\n    msg.a = false;\n}\n\n\nmsg.result = {\n    \"Business Partner ID\" : \"\",\n    \"User ID\": \"\",\n    \"Role User Mapping\": \"\",\n    \"Business Partner Sales Summary for current month\": \"\",\n    \"Business-Relationship with Bank\": \"\",\n    \"Business-Relationship with Enterprise\": \"\",\n    \"Create Loan Term\": \"\",\n    \"Update Loan Term\": \"\",\n    \"Fetch Tenor\": \"\",\n    \"Create BNPL Preference\": \"\"\n}\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow_var.token}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\nmsg.url = env_var.GET_BP + \"/\" + msg.obj.gst;\nmsg.method = 'get';\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1420,
        "wires": [
            [
                "f4ea368ea95492b3"
            ]
        ]
    },
    {
        "id": "da8f5d460633c83f",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "debug 444",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 1300,
        "wires": []
    },
    {
        "id": "0be7f023ce70bc74",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Changing seeding Status",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 790,
        "y": 1340,
        "wires": [
            [
                "e05f445aed083fb9"
            ]
        ]
    },
    {
        "id": "f4ea368ea95492b3",
        "type": "switch",
        "z": "46bc40aaa70da7e7",
        "name": "",
        "property": "a",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 1420,
        "wires": [
            [
                "96178eeb077fb327"
            ],
            [
                "e8d926ac7880ac6b"
            ]
        ]
    },
    {
        "id": "e05f445aed083fb9",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Flow Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 1340,
        "wires": []
    },
    {
        "id": "96178eeb077fb327",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Row condition falied",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 1400,
        "wires": []
    },
    {
        "id": "e8d926ac7880ac6b",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Get BP_ID",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 250,
        "y": 1480,
        "wires": [
            [
                "eebe6405a86efb99"
            ]
        ]
    },
    {
        "id": "eebe6405a86efb99",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Get userId from businessPartnerId",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${flow_var.token}`\n}\n\nif (msg.statusCode === 200){\n    const data = msg.payload;\n    msg.obj.businessPartnerId = data._id;\n    msg.result[\"Business Partner ID\"] = `${msg.obj.businessPartnerId}`;\n    msg.method = 'get';\n    msg.url = `${env_var.CHECK_BP_RELATIONSHIP}/${msg.obj.businessPartnerId}/${msg.ENTERPRISE_ID}`\n    // msg.url = `${env_var.BP_USER}/${msg.obj.businessPartnerId}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1480,
        "wires": [
            [
                "de213e14354d4284"
            ]
        ]
    },
    {
        "id": "de213e14354d4284",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "getting relationship type",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 1480,
        "wires": [
            [
                "dde42bbafc0f88bf"
            ]
        ]
    },
    {
        "id": "dde42bbafc0f88bf",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Get userId from businessPartnerId",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\n\nconst data = msg.payload;\nmsg.userId = data[0].userId;\nmsg.result[\"User ID\"] = `${msg.userId}`\n\nmsg.obj[\"businessType\"] = msg.payload.relationType?.split(\"-\")[0];\n\nif (msg.obj.businessType === \"DISTRIBUTOR\") {\n    msg.product_type_id = msg.bankApplicationConfigId;\n}\nelse {\n    msg.product_type_id = msg.bankApplicationConfigId;\n}\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${flow_var.token}`\n}\n\nmsg.method = 'get';\nmsg.url = `${env_var.BP_USER}/${msg.obj.businessPartnerId}`\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1540,
        "wires": [
            [
                "b8d0abda7bbf4a77"
            ]
        ]
    },
    {
        "id": "b8d0abda7bbf4a77",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Get User_ID",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 1540,
        "wires": [
            [
                "32e9b2af925bcada"
            ]
        ]
    },
    {
        "id": "bd9aeba3539d062e",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Check if RoleUserMapping exists",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\nif(msg.statusCode === 200){\n    const data = msg.payload;\n    msg.userId = data[0].userId;\n    msg.result[\"User ID\"] = `${msg.userId}`;\n\n    msg.headers = {\n        \"Authorization\": `Bearer ${flow_var.token}`,\n        \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n    }\n\n    msg.url = `${env_var.CHECK_ROLE_USER_MAPPING}/${msg.obj.businessPartnerId}`;\n    msg.method = 'get';\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1900,
        "wires": [
            [
                "d7b4539dd4d1bc47"
            ]
        ]
    },
    {
        "id": "d7b4539dd4d1bc47",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Check Role User Mapping",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 1900,
        "wires": [
            [
                "3c7624c43b0c6d38",
                "46f22475949a01c9"
            ]
        ]
    },
    {
        "id": "3c7624c43b0c6d38",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Checking RoleUser Mapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 1900,
        "wires": []
    },
    {
        "id": "46f22475949a01c9",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Result of Check Role User Mapping",
        "func": "const mappings = msg.payload;\n\nvar flag = 0;\nfor (const mapping of mappings) {\n    if(mapping.userId == msg.userId && mapping.roleId == msg.roleId){\n        flag = 1;\n        break;\n    }\n};\n\nif(flag === 1){\n    msg.userExists = \"true\";\n    msg.result[\"Role User Mapping\"] = `Exists`;\n}\nelse{\n    msg.userExists = \"false\";\n}\nmsg.userExists = \"false\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1980,
        "wires": [
            [
                "91c0b3797aec4216",
                "3bda400b447e9d7f"
            ]
        ]
    },
    {
        "id": "91c0b3797aec4216",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Check Role User Mapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "userExists",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1980,
        "wires": []
    },
    {
        "id": "3bda400b447e9d7f",
        "type": "switch",
        "z": "46bc40aaa70da7e7",
        "name": "",
        "property": "userExists",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 130,
        "y": 2080,
        "wires": [
            [
                "2099e77f0988ad89"
            ],
            [
                "6ea03b4a3c9689a2"
            ]
        ]
    },
    {
        "id": "2099e77f0988ad89",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Setting payload for roleUserMapping",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\n\nconst userId = msg.userId;\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow_var.token}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\n\n\n\n\nmsg.payload = {\n    userId : userId,\n    roleId: msg.roleId,\n    businessPartnerId : msg.obj.businessPartnerId,\n}\nmsg.url = env_var.ROLE_USER_MAPPING;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 2060,
        "wires": [
            [
                "a96aa368bad9b62b",
                "b5aceff2af16f35a",
                "a34f41b5a66e8712"
            ]
        ]
    },
    {
        "id": "6ea03b4a3c9689a2",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Checking if businessPartnerBankRelationship exists",
        "func": "const flow_var = flow.get(\"FLOW_VARIABLES\")\nconst env_var = global.get(\"ENV_VARIABLES\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${flow_var.token}`\n}\nmsg.url = `${env_var.CHECK_BP_RELATIONSHIP}/getByIdentifierByParent/${msg.obj.bankIdentifierByParent}`;\nmsg.method = 'get'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2260,
        "wires": [
            [
                "0e0f4fa77b17682a"
            ]
        ]
    },
    {
        "id": "a96aa368bad9b62b",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Payload for roleUserMapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 2040,
        "wires": []
    },
    {
        "id": "b5aceff2af16f35a",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Role User Mapping",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 710,
        "y": 2080,
        "wires": [
            [
                "a8198d8f1a183f1a",
                "6ea03b4a3c9689a2"
            ]
        ]
    },
    {
        "id": "a34f41b5a66e8712",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "debug 445",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 2180,
        "wires": []
    },
    {
        "id": "0e0f4fa77b17682a",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Get Identifier By Parent - Bank",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 2260,
        "wires": [
            [
                "6f2b31e9b6d0961a",
                "c8e1120b853d08f9"
            ]
        ]
    },
    {
        "id": "a8198d8f1a183f1a",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Result of roleUserMapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 2080,
        "wires": []
    },
    {
        "id": "6f2b31e9b6d0961a",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Checking if businessPartnerBankRelationship exists",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 2260,
        "wires": []
    },
    {
        "id": "c8e1120b853d08f9",
        "type": "switch",
        "z": "46bc40aaa70da7e7",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 70,
        "y": 2360,
        "wires": [
            [
                "46036e71d06457de"
            ],
            [
                "4b15434cd1e49470"
            ]
        ]
    },
    {
        "id": "46036e71d06457de",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Setting Payload for businessPartnerBankRelationship",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow_var.token}`\n}\n\nmsg.result[\"Business-Relationship with Bank\"] = \"No\"\n\nmsg.payload = {\n    businessId: msg.obj.businessPartnerId,\n    parentBusinessId: msg.BANK_ID,\n    identifierByParent: msg.obj.bankIdentifierByParent,\n    bankAccountNumber: msg.obj.bankAccountNumber,\n    bankIFSC: msg.obj.bankIFSC,\n    bankName: msg.obj.bankName,\n    relationType: `${msg.obj.businessType}-BANK`,\n    // relationType: `DISTRIBUTOR-BANK`,\n}\nmsg.url = env_var.BP_BANK_RELATIONSHIP;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 2340,
        "wires": [
            [
                "5a148a176ba38974",
                "f49b9c7de3822827"
            ]
        ]
    },
    {
        "id": "4b15434cd1e49470",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Checking If loanTerm exists",
        "func": "const flow_var = flow.get(\"FLOW_VARIABLES\")\nconst env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nif (msg.statusCode === 200) {\n    if (msg.result[\"Business-Relationship with Bank\"] === \"No\") {\n        msg.result[\"Business-Relationship with Bank\"] = `Created ${msg.payload._id}`;\n    }\n    else {\n        msg.result[\"Business-Relationship with Bank\"] = `Exists`;\n    }\n}\nelse {\n    msg.result[\"Business-Relationship with Bank\"] = `${msg.statusCode} Error`\n}\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${actyvToken}`\n}\nmsg.url = `${env_var.LOAN_TERM}/service/fetchByBankID`;\nmsg.payload = {\"borrowerID\" : msg.obj.businessPartnerId,\n            \"enterpriseID\": msg.ENTERPRISE_ID,\n            \"bankID\": msg.BANK_ID};\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 2520,
        "wires": [
            [
                "bb6c19e9a9f00c68"
            ]
        ]
    },
    {
        "id": "5a148a176ba38974",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Payload for businessPartnerBankRelationship",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 2320,
        "wires": []
    },
    {
        "id": "f49b9c7de3822827",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Business Partner Bank Relationship",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 800,
        "y": 2360,
        "wires": [
            [
                "106789ef4bb431a5",
                "4b15434cd1e49470"
            ]
        ]
    },
    {
        "id": "bb6c19e9a9f00c68",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Fetch Loan Term ",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 2520,
        "wires": [
            [
                "0d767002d2a14434",
                "6bd59afb37147f0d"
            ]
        ]
    },
    {
        "id": "106789ef4bb431a5",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Business Partner Bank Relationship",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 2360,
        "wires": []
    },
    {
        "id": "0d767002d2a14434",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Check If Loan Term Exists",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 2520,
        "wires": []
    },
    {
        "id": "6bd59afb37147f0d",
        "type": "switch",
        "z": "46bc40aaa70da7e7",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 2660,
        "wires": [
            [
                "4e7dc1f5c4819030"
            ],
            [
                "97f67d2394211fbf"
            ]
        ]
    },
    {
        "id": "4e7dc1f5c4819030",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Setting Payload for creating loanTerm",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\nconst bankToken = flow.get(\"bankToken\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${bankToken}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    bankid : msg.BANKID\n}\n\nmsg.payload = {\n    bankID: msg.BANK_ID,\n    borrowerID: msg.obj.businessPartnerId,\n    enterpriseID: msg.ENTERPRISE_ID,\n    // productType: msg.bankApplicationConfigId\n    bankApplicationConfigID: msg.bankApplicationConfigId\n    // rateOfInterest: Number(msg.obj.rateOfInterest)\n}\nif(msg.obj[\"rateOfInterest\"]!==\"undefined\"){\n    msg.payload[\"rateOfInterest\"] = msg.obj.rateOfInterest;\n}\nmsg.url = env_var.LOAN_TERM;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 2620,
        "wires": [
            [
                "8b286892c6933714",
                "aec8046dc497bf28",
                "a369bac879971eb3"
            ]
        ]
    },
    {
        "id": "97f67d2394211fbf",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "setting up payload for updating loadn term if it already exists",
        "func": "msg.payload = msg.payload[0];\nif(msg.statusCode === 201){\n    msg.result[\"Create Loan Term\"] = `Exists: ${msg.payload.id}`;\n}\nelse{\n    msg.result[\"Create Loan Term\"] = `${msg.statusCode} Error`;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 2720,
        "wires": [
            [
                "2a9f77bdd61bd5c3"
            ]
        ]
    },
    {
        "id": "8b286892c6933714",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Payload for creating loanTerm",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 2600,
        "wires": []
    },
    {
        "id": "aec8046dc497bf28",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Create Loan Term",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 750,
        "y": 2640,
        "wires": [
            [
                "2a9f77bdd61bd5c3",
                "cf853ffb161a06e0"
            ]
        ]
    },
    {
        "id": "a369bac879971eb3",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Paylaod for creating loan_term",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 2660,
        "wires": []
    },
    {
        "id": "2a9f77bdd61bd5c3",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Setting Payload for udpating loanTerm",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    actyventityid: msg.actyvEntityId\n}\n\nconst data = msg.payload;\nmsg.loanTermId = data.id;\n\nif (msg.statusCode === 201 && msg.result[\"Create Loan Term\"] === \"\"){\n    msg.result[\"Create Loan Term\"] = `Loan Term Created: ${msg.loanTermId}`;\n}\n\nmsg.payload = {\n    loanTermsID : msg.loanTermId,\n    approvedLimit: msg.obj.approvedLimit,\n    validTill: \"20/11/2025\",\n    loanGrantStatus: \"APPROVED\",\n    crnNumber: msg.obj.bankIdentifierByParent,\n    awaitingBalanceRefresh: false,\n    businessType: msg.obj.businessType,\n    bankProvidedLoanCodes: msg.obj.bankProvidedLoanCodes\n}\nmsg.url = env_var.LOAN_TERM + \"/service/update\";\nmsg.method = 'patch';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 2720,
        "wires": [
            [
                "426b56e343b0647c",
                "0776f30b9a3e56bb"
            ]
        ]
    },
    {
        "id": "cf853ffb161a06e0",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Create Loan Term",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 2640,
        "wires": []
    },
    {
        "id": "426b56e343b0647c",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Payload for updating loanTerm",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 2700,
        "wires": []
    },
    {
        "id": "0776f30b9a3e56bb",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Update Loan Term",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1170,
        "y": 2740,
        "wires": [
            [
                "c3c0f562a269d17b",
                "46bc5195812ddc34"
            ]
        ]
    },
    {
        "id": "c3c0f562a269d17b",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Update Loan Term",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 2740,
        "wires": []
    },
    {
        "id": "46bc5195812ddc34",
        "type": "switch",
        "z": "46bc40aaa70da7e7",
        "name": "",
        "property": "obj[\"bnpl_preference\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Y",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "N",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 2880,
        "wires": [
            [
                "1d7e8282f5fe4bdf"
            ],
            [
                "8f731ad72663ba98"
            ]
        ]
    },
    {
        "id": "1d7e8282f5fe4bdf",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Payload For fetching TenorAndRateSpread",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nconst sleep = async (milliseconds) => {\n  await new Promise(resolve => {\n    return setTimeout(resolve, milliseconds)\n  });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n  \"Authorization\": `Bearer ${actyvToken}`,\n  \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n  bankid: msg.BANKID\n}\nif (msg.statusCode === 200) {\n  msg.result[\"Update Loan Term\"] = `Updated: ${msg.loanTermId}`;\n}\nelse {\n  msg.result[\"Update Loan Term\"] = `${msg.statusCode} Error`;\n}\n\nmsg.payload = {\n  \"bankID\": msg.BANK_ID,\n  \"loanID\": msg.loanTermId,\n}\n\nmsg.url = env_var.TENOR_AND_RATE_SPREAD + \"/fetch\";\nmsg.method = 'POST';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 2860,
        "wires": [
            [
                "9e392d0ab555faf6"
            ]
        ]
    },
    {
        "id": "8f731ad72663ba98",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "debug 446",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 3080,
        "wires": []
    },
    {
        "id": "9e392d0ab555faf6",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Fetching TenorAndRateSpread",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1310,
        "y": 2860,
        "wires": [
            [
                "e106ad7531043762",
                "efdb4823212bb010"
            ]
        ]
    },
    {
        "id": "d852bacf848fc4b1",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Create BNPL Preference",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1330,
        "y": 2980,
        "wires": [
            [
                "c10186ee7ebe1cd7",
                "8f731ad72663ba98"
            ]
        ]
    },
    {
        "id": "e106ad7531043762",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Setting Payload for creating BNPL preference",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"businesspartnerid\": flow.get(\"actyv_bp_id\"),\n    \"bankid\": msg.BANK_ID,\n    \"actyventityid\": msg.actyvEntityId\n}\n\nmsg.DEFAULT_SPREAD_ID = msg.payload[0].id;\n\nif (msg.statusCode === 201){\n    msg.result[\"Fetch Tenor\"] = `Tenor Fetched ${msg.DEFAULT_SPREAD_ID}`\n}\nelse{\n    msg.result[\"Fetch Tenor\"] = `${msg.statusCode} Error`\n}\n\nmsg.payload = {\n    borrowerID: msg.obj.businessPartnerId,\n    bankApplicationConfigID: msg.product_type_id,\n    defaultBankID: msg.BANK_ID,\n    defaultSpreadID: msg.DEFAULT_SPREAD_ID,\n    minInvoiceAmountThreshold: env_var.MIN_INVOICE_AMOUNT_THRESHOLD\n}\nmsg.url = env_var.BNPL_PREFERENCE;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 2980,
        "wires": [
            [
                "d852bacf848fc4b1",
                "893fc4d8f493e470",
                "fba1ebe5ceec377b"
            ]
        ]
    },
    {
        "id": "efdb4823212bb010",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "fetching tenor and rate spread",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1690,
        "y": 2840,
        "wires": []
    },
    {
        "id": "c10186ee7ebe1cd7",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Create BNPL Preference",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 2980,
        "wires": []
    },
    {
        "id": "893fc4d8f493e470",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Payload for creating BNPL preference",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 2940,
        "wires": []
    },
    {
        "id": "fba1ebe5ceec377b",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "debug 447",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 3080,
        "wires": []
    },
    {
        "id": "b252b6bde58d7a2c",
        "type": "file in",
        "z": "46bc40aaa70da7e7",
        "name": "",
        "filename": "/Users/shravanpm/Downloads/vayu.xlsx",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 360,
        "y": 1200,
        "wires": [
            [
                "c75480b4de89ef2d",
                "c1c958ce1f07b54b"
            ]
        ]
    },
    {
        "id": "d2d92b5e3e22038e",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "debug 462",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1200,
        "wires": []
    },
    {
        "id": "c75480b4de89ef2d",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "debug 463",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 1240,
        "wires": []
    },
    {
        "id": "c1c958ce1f07b54b",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "read xls",
        "func": "let data = xlsx.read(msg.payload, { type: \"buffer\" })\nconst wsname = data.SheetNames[0];\nconsole.log({wsname})\nconst ws = data.Sheets[wsname];\nconsole.log({ws})\nconst payload = xlsx.utils.sheet_to_json(ws);\nmsg.seedingData = payload\nmsg.completedSeeding = [],\nmsg.failedSeeding = []\nmsg.anchored = false;\nif(msg.enterpriseId){\n    msg.anchored = true\n}\n\nmsg.numOfRows = payload.length\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "xlsx",
                "module": "xlsx"
            }
        ],
        "x": 680,
        "y": 1200,
        "wires": [
            [
                "d2d92b5e3e22038e",
                "dd96269dadc50da5"
            ]
        ]
    },
    {
        "id": "32e9b2af925bcada",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "debug 464",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 1600,
        "wires": []
    },
    {
        "id": "35f914c1426f1e1b",
        "type": "inject",
        "z": "4da9cf371ae8419b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 227,
        "y": 59,
        "wires": [
            [
                "e47eab1550498f8b"
            ]
        ]
    },
    {
        "id": "f535f76332f21ecb",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "Setting Payload For Fetching INITIATED Status Files",
        "func": "const actyvToken = flow.get(\"actyvToken\")\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/fileInfoBySeedingStatus/INITIATED`;\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"actyventityid\": msg.actyvEntityId\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'GET';\nmsg.logger = \"seeding files fetched in Initiated State\"\nmsg.loggerNewLine = true\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 500,
        "wires": [
            [
                "1c1bb251c85019a5",
                "3bb110a314e3562a"
            ]
        ]
    },
    {
        "id": "818df4c15d1494f0",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "Looping and Segregating Files",
        "func": "const files = msg.payload.fileInfo.filter((file) => file.seedingType == \"GO_SEEDING\");\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nfor (const file of files) {\n    // if (file.seedingType == \"GO_SEEDING\" && file.fileName === \"Format_File_GO_Seeding (5) (2).xlsx\") {\n    if (file.seedingType == \"GO_SEEDING\") {\n        node.send({\n            ...file,\n            ...msg,\n            payload: file.fileId,\n            seedingType: file.seedingType,\n            isComplete: false,\n            logger : \"fileId for go seeding\"\n        })\n        await sleep(300000)\n    }\n}\nmsg.isComplete= true\nmsg.logger = \"No file found for Go seeding\"\nreturn msg\n// ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 332,
        "y": 598,
        "wires": [
            [
                "c72938bf1b722cb3"
            ]
        ]
    },
    {
        "id": "031f38fc596bac0b",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\nflow.set(\"succeededRows\", [])\nflow.set(\"failedRows\", []) \n\nflow.set(\"succeeded_Create_BP\", [])\nflow.set(\"failed_Create_BP\", []) \n\nmsg.fileId = msg.payload\nconsole.log(msg.fileId);\nconsole.log(msg.seedingType);\nmsg.method = \"GET\"\nmsg.headers = {\n    fileType: \"xlsx\"\n}\nmsg.url = `${GO_URL}/file/read/${msg.fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 660,
        "wires": [
            [
                "79e59608eb9ef0e1"
            ]
        ]
    },
    {
        "id": "e2498f228732502a",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "Fetch initiated files",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 500,
        "wires": []
    },
    {
        "id": "b2a3b862b04de435",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "Read file",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 722,
        "y": 658,
        "wires": []
    },
    {
        "id": "7b43e008c0515755",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "read xls",
        "func": "let data = xlsx.read(msg.payload, { type: \"buffer\" })\nconst wsname = data.SheetNames[0];\nconst ws = data.Sheets[wsname];\nconst payload = xlsx.utils.sheet_to_json(ws);\nmsg.seedingData = payload.filter((d) => d[\"Business Partner GST\"] !== undefined)\nmsg.completedSeeding = [],\nmsg.failedSeeding = []\nmsg.anchored = false;\nif(msg.enterpriseId){\n    msg.anchored = true\n}\nmsg.payload = payload\nmsg.numOfRows = msg.seedingData.length\n\nmsg.logger = \"read xlsx\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "xlsx",
                "module": "xlsx"
            }
        ],
        "x": 182,
        "y": 798,
        "wires": [
            [
                "bd7cbc8ea4e54786"
            ]
        ]
    },
    {
        "id": "9ad5d35dbd8a20c8",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "xlsx to json",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "seedingData",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 492,
        "y": 798,
        "wires": []
    },
    {
        "id": "cd26050f98d24bc7",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst EMAIL = env.get('APL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 120,
        "wires": [
            [
                "a50d2d7aa94f9ac7"
            ]
        ]
    },
    {
        "id": "4bcfaecd6cf8480c",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "saveEnterpriseToken",
        "func": "flow.set(\"enterpriseToken\",msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 887,
        "y": 119,
        "wires": [
            []
        ]
    },
    {
        "id": "75fbf6d31071850d",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "Authentication",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 807,
        "y": 59,
        "wires": []
    },
    {
        "id": "8786da9ce68fdc98",
        "type": "switch",
        "z": "4da9cf371ae8419b",
        "name": "checkAnchoredOrNot",
        "property": "anchored",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 222,
        "y": 1058,
        "wires": [
            [
                "3305b031f920cc9d"
            ],
            [
                "a7e3f5654571c3e1"
            ]
        ]
    },
    {
        "id": "fc5e4ddb42c7f92b",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "fetchEnterpriseConfig",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 1160,
        "wires": []
    },
    {
        "id": "8d05a46f4f99a203",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "fetchEnterpriseConfig",
        "func": "\nconst enterpriseId = msg.enterpriseId\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\")\n}\nmsg.url = `${env.get(\"GO_URL\")}/enterprise-seeding-config/${enterpriseId}`;\nmsg.method = 'GET';\nmsg.logger = `fetch enterprise config with enterprise id= #${enterpriseId}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 1160,
        "wires": [
            [
                "af1db67c30e3c95d"
            ]
        ]
    },
    {
        "id": "eb48e4709781ea82",
        "type": "switch",
        "z": "4da9cf371ae8419b",
        "name": "enterpriseConfigExistOrNot",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 242,
        "y": 1358,
        "wires": [
            [
                "df0c7c49add02868",
                "cd520a755be06892"
            ],
            [
                "ccdf8aebf7b1e4bd"
            ]
        ]
    },
    {
        "id": "ccdf8aebf7b1e4bd",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "checkEnterpriseConfig",
        "func": "const {\n    canCreateBusinessPartner = false,\n    canCreateBusinessPartnerUser = false,\n} = msg.payload.result;\nif (\n    [canCreateBusinessPartner, canCreateBusinessPartnerUser].includes(\n        true\n    )\n) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "ceed68e1f4d09410",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "Loop",
        "func": "const sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nfor(let [key,row] of msg.seedingData.entries()){\n    node.send({\n        ...msg,\n        row,\n        isCompleted : false,\n        isFileProcessingCompleted: key == msg.seedingData.length-1? true:false\n    })\n    await sleep(2000)\n}\nawait sleep(30000)\nmsg.isCompleted = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1680,
        "wires": [
            [
                "1890b4253837623d",
                "8b9d84e2a9c07f8b"
            ]
        ]
    },
    {
        "id": "b70e30279112d2cd",
        "type": "switch",
        "z": "4da9cf371ae8419b",
        "name": "check number of rows",
        "property": "seedingData.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "100",
                "vt": "num"
            },
            {
                "t": "lte",
                "v": "100",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 222,
        "y": 878,
        "wires": [
            [
                "75d9ccd20ce180e1"
            ],
            [
                "eeb363d58c0d4d4a"
            ]
        ]
    },
    {
        "id": "8b9d84e2a9c07f8b",
        "type": "switch",
        "z": "4da9cf371ae8419b",
        "name": "checkLoopCompletedOrNot",
        "property": "isCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 180,
        "y": 1820,
        "wires": [
            [],
            [
                "7f92f52d1231c9d6"
            ]
        ]
    },
    {
        "id": "5e372accb5287426",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "postBusinessPartner",
        "func": "\n\nconst {row,enterpriseId} = msg\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \n}\nmsg.url = `${env.get(\"GO_URL\")}/business-partner`;\n// msg.url = `http://localhost:4003/api/business-partner`;\nmsg.method = 'POST';\n\nconst DEFAULT_PASSWORD = env.get(\"DEFAULT_PASSWORD\")\n\nmsg.payload = {\n    \n  \"gstin\": row[\"Business Partner GST\"],\n  \"businessName\": row[\"Business Partner Company Name\"],\n  \"applicantMobile\": row[\"Business Partner Phone\"].toString().includes[\"+91\"] ? row[\"Business Partner Phone\"].toString().replace(\"+91\",\"\") : `${row[\"Business Partner Phone\"]}`,\n  \"applicantEmail\": row[\"Business Partner Email\"],\n  \"password\": DEFAULT_PASSWORD,\n  \"inviteId\": \"\",\n  \"registerAsAnchor\": \"\",\n  \"firstName\": row[\"Primary User First Name\"], //?\n  \"lastName\": row[\"Primary User Last Name\"] || \".\", //?\n  \"isConsentAccepted\": true,\n  \"autoConfirmUser\": true,\n  \"origin\": \"seed\",\n  \"stateCode\": \"\" //?\n\n}\nmsg.logger = \"Post business partner\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 165,
        "y": 2342,
        "wires": [
            [
                "d7a45a7ad3fbc0a2"
            ]
        ]
    },
    {
        "id": "b4bc8a69308905dc",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "postBusinessPartner",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 2340,
        "wires": []
    },
    {
        "id": "0dc150a349c973f1",
        "type": "switch",
        "z": "4da9cf371ae8419b",
        "name": "statusOfCreate_BP",
        "property": "payload.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "SUCCESS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 155,
        "y": 2422,
        "wires": [
            [
                "119cfbc5494120d3"
            ],
            [
                "e0c2533b33e82766"
            ]
        ]
    },
    {
        "id": "e0c2533b33e82766",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "createEnterprise_BP_mapping",
        "func": "\nconst succeededRows = flow.get(\"succeededRows\") ||[]\n\n\n\n\nconst {row,enterpriseId} = msg\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\")\n}\nmsg.url = `${env.get(\"GO_URL\")}/enterprise-partner-mapping/create`;\n\nmsg.completedSeeding.push({\n  businessPartnerId: msg.payload.businessPartnerId,\n  applicantEmail: msg.row[\"Business Partner Email\"]\n})\n\nsucceededRows.push({\n  businessPartnerId: msg.payload.businessPartnerId,\n  applicantEmail: msg.row[\"Business Partner Email\"]\n})\nflow.set(\"succeededRows\",succeededRows)\nflow.set(\"succeeded_Create_BP\", succeededRows)\nmsg.businessPartnerId = msg.payload.businessPartnerId\nmsg.method = 'POST';\nmsg.payload = {\n  enterpriseId,\n  businessPartnerId: msg.payload.businessPartnerId\n\n}\nmsg.logger = \"createEnterprise_BP_mapping\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 195,
        "y": 2502,
        "wires": [
            [
                "7c950c1cc4271c9f"
            ]
        ]
    },
    {
        "id": "ef61c69ee6ef5810",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "createEnterprise_BP_mapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 2440,
        "wires": []
    },
    {
        "id": "1ed544d3cb228275",
        "type": "switch",
        "z": "4da9cf371ae8419b",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 552,
        "y": 698,
        "wires": [
            [
                "33c2e5f1a3f78991"
            ],
            [
                "7b43e008c0515755"
            ]
        ]
    },
    {
        "id": "119cfbc5494120d3",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n \n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if(failedRow.length === 0){\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         createBusinessPartnerFailed: `${msg.payload}`,\n   \n//     })\n// }else{\n//     failedRows.forEach((row) =>{\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"])\n//         {\n//            row.createBusinessPartnerFailed = `${msg.payload}`\n//         }\n        \n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: msg.row[\"Business Partner Email\"],\n    message: `${msg.payload.message ||\"Unable to create business partner, Please contact administrator.\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\",failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2400,
        "wires": [
            [
                "58e29f942897dd7b"
            ]
        ]
    },
    {
        "id": "73e9448c62ef6ae7",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 760,
        "y": 1160,
        "wires": [
            [
                "fc5e4ddb42c7f92b",
                "eb48e4709781ea82"
            ]
        ]
    },
    {
        "id": "955cb11e6f982222",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 740,
        "y": 2340,
        "wires": [
            [
                "b4bc8a69308905dc",
                "0dc150a349c973f1"
            ]
        ]
    },
    {
        "id": "f03078a69ddd5d4a",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 740,
        "y": 2500,
        "wires": [
            [
                "18671e71afb68eca"
            ]
        ]
    },
    {
        "id": "1890b4253837623d",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "debug 407",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "row",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 1640,
        "wires": []
    },
    {
        "id": "de4661694aa2da61",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 920,
        "y": 500,
        "wires": [
            [
                "e2498f228732502a"
            ]
        ]
    },
    {
        "id": "bd7cbc8ea4e54786",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 340,
        "y": 800,
        "wires": [
            [
                "9ad5d35dbd8a20c8",
                "b70e30279112d2cd"
            ]
        ]
    },
    {
        "id": "c72938bf1b722cb3",
        "type": "switch",
        "z": "4da9cf371ae8419b",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 592,
        "y": 598,
        "wires": [
            [
                "52a2715aaa63af72"
            ],
            [
                "031f38fc596bac0b"
            ]
        ]
    },
    {
        "id": "52a2715aaa63af72",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 782,
        "y": 578,
        "wires": [
            [
                "d7689f694fccddd1"
            ]
        ]
    },
    {
        "id": "d7689f694fccddd1",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "Files completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 942,
        "y": 578,
        "wires": []
    },
    {
        "id": "75d9ccd20ce180e1",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "Logger",
        "func": "msg.logger = \"No of rows greater than 100 not processing the file\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 542,
        "y": 858,
        "wires": [
            [
                "eae45894906f157c"
            ]
        ]
    },
    {
        "id": "eae45894906f157c",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 702,
        "y": 858,
        "wires": [
            [
                "c32a05ba17bf0465",
                "4f19f508597b300b"
            ]
        ]
    },
    {
        "id": "c32a05ba17bf0465",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "File is not processed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 840,
        "wires": []
    },
    {
        "id": "df0c7c49add02868",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "Logger",
        "func": "msg.logger = \"Enterprise config is not exist for the user so the file is not processed\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 502,
        "y": 1318,
        "wires": [
            [
                "096484c3724c7c08"
            ]
        ]
    },
    {
        "id": "096484c3724c7c08",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 662,
        "y": 1318,
        "wires": [
            [
                "193923669126d588"
            ]
        ]
    },
    {
        "id": "193923669126d588",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "No enterprise config",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1320,
        "wires": []
    },
    {
        "id": "eeb363d58c0d4d4a",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "Logger",
        "func": "msg.logger = `file processing started for #${msg.seedingData.length} rows`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 182,
        "y": 958,
        "wires": [
            [
                "87c18c4817f211bf"
            ]
        ]
    },
    {
        "id": "87c18c4817f211bf",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 402,
        "y": 958,
        "wires": [
            [
                "8786da9ce68fdc98"
            ]
        ]
    },
    {
        "id": "e715d71b794cdc8a",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "Format sales summary",
        "func": "\n\nconst salesSummary = []\nconst {businessPartnerId,enterpriseId} = msg\nfor(let key in msg.row){\n    if (key.includes(\"Transaction History\")){\n        let monthSplit = key.split(\"M\")\n        \n        let month = monthSplit[monthSplit.length-1]\n        if (msg.row[key]){\n            salesSummary.push(\n                {\n                    \"businessPartner\": businessPartnerId,\n                    \"enterprise\": enterpriseId,\n                    \"year\": +getMonthAndYear(month).split(\"-\")[0],\n                    \"month\": +getMonthAndYear(month).split(\"-\")[1],\n                    \"totalSalesAmount\": msg.row[key],\n                    \"totalSalesProjected\": msg.row[key]\n                }\n            )\n        }\n        \n    }\n}\n// msg.payload = salesSummary\n\nfunction getMonthAndYear(month){\n    let date = moment().subtract(Number(month), 'months').format()\n    date = date.split(\"T\")[0]\n   \n    return date\n}\nfor (let [key, req] of salesSummary.entries()){\n    node.send({\n        ...msg,\n        req,\n        isComplete : false,\n        salesSummaryLoopCompleted: key == salesSummary.length - 1 ? true : false\n    })\n   \n}\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 425,
        "y": 2902,
        "wires": [
            [
                "b3cc4005f373842f"
            ]
        ]
    },
    {
        "id": "b5e92d9f3021f55d",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "Create business relation with erpId",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nmsg.url = `${GO_URL}/business-relationship/service`;\nmsg.method = \"POST\"\nmsg.headers = {}\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n}\nconst {businessPartnerId,enterpriseId} = msg\nconst key = msg.dealerCodePrefix\n\nmsg.payload = {\n    \"businessId\": businessPartnerId,\n    \"parentBusinessId\": enterpriseId,\n    \"identifierByParent\": `${msg.row[\"Business Partner Customer No\"]}`,\n    \"bankAccountNumber\": msg.row[\"Business Partner Account with Enterprise\"],\n    \"bankIFSC\": msg.row[\"Business Partner Bank IFSC with Enterprise\"],\n    \"bankName\": msg.row[\"Business Partner Bank Name with Enterprise\"],\n    \"relationType\": checkRelationType(msg.row[\"Business Partner Type\"]) \n}\nmsg.logger = `Create business relation with erpId #${msg.row[\"Business Partner Customer No\"]}`\n\n\nfunction checkRelationType(str){\n    if(str.toLowerCase() === \"distributor\"){\n        return \"DISTRIBUTOR-ENTERPRISE\"\n    } else if (str.toLowerCase() === \"vendor\"){\n        return \"VENDOR-ENTERPRISE\"\n    }\n    return \"\"\n}\nconsole.log(msg.payload)\nreturn msg\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 2620,
        "wires": [
            [
                "2443b158d3f956e3"
            ]
        ]
    },
    {
        "id": "a1489196ce7f72b5",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "post business-partner-sales-summary",
        "func": "const GO_URL = env.get(\"GO_URL\")\n\nmsg.url = `${GO_URL}/business-partner-sales-summary`,\nmsg.method = \"POST\"\nmsg.payload = msg.req\nmsg.logger = `post business-partner-sales-summary with ${JSON.stringify(msg.payload)}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 2980,
        "wires": [
            [
                "0ad97a91c50a39e9"
            ]
        ]
    },
    {
        "id": "304d69563ba8a589",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 920,
        "y": 2700,
        "wires": [
            [
                "31433e375406d28a",
                "d8372f63efdc025d"
            ]
        ]
    },
    {
        "id": "31433e375406d28a",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "Create business relation with erpId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 2700,
        "wires": []
    },
    {
        "id": "240587336c8c7250",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 1105,
        "y": 2982,
        "wires": [
            [
                "843d53e25eba589f",
                "999e399d96eb6fe8"
            ]
        ]
    },
    {
        "id": "843d53e25eba589f",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "post business-partner-sales-summary",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1375,
        "y": 2982,
        "wires": []
    },
    {
        "id": "2443b158d3f956e3",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 420,
        "y": 2700,
        "wires": [
            [
                "3a7fa6f6dd70c8d0"
            ]
        ]
    },
    {
        "id": "18671e71afb68eca",
        "type": "switch",
        "z": "4da9cf371ae8419b",
        "name": "",
        "property": "payload._id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 890,
        "y": 2500,
        "wires": [
            [
                "b3060dcce06f5bf3"
            ],
            [
                "b5e92d9f3021f55d"
            ]
        ]
    },
    {
        "id": "b3060dcce06f5bf3",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n\n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if (failedRow.length === 0) {\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         \"createBusinessPartner-enterpriseMappingFailed\": `${msg.payload}`,\n\n//     })\n// } else {\n//     failedRows.forEach((row) => {\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"]) {\n//             row[\"createBusinessPartner-enterpriseMappingFailed\"] = `${msg.payload}`\n//         }\n\n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: msg.row[\"Business Partner Email\"],\n    \"message\": `Unable to create business partner - enterprise mapping failed, Please contact administrator.`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 2580,
        "wires": [
            [
                "3fe3c10ffab67e24"
            ]
        ]
    },
    {
        "id": "b3cc4005f373842f",
        "type": "switch",
        "z": "4da9cf371ae8419b",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 617,
        "y": 2900,
        "wires": [
            [
                "83c06b6b78e99483"
            ],
            [
                "a1489196ce7f72b5"
            ]
        ]
    },
    {
        "id": "920d0f2f499c4e8e",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 3080,
        "wires": []
    },
    {
        "id": "83c06b6b78e99483",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "seedingData",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 2880,
        "wires": []
    },
    {
        "id": "999e399d96eb6fe8",
        "type": "switch",
        "z": "4da9cf371ae8419b",
        "name": "salesSummaryLoopCompleted?",
        "property": "salesSummaryLoopCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 917,
        "y": 3080,
        "wires": [
            [
                "b2f9ca5244981d5c",
                "fdb9380ae81337e6"
            ]
        ]
    },
    {
        "id": "a35aadfbbd4eae0d",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "save actyv_entity_id",
        "func": "const ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\nconst actyvKey = ENV_VARIABLES.ACTYV_ENTITY_KEY\nconst actyvEntity = msg.payload.filter((actyv) => actyv.key === actyvKey)\nflow.set(\"actyvEntityId\", actyvEntity[0]._id);\nmsg.actyvEntityId = actyvEntity[0]._id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 360,
        "wires": [
            [
                "f2f89335d8658733"
            ]
        ]
    },
    {
        "id": "a78102a8377514d1",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\nconsole.log({actyvToken: msg.payload.idToken})\nmsg.actyvToken = msg.payload.idToken\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 280,
        "wires": [
            [
                "1acf650c047acbe2"
            ]
        ]
    },
    {
        "id": "7f92f52d1231c9d6",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "checkValidations",
        "func": "let transactionHistorys = [\n    \"Transaction History M1\",\n    \"Transaction History M2\",\n    \"Transaction History M3\",\n    \"Transaction History M4\",\n    \"Transaction History M5\",\n    \"Transaction History M6\",\n    \"Transaction History M7\",\n    \"Transaction History M8\",\n    \"Transaction History M9\",\n    \"Transaction History M10\",\n    \"Transaction History M11\",\n    \"Transaction History M12\",\n];\n\nfunction checkAllMandatoryFieldsPresentOrNot(row) {\n    if (\n        +row[\"Transaction History M1\"] >= 0 &&\n        +row[\"Transaction History M2\"] >= 0 &&\n        +row[\"Transaction History M3\"] >= 0 &&\n        +row[\"Transaction History M4\"] >= 0 &&\n        +row[\"Transaction History M5\"] >= 0 &&\n        +row[\"Transaction History M6\"] >= 0 &&\n        row[\"Business Partner Customer No\"] &&\n        row[\"Primary User First Name\"] &&\n        row[\"Primary User Last Name\"] &&\n        row[\"Business Partner Company Name\"] &&\n        validatePan(row[\"Business Partner PAN\"]) &&\n        validateGst(row[\"Business Partner GST\"]) &&\n        validatePhone(row[\"Business Partner Phone\"]) &&\n        validateEmail(row[\"Business Partner Email\"]) &&\n        row[\"Business Partner City\"] &&\n        validateDistributorType(row[\"Business Partner Type\"]) &&\n        row[\"Business Partner Account with Enterprise\"] &&\n        row[\"Business Partner Bank Name with Enterprise\"] &&\n        validateIFSC(row[\"Business Partner Bank IFSC with Enterprise\"])\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n\n//Check email\nfunction validateEmail(email) {\n    const emailPattern = /^([a-zA-Z0-9._%+-]+)@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})$/;\n\n    if (emailPattern.test(email)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n//Check phone number\nfunction validatePhone(phone) {\n    phone = phone.toString();\n    const phoneNumber = phone.length === 10 ? phone : phone.slice(3, 13);\n    const phoneNumberPattern = /^[1-9]\\d{9}$/;\n\n    if (phoneNumberPattern.test(phoneNumber)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction validateDistributorType(type) {\n    if (type.toLowerCase() === \"distributor\" || type.toLowerCase() === \"vendor\") {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction validatePan(pan) {\n    const panPattern = /^([A-Z]{5}[0-9]{4}[A-Z]{1})$/;\n\n    if (panPattern.test(pan)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction validateGst(gst) {\n    const gstinPattern =\n        /^([0-9]{2}[a-zA-Z]{5}[0-9]{4}[a-zA-Z]{1}[1-9A-Za-z]{1}Z[0-9A-Za-z]{1})$/;\n\n    if (gstinPattern.test(gst)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n//   /^[A-Za-z]{4}[0-9]{6,7}$/\nfunction validateIFSC(ifsc) {\n    const IFSC_pattern = /^[A-Z]{4}0[A-Z0-9]{6}$/;\n\n    if (IFSC_pattern.test(ifsc)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n//****************************************************************************************************************************************** */\n\n\nconst row = msg.row;\nlet checkAllMandatoryFieldPresent = checkAllMandatoryFieldsPresentOrNot(\n    msg.row\n);\n\nlet message = checkAllMandatoryFieldPresent? \"\":\"Mandatory fields are not present\"\n\n\nif(\n    !(+row[\"Transaction History M1\"] >= 0 &&\n    +row[\"Transaction History M2\"] >= 0 &&\n    +row[\"Transaction History M3\"] >= 0 &&\n    +row[\"Transaction History M4\"] >= 0 &&\n    +row[\"Transaction History M5\"] >= 0 &&\n    +row[\"Transaction History M6\"] >= 0) ){\n    message = \"Transaction history is not valid\"\n    }\n\n/**\nvalidateDistributorType(row[\"Business Partner Type\"]) &&\n */\n\nconst isDistributorTypeValid = validateDistributorType(row[\"Business Partner Type\"])\nif (!isDistributorTypeValid) {\n    message = \"Borrower type is not valid\"\n}\n\nconst isIfscValid = validateIFSC(row[\"Business Partner Bank IFSC with Enterprise\"])\nif (!isIfscValid) {\n    console.log(\"IFSC\", isIfscValid, row[\"Business Partner Bank IFSC with Enterprise\"])\n    message = \"IFSC number is not valid\"\n}\n\nconst isValidPan = validatePan(msg.row[\"Business Partner PAN\"])\nif (!isValidPan) {\n    message = \"PAN number is not valid\"\n}\n\nconst isGstValid = validateGst(row[\"Business Partner GST\"])\nif (!isGstValid) {\n    message = \"GST number is not valid\"\n}\n\nconst isPhoneValid = validatePhone(row[\"Business Partner Phone\"])\nif (!isPhoneValid) {\n    message = \"Mobile number is not valid\"\n}\n\nconst isEmailValid = validateEmail(row[\"Business Partner Email\"])\nif (!isEmailValid) {\n    message = \"Email is not valid\"\n}\n\n\n\nmsg.primaryChecks = false\nmsg.message = message\nmsg.logger = \"primary check\"\nif(checkAllMandatoryFieldPresent){\n    msg.primaryChecks = true\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 155,
        "y": 1982,
        "wires": [
            [
                "4a9b23d5e926bcec"
            ]
        ]
    },
    {
        "id": "4a9b23d5e926bcec",
        "type": "switch",
        "z": "4da9cf371ae8419b",
        "name": "primaryChecks",
        "property": "primaryChecks",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 405,
        "y": 1982,
        "wires": [
            [
                "bc947d1945704dc7",
                "7e0892fb2bd7b4ce"
            ],
            [
                "0181fabda15a1aee"
            ]
        ]
    },
    {
        "id": "0181fabda15a1aee",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "Get business relation with erpId",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\nconst businessPartnerId = msg.payload?._id\nmsg.businessPartnerId = businessPartnerId\nmsg.url = `${GO_URL}/business-relationship/service/getByIdentifierByParent/${msg.row[\"Business Partner Customer No\"]}`;\nmsg.method = \"GET\"\nmsg.headers = {}\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n}\nmsg.logger = `Get business relation with erpId #${msg.row[\"Business Partner Customer No\"]}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 2080,
        "wires": [
            [
                "3c5c210b1d50536e"
            ]
        ]
    },
    {
        "id": "87765ab14e3c5869",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 780,
        "y": 2080,
        "wires": [
            [
                "f5dd2c71ed7af849",
                "e9c1ba560f3d144c"
            ]
        ]
    },
    {
        "id": "f5dd2c71ed7af849",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "get relation",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 995,
        "y": 2082,
        "wires": []
    },
    {
        "id": "e9c1ba560f3d144c",
        "type": "switch",
        "z": "4da9cf371ae8419b",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 135,
        "y": 2202,
        "wires": [
            [
                "4edd696a31dc4c99"
            ],
            [
                "5e372accb5287426"
            ]
        ]
    },
    {
        "id": "4edd696a31dc4c99",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n\n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if (failedRow.length === 0) {\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         \"msg\": `Dealer code already exist`,\n\n//     })\n// } else {\n//     failedRows.forEach((row) => {\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"]) {\n//             row[\"msg\"] = `Dealer code already exist`\n//         }\n\n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: msg.row[\"Business Partner Email\"],\n    \"message\": `Dealer code already exist`,\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\n\nmsg.allFailed = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2180,
        "wires": [
            [
                "49c05415aaa5758b"
            ]
        ]
    },
    {
        "id": "be578370d7b38244",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 2180,
        "wires": []
    },
    {
        "id": "121f308be5dadcfe",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 2400,
        "wires": []
    },
    {
        "id": "4ed4306e708f03d9",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 2580,
        "wires": []
    },
    {
        "id": "d8372f63efdc025d",
        "type": "switch",
        "z": "4da9cf371ae8419b",
        "name": "",
        "property": "payload.businessRelationship._id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 2800,
        "wires": [
            [
                "f61685180ae19776"
            ],
            [
                "e715d71b794cdc8a",
                "92be401235f7dd0e"
            ]
        ]
    },
    {
        "id": "f8e279de38bcf39d",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 2780,
        "wires": []
    },
    {
        "id": "f61685180ae19776",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n \n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if(failedRow.length === 0){\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         createRelationshipFailed: `${msg.payload}`,\n   \n//     })\n// }else{\n//     failedRows.forEach((row) =>{\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"])\n//         {\n//            row.createRelationshipFailed = `${msg.payload}`\n//         }\n        \n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: msg.row[\"Business Partner Email\"],\n    message: `Unable to create relationship between enterprise and business partner, Please contact administrator.`,\n\n})\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\n\n\nflow.set(\"failedRows\",failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 2780,
        "wires": [
            [
                "8f88d3455a9f85b7"
            ]
        ]
    },
    {
        "id": "92be401235f7dd0e",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "switch",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 2840,
        "wires": []
    },
    {
        "id": "cd520a755be06892",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n\n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if (failedRow.length === 0) {\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         \"businessPartnerNotFound\": `${msg.payload}`,\n\n//     })\n// } else {\n//     failedRows.forEach((row) => {\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"]) {\n//             row[\"businessPartnerNotFound\"] = `${msg.payload}`\n//         }\n\n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: \"ALL\",\n    message : `Enterprise config not present for enterprise`\n})\n\nmsg.remark = `Enterprise config not present for enterprise.`\n\n\nmsg.allFailed = true\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1260,
        "wires": [
            [
                "05beccd6e5cfcdd3"
            ]
        ]
    },
    {
        "id": "e551cb7827daed66",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 1260,
        "wires": []
    },
    {
        "id": "4f19f508597b300b",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n\n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if (failedRow.length === 0) {\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         \"businessPartnerNotFound\": `${msg.payload}`,\n\n//     })\n// } else {\n//     failedRows.forEach((row) => {\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"]) {\n//             row[\"businessPartnerNotFound\"] = `${msg.payload}`\n//         }\n\n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: \"ALL\",\n    message: `Limit exceeded for file processing, Please contact administrator.`\n})\n\nmsg.allFailed = true\n\nmsg.remark = `Limit exceeded for file processing, Please contact administrator.`\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 940,
        "wires": [
            [
                "96c0ca749d1a284a"
            ]
        ]
    },
    {
        "id": "9124e890f926c0c4",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 940,
        "wires": []
    },
    {
        "id": "33c2e5f1a3f78991",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n\n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if (failedRow.length === 0) {\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         \"businessPartnerNotFound\": `${msg.payload}`,\n\n//     })\n// } else {\n//     failedRows.forEach((row) => {\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"]) {\n//             row[\"businessPartnerNotFound\"] = `${msg.payload}`\n//         }\n\n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: \"ALL\",\n    message: `File processing failed, couldn't read file,  Please contact administrator.`\n})\nmsg.remark = `File processing failed, couldn't read file,  Please contact administrator.`\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\n\nmsg.allFailed = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 700,
        "wires": [
            [
                "37605392dcf57cda"
            ]
        ]
    },
    {
        "id": "594e84d26375818b",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 700,
        "wires": []
    },
    {
        "id": "bc947d1945704dc7",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if (failedRow.length === 0) {\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         \"businessPartnerNotFound\": `${msg.payload}`,\n\n//     })\n// } else {\n//     failedRows.forEach((row) => {\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"]) {\n//             row[\"businessPartnerNotFound\"] = `${msg.payload}`\n//         }\n\n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: msg.row[\"Business Partner Email\"],\n    message: msg.message\n})\n\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nmsg.allFailed = false\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1940,
        "wires": [
            [
                "a45ab326986fe884"
            ]
        ]
    },
    {
        "id": "13a12d753494165a",
        "type": "subflow:0cbd918f05921aae",
        "z": "4da9cf371ae8419b",
        "name": "Authenticate enterprise",
        "x": 590,
        "y": 120,
        "wires": [
            [
                "4bcfaecd6cf8480c",
                "75fbf6d31071850d"
            ],
            []
        ]
    },
    {
        "id": "1c1bb251c85019a5",
        "type": "subflow:0cbd918f05921aae",
        "z": "4da9cf371ae8419b",
        "name": "getInitiatedFiles",
        "x": 700,
        "y": 500,
        "wires": [
            [
                "4ebc61f4a95e5b6b",
                "de4661694aa2da61",
                "818df4c15d1494f0"
            ],
            [
                "4ebc61f4a95e5b6b",
                "de4661694aa2da61"
            ]
        ]
    },
    {
        "id": "af1db67c30e3c95d",
        "type": "subflow:0cbd918f05921aae",
        "z": "4da9cf371ae8419b",
        "name": "fetchEnterpriseConfig",
        "x": 520,
        "y": 1160,
        "wires": [
            [
                "73e9448c62ef6ae7"
            ],
            [
                "73e9448c62ef6ae7"
            ]
        ]
    },
    {
        "id": "3c5c210b1d50536e",
        "type": "subflow:0cbd918f05921aae",
        "z": "4da9cf371ae8419b",
        "name": "get business relation with erpId",
        "x": 550,
        "y": 2080,
        "wires": [
            [
                "87765ab14e3c5869"
            ],
            [
                "87765ab14e3c5869"
            ]
        ]
    },
    {
        "id": "d7a45a7ad3fbc0a2",
        "type": "subflow:0cbd918f05921aae",
        "z": "4da9cf371ae8419b",
        "name": "post Business partner",
        "x": 480,
        "y": 2340,
        "wires": [
            [
                "955cb11e6f982222"
            ],
            [
                "955cb11e6f982222"
            ]
        ]
    },
    {
        "id": "7c950c1cc4271c9f",
        "type": "subflow:0cbd918f05921aae",
        "z": "4da9cf371ae8419b",
        "name": "createEnterprise_BP_mapping",
        "x": 510,
        "y": 2500,
        "wires": [
            [
                "f03078a69ddd5d4a",
                "ef61c69ee6ef5810"
            ],
            [
                "f03078a69ddd5d4a"
            ]
        ]
    },
    {
        "id": "3a7fa6f6dd70c8d0",
        "type": "subflow:0cbd918f05921aae",
        "z": "4da9cf371ae8419b",
        "name": "Create business relation with erpId",
        "x": 660,
        "y": 2700,
        "wires": [
            [
                "304d69563ba8a589"
            ],
            [
                "304d69563ba8a589"
            ]
        ]
    },
    {
        "id": "0ad97a91c50a39e9",
        "type": "subflow:0cbd918f05921aae",
        "z": "4da9cf371ae8419b",
        "name": "post business-partner-sales-summary",
        "x": 830,
        "y": 2980,
        "wires": [
            [
                "240587336c8c7250"
            ],
            [
                "240587336c8c7250"
            ]
        ]
    },
    {
        "id": "79e59608eb9ef0e1",
        "type": "http request",
        "z": "4da9cf371ae8419b",
        "name": "read file",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 380,
        "y": 660,
        "wires": [
            [
                "b2a3b862b04de435",
                "1ed544d3cb228275"
            ]
        ]
    },
    {
        "id": "a45ab326986fe884",
        "type": "subflow:9c6db570ab89ba16",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 840,
        "y": 1940,
        "wires": [
            [
                "5f93334e6921a307"
            ]
        ]
    },
    {
        "id": "5f93334e6921a307",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 1940,
        "wires": []
    },
    {
        "id": "37605392dcf57cda",
        "type": "subflow:9c6db570ab89ba16",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 1020,
        "y": 700,
        "wires": [
            [
                "594e84d26375818b"
            ]
        ]
    },
    {
        "id": "96c0ca749d1a284a",
        "type": "subflow:9c6db570ab89ba16",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 820,
        "y": 940,
        "wires": [
            [
                "9124e890f926c0c4"
            ]
        ]
    },
    {
        "id": "05beccd6e5cfcdd3",
        "type": "subflow:9c6db570ab89ba16",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 840,
        "y": 1260,
        "wires": [
            [
                "e551cb7827daed66"
            ]
        ]
    },
    {
        "id": "49c05415aaa5758b",
        "type": "subflow:9c6db570ab89ba16",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 580,
        "y": 2180,
        "wires": [
            [
                "be578370d7b38244"
            ]
        ]
    },
    {
        "id": "58e29f942897dd7b",
        "type": "subflow:9c6db570ab89ba16",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 660,
        "y": 2400,
        "wires": [
            [
                "121f308be5dadcfe"
            ]
        ]
    },
    {
        "id": "3fe3c10ffab67e24",
        "type": "subflow:9c6db570ab89ba16",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 1270,
        "y": 2580,
        "wires": [
            [
                "4ed4306e708f03d9"
            ]
        ]
    },
    {
        "id": "8f88d3455a9f85b7",
        "type": "subflow:9c6db570ab89ba16",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 970,
        "y": 2780,
        "wires": [
            [
                "f8e279de38bcf39d"
            ]
        ]
    },
    {
        "id": "cac4a369917da6b6",
        "type": "subflow:9c6db570ab89ba16",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 1370,
        "y": 3080,
        "wires": [
            [
                "920d0f2f499c4e8e"
            ]
        ]
    },
    {
        "id": "4a1b70c307376ab9",
        "type": "catch",
        "z": "4da9cf371ae8419b",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 220,
        "y": 3240,
        "wires": [
            [
                "ca7d81e0cd438087"
            ]
        ]
    },
    {
        "id": "ca7d81e0cd438087",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "debug 492",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 3240,
        "wires": []
    },
    {
        "id": "b2f9ca5244981d5c",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "debug 493",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 3180,
        "wires": []
    },
    {
        "id": "fdb9380ae81337e6",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\n\n\nflow.set(\"failedRows\",failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 3080,
        "wires": [
            [
                "cac4a369917da6b6"
            ]
        ]
    },
    {
        "id": "7e0892fb2bd7b4ce",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 680,
        "y": 1860,
        "wires": [
            [
                "66e4b74c0833c1aa"
            ]
        ]
    },
    {
        "id": "66e4b74c0833c1aa",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "debug 496",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 1860,
        "wires": []
    },
    {
        "id": "e47eab1550498f8b",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "Setting Global Variables",
        "func": "let userID = env.get(\"OUTLOOKUSERID\")\n\n/*----------------------------    QA  ---------------------------*/\n\n\n\n// const ENV_VARIABLES = {\n//     \"ADMIN_EMAIL\": \"darkhorse@gmail.com\",\n//     \"ADMIN_PASSWORD\": \"User@123\",\n//     \"ACTYV_ENTITY_URL\": \"https://actyv1-platform.qa.actyv.com\",\n//     \"ACTYV_ENTITY_KEY\": \"dark_horse\",\n//     \"AXIS_READ_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABT4dnQAAA=\",\n//     \"AXIS_SUCCESS_FOLDER_ID\":\"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIwAAA=\",\n//     \"AXIS_FAILURE_FOLDER_ID\":\"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIxAAA=\",\n//     \"OUTLOOK_USER_ID\": userID\n// }\n\n/*----------------------------    UAT  ---------------------------*/\n\n\n\n// const ENV_VARIABLES = {\n//     \"ADMIN_EMAIL\": \"darkhorse@gmail.com\",\n//     \"ADMIN_PASSWORD\": \"User@123\",\n//     \"ACTYV_ENTITY_URL\": \"https://actyv1-platform.uat.actyv.com\",\n//     \"ACTYV_ENTITY_KEY\": \"dark_horse\",\n//     \"AXIS_READ_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABT4dnQAAA=\",\n//     \"AXIS_SUCCESS_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIwAAA=\",\n//     \"AXIS_FAILURE_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIxAAA=\",\n//     \"OUTLOOK_USER_ID\": userID\n// }\n\n/*----------------------------    PROD  ---------------------------*/\nconst ENV_VARIABLES = {\n    \"ADMIN_EMAIL\": \"darkhorse1@gmail.com\",\n    \"ADMIN_PASSWORD\": \"890ioP@darkhorse\",\n    \"ACTYV_ENTITY_URL\": \"https://actyv1-platform.qa.actyv.com\",\n    \"ACTYV_ENTITY_KEY\": \"dark_horse1\",\n    \"AXIS_READ_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABT4dnQAAA=\",\n    \"AXIS_SUCCESS_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIwAAA=\",\n    \"AXIS_FAILURE_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIxAAA=\",\n    \"OUTLOOK_USER_ID\": userID\n}\n\nglobal.set(\"ENV_VARIABLES\", ENV_VARIABLES);\n\n// msg.payload = `${XLSX_FILE_PATH}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 60,
        "wires": [
            [
                "cd26050f98d24bc7"
            ]
        ]
    },
    {
        "id": "a50d2d7aa94f9ac7",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "AuthenticateActyvUserReq",
        "func": "// const envVariables = global.get('envVariables')\nconst ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\nconst EMAIL = ENV_VARIABLES.ADMIN_EMAIL;\nconst PASSWORD = ENV_VARIABLES.ADMIN_PASSWORD\n\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 280,
        "wires": [
            [
                "422e21f7fe69c2e3"
            ]
        ]
    },
    {
        "id": "1acf650c047acbe2",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "getAllActyvUsers",
        "func": "\n\nconst GO_URL = env.get('GO_URL');\nconst BANK_KEY = env.get(\"BANK_KEY\")\n\nmsg.url = `${GO_URL}/actyv-entity`;\nmsg.method = \"GET\"\n// msg.headers = {}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 360,
        "wires": [
            [
                "070bdce0f66c1ea7"
            ]
        ]
    },
    {
        "id": "422e21f7fe69c2e3",
        "type": "subflow:0cbd918f05921aae",
        "z": "4da9cf371ae8419b",
        "name": "authentic actyv entity user",
        "x": 560,
        "y": 280,
        "wires": [
            [
                "a78102a8377514d1",
                "c864f6ee23ffbe86"
            ],
            [
                "c864f6ee23ffbe86"
            ]
        ]
    },
    {
        "id": "070bdce0f66c1ea7",
        "type": "subflow:0cbd918f05921aae",
        "z": "4da9cf371ae8419b",
        "name": "getAllActyvUsers",
        "x": 510,
        "y": 360,
        "wires": [
            [
                "a35aadfbbd4eae0d"
            ],
            []
        ]
    },
    {
        "id": "a7e3f5654571c3e1",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "fetchEnterprise",
        "func": "\nconst enterpriseId = msg.enterpriseId\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\")\n}\nmsg.url = `${env.get(\"GO_URL\")}/enterprise/get/${enterpriseId}`;\nmsg.method = 'GET';\nmsg.logger = `fetch enterprise with enterprise id= #${enterpriseId}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 1580,
        "wires": [
            [
                "d28c4897dad0a8c9"
            ]
        ]
    },
    {
        "id": "d28c4897dad0a8c9",
        "type": "subflow:0cbd918f05921aae",
        "z": "4da9cf371ae8419b",
        "name": "fetchEnterpriseConfig",
        "x": 460,
        "y": 1580,
        "wires": [
            [
                "e8e13ad76a3abffc"
            ],
            [
                "6c0e1d43cbb371bd"
            ]
        ]
    },
    {
        "id": "6c0e1d43cbb371bd",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 820,
        "y": 1580,
        "wires": [
            [
                "4045f32dcf65bbcc",
                "ceed68e1f4d09410"
            ]
        ]
    },
    {
        "id": "4045f32dcf65bbcc",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "fetchEnterpriseConfig",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 1580,
        "wires": []
    },
    {
        "id": "e8e13ad76a3abffc",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "function 230",
        "func": "const key = msg?.payload?.key?.toUpperCase();\nmsg.dealerCodePrefix = key\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1560,
        "wires": [
            [
                "6c0e1d43cbb371bd"
            ]
        ]
    },
    {
        "id": "f2f89335d8658733",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "debug 512",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 320,
        "wires": []
    },
    {
        "id": "4ebc61f4a95e5b6b",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "debug 514",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 440,
        "wires": []
    },
    {
        "id": "3bb110a314e3562a",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "debug 515",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 460,
        "wires": []
    },
    {
        "id": "3305b031f920cc9d",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n\n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if (failedRow.length === 0) {\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         \"businessPartnerNotFound\": `${msg.payload}`,\n\n//     })\n// } else {\n//     failedRows.forEach((row) => {\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"]) {\n//             row[\"businessPartnerNotFound\"] = `${msg.payload}`\n//         }\n\n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: \"ALL\",\n    message: `Limit exceeded for file processing, Please contact administrator.`\n})\n\nmsg.allFailed = true\n\nmsg.remark = `Limit exceeded for file processing, Please contact administrator.`\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1020,
        "wires": [
            [
                "216f69e47b0df0f1"
            ]
        ]
    },
    {
        "id": "216f69e47b0df0f1",
        "type": "subflow:9c6db570ab89ba16",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 720,
        "y": 1020,
        "wires": [
            [
                "7640923c21b21e9f"
            ]
        ]
    },
    {
        "id": "7640923c21b21e9f",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 1020,
        "wires": []
    },
    {
        "id": "c864f6ee23ffbe86",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "debug 577",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 220,
        "wires": []
    },
    {
        "id": "daf134fe73241ea9",
        "type": "inject",
        "z": "e19abe9cd46a7f79",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 160,
        "wires": [
            [
                "901bc820c4277448"
            ]
        ]
    },
    {
        "id": "901bc820c4277448",
        "type": "file in",
        "z": "e19abe9cd46a7f79",
        "name": "read file",
        "filename": "/Users/shravanpm/Downloads/combined/combined-Tue May 16 2023.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 360,
        "y": 160,
        "wires": [
            [
                "6eca19d7328e8166"
            ]
        ]
    },
    {
        "id": "c21f465711684975",
        "type": "debug",
        "z": "e19abe9cd46a7f79",
        "name": "debug 472",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 160,
        "wires": []
    },
    {
        "id": "6eca19d7328e8166",
        "type": "function",
        "z": "e19abe9cd46a7f79",
        "name": "find unique",
        "func": "let data = msg.payload\n\n\n\nlet arr = data.split(\"\\n\")\nlet ss = [...new Set(arr)]\nmsg.payload = ss\n\nlet res = [...new Set(arr)]\nconsole.log({arr: JSON.stringify(arr)})\nlet output = []\nconst headers = \"Dealer Code,Invoice Date,Instrument / Invoice Number,Invoice Amount,Financed Date,Financed amount,Repayment Due date,Repayment date,Total amount repaid,Principal repaid,Interest repaid,Loan outstanding\".split(\",\")\n\n\nfor(let i=0;i<res.length-1;i++){\n    \n    let temp = {}\n    let test = res[i].split(\",\")\n    if(!test[1]){\n        continue;\n    }\n    for(let j=0;j<test.length;j++){\n        temp[headers[j]] = test[j]\n    }\n    output.push(temp)\n}\nmsg.payload = output\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 160,
        "wires": [
            [
                "c21f465711684975",
                "fd85b33056688ee4"
            ]
        ]
    },
    {
        "id": "fd85b33056688ee4",
        "type": "csv",
        "z": "e19abe9cd46a7f79",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "Dealer Code,Invoice Date,Instrument / Invoice Number,Invoice Amount,Financed Date,Financed amount,Repayment Due date,Repayment date,Total amount repaid,Principal repaid,Interest repaid,Loan outstanding",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 190,
        "y": 240,
        "wires": [
            [
                "ef460a3c31c88dba"
            ]
        ]
    },
    {
        "id": "ef460a3c31c88dba",
        "type": "file",
        "z": "e19abe9cd46a7f79",
        "name": "write file",
        "filename": "/Users/shravanpm/Downloads/combined-Tue May 16 2023.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 360,
        "y": 240,
        "wires": [
            [
                "e8a7259708bff8dc"
            ]
        ]
    },
    {
        "id": "e8a7259708bff8dc",
        "type": "debug",
        "z": "e19abe9cd46a7f79",
        "name": "debug 473",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 240,
        "wires": []
    },
    {
        "id": "746bb8f1b4e2b4ad",
        "type": "function",
        "z": "e19abe9cd46a7f79",
        "name": "AuthenticateBankReq",
        "func": "flow.set(\"test\",\"test\")\nconst BANK_ADMIN_EMAIL = env.get(\"SGFL_BANK_ADMIN_EMAIL\");\nconst PASSWORD =  env.get(\"PASSWORD\");\nconst ADMIN_URL = env.get('ADMIN_URL');\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \"password\": PASSWORD+\"D\",\n    \"email\": BANK_ADMIN_EMAIL\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 460,
        "wires": [
            [
                "e486de2dd60e1428"
            ]
        ]
    },
    {
        "id": "05aad1a3231aaffb",
        "type": "inject",
        "z": "e19abe9cd46a7f79",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 400,
        "wires": [
            [
                "746bb8f1b4e2b4ad"
            ]
        ]
    },
    {
        "id": "76b230039d8e8eeb",
        "type": "debug",
        "z": "e19abe9cd46a7f79",
        "name": "debug 474",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 400,
        "wires": []
    },
    {
        "id": "e486de2dd60e1428",
        "type": "subflow:0cbd918f05921aae",
        "z": "e19abe9cd46a7f79",
        "name": "",
        "x": 590,
        "y": 460,
        "wires": [
            [
                "76b230039d8e8eeb"
            ],
            [
                "b58e09fdcf44cea6"
            ]
        ]
    },
    {
        "id": "b58e09fdcf44cea6",
        "type": "debug",
        "z": "e19abe9cd46a7f79",
        "name": "debug 478",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 520,
        "wires": []
    },
    {
        "id": "b0c96c77be25284c",
        "type": "inject",
        "z": "e19abe9cd46a7f79",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 700,
        "wires": [
            [
                "ddb119dfdfca36c5"
            ]
        ]
    },
    {
        "id": "ae127bf0076cc872",
        "type": "alafile in",
        "z": "e19abe9cd46a7f79",
        "name": "",
        "filename": "/Users/shravanpm/Downloads/act billing 9th to 10 th may (1)",
        "format": "xlsx",
        "columns": "*",
        "headers": true,
        "x": 330,
        "y": 640,
        "wires": [
            [
                "06eae8b3b9ed406c"
            ]
        ]
    },
    {
        "id": "06eae8b3b9ed406c",
        "type": "debug",
        "z": "e19abe9cd46a7f79",
        "name": "debug 479",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 640,
        "wires": []
    },
    {
        "id": "ddb119dfdfca36c5",
        "type": "file in",
        "z": "e19abe9cd46a7f79",
        "name": "read file",
        "filename": "/Users/shravanpm/Downloads/Sample Invoice File.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 320,
        "y": 800,
        "wires": [
            [
                "556eebbce8eb9a12"
            ]
        ]
    },
    {
        "id": "24056194a6d8ede2",
        "type": "debug",
        "z": "e19abe9cd46a7f79",
        "name": "debug 480",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 800,
        "wires": []
    },
    {
        "id": "556eebbce8eb9a12",
        "type": "csv",
        "z": "e19abe9cd46a7f79",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 470,
        "y": 800,
        "wires": [
            [
                "24056194a6d8ede2"
            ]
        ]
    },
    {
        "id": "e900e41af05501f3",
        "type": "inject",
        "z": "e19abe9cd46a7f79",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 640,
        "wires": [
            [
                "ae127bf0076cc872"
            ]
        ]
    },
    {
        "id": "624438a6b0d259a7",
        "type": "inject",
        "z": "e19abe9cd46a7f79",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1760,
        "wires": [
            [
                "791f548186955298"
            ]
        ]
    },
    {
        "id": "791f548186955298",
        "type": "file in",
        "z": "e19abe9cd46a7f79",
        "name": "read file",
        "filename": "/Users/shravanpm/Downloads/combined-Tue May 23 2023.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 340,
        "y": 1760,
        "wires": [
            [
                "89b52e24f3dc65a6"
            ]
        ]
    },
    {
        "id": "89b52e24f3dc65a6",
        "type": "function",
        "z": "e19abe9cd46a7f79",
        "name": "find unique",
        "func": "let data = msg.payload\nconst LOCAL_PATH = `/Users/shravanpm/Downloads`\n\n\nlet arr = data.split(\"\\n\")\nlet ss = [...new Set(arr)]\nmsg.payload = ss\n\nlet res = [...new Set(arr)]\n\nlet output = []\nlet obj = {}\nconst headers = \"Dealer Code,Invoice Date,Instrument / Invoice Number,Invoice Amount,Financed Date,Financed amount,Repayment Due date,Repayment date,Total amount repaid,Principal repaid,Interest repaid,Loan outstanding\".split(\",\")\n\n\nfor(let i=0;i<res.length-1;i++){\n    \n    let temp = {}\n    let test = res[i].split(\",\")\n    if(!test[1]){\n        continue;\n    }\n    obj[test[0]] = obj[test[0]] ? obj[test[0]]:[]\n    for(let j=0;j<test.length;j++){\n        temp[headers[j]] = test[j]\n    }\n    output.push(temp)\n    obj[test[0]].push(temp)\n}\nconsole.log({obj})\nmsg.payload = output\n// for(let key in obj){\n//     node.send({\n//         path: `${LOCAL_PATH}/csv/${key}.csv`,\n//         payload: obj[key]\n//     })\n// }\nmsg.path = `${LOCAL_PATH}/csv/${\"complete\"}.csv`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1760,
        "wires": [
            [
                "c21c7e71138c206a",
                "6d1fd775fde3949a"
            ]
        ]
    },
    {
        "id": "c21c7e71138c206a",
        "type": "debug",
        "z": "e19abe9cd46a7f79",
        "name": "debug 482",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 1760,
        "wires": []
    },
    {
        "id": "6d1fd775fde3949a",
        "type": "csv",
        "z": "e19abe9cd46a7f79",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "Dealer Code,Invoice Date,Instrument / Invoice Number,Invoice Amount,Financed Date,Financed amount,Repayment Due date,Repayment date,Total amount repaid,Principal repaid,Interest repaid,Loan outstanding",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 170,
        "y": 1840,
        "wires": [
            [
                "d2172b717fc1d159"
            ]
        ]
    },
    {
        "id": "d2172b717fc1d159",
        "type": "file",
        "z": "e19abe9cd46a7f79",
        "name": "write file",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 340,
        "y": 1840,
        "wires": [
            [
                "b9a4a8702ec6b115"
            ]
        ]
    },
    {
        "id": "b9a4a8702ec6b115",
        "type": "debug",
        "z": "e19abe9cd46a7f79",
        "name": "debug 483",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 1840,
        "wires": []
    },
    {
        "id": "5b1ea93d0e99c070",
        "type": "inject",
        "z": "e19abe9cd46a7f79",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 163,
        "y": 961,
        "wires": [
            [
                "99419606e13c800c"
            ]
        ]
    },
    {
        "id": "99419606e13c800c",
        "type": "function",
        "z": "e19abe9cd46a7f79",
        "name": "function 224",
        "func": "flow.set(\"count\",-1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 343,
        "y": 961,
        "wires": [
            [
                "febb882b51913b88"
            ]
        ]
    },
    {
        "id": "febb882b51913b88",
        "type": "function",
        "z": "e19abe9cd46a7f79",
        "name": "function 222",
        "func": "let count = flow.get(\"count\")+1\nflow.set(\"count\",count+1)\nlet arr = [1,2,3,4,5]\nlet n = arr.length\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\nconst v4 = uuid.v4\nif(count<n){\n    node.send({\n        payload:arr[count],\n        count,\n        n\n    })\n}\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "uuid",
                "module": "uuid"
            }
        ],
        "x": 503,
        "y": 961,
        "wires": [
            [
                "dc807818f441fa6a"
            ]
        ]
    },
    {
        "id": "0d97266f46dbcf71",
        "type": "switch",
        "z": "e19abe9cd46a7f79",
        "name": "",
        "property": "count",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "n",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "n",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 343,
        "y": 1341,
        "wires": [
            [
                "febb882b51913b88"
            ],
            [
                "609ef2dcf13ae978"
            ]
        ]
    },
    {
        "id": "dc807818f441fa6a",
        "type": "function",
        "z": "e19abe9cd46a7f79",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst EMAIL = env.get('APL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 323,
        "y": 1021,
        "wires": [
            [
                "da5c82a8a5c246b4"
            ]
        ]
    },
    {
        "id": "f2af592de93b33b1",
        "type": "function",
        "z": "e19abe9cd46a7f79",
        "name": "function 223",
        "func": "node.done()\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 203,
        "y": 1341,
        "wires": [
            [
                "0d97266f46dbcf71"
            ]
        ]
    },
    {
        "id": "609ef2dcf13ae978",
        "type": "debug",
        "z": "e19abe9cd46a7f79",
        "name": "debug 481",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 543,
        "y": 1381,
        "wires": []
    },
    {
        "id": "da5c82a8a5c246b4",
        "type": "subflow:0cbd918f05921aae",
        "z": "e19abe9cd46a7f79",
        "name": "Authenticate enterprise",
        "x": 623,
        "y": 1021,
        "wires": [
            [
                "d81f039a39dfb65a",
                "104d1f6b59cc850b"
            ],
            []
        ]
    },
    {
        "id": "204c688fd3ab6d0f",
        "type": "subflow:0cbd918f05921aae",
        "z": "e19abe9cd46a7f79",
        "name": "Authenticate enterprise",
        "x": 623,
        "y": 1281,
        "wires": [
            [
                "ee0a79663d647c04",
                "f2af592de93b33b1"
            ],
            []
        ]
    },
    {
        "id": "d81f039a39dfb65a",
        "type": "debug",
        "z": "e19abe9cd46a7f79",
        "name": "Authentication",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 960,
        "wires": []
    },
    {
        "id": "104d1f6b59cc850b",
        "type": "function",
        "z": "e19abe9cd46a7f79",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst EMAIL = env.get('APL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 343,
        "y": 1121,
        "wires": [
            [
                "e93f502f2e1f2aba"
            ]
        ]
    },
    {
        "id": "f68f20346f8d282a",
        "type": "function",
        "z": "e19abe9cd46a7f79",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst EMAIL = env.get('APL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 323,
        "y": 1281,
        "wires": [
            [
                "204c688fd3ab6d0f"
            ]
        ]
    },
    {
        "id": "ee0a79663d647c04",
        "type": "debug",
        "z": "e19abe9cd46a7f79",
        "name": "Authentication3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 843,
        "y": 1261,
        "wires": []
    },
    {
        "id": "e93f502f2e1f2aba",
        "type": "subflow:0cbd918f05921aae",
        "z": "e19abe9cd46a7f79",
        "name": "Authenticate enterprise",
        "x": 643,
        "y": 1121,
        "wires": [
            [
                "0513cb31ebea522d",
                "e830ef784c58dc03"
            ],
            []
        ]
    },
    {
        "id": "e51b207ab5802caa",
        "type": "subflow:0cbd918f05921aae",
        "z": "e19abe9cd46a7f79",
        "name": "Authenticate enterprise",
        "x": 623,
        "y": 1201,
        "wires": [
            [
                "f68f20346f8d282a",
                "0b0796510f3fb2fa"
            ],
            []
        ]
    },
    {
        "id": "0513cb31ebea522d",
        "type": "function",
        "z": "e19abe9cd46a7f79",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst EMAIL = env.get('APL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 323,
        "y": 1201,
        "wires": [
            [
                "e51b207ab5802caa"
            ]
        ]
    },
    {
        "id": "e830ef784c58dc03",
        "type": "debug",
        "z": "e19abe9cd46a7f79",
        "name": "Authentication1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 843,
        "y": 1101,
        "wires": []
    },
    {
        "id": "0b0796510f3fb2fa",
        "type": "debug",
        "z": "e19abe9cd46a7f79",
        "name": "Authentication2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 843,
        "y": 1181,
        "wires": []
    },
    {
        "id": "b3ed412c620fe1fe",
        "type": "inject",
        "z": "e19abe9cd46a7f79",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 2040,
        "wires": [
            [
                "f5cbdc224ceec7ea"
            ]
        ]
    },
    {
        "id": "c6a317d73eba55d5",
        "type": "csv",
        "z": "e19abe9cd46a7f79",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "all",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 190,
        "y": 2120,
        "wires": [
            [
                "c237be7ab9fbd4d1"
            ]
        ]
    },
    {
        "id": "c237be7ab9fbd4d1",
        "type": "file",
        "z": "e19abe9cd46a7f79",
        "name": "write file",
        "filename": "/Users/shravanpm/Downloads/combined May 16 2023.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 360,
        "y": 2120,
        "wires": [
            [
                "49c2cd96a27071ef"
            ]
        ]
    },
    {
        "id": "49c2cd96a27071ef",
        "type": "debug",
        "z": "e19abe9cd46a7f79",
        "name": "debug 488",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 2120,
        "wires": []
    },
    {
        "id": "f5cbdc224ceec7ea",
        "type": "function",
        "z": "e19abe9cd46a7f79",
        "name": "data",
        "func": "msg.payload = [{ \"id\": \"d20ceb2a-8541-40c7-8a63-e19f268d2fcb\", \"loanID\": \"4c6d919b-d3ae-4dc4-ac56-cbb2fbbaf47b\", \"amount\": \"1040849\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-05-11T21:07:26.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63a3dee6a4f0cc20f965a520\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"EVERGREEN ENTERPRISES\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"0339274273\"], \"crn\": \"2003538\" }, { \"id\": \"baa4c53e-2efc-4ac4-b2d2-9a7c67fe4923\", \"loanID\": \"4c6d919b-d3ae-4dc4-ac56-cbb2fbbaf47b\", \"amount\": \"1040849\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-05-11T21:07:26.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63a3dee6a4f0cc20f965a520\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"EVERGREEN ENTERPRISES\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"0339274273\"], \"crn\": \"2003538\" }, { \"id\": \"56f7d9c5-6d42-4cd2-a39a-1d5545187772\", \"loanID\": \"d5355ff4-cdfa-4260-9e9e-454c9f25fd63\", \"amount\": \"185432\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-05-06T17:00:55.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63e37f01e06fdd63c032e103\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"KOUSHIK TRADERS\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"299087843\"], \"crn\": \"2011781\" }, { \"id\": \"3c2b8cc3-26eb-40bd-8ee0-68796f7bc0f3\", \"loanID\": \"d5355ff4-cdfa-4260-9e9e-454c9f25fd63\", \"amount\": \"240853\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-04-27T10:28:54.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63e37f01e06fdd63c032e103\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"KOUSHIK TRADERS\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"299086635\"], \"crn\": \"2011781\" }, { \"id\": \"8aee65b6-1920-4407-b97e-607be8990e0c\", \"loanID\": \"d5355ff4-cdfa-4260-9e9e-454c9f25fd63\", \"amount\": \"424.25\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-01T13:46:47.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63e37f01e06fdd63c032e103\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"KOUSHIK TRADERS\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2011781\" }, { \"id\": \"85e0399f-67d1-487c-963e-8240f7968d12\", \"loanID\": \"d5355ff4-cdfa-4260-9e9e-454c9f25fd63\", \"amount\": \"111.69\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-01T13:46:47.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63e37f01e06fdd63c032e103\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"KOUSHIK TRADERS\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2011781\" }, { \"id\": \"2eab7855-f136-4e64-8581-f5daba6a56e4\", \"loanID\": \"d5355ff4-cdfa-4260-9e9e-454c9f25fd63\", \"amount\": \"707.95\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-01T13:46:47.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63e37f01e06fdd63c032e103\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"KOUSHIK TRADERS\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2011781\" }, { \"id\": \"16ad9a66-8fe2-4a82-a320-93d4f7c537d1\", \"loanID\": \"d5355ff4-cdfa-4260-9e9e-454c9f25fd63\", \"amount\": \"1560.44\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-01T13:46:47.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63e37f01e06fdd63c032e103\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"KOUSHIK TRADERS\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2011781\" }, { \"id\": \"123e9b00-3232-4020-9fcc-0f8189916701\", \"loanID\": \"d5355ff4-cdfa-4260-9e9e-454c9f25fd63\", \"amount\": \"185432\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-05-01T13:46:47.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63e37f01e06fdd63c032e103\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"KOUSHIK TRADERS\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"299087843\"], \"crn\": \"2011781\" }, { \"id\": \"7561f06d-e311-4775-b925-410f4eb29194\", \"loanID\": \"d5355ff4-cdfa-4260-9e9e-454c9f25fd63\", \"amount\": \"702\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-01T13:46:47.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63e37f01e06fdd63c032e103\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"KOUSHIK TRADERS\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2011781\" }, { \"id\": \"2a4166f5-c616-4c2b-a0f6-1a398110f410\", \"loanID\": \"d5355ff4-cdfa-4260-9e9e-454c9f25fd63\", \"amount\": \"240853\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-04-27T10:28:54.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63e37f01e06fdd63c032e103\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"KOUSHIK TRADERS\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"299086635\"], \"crn\": \"2011781\" }, { \"id\": \"e04e74b9-e30e-4de6-97cd-22dbbecd2638\", \"loanID\": \"d5355ff4-cdfa-4260-9e9e-454c9f25fd63\", \"amount\": \"185432\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-04-27T10:28:54.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63e37f01e06fdd63c032e103\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"KOUSHIK TRADERS\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"299087843\"], \"crn\": \"2011781\" }, { \"id\": \"17bd82d4-b2e4-4c6f-937b-efdb48ea6713\", \"loanID\": \"84ff74b3-4dff-40b1-8c3c-11d7b581ed07\", \"amount\": \"266117\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-05-11T16:50:42.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63e0a81b635a3c7db6c6abbc\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"BND MARKETING\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"299087911\"], \"crn\": \"2013313\" }, { \"id\": \"a9421a6b-4a0c-49b7-b25f-87ef72cc52d8\", \"loanID\": \"84ff74b3-4dff-40b1-8c3c-11d7b581ed07\", \"amount\": \"386139\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-05-11T16:50:42.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63e0a81b635a3c7db6c6abbc\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"BND MARKETING\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"299088065\"], \"crn\": \"2013313\" }, { \"id\": \"17dfdfd7-7f4c-4278-8f7d-9913ed487882\", \"loanID\": \"84ff74b3-4dff-40b1-8c3c-11d7b581ed07\", \"amount\": \"266117\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-05-11T16:50:42.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63e0a81b635a3c7db6c6abbc\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"BND MARKETING\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"299087911\"], \"crn\": \"2013313\" }, { \"id\": \"772aaca2-9366-4088-89c6-22a6c944c4b7\", \"loanID\": \"84ff74b3-4dff-40b1-8c3c-11d7b581ed07\", \"amount\": \"386139\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-05-11T16:50:42.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63e0a81b635a3c7db6c6abbc\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"BND MARKETING\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"299088065\"], \"crn\": \"2013313\" }, { \"id\": \"2cd5a962-daaa-42cf-91fd-f78c8388be35\", \"loanID\": \"84ff74b3-4dff-40b1-8c3c-11d7b581ed07\", \"amount\": \"1137.3\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-02T21:02:58.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63e0a81b635a3c7db6c6abbc\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"BND MARKETING\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2013313\" }, { \"id\": \"452bca8b-5f30-45b7-95e2-303b2a25535b\", \"loanID\": \"84ff74b3-4dff-40b1-8c3c-11d7b581ed07\", \"amount\": \"1018.94\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-02T21:02:58.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63e0a81b635a3c7db6c6abbc\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"BND MARKETING\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2013313\" }, { \"id\": \"d3d96797-9a2c-4371-b58e-d56d18c8e219\", \"loanID\": \"84ff74b3-4dff-40b1-8c3c-11d7b581ed07\", \"amount\": \"266117\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-05-02T21:02:58.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63e0a81b635a3c7db6c6abbc\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"BND MARKETING\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"299087911\"], \"crn\": \"2013313\" }, { \"id\": \"41f0827b-e535-47c4-9095-65319a37b544\", \"loanID\": \"64335336-8715-4522-8b3a-212f07c3d3d9\", \"amount\": \"100\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-06T17:00:56.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63f8662633b09c5d15045421\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"K.K.AGENCIES\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000111\" }, { \"id\": \"b5349e09-c5a5-4581-b2b8-2cd09940aa98\", \"loanID\": \"64335336-8715-4522-8b3a-212f07c3d3d9\", \"amount\": \"106.3\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-09T17:28:44.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63f8662633b09c5d15045421\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"K.K.AGENCIES\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000111\" }, { \"id\": \"9d791b4d-a214-42ff-a162-c4500c94fba4\", \"loanID\": \"64335336-8715-4522-8b3a-212f07c3d3d9\", \"amount\": \"40.25\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-09T17:28:44.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63f8662633b09c5d15045421\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"K.K.AGENCIES\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000111\" }, { \"id\": \"12e6b0c5-262e-4a00-95f8-fb7c4cfd49d9\", \"loanID\": \"64335336-8715-4522-8b3a-212f07c3d3d9\", \"amount\": \"1436.63\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-09T17:28:43.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63f8662633b09c5d15045421\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"K.K.AGENCIES\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000111\" }, { \"id\": \"33345320-58f5-4853-95fe-fa3efb4fd4e3\", \"loanID\": \"64335336-8715-4522-8b3a-212f07c3d3d9\", \"amount\": \"101.97\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-09T17:28:44.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63f8662633b09c5d15045421\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"K.K.AGENCIES\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000111\" }, { \"id\": \"634cf6f1-eb42-4a33-8a0e-81aed1af262b\", \"loanID\": \"64335336-8715-4522-8b3a-212f07c3d3d9\", \"amount\": \"44.3\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-09T17:28:43.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63f8662633b09c5d15045421\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"K.K.AGENCIES\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000111\" }, { \"id\": \"ace6ed6b-eace-4cbd-aa26-ca1466cb30f8\", \"loanID\": \"64335336-8715-4522-8b3a-212f07c3d3d9\", \"amount\": \"662.25\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-09T17:28:44.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63f8662633b09c5d15045421\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"K.K.AGENCIES\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000111\" }, { \"id\": \"5b35195c-c9ee-4ea9-8b02-8c8165acc811\", \"loanID\": \"64335336-8715-4522-8b3a-212f07c3d3d9\", \"amount\": \"1541.8\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-09T17:28:44.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63f8662633b09c5d15045421\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"K.K.AGENCIES\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000111\" }, { \"id\": \"bde5d28a-b81d-463d-8279-cba88e936577\", \"loanID\": \"64335336-8715-4522-8b3a-212f07c3d3d9\", \"amount\": \"131\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-09T17:28:44.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63f8662633b09c5d15045421\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"K.K.AGENCIES\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000111\" }, { \"id\": \"f752484b-0322-45a0-910c-cf95c713fc6a\", \"loanID\": \"64335336-8715-4522-8b3a-212f07c3d3d9\", \"amount\": \"60.55\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-09T17:28:44.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63f8662633b09c5d15045421\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"K.K.AGENCIES\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000111\" }, { \"id\": \"6b73171c-e975-43b1-beb1-6664403f1616\", \"loanID\": \"64335336-8715-4522-8b3a-212f07c3d3d9\", \"amount\": \"445.05\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-09T17:28:44.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63f8662633b09c5d15045421\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"K.K.AGENCIES\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000111\" }, { \"id\": \"8bdf5e05-fbc9-48d6-a753-456c7977fc59\", \"loanID\": \"64335336-8715-4522-8b3a-212f07c3d3d9\", \"amount\": \"169.3\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-09T17:28:44.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63f8662633b09c5d15045421\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"K.K.AGENCIES\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000111\" }, { \"id\": \"a4593df3-f657-4ff8-9749-8e8c6f9a4f80\", \"loanID\": \"64335336-8715-4522-8b3a-212f07c3d3d9\", \"amount\": \"37688\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-05-09T17:28:43.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63f8662633b09c5d15045421\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"K.K.AGENCIES\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"339260074\"], \"crn\": \"2000111\" }, { \"id\": \"7ddc30e4-ab05-4b0f-806e-08589d225b3f\", \"loanID\": \"64335336-8715-4522-8b3a-212f07c3d3d9\", \"amount\": \"37688\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-05-15T18:40:44.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63f8662633b09c5d15045421\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"K.K.AGENCIES\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000111\" }, { \"id\": \"90766e6f-d579-43f9-a446-63b7533e3b08\", \"loanID\": \"64335336-8715-4522-8b3a-212f07c3d3d9\", \"amount\": \"375218\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-05-15T18:40:44.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63f8662633b09c5d15045421\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"K.K.AGENCIES\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000111\" }, { \"id\": \"411d57df-0343-40b9-85ed-5b0c95e37199\", \"loanID\": \"a4e6e6c1-2823-41ee-88cb-cf5e8ac61940\", \"amount\": \"412.8\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-04T18:34:49.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63ca96809515b62a9852912a\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"DHANABALAN AGENCY (LIA) - MADURAI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000250\" }, { \"id\": \"33e652be-9bd4-4fb9-b4d4-c0026b2b93d9\", \"loanID\": \"a4e6e6c1-2823-41ee-88cb-cf5e8ac61940\", \"amount\": \"150.99\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-04T18:34:49.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63ca96809515b62a9852912a\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"DHANABALAN AGENCY (LIA) - MADURAI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000250\" }, { \"id\": \"6eabf4c3-5980-4f4a-8509-30eae197ab75\", \"loanID\": \"a4e6e6c1-2823-41ee-88cb-cf5e8ac61940\", \"amount\": \"39.51\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-04T18:34:49.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63ca96809515b62a9852912a\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"DHANABALAN AGENCY (LIA) - MADURAI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000250\" }, { \"id\": \"550afa65-4a08-414c-b2b5-47051ab6a562\", \"loanID\": \"a4e6e6c1-2823-41ee-88cb-cf5e8ac61940\", \"amount\": \"118.8\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-04T18:34:49.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63ca96809515b62a9852912a\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"DHANABALAN AGENCY (LIA) - MADURAI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000250\" }, { \"id\": \"06b2ccda-f63c-4bb3-9a80-34b45c47f004\", \"loanID\": \"a4e6e6c1-2823-41ee-88cb-cf5e8ac61940\", \"amount\": \"280320\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-05-04T18:34:49.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63ca96809515b62a9852912a\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"DHANABALAN AGENCY (LIA) - MADURAI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"339263812\"], \"crn\": \"2000250\" }, { \"id\": \"e3b26be4-4553-4b5e-971f-777a4bd9b615\", \"loanID\": \"7e9a66c7-a818-4928-b238-585eb50ec6d9\", \"amount\": \"46668\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-05-09T19:12:41.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63a3ded6a4f0cc6a4565a32f\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"SM. ENTERPRISES-THENI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"339263808\"], \"crn\": \"2000141\" }, { \"id\": \"2184ff5e-0e48-4b51-aab3-abe5dea1df1a\", \"loanID\": \"7e9a66c7-a818-4928-b238-585eb50ec6d9\", \"amount\": \"196158\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-05-06T17:12:47.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63a3ded6a4f0cc6a4565a32f\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"SM. ENTERPRISES-THENI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"339262486\"], \"crn\": \"2000141\" }, { \"id\": \"5614e980-5409-49b5-a520-d6e3f4bb7ba5\", \"loanID\": \"7e9a66c7-a818-4928-b238-585eb50ec6d9\", \"amount\": \"196158\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-05-09T19:12:41.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63a3ded6a4f0cc6a4565a32f\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"SM. ENTERPRISES-THENI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"339262486\"], \"crn\": \"2000141\" }, { \"id\": \"771a2b83-05cc-46f2-b120-b3e1ed7102e1\", \"loanID\": \"7e9a66c7-a818-4928-b238-585eb50ec6d9\", \"amount\": \"21072\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-05-09T19:12:41.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63a3ded6a4f0cc6a4565a32f\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"SM. ENTERPRISES-THENI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"339262718\"], \"crn\": \"2000141\" }, { \"id\": \"5202f049-38f4-4850-8a14-5d00f1b89342\", \"loanID\": \"7e9a66c7-a818-4928-b238-585eb50ec6d9\", \"amount\": \"196158\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-05-05T16:06:46.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63a3ded6a4f0cc6a4565a32f\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"SM. ENTERPRISES-THENI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"339262486\"], \"crn\": \"2000141\" }, { \"id\": \"963cbf3c-95a4-4bd7-9fa7-facffe9113c2\", \"loanID\": \"7e9a66c7-a818-4928-b238-585eb50ec6d9\", \"amount\": \"90.5\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-04T16:24:52.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63a3ded6a4f0cc6a4565a32f\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"SM. ENTERPRISES-THENI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000141\" }, { \"id\": \"1252d382-2820-4389-9fb5-2fc57c94354b\", \"loanID\": \"7e9a66c7-a818-4928-b238-585eb50ec6d9\", \"amount\": \"29.35\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-04T16:24:52.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63a3ded6a4f0cc6a4565a32f\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"SM. ENTERPRISES-THENI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000141\" }, { \"id\": \"9be1b85e-855e-4630-8ca5-8163d176f791\", \"loanID\": \"7e9a66c7-a818-4928-b238-585eb50ec6d9\", \"amount\": \"67.9\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-04T16:24:52.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63a3ded6a4f0cc6a4565a32f\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"SM. ENTERPRISES-THENI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000141\" }, { \"id\": \"e299be3d-a50c-4fd7-b8cf-0a3316729ca5\", \"loanID\": \"7e9a66c7-a818-4928-b238-585eb50ec6d9\", \"amount\": \"68.7\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-04T16:24:52.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63a3ded6a4f0cc6a4565a32f\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"SM. ENTERPRISES-THENI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000141\" }, { \"id\": \"42cf4464-34f8-414f-a1fe-d3cfe4963855\", \"loanID\": \"7e9a66c7-a818-4928-b238-585eb50ec6d9\", \"amount\": \"60.51\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-04T16:24:52.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63a3ded6a4f0cc6a4565a32f\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"SM. ENTERPRISES-THENI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000141\" }, { \"id\": \"44e0fd8f-496d-4eac-80bb-2490afd20c80\", \"loanID\": \"7e9a66c7-a818-4928-b238-585eb50ec6d9\", \"amount\": \"272.48\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-04T16:24:52.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63a3ded6a4f0cc6a4565a32f\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"SM. ENTERPRISES-THENI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000141\" }, { \"id\": \"7cbd49cf-98af-4499-8e35-627026e810a2\", \"loanID\": \"7e9a66c7-a818-4928-b238-585eb50ec6d9\", \"amount\": \"577.7\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-04T16:24:52.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63a3ded6a4f0cc6a4565a32f\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"SM. ENTERPRISES-THENI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000141\" }, { \"id\": \"fc814951-56d2-4f49-947c-a90f3b38b05f\", \"loanID\": \"7e9a66c7-a818-4928-b238-585eb50ec6d9\", \"amount\": \"284.94\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-04T16:24:52.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63a3ded6a4f0cc6a4565a32f\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"SM. ENTERPRISES-THENI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000141\" }, { \"id\": \"89568529-8612-4a05-95a8-4a94648e8b22\", \"loanID\": \"7e9a66c7-a818-4928-b238-585eb50ec6d9\", \"amount\": \"30736\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-04-27T17:43:02.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63a3ded6a4f0cc6a4565a32f\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"SM. ENTERPRISES-THENI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"339260079\"], \"crn\": \"2000141\" }, { \"id\": \"312739bc-3360-46e6-96d4-24039325f0d4\", \"loanID\": \"7e9a66c7-a818-4928-b238-585eb50ec6d9\", \"amount\": \"196158\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-05-04T20:35:02.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63a3ded6a4f0cc6a4565a32f\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"SM. ENTERPRISES-THENI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"339262486\"], \"crn\": \"2000141\" }, { \"id\": \"3772dd7b-97ee-406c-be32-bf015f289a03\", \"loanID\": \"7e9a66c7-a818-4928-b238-585eb50ec6d9\", \"amount\": \"527.97\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-04T16:24:52.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63a3ded6a4f0cc6a4565a32f\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"SM. ENTERPRISES-THENI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000141\" }, { \"id\": \"bdd45891-c773-4746-a0fb-bdc23f57e7ee\", \"loanID\": \"7e9a66c7-a818-4928-b238-585eb50ec6d9\", \"amount\": \"168179\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-04-27T17:43:02.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63a3ded6a4f0cc6a4565a32f\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"SM. ENTERPRISES-THENI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"339259271\"], \"crn\": \"2000141\" }, { \"id\": \"b8f2a83f-a907-429d-9df9-a6cb7ce99fa7\", \"loanID\": \"7e9a66c7-a818-4928-b238-585eb50ec6d9\", \"amount\": \"71169\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-05-04T16:24:52.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63a3ded6a4f0cc6a4565a32f\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"SM. ENTERPRISES-THENI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"339259270\"], \"crn\": \"2000141\" }, { \"id\": \"7823fd46-8a6a-486b-a61d-6467bf944d75\", \"loanID\": \"7e9a66c7-a818-4928-b238-585eb50ec6d9\", \"amount\": \"62.1\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"INTEREST\", \"date\": \"2023-05-04T16:24:52.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63a3ded6a4f0cc6a4565a32f\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"SM. ENTERPRISES-THENI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"N/A\"], \"crn\": \"2000141\" }, { \"id\": \"019604f2-e824-46de-a3c3-a70cb314c326\", \"loanID\": \"7e9a66c7-a818-4928-b238-585eb50ec6d9\", \"amount\": \"23054\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-04-27T17:43:02.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63a3ded6a4f0cc6a4565a32f\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"SM. ENTERPRISES-THENI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"339260005\"], \"crn\": \"2000141\" }, { \"id\": \"4b3e5f3b-7ba8-4db1-b093-7936831c6fa8\", \"loanID\": \"7e9a66c7-a818-4928-b238-585eb50ec6d9\", \"amount\": \"168179\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-05-04T16:24:52.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63a3ded6a4f0cc6a4565a32f\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"SM. ENTERPRISES-THENI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"339259271\"], \"crn\": \"2000141\" }, { \"id\": \"b7aef147-60e3-452f-bc87-8f6080a377c9\", \"loanID\": \"7e9a66c7-a818-4928-b238-585eb50ec6d9\", \"amount\": \"71169\", \"bankID\": \"63da88d30f3330f1ad09e175\", \"paymentMethod\": \"PRINCIPAL\", \"date\": \"2023-05-04T20:35:02.000Z\", \"enterpriseID\": \"639ad10556684b825577d96d\", \"borrowerID\": \"63a3ded6a4f0cc6a4565a32f\", \"businessType\": \"DISTRIBUTOR\", \"productType\": \"640ebae1db35bfe6d5c59fb6\", \"borrowerName\": \"SM. ENTERPRISES-THENI\", \"enterpriseName\": \"CavinKare\", \"bankName\": \"Axis Bank\", \"invoiceNo\": [\"339259270\"], \"crn\": \"2000141\" }]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2040,
        "wires": [
            [
                "c6a317d73eba55d5"
            ]
        ]
    },
    {
        "id": "1a542624a9607e0b",
        "type": "status",
        "z": "a2d4a4280cb86ad3",
        "name": "",
        "scope": [
            "e248b9dc0d4916f2"
        ],
        "x": 180,
        "y": 140,
        "wires": [
            [
                "84e8b28d7e547fee"
            ]
        ]
    },
    {
        "id": "495b38c7803ed08b",
        "type": "inject",
        "z": "a2d4a4280cb86ad3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 280,
        "wires": [
            [
                "c3a7c44e07d45da0"
            ]
        ]
    },
    {
        "id": "c3a7c44e07d45da0",
        "type": "function",
        "z": "a2d4a4280cb86ad3",
        "name": "function 225",
        "func": "flow.set(\"count\",-1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 280,
        "wires": [
            [
                "0a67258680e0e1cc"
            ]
        ]
    },
    {
        "id": "0a67258680e0e1cc",
        "type": "function",
        "z": "a2d4a4280cb86ad3",
        "name": "function 226",
        "func": "let count = flow.get(\"count\")+1\nflow.set(\"count\",count+1)\nlet arr = [1,2,3,4,5]\nlet n = arr.length\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\nconst v4 = uuid.v4\nif(count<n){\n    node.send({\n        payload:arr[count],\n        count,\n        n\n    })\n}\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "uuid",
                "module": "uuid"
            }
        ],
        "x": 530,
        "y": 280,
        "wires": [
            [
                "c4a2eeb0095c1ded"
            ]
        ]
    },
    {
        "id": "e8f9a3c2f44ffbeb",
        "type": "switch",
        "z": "a2d4a4280cb86ad3",
        "name": "",
        "property": "count",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "n",
                "vt": "msg"
            },
            {
                "t": "gte",
                "v": "n",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 660,
        "wires": [
            [
                "0a67258680e0e1cc"
            ],
            [
                "78696a80ebab3646"
            ]
        ]
    },
    {
        "id": "c4a2eeb0095c1ded",
        "type": "function",
        "z": "a2d4a4280cb86ad3",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst EMAIL = env.get('APL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 340,
        "wires": [
            [
                "ac450afc458669ae"
            ]
        ]
    },
    {
        "id": "e248b9dc0d4916f2",
        "type": "function",
        "z": "a2d4a4280cb86ad3",
        "name": "function 227",
        "func": "node.done()\nnode.status({fill:\"red\",shape:\"ring\",text:\"message\"});\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 660,
        "wires": [
            [
                "e8f9a3c2f44ffbeb"
            ]
        ]
    },
    {
        "id": "78696a80ebab3646",
        "type": "debug",
        "z": "a2d4a4280cb86ad3",
        "name": "debug 484",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 700,
        "wires": []
    },
    {
        "id": "ac450afc458669ae",
        "type": "subflow:0cbd918f05921aae",
        "z": "a2d4a4280cb86ad3",
        "name": "Authenticate enterprise",
        "x": 610,
        "y": 340,
        "wires": [
            [
                "6ba2c07f68370844",
                "0172fff547143cc4"
            ],
            []
        ]
    },
    {
        "id": "e7fc101a7eecc696",
        "type": "subflow:0cbd918f05921aae",
        "z": "a2d4a4280cb86ad3",
        "name": "Authenticate enterprise",
        "x": 610,
        "y": 600,
        "wires": [
            [
                "3243aa1e7efe1367",
                "e248b9dc0d4916f2"
            ],
            []
        ]
    },
    {
        "id": "6ba2c07f68370844",
        "type": "debug",
        "z": "a2d4a4280cb86ad3",
        "name": "Authentication",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 827,
        "y": 279,
        "wires": []
    },
    {
        "id": "0172fff547143cc4",
        "type": "function",
        "z": "a2d4a4280cb86ad3",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst EMAIL = env.get('APL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 440,
        "wires": [
            [
                "d5d26d841bb42ec1"
            ]
        ]
    },
    {
        "id": "b2de2a8dc8767b17",
        "type": "function",
        "z": "a2d4a4280cb86ad3",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst EMAIL = env.get('APL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 600,
        "wires": [
            [
                "e7fc101a7eecc696"
            ]
        ]
    },
    {
        "id": "3243aa1e7efe1367",
        "type": "debug",
        "z": "a2d4a4280cb86ad3",
        "name": "Authentication3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 580,
        "wires": []
    },
    {
        "id": "d5d26d841bb42ec1",
        "type": "subflow:0cbd918f05921aae",
        "z": "a2d4a4280cb86ad3",
        "name": "Authenticate enterprise",
        "x": 630,
        "y": 440,
        "wires": [
            [
                "8fe331a97a4eab71",
                "4db1985f2b298c89"
            ],
            []
        ]
    },
    {
        "id": "b0afd5c8056ffc5a",
        "type": "subflow:0cbd918f05921aae",
        "z": "a2d4a4280cb86ad3",
        "name": "Authenticate enterprise",
        "x": 610,
        "y": 520,
        "wires": [
            [
                "b2de2a8dc8767b17",
                "1fb6ed54e79c12ad"
            ],
            []
        ]
    },
    {
        "id": "8fe331a97a4eab71",
        "type": "function",
        "z": "a2d4a4280cb86ad3",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst EMAIL = env.get('APL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 520,
        "wires": [
            [
                "b0afd5c8056ffc5a"
            ]
        ]
    },
    {
        "id": "4db1985f2b298c89",
        "type": "debug",
        "z": "a2d4a4280cb86ad3",
        "name": "Authentication1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 420,
        "wires": []
    },
    {
        "id": "1fb6ed54e79c12ad",
        "type": "debug",
        "z": "a2d4a4280cb86ad3",
        "name": "Authentication2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 500,
        "wires": []
    },
    {
        "id": "84e8b28d7e547fee",
        "type": "debug",
        "z": "a2d4a4280cb86ad3",
        "name": "debug 485",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 140,
        "wires": []
    },
    {
        "id": "91f3c354bdf65d24",
        "type": "inject",
        "z": "a2d4a4280cb86ad3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1140,
        "wires": [
            [
                "52fec3144c689418"
            ]
        ]
    },
    {
        "id": "52fec3144c689418",
        "type": "function",
        "z": "a2d4a4280cb86ad3",
        "name": "Setting Global Variables",
        "func": "\n\n/*----------------------------    QA  ---------------------------*/\n\nlet userID = env.get(\"OUTLOOKUSERID\")\n\nconst ENV_VARIABLES = {\n    \"ADMIN_EMAIL\": \"darkhorse1@gmail.com\",\n    \"ADMIN_PASSWORD\": \"890ioP@darkhorse\",\n    \"ACTYV_ENTITY_URL\": \"https://actyv1-platform.qa.actyv.com\",\n    \"ACTYV_ENTITY_KEY\": \"dark_horse1\",\n    \"AXIS_READ_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABT4dnQAAA=\",\n    \"AXIS_SUCCESS_FOLDER_ID\":\"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIwAAA=\",\n    \"AXIS_FAILURE_FOLDER_ID\":\"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIxAAA=\",\n    \"OUTLOOK_USER_ID\": userID\n}\n\nglobal.set(\"ENV_VARIABLES\", ENV_VARIABLES);\n\n// msg.payload = `${XLSX_FILE_PATH}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1140,
        "wires": [
            [
                "96a2d42d76250514"
            ]
        ]
    },
    {
        "id": "96a2d42d76250514",
        "type": "function",
        "z": "a2d4a4280cb86ad3",
        "name": "AuthenticateActyvUserReq",
        "func": "// const envVariables = global.get('envVariables')\nconst ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\nconst EMAIL = ENV_VARIABLES.ADMIN_EMAIL;\nconst PASSWORD = ENV_VARIABLES.ADMIN_PASSWORD\n\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 1240,
        "wires": [
            [
                "24c73d63b286bd8e"
            ]
        ]
    },
    {
        "id": "24c73d63b286bd8e",
        "type": "subflow:0cbd918f05921aae",
        "z": "a2d4a4280cb86ad3",
        "name": "AuthenticateActyvUser",
        "x": 480,
        "y": 1240,
        "wires": [
            [
                "a298d91666b23dc3"
            ],
            []
        ]
    },
    {
        "id": "a298d91666b23dc3",
        "type": "function",
        "z": "a2d4a4280cb86ad3",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1240,
        "wires": [
            [
                "3d9c773aef1fdf3e"
            ]
        ]
    },
    {
        "id": "3d9c773aef1fdf3e",
        "type": "function",
        "z": "a2d4a4280cb86ad3",
        "name": "getAllActyvUsers",
        "func": "\n\nconst GO_URL = env.get('GO_URL');\nconst BANK_KEY = env.get(\"BANK_KEY\")\n\nmsg.url = `${GO_URL}/actyv-entity`;\nmsg.method = \"GET\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 1400,
        "wires": [
            [
                "0b495fd8a5c0828a"
            ]
        ]
    },
    {
        "id": "0b495fd8a5c0828a",
        "type": "subflow:0cbd918f05921aae",
        "z": "a2d4a4280cb86ad3",
        "name": "getAllActyvUsers",
        "x": 430,
        "y": 1400,
        "wires": [
            [
                "e586b0a34c08bfdb"
            ],
            []
        ]
    },
    {
        "id": "e586b0a34c08bfdb",
        "type": "function",
        "z": "a2d4a4280cb86ad3",
        "name": "saveActyvId",
        "func": "// msg.bankId = msg.payload._id\n\nconst ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\nconst actyvKey = ENV_VARIABLES.ACTYV_ENTITY_KEY\nconst actyvEntity = msg.payload.filter((actyv)=>actyv.key === actyvKey)\nflow.set(\"actyvEntityId\", actyvEntity[0]._id);\nmsg.actyvEntityId = actyvEntity[0]._id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1400,
        "wires": [
            [
                "a4a3576b79673e08"
            ]
        ]
    },
    {
        "id": "a4a3576b79673e08",
        "type": "function",
        "z": "a2d4a4280cb86ad3",
        "name": "function 228",
        "func": "let crn = [\"2000111\", \"2003538\", \"2000141\", \"2013313\", \"2011781\", \"2000095\",\"2000250\"]\nflow.set(\"res\",[])\nfor(let key of crn){\n    node.send({\n        crn: key\n    })\n}\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1480,
        "wires": [
            [
                "643145fd104a3bef"
            ]
        ]
    },
    {
        "id": "643145fd104a3bef",
        "type": "function",
        "z": "a2d4a4280cb86ad3",
        "name": "getLoanTermByCrnReq",
        "func": "\nconst PAYLATER_URL = env.get('PAYLATER_URL');\nconst actyvToken = flow.get(\"actyToken\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/fetchByCrnNumber`;\nmsg.method = \"POST\";\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`,\n    actyventityid: flow.get(\"actyvEntityId\")\n}\n\nmsg.payload = { \n    crnNumber: `${msg.crn}`\n    // crnNumber:\"SGFLTD101104\"\n    }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1560,
        "wires": [
            [
                "5ee923ef73b98d82"
            ]
        ]
    },
    {
        "id": "5ee923ef73b98d82",
        "type": "subflow:0cbd918f05921aae",
        "z": "a2d4a4280cb86ad3",
        "name": "getLoanTermByCrn",
        "x": 490,
        "y": 1560,
        "wires": [
            [
                "e0102a08522dab5c",
                "197c7c0313ea8cdf"
            ],
            []
        ]
    },
    {
        "id": "e0102a08522dab5c",
        "type": "debug",
        "z": "a2d4a4280cb86ad3",
        "name": "get loan term id",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 1560,
        "wires": []
    },
    {
        "id": "197c7c0313ea8cdf",
        "type": "function",
        "z": "a2d4a4280cb86ad3",
        "name": "getLoanPaymentsReq",
        "func": "\nconst PAYLATER_URL = env.get('PAYLATER_URL');\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-payment/query`;\nmsg.method = \"POST\";\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`,\n    actyventityid: flow.get(\"actyvEntityId\")\n}\n\nmsg.payload = { \n    \"loanID\": msg.payload.id,\n    }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1740,
        "wires": [
            [
                "60c00655e31e2942"
            ]
        ]
    },
    {
        "id": "60c00655e31e2942",
        "type": "subflow:0cbd918f05921aae",
        "z": "a2d4a4280cb86ad3",
        "name": "getLoanTermByCrn",
        "x": 470,
        "y": 1740,
        "wires": [
            [
                "f8376240377d1c3c",
                "3b0f74b0df756ab3"
            ],
            []
        ]
    },
    {
        "id": "f8376240377d1c3c",
        "type": "debug",
        "z": "a2d4a4280cb86ad3",
        "name": "get loan term id",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 1740,
        "wires": []
    },
    {
        "id": "3b0f74b0df756ab3",
        "type": "function",
        "z": "a2d4a4280cb86ad3",
        "name": "function 229",
        "func": "let res = flow.get(\"res\")\nlet data = msg.payload;\ndata.forEach((row)=>{\n    row.crn = msg.crn\n})\nres.push(...data);\nmsg.payload = res\nflow.set(\"res\",res)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1840,
        "wires": [
            [
                "4c31a01d374914cd"
            ]
        ]
    },
    {
        "id": "4c31a01d374914cd",
        "type": "debug",
        "z": "a2d4a4280cb86ad3",
        "name": "debug 487",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 1840,
        "wires": []
    },
    {
        "id": "ec18b1c44ad8c2b6",
        "type": "inject",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 240,
        "wires": [
            [
                "a6a38e087880281b"
            ]
        ]
    },
    {
        "id": "a6a38e087880281b",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "ConfigService",
        "func": "const dateFormat = \"YYYYMMDDHHmmss\";\n\nconst currentDate = moment().format(dateFormat);\n\nmsg.currentDate = currentDate\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 600,
        "y": 240,
        "wires": [
            [
                "e3d8b99528389c30"
            ]
        ]
    },
    {
        "id": "e3d8b99528389c30",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst BANK_EMAIL = env.get('MSL_BANK_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\nmsg.logger = `Authenticate bank admin`\nmsg.payload = {\n    \"email\": BANK_EMAIL,\n    \"password\": PASSWORD\n};\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 340,
        "wires": [
            [
                "88a82c360db0eb56"
            ]
        ]
    },
    {
        "id": "5a9f201a0d5d9d35",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "set Bank Token",
        "func": "flow.set('bank_token', msg.payload.idToken);\n\n// msg.bank_token = msg.payload.idToken\n\nconsole.log(msg.payload.idToken,\"TOKEN\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 320,
        "wires": [
            [
                "9197da2dfa2c62d7"
            ]
        ]
    },
    {
        "id": "c2f760cc5f9ff4e8",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "getBorrowerSummary",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nmsg.headers = {}\nmsg.method = \"POST\"\nconst token = flow.get(\"bank_token\") || \"\"\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/fetchByBankID`\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers['bankid'] = msg.bankId\nmsg.logger = `Borrower summary`\nmsg.payload = {\n    \"bankID\" : msg.bankId\n}\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 600,
        "wires": [
            [
                "a5419c38733dab78"
            ]
        ]
    },
    {
        "id": "e3e0dcef28f8b5b4",
        "type": "debug",
        "z": "8cd6e1aac6a07f03",
        "name": "Tokens and Id's",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 440,
        "wires": []
    },
    {
        "id": "0f02862074090b42",
        "type": "debug",
        "z": "8cd6e1aac6a07f03",
        "name": "getBorrowerSummary",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 580,
        "wires": []
    },
    {
        "id": "e8d9573c55433339",
        "type": "switch",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 720,
        "wires": [
            [
                "4b60381a114517c6"
            ],
            [
                "65e95ccb35275894"
            ]
        ]
    },
    {
        "id": "4b60381a114517c6",
        "type": "debug",
        "z": "8cd6e1aac6a07f03",
        "name": "No data found",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 700,
        "wires": []
    },
    {
        "id": "4f0327675baa3413",
        "type": "http in",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "url": "/api/borrower-summary",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "c94497c03570c241"
            ]
        ]
    },
    {
        "id": "9197da2dfa2c62d7",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "getMSLBankReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_KEY = env.get(\"MSL_BANK_KEY\")\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank/key/${BANK_KEY}`;\nmsg.logger = `msl bank id`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 440,
        "wires": [
            [
                "ddcc61c1e202d430"
            ]
        ]
    },
    {
        "id": "a941e5c31965e4b2",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "Save MSL Bank ID",
        "func": "const bankId = msg.payload?._id\n\nmsg.bankId = bankId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 440,
        "wires": [
            [
                "e3e0dcef28f8b5b4",
                "c2f760cc5f9ff4e8"
            ]
        ]
    },
    {
        "id": "307806bc9d7bbaa5",
        "type": "inject",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 760,
        "wires": [
            [
                "65e95ccb35275894"
            ]
        ]
    },
    {
        "id": "0c7a472fa79361ef",
        "type": "debug",
        "z": "8cd6e1aac6a07f03",
        "name": "debug 432",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 760,
        "wires": []
    },
    {
        "id": "c94497c03570c241",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "checkTheHeaders",
        "func": "const X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\nmsg.loggerNewLine = true\nif(msg.req.headers[\"x-actyv-api-config-key\"]===X_ACTYV_API_CONFIG_KEY){\n    msg.isKeyPresent = true\n}else{\n    msg.isKeyPresent = false\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 120,
        "wires": [
            [
                "b085e481ab602f8b"
            ]
        ]
    },
    {
        "id": "75841c60decb08e2",
        "type": "switch",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "property": "isKeyPresent",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 120,
        "wires": [
            [
                "ca4f2fd92e3c121c"
            ],
            [
                "f46e91d40f7b508c"
            ]
        ]
    },
    {
        "id": "f46e91d40f7b508c",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "custom switch",
        "func": "let isValidBody = false\nif(\"bankID\" in msg.req.body){\n    isValidBody = true\n}\nmsg.isValidBody = isValidBody;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 180,
        "wires": [
            [
                "f56a9f3505ee61ed"
            ]
        ]
    },
    {
        "id": "ca4f2fd92e3c121c",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "Return response",
        "func": "msg.payload = {message: \"Unautorized\"}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 80,
        "wires": [
            [
                "b0de3efe18b35aca"
            ]
        ]
    },
    {
        "id": "f56a9f3505ee61ed",
        "type": "switch",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "property": "isValidBody",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 180,
        "wires": [
            [
                "09c2bd9402c02861"
            ],
            [
                "a6a38e087880281b"
            ]
        ]
    },
    {
        "id": "b0de3efe18b35aca",
        "type": "http response",
        "z": "8cd6e1aac6a07f03",
        "name": "Unauthorized",
        "statusCode": "403",
        "headers": {},
        "x": 1000,
        "y": 40,
        "wires": []
    },
    {
        "id": "09c2bd9402c02861",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "Return response",
        "func": "msg.payload = { statusCode: 400, message: \"Body should contain both bankID\" }\n\nmsg.statusCode = 200\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 160,
        "wires": [
            [
                "cbc4949df1addee1"
            ]
        ]
    },
    {
        "id": "cbc4949df1addee1",
        "type": "http response",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1130,
        "y": 160,
        "wires": []
    },
    {
        "id": "e3d41c5b0aa7a689",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "set filename",
        "func": "const filename = `borrower_summary_${msg.currentDate}.csv`\nconst path = `${env.get(\"LOCAL_PATH\")}/${filename}`\n\nconsole.log({filename,path})\n\nmsg.fileName = filename;\nmsg.path = path\n\nmsg.payload = msg.payload.replace(/\\u00A0/g, \"\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 980,
        "wires": [
            [
                "cd1cd6d2ffd238c8",
                "37a73915696352a7"
            ]
        ]
    },
    {
        "id": "cd1cd6d2ffd238c8",
        "type": "base64",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "action": "str",
        "property": "payload",
        "x": 460,
        "y": 940,
        "wires": [
            [
                "41d63dd5f916af39"
            ]
        ]
    },
    {
        "id": "41d63dd5f916af39",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "send email",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\n\nconsole.log({ base64Payload: msg.payload })\n\nmsg.payload = {\n    \"from\": \"shravan.pm@actyv.com\",\n    \"to\": \"ramu.bugudi@actyv.com\",\n    \"subject\": `Borrower Summary Report`,\n    \"html\": `\n    <html>\n    </html>`,\n    \"priority\": \"low\",\n    \"attachments\": [\n        {\n            filename: `${msg.fileName}`,\n            encoding: 'base64',\n            content: msg.payload\n        }\n    ]\n}\n\nmsg.logger = `Send email`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 880,
        "wires": [
            [
                "8799d4f4815ea8c9"
            ]
        ]
    },
    {
        "id": "8b2be5db023d2aaa",
        "type": "debug",
        "z": "8cd6e1aac6a07f03",
        "name": "Mail sent successful",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 880,
        "wires": []
    },
    {
        "id": "7bd1761b78ce2f1c",
        "type": "catch",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 300,
        "y": 1160,
        "wires": [
            [
                "7a7bc87f7ec89717"
            ]
        ]
    },
    {
        "id": "7a7bc87f7ec89717",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "Return error",
        "func": "msg.payload = msg._error\n\nmsg.statusCode = +msg._error.statusCode\nmsg.logger = `catch error ${msg._error}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1160,
        "wires": [
            [
                "1df92e479837ce2b"
            ]
        ]
    },
    {
        "id": "1df92e479837ce2b",
        "type": "http response",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 670,
        "y": 1160,
        "wires": []
    },
    {
        "id": "37a73915696352a7",
        "type": "file",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 460,
        "y": 1000,
        "wires": [
            [
                "4aa86bd251abbd7e",
                "c9a521931e2b567f",
                "2d65546d5533ab06"
            ]
        ]
    },
    {
        "id": "4aa86bd251abbd7e",
        "type": "debug",
        "z": "8cd6e1aac6a07f03",
        "name": "Created file successfully",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 960,
        "wires": []
    },
    {
        "id": "c9a521931e2b567f",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "Return response",
        "func": "msg.payload = {\n    statusCode: 200,\n    message: \"Success\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1020,
        "wires": [
            [
                "390fe87730517d89"
            ]
        ]
    },
    {
        "id": "390fe87730517d89",
        "type": "http response",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 930,
        "y": 1020,
        "wires": []
    },
    {
        "id": "2d65546d5533ab06",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "Better SFTP",
        "func": "let Client = ssh2SftpClient\n\nlet sftpClient = new Client();\n\nconst options = {\n    host: '43.204.74.60',\n    port: 22,\n    username: 'tata_uat_sftp',\n    password: 'QLYEe4B7eRCPjqm2fntn',\n    // readyTimeout: 120000\n};\n    console.log({\"sdkfhlksdjflksjdlkfs\": msg.fileName})\nasync function sftpInteraction() {\n    try {\n        await sftpClient.connect(options);\n        await sftpClient.fastPut(\n            msg.path,\n            `/sftpdir/test/${msg.fileName}`\n        );\n        node.send({\n            logger: `transfering file to sftp`,\n            payload: `${msg.fileName} transfered to sftp`\n        });\n        console.log(\"PUT worked...\")\n    } catch (error) {\n        node.send({\n            logger:`transfering file to sftp failed`,\n            payload: error\n        });\n        throw new Error(error);\n    } finally {\n        await sftpClient.end();\n    }\n}\n\nsftpInteraction();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "ssh2SftpClient",
                "module": "ssh2-sftp-client"
            }
        ],
        "x": 350,
        "y": 1100,
        "wires": [
            [
                "66b8cd9f8daa6482"
            ]
        ]
    },
    {
        "id": "42975bbfdf2412d0",
        "type": "debug",
        "z": "8cd6e1aac6a07f03",
        "name": "Created file in SFTP successfully",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1100,
        "wires": []
    },
    {
        "id": "78ffaba044d8d80b",
        "type": "comment",
        "z": "8cd6e1aac6a07f03",
        "name": "API end point",
        "info": "",
        "x": 130,
        "y": 80,
        "wires": []
    },
    {
        "id": "22d54114610c244c",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "ConfigService",
        "func": "const dateFormat = \"YYYYMMDDHHmmss\";\n\nconst currentDate = moment().format(dateFormat);\n\nmsg.currentDate = currentDate\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1680,
        "y": 140,
        "wires": [
            [
                "0874ae24e4f33b03"
            ]
        ]
    },
    {
        "id": "6e53654c65ffcdb0",
        "type": "inject",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1480,
        "y": 140,
        "wires": [
            [
                "22d54114610c244c"
            ]
        ]
    },
    {
        "id": "b54f751c2b11fe9f",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "getBorrowerSummary",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nmsg.headers = {}\nmsg.method = \"POST\"\nconst token = flow.get(\"actyv_token\") || \"\"\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/fetchByBankID`\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers['actyventityid'] = msg.actyvEntityId\nmsg.payload = {\n    // \"bankID\" : msg.bankId\n    \"enterpriseID\": msg.enterpriseID\n}\n\nmsg.logger = `get borrower summary`\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 560,
        "wires": [
            [
                "207f69ebfd0362f4"
            ]
        ]
    },
    {
        "id": "3d45dd6583cad05d",
        "type": "debug",
        "z": "8cd6e1aac6a07f03",
        "name": "getBorrowerSummary",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2160,
        "y": 520,
        "wires": []
    },
    {
        "id": "52a1d81a4602cf51",
        "type": "switch",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1450,
        "y": 680,
        "wires": [
            [
                "8e2c6ed08ec20e0a"
            ],
            [
                "a887db20c9aabe7f"
            ]
        ]
    },
    {
        "id": "8e2c6ed08ec20e0a",
        "type": "debug",
        "z": "8cd6e1aac6a07f03",
        "name": "No data found",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1640,
        "y": 660,
        "wires": []
    },
    {
        "id": "a887db20c9aabe7f",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "transformBorrowerSummary",
        "func": "\nfunction getInvoiceExceptionHandling(data) {\n    if (_.isEmpty(data)) {\n        return \"N/A\";\n    } else {\n        return data;\n    }\n}\n\nconst transformCompleteBorrowerSummary = (\n) => {\n    const data = msg.payload.map(each => ({\n        id: _.get(each, \"id\"),\n        distributorName: getInvoiceExceptionHandling(_.get(each.borrower, \"name\")),\n        distributorId: getInvoiceExceptionHandling(_.get(each.borrower, \"id\")),\n        phone: _.get(each.borrower, \"phone\"),\n        businessType: _.get(each, \"businessType\"),\n        productType: _.get(each, \"productType\"),\n        email: _.get(each.borrower, \"email\"),\n        enterpriseName: getInvoiceExceptionHandling(_.get(each.enterprise, \"name\")),\n        enterpriseId: getInvoiceExceptionHandling(_.get(each.enterprise, \"id\")),\n        bankId: _.get(each.bank, \"id\"),\n        bankName: _.get(each.bank, \"name\"),\n        pan: getInvoiceExceptionHandling(\n            _.get(each.borrower, \"businessUniqueIdentifier\")\n        ),\n        availableLimit: _.get(each, \"approvedLimit\") - _.get(each, \"usedLimit\") - _.get(each, \"holdAmount\"),\n        erpids: _.get(each, \"businessRelationship\")\n            .filter((businessRelation) => {\n                return businessRelation.relationType?.endsWith(\"-ENTERPRISE\");\n            })\n            .map((businessRelation) => {\n                return businessRelation.identifierByParent;\n            })\n            .join(\", \"),\n        bankcrn: _.get(each, \"businessRelationship\")\n            .filter((businessRelation) => {\n                return businessRelation.relationType?.endsWith(\"-BANK\");\n            })\n            .map((businessRelation) => {\n                return businessRelation.identifierByParent;\n            })\n            .join(\", \"),\n        approvedLimit: _.get(each, \"approvedLimit\"),\n        usedLimit: _.get(each, \"usedLimit\"),\n        holdAmount: _.get(each, \"holdAmount\"),\n        tenor:\n            moment.duration(_.get(each, \"toDate\")).days() -\n                moment.duration(_.get(each, \"fromDate\")).days() <=\n                0\n                ? \"N/A\"\n                : `${moment.duration(_.get(each, \"toDate\")).days() -\n                moment.duration(_.get(each, \"fromDate\")).days()\n                } days`,\n        bankSpread:\n            _.get(each, \"bankSpread\") <= 0 ? \"N/A\" : `${_.get(each, \"bankSpread\")}`,\n        businessRelationship: _.get(each, \"businessRelationship\"),\n        toDate: _.get(each, \"toDate\"),\n        fromDate: _.get(each, \"fromDate\"),\n    }));\n    return data;\n};\n\nconst completeBorrowerSummaryDetails = transformCompleteBorrowerSummary()\n\nconsole.log({completeBorrowerSummaryDetails})\n\nconst transformExcelCompleteBorrowerSummary = (\n) => {\n    const data = completeBorrowerSummaryDetails.map(each => ({\n        \"ENTERPRISE\": getInvoiceExceptionHandling(_.get(each, \"enterpriseName\")),\n        \"BUSINESS PARTNER\": getInvoiceExceptionHandling(_.get(each, \"distributorName\")),\n        \"BANK NAME\": _.get(each, \"bankName\"),\n        \"EMAIL\": _.get(each, \"email\"),\n        \"PHONE NUMBER\": _.get(each, \"phone\"),\n        \"PAN CARD\": getInvoiceExceptionHandling(_.get(each, \"pan\")).substring(2, 12),\n        \"ENTERPRISE ERP ID'S\": _.get(each, \"businessRelationship\")\n            .filter((businessRelation) => {\n                return businessRelation.relationType?.endsWith(\"-ENTERPRISE\");\n            })\n            .map((businessRelation) => {\n                return businessRelation.identifierByParent;\n            })\n            .join(\", \"),\n        \"BANK CRN\": _.get(each, \"businessRelationship\")\n            .filter((businessRelation) => {\n                return businessRelation.relationType?.endsWith(\"-BANK\");\n            })\n            .map((businessRelation) => {\n                return businessRelation.identifierByParent;\n            })\n            .join(\", \"),\n        \"APPROVED LIMIT\": _.get(each, \"approvedLimit\"),\n        \"AVAILABLE LIMIT\": _.get(each, \"approvedLimit\") - _.get(each, \"usedLimit\") - _.get(each, \"holdAmount\"),\n        \"USED LIMIT\": _.get(each, \"usedLimit\"),\n        \"HOLD AMOUNT\": _.get(each, \"holdAmount\"),\n        \"TENOR\":\n            moment.duration(_.get(each, \"toDate\")).days() -\n                moment.duration(_.get(each, \"fromDate\")).days() <=\n                0\n                ? \"N/A\"\n                : `${moment.duration(_.get(each, \"toDate\")).days() -\n                moment.duration(_.get(each, \"fromDate\")).days()\n                } days`,\n        \"ROI\":\n            _.get(each, \"bankSpread\") <= 0 ? \"N/A\" : `${_.get(each, \"bankSpread\")}`,\n        \"BORROWER TYPE\": _.get(each, \"businessType\")[0] + _.toLower((_.get(each, \"businessType\")).slice(1, _.get(each, \"businessType\").length)),\n    }));\nconsole.log({data})\n    return data;\n};\n\nmsg.payload = transformExcelCompleteBorrowerSummary()\nmsg.logger = `Transformed data `\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "_",
                "module": "lodash"
            },
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1680,
        "y": 720,
        "wires": [
            [
                "975c5e716398ffe1"
            ]
        ]
    },
    {
        "id": "a1db868c98666803",
        "type": "inject",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1440,
        "y": 720,
        "wires": [
            [
                "a887db20c9aabe7f"
            ]
        ]
    },
    {
        "id": "75f8d5aa4635742e",
        "type": "debug",
        "z": "8cd6e1aac6a07f03",
        "name": "debug 433",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2270,
        "y": 720,
        "wires": []
    },
    {
        "id": "d5f93fc66d4f4a61",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "set filename",
        "func": "const filename = `borrower_summary_${msg.currentDate}.csv`\nconst path = `${env.get(\"LOCAL_PATH\")}/${filename}`\n\nconsole.log({filename,path})\n\nmsg.fileName = filename;\nmsg.path = path\n\nmsg.payload = msg.payload.replace(/\\u00A0/g, \"\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 940,
        "wires": [
            [
                "03906ec3dc4bc165",
                "4b3237b4a39aef32"
            ]
        ]
    },
    {
        "id": "03906ec3dc4bc165",
        "type": "base64",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "action": "str",
        "property": "payload",
        "x": 1760,
        "y": 900,
        "wires": [
            [
                "55d8d1692acdf0e4"
            ]
        ]
    },
    {
        "id": "4b3237b4a39aef32",
        "type": "file",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1760,
        "y": 960,
        "wires": [
            [
                "0c7210f062ca8930",
                "7bfcebdb5c634415"
            ]
        ]
    },
    {
        "id": "55d8d1692acdf0e4",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "send email",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\n\nconsole.log({ base64Payload: msg.payload })\n\nconst recievers = [ \"shravan.pm@actyv.com\"]\n\nmsg.payload = {\n    \"from\": \"shravan.pm@actyv.com\",\n    \"to\": recievers,\n    \"subject\": `Borrower Summary Report`,\n    \"html\": `\n    <html>\n    </html>`,\n    \"priority\": \"low\",\n    \"attachments\": [\n        {\n            filename: `${msg.fileName}`,\n            encoding: 'base64',\n            content: msg.payload\n        }\n    ]\n}\n\nmsg.logger = `send email to ${JSON.stringify(recievers)}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 840,
        "wires": [
            [
                "e2a99cb35b569bb6"
            ]
        ]
    },
    {
        "id": "0c7210f062ca8930",
        "type": "debug",
        "z": "8cd6e1aac6a07f03",
        "name": "Created file successfully",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 920,
        "wires": []
    },
    {
        "id": "7bfcebdb5c634415",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "Better SFTP",
        "func": "let Client = ssh2SftpClient\n\nlet sftpClient = new Client();\n\nconst options = {\n    host: '43.204.74.60',\n    port: 22,\n    username: 'tata_uat_sftp',\n    password: 'QLYEe4B7eRCPjqm2fntn',\n    // readyTimeout: 120000\n};\n    console.log({\"sdkfhlksdjflksjdlkfs\": msg.fileName})\nasync function sftpInteraction() {\n    try {\n        await sftpClient.connect(options);\n        await sftpClient.fastPut(\n            msg.path,\n            `/sftpdir/test/${msg.fileName}`\n        );\n        console.log(\"PUT worked...\")\n        node.send({\n            payload: `success`,\n            logger: `${msg.fileName} file transfer to sftp`\n        });\n    } catch (error) {\n        node.send({\n            payload: `failed with ${error}`,\n            logger: `${msg.fileName} file transfer to sftp`\n        });\n        throw new Error(error);\n    } finally {\n        await sftpClient.end();\n    }\n}\n\nsftpInteraction();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "ssh2SftpClient",
                "module": "ssh2-sftp-client"
            }
        ],
        "x": 1590,
        "y": 1060,
        "wires": [
            [
                "85739ba204897f99"
            ]
        ]
    },
    {
        "id": "b19534f1a239f05c",
        "type": "debug",
        "z": "8cd6e1aac6a07f03",
        "name": "Created file in SFTP successfully",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1980,
        "y": 1060,
        "wires": []
    },
    {
        "id": "8bd59b9bb4472fed",
        "type": "debug",
        "z": "8cd6e1aac6a07f03",
        "name": "Mail sent successful",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2480,
        "y": 840,
        "wires": []
    },
    {
        "id": "0874ae24e4f33b03",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst ENTERPRISE_EMAIL = \"darkhorse@gmail.com\"\nconst PASSWORD = \"User@123\"\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": ENTERPRISE_EMAIL,\n    \"password\": PASSWORD\n};\n\nmsg.loggerNewLine = true\nmsg.logger = `Authenticate ${ENTERPRISE_EMAIL}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 200,
        "wires": [
            [
                "64dc6c6c8d1f8f88"
            ]
        ]
    },
    {
        "id": "ca3788307d2d86c5",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "set actyv Entity Token",
        "func": "flow.set('actyv_token', msg.payload.idToken);\n\n// msg.ent_token = msg.payload.idToken\n\nconsole.log(msg.payload.idToken,\"TOKEN\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 200,
        "wires": [
            [
                "6dd25d45d58b93a1",
                "9d4d4b3e58954da2"
            ]
        ]
    },
    {
        "id": "9d4d4b3e58954da2",
        "type": "debug",
        "z": "8cd6e1aac6a07f03",
        "name": "actyvEntityToken",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2170,
        "y": 200,
        "wires": []
    },
    {
        "id": "6dd25d45d58b93a1",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "getActyvEntityUser",
        "func": "\n\nconst GO_URL = env.get('GO_URL');\n\n\nmsg.url = `${GO_URL}/actyv-entity`;\nmsg.method = \"GET\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 280,
        "wires": [
            [
                "b64d4c98fd92fd4c"
            ]
        ]
    },
    {
        "id": "26aeebf264b5925e",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "Save actyv entity ID",
        "func": "const found = msg.payload.find(entity => entity.key === \"dark_horse\") ?? undefined\n\nconsole.log(found?._id)\nif (found) {\n    msg.actyvEntityId = found?._id\n    msg.payload = found?._id\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1940,
        "y": 280,
        "wires": [
            [
                "8034b5706a7611c7"
            ]
        ]
    },
    {
        "id": "0dd737364dee4fe2",
        "type": "debug",
        "z": "8cd6e1aac6a07f03",
        "name": "actyvEntityID",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2330,
        "y": 280,
        "wires": []
    },
    {
        "id": "7ca7828e3fa76efa",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "getEnterpriseReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst BUSINESS_UNIQUE_IDENTIFIER = env.get(\"CKPL_BUSINESS_UNIQUE_IDENTIFIER\")\nconst BUSINESS_TYPE = \"ENTERPRISE\"\nmsg.headers = {}\nmsg.method = \"GET\"\nconst token = flow.get(\"ent_token\") || \"\"\nmsg.url = `${PAYLATER_URL}/v1/business/service/getByIdentifier/${BUSINESS_UNIQUE_IDENTIFIER}/${BUSINESS_TYPE}`;\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = {}\n// msg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.logger = `getEnterpriseReq by unique identifier ${BUSINESS_UNIQUE_IDENTIFIER}/${BUSINESS_TYPE}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 420,
        "wires": [
            [
                "31913f7fb9bac78d"
            ]
        ]
    },
    {
        "id": "36206eeeb3ea0b96",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "Save Enterprise ID",
        "func": "const enterpriseId = msg.payload?.id\n\nmsg.enterpriseID = enterpriseId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 420,
        "wires": [
            [
                "7f6e2df78bba0b3f"
            ]
        ]
    },
    {
        "id": "f1b3a9595adf7202",
        "type": "debug",
        "z": "8cd6e1aac6a07f03",
        "name": "enterpriseID",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "enterpriseID",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2290,
        "y": 420,
        "wires": []
    },
    {
        "id": "b58119c25eeefff6",
        "type": "comment",
        "z": "8cd6e1aac6a07f03",
        "name": "Scheduler (EMAIL & SFTP)",
        "info": "",
        "x": 1530,
        "y": 80,
        "wires": []
    },
    {
        "id": "65e95ccb35275894",
        "type": "function",
        "z": "8cd6e1aac6a07f03",
        "name": "transformBorrowerSummary",
        "func": "\nfunction getInvoiceExceptionHandling(data) {\n    if (_.isEmpty(data)) {\n        return \"N/A\";\n    } else {\n        return data;\n    }\n}\n\nconst transformCompleteBorrowerSummary = (\n) => {\n    const data = msg.payload.map(each => ({\n        id: _.get(each, \"id\"),\n        distributorName: getInvoiceExceptionHandling(_.get(each.borrower, \"name\")),\n        distributorId: getInvoiceExceptionHandling(_.get(each.borrower, \"id\")),\n        phone: _.get(each.borrower, \"phone\"),\n        businessType: _.get(each, \"businessType\"),\n        productType: _.get(each, \"productType\"),\n        email: _.get(each.borrower, \"email\"),\n        enterpriseName: getInvoiceExceptionHandling(_.get(each.enterprise, \"name\")),\n        enterpriseId: getInvoiceExceptionHandling(_.get(each.enterprise, \"id\")),\n        bankId: _.get(each.bank, \"id\"),\n        bankName: _.get(each.bank, \"name\"),\n        pan: getInvoiceExceptionHandling(\n            _.get(each.borrower, \"businessUniqueIdentifier\")\n        ),\n        availableLimit: _.get(each, \"approvedLimit\") - _.get(each, \"usedLimit\") - _.get(each, \"holdAmount\"),\n        erpids: _.get(each, \"businessRelationship\")\n            .filter((businessRelation) => {\n                return businessRelation.relationType?.endsWith(\"-ENTERPRISE\");\n            })\n            .map((businessRelation) => {\n                return businessRelation.identifierByParent;\n            })\n            .join(\", \"),\n        bankcrn: _.get(each, \"businessRelationship\")\n            .filter((businessRelation) => {\n                return businessRelation.relationType?.endsWith(\"-BANK\");\n            })\n            .map((businessRelation) => {\n                return businessRelation.identifierByParent;\n            })\n            .join(\", \"),\n        approvedLimit: _.get(each, \"approvedLimit\"),\n        usedLimit: _.get(each, \"usedLimit\"),\n        holdAmount: _.get(each, \"holdAmount\"),\n        tenor:\n            moment.duration(_.get(each, \"toDate\")).days() -\n                moment.duration(_.get(each, \"fromDate\")).days() <=\n                0\n                ? \"N/A\"\n                : `${moment.duration(_.get(each, \"toDate\")).days() -\n                moment.duration(_.get(each, \"fromDate\")).days()\n                } days`,\n        bankSpread:\n            _.get(each, \"bankSpread\") <= 0 ? \"N/A\" : `${_.get(each, \"bankSpread\")}`,\n        businessRelationship: _.get(each, \"businessRelationship\"),\n        toDate: _.get(each, \"toDate\"),\n        fromDate: _.get(each, \"fromDate\"),\n    }));\n    return data;\n};\n\nconst completeBorrowerSummaryDetails = transformCompleteBorrowerSummary()\n\nconsole.log({completeBorrowerSummaryDetails})\n\nconst transformExcelCompleteBorrowerSummary = (\n) => {\n    const data = completeBorrowerSummaryDetails.map(each => ({\n        \"ENTERPRISE\": getInvoiceExceptionHandling(_.get(each, \"enterpriseName\")),\n        \"BUSINESS PARTNER\": getInvoiceExceptionHandling(_.get(each, \"distributorName\")),\n        \"BANK NAME\": _.get(each, \"bankName\"),\n        \"EMAIL\": _.get(each, \"email\"),\n        \"PHONE NUMBER\": _.get(each, \"phone\"),\n        \"PAN CARD\": getInvoiceExceptionHandling(_.get(each, \"pan\")).substring(2, 12),\n        \"ENTERPRISE ERP ID'S\": _.get(each, \"businessRelationship\")\n            .filter((businessRelation) => {\n                return businessRelation.relationType?.endsWith(\"-ENTERPRISE\");\n            })\n            .map((businessRelation) => {\n                return businessRelation.identifierByParent;\n            })\n            .join(\", \"),\n        \"BANK CRN\": _.get(each, \"businessRelationship\")\n            .filter((businessRelation) => {\n                return businessRelation.relationType?.endsWith(\"-BANK\");\n            })\n            .map((businessRelation) => {\n                return businessRelation.identifierByParent;\n            })\n            .join(\", \"),\n        \"APPROVED LIMIT\": _.get(each, \"approvedLimit\"),\n        \"AVAILABLE LIMIT\": _.get(each, \"approvedLimit\") - _.get(each, \"usedLimit\") - _.get(each, \"holdAmount\"),\n        \"USED LIMIT\": _.get(each, \"usedLimit\"),\n        \"HOLD AMOUNT\": _.get(each, \"holdAmount\"),\n        \"TENOR\":\n            moment.duration(_.get(each, \"toDate\")).days() -\n                moment.duration(_.get(each, \"fromDate\")).days() <=\n                0\n                ? \"N/A\"\n                : `${moment.duration(_.get(each, \"toDate\")).days() -\n                moment.duration(_.get(each, \"fromDate\")).days()\n                } days`,\n        \"ROI\":\n            _.get(each, \"bankSpread\") <= 0 ? \"N/A\" : `${_.get(each, \"bankSpread\")}`,\n        \"BORROWER TYPE\": _.get(each, \"businessType\")[0] + _.toLower((_.get(each, \"businessType\")).slice(1, _.get(each, \"businessType\").length)),\n    }));\nconsole.log({data})\n    return data;\n};\n\nmsg.logger = `transformBorrowerSummary`\nmsg.payload = transformExcelCompleteBorrowerSummary()\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "_",
                "module": "lodash"
            },
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 440,
        "y": 760,
        "wires": [
            [
                "2bab7af123cd5770"
            ]
        ]
    },
    {
        "id": "88a82c360db0eb56",
        "type": "subflow:0cbd918f05921aae",
        "z": "8cd6e1aac6a07f03",
        "name": "Authenticate",
        "x": 510,
        "y": 340,
        "wires": [
            [
                "83a3c326d7ea4ee7"
            ],
            []
        ]
    },
    {
        "id": "b085e481ab602f8b",
        "type": "subflow:951a533bb3498fe6",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "x": 580,
        "y": 120,
        "wires": [
            [
                "75841c60decb08e2"
            ]
        ]
    },
    {
        "id": "83a3c326d7ea4ee7",
        "type": "subflow:951a533bb3498fe6",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "x": 680,
        "y": 320,
        "wires": [
            [
                "5a9f201a0d5d9d35"
            ]
        ]
    },
    {
        "id": "ddcc61c1e202d430",
        "type": "subflow:0cbd918f05921aae",
        "z": "8cd6e1aac6a07f03",
        "name": "getMSLBankReq",
        "x": 430,
        "y": 440,
        "wires": [
            [
                "9f256c3d3af9405d"
            ],
            [
                "368cbbfaa3d702f3"
            ]
        ]
    },
    {
        "id": "9f256c3d3af9405d",
        "type": "subflow:951a533bb3498fe6",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "x": 640,
        "y": 400,
        "wires": [
            [
                "a941e5c31965e4b2"
            ]
        ]
    },
    {
        "id": "752339864bb20923",
        "type": "subflow:951a533bb3498fe6",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "x": 700,
        "y": 580,
        "wires": [
            [
                "0f02862074090b42",
                "e8d9573c55433339"
            ]
        ]
    },
    {
        "id": "a5419c38733dab78",
        "type": "subflow:0cbd918f05921aae",
        "z": "8cd6e1aac6a07f03",
        "name": "getBorrowerSummary",
        "x": 480,
        "y": 600,
        "wires": [
            [
                "752339864bb20923"
            ],
            [
                "464938c5da367894"
            ]
        ]
    },
    {
        "id": "68aecbc2c9eecbe1",
        "type": "json-2-csv",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "x": 820,
        "y": 760,
        "wires": [
            [
                "0c7a472fa79361ef",
                "e3d41c5b0aa7a689"
            ]
        ]
    },
    {
        "id": "b563767a9188256e",
        "type": "json-2-csv",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "x": 2060,
        "y": 720,
        "wires": [
            [
                "75f8d5aa4635742e",
                "d5f93fc66d4f4a61"
            ]
        ]
    },
    {
        "id": "2bab7af123cd5770",
        "type": "subflow:951a533bb3498fe6",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "x": 640,
        "y": 760,
        "wires": [
            [
                "68aecbc2c9eecbe1"
            ]
        ]
    },
    {
        "id": "c83f823c23b7337d",
        "type": "subflow:951a533bb3498fe6",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "x": 1000,
        "y": 880,
        "wires": [
            [
                "8b2be5db023d2aaa"
            ]
        ]
    },
    {
        "id": "8799d4f4815ea8c9",
        "type": "subflow:0cbd918f05921aae",
        "z": "8cd6e1aac6a07f03",
        "name": "send email",
        "x": 850,
        "y": 880,
        "wires": [
            [
                "c83f823c23b7337d"
            ],
            [
                "c83f823c23b7337d"
            ]
        ]
    },
    {
        "id": "66b8cd9f8daa6482",
        "type": "subflow:951a533bb3498fe6",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "x": 500,
        "y": 1100,
        "wires": [
            [
                "42975bbfdf2412d0"
            ]
        ]
    },
    {
        "id": "64dc6c6c8d1f8f88",
        "type": "subflow:0cbd918f05921aae",
        "z": "8cd6e1aac6a07f03",
        "name": "Authenticate",
        "x": 1670,
        "y": 200,
        "wires": [
            [
                "905714db259d1f23"
            ],
            [
                "d613b8187bf54698"
            ]
        ]
    },
    {
        "id": "905714db259d1f23",
        "type": "subflow:951a533bb3498fe6",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "x": 1940,
        "y": 140,
        "wires": [
            [
                "ca3788307d2d86c5"
            ]
        ]
    },
    {
        "id": "b64d4c98fd92fd4c",
        "type": "subflow:0cbd918f05921aae",
        "z": "8cd6e1aac6a07f03",
        "name": "getCurrentUser",
        "x": 1700,
        "y": 280,
        "wires": [
            [
                "26aeebf264b5925e"
            ],
            [
                "0929d842ce898c90"
            ]
        ]
    },
    {
        "id": "8034b5706a7611c7",
        "type": "subflow:951a533bb3498fe6",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "x": 2160,
        "y": 280,
        "wires": [
            [
                "0dd737364dee4fe2",
                "7ca7828e3fa76efa"
            ]
        ]
    },
    {
        "id": "0929d842ce898c90",
        "type": "subflow:951a533bb3498fe6",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "x": 1560,
        "y": 340,
        "wires": [
            [
                "07786af85e6d0c8d"
            ]
        ]
    },
    {
        "id": "31913f7fb9bac78d",
        "type": "subflow:0cbd918f05921aae",
        "z": "8cd6e1aac6a07f03",
        "name": "getEnterpriseReq",
        "x": 1710,
        "y": 420,
        "wires": [
            [
                "36206eeeb3ea0b96",
                "07786af85e6d0c8d"
            ],
            [
                "811a48f60e8b9581"
            ]
        ]
    },
    {
        "id": "811a48f60e8b9581",
        "type": "subflow:951a533bb3498fe6",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "x": 1580,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "7f6e2df78bba0b3f",
        "type": "subflow:951a533bb3498fe6",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "x": 2120,
        "y": 420,
        "wires": [
            [
                "f1b3a9595adf7202",
                "b54f751c2b11fe9f"
            ]
        ]
    },
    {
        "id": "207f69ebfd0362f4",
        "type": "subflow:0cbd918f05921aae",
        "z": "8cd6e1aac6a07f03",
        "name": "getBorrowerSummary",
        "x": 1740,
        "y": 560,
        "wires": [
            [
                "cb1d2610ec8293c8"
            ],
            [
                "0d7f67e7a6815583"
            ]
        ]
    },
    {
        "id": "cb1d2610ec8293c8",
        "type": "subflow:951a533bb3498fe6",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "x": 1940,
        "y": 520,
        "wires": [
            [
                "3d45dd6583cad05d",
                "52a1d81a4602cf51"
            ]
        ]
    },
    {
        "id": "975c5e716398ffe1",
        "type": "subflow:951a533bb3498fe6",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "x": 1880,
        "y": 720,
        "wires": [
            [
                "b563767a9188256e"
            ]
        ]
    },
    {
        "id": "a7972706c0549d37",
        "type": "subflow:951a533bb3498fe6",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "x": 2280,
        "y": 840,
        "wires": [
            [
                "8bd59b9bb4472fed"
            ]
        ]
    },
    {
        "id": "e2a99cb35b569bb6",
        "type": "subflow:0cbd918f05921aae",
        "z": "8cd6e1aac6a07f03",
        "name": "send email",
        "x": 2090,
        "y": 840,
        "wires": [
            [
                "a7972706c0549d37"
            ],
            [
                "a7972706c0549d37"
            ]
        ]
    },
    {
        "id": "85739ba204897f99",
        "type": "subflow:951a533bb3498fe6",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "x": 1740,
        "y": 1060,
        "wires": [
            [
                "b19534f1a239f05c"
            ]
        ]
    },
    {
        "id": "07786af85e6d0c8d",
        "type": "debug",
        "z": "8cd6e1aac6a07f03",
        "name": "debug 489",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1930,
        "y": 360,
        "wires": []
    },
    {
        "id": "cc125ed9d1bcef6d",
        "type": "debug",
        "z": "8cd6e1aac6a07f03",
        "name": "debug 490",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 600,
        "wires": []
    },
    {
        "id": "d613b8187bf54698",
        "type": "subflow:951a533bb3498fe6",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "x": 1880,
        "y": 80,
        "wires": [
            [
                "c45f6ffe771d4e9f"
            ]
        ]
    },
    {
        "id": "c45f6ffe771d4e9f",
        "type": "debug",
        "z": "8cd6e1aac6a07f03",
        "name": "debug 491",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 80,
        "wires": []
    },
    {
        "id": "0d7f67e7a6815583",
        "type": "subflow:951a533bb3498fe6",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "x": 1900,
        "y": 600,
        "wires": [
            [
                "cc125ed9d1bcef6d"
            ]
        ]
    },
    {
        "id": "48ce42bcb4c5e9d2",
        "type": "debug",
        "z": "8cd6e1aac6a07f03",
        "name": "debug 494",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 500,
        "wires": []
    },
    {
        "id": "368cbbfaa3d702f3",
        "type": "subflow:951a533bb3498fe6",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "x": 440,
        "y": 500,
        "wires": [
            [
                "48ce42bcb4c5e9d2"
            ]
        ]
    },
    {
        "id": "fa1bf6065298dc45",
        "type": "debug",
        "z": "8cd6e1aac6a07f03",
        "name": "debug 495",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 660,
        "wires": []
    },
    {
        "id": "464938c5da367894",
        "type": "subflow:951a533bb3498fe6",
        "z": "8cd6e1aac6a07f03",
        "name": "",
        "x": 660,
        "y": 660,
        "wires": [
            [
                "fa1bf6065298dc45"
            ]
        ]
    },
    {
        "id": "cf4ebb78d0c49226",
        "type": "comment",
        "z": "b24fe51f964dbf33",
        "name": "Knock off for DISTRIBUTOR",
        "info": "",
        "x": 300,
        "y": 120,
        "wires": []
    },
    {
        "id": "b9fc581146a2c757",
        "type": "comment",
        "z": "b24fe51f964dbf33",
        "name": "Knock off for VENDOR",
        "info": "",
        "x": 560,
        "y": 120,
        "wires": []
    },
    {
        "id": "a4f14e86969e9b82",
        "type": "catch",
        "z": "b24fe51f964dbf33",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 440,
        "y": 1360,
        "wires": [
            [
                "80e82f65b9e74f92"
            ]
        ]
    },
    {
        "id": "80e82f65b9e74f92",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "Return error",
        "func": "msg.payload = msg._error\n\nmsg.statusCode = +msg._error.statusCode\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1360,
        "wires": [
            [
                "53379d5e6982d316"
            ]
        ]
    },
    {
        "id": "53379d5e6982d316",
        "type": "http response",
        "z": "b24fe51f964dbf33",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 1360,
        "wires": []
    },
    {
        "id": "32a816448e36d075",
        "type": "http in",
        "z": "b24fe51f964dbf33",
        "name": "",
        "url": "/api/knock-off-report",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 180,
        "wires": [
            [
                "f1748d0cbc9c2d51"
            ]
        ]
    },
    {
        "id": "f1748d0cbc9c2d51",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "checkTheHeaders",
        "func": "const X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nif(msg.req.headers[\"x-actyv-api-config-key\"]===X_ACTYV_API_CONFIG_KEY){\n    msg.isKeyPresent = true\n}else{\n    msg.isKeyPresent = false\n}\nmsg.loggerNewLine = true\nmsg.logger = `API request recieved`\nmsg.logger = msg.req\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 180,
        "wires": [
            [
                "a79f2f5c4b553460"
            ]
        ]
    },
    {
        "id": "3f00e2e0b563ef11",
        "type": "switch",
        "z": "b24fe51f964dbf33",
        "name": "",
        "property": "isKeyPresent",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 180,
        "wires": [
            [
                "b11ee9414bc4e2df"
            ],
            [
                "460992069c555096"
            ]
        ]
    },
    {
        "id": "b11ee9414bc4e2df",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "Return response",
        "func": "msg.payload = {message: \"Unautorized\"}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 140,
        "wires": [
            [
                "476170513e5ced45"
            ]
        ]
    },
    {
        "id": "476170513e5ced45",
        "type": "http response",
        "z": "b24fe51f964dbf33",
        "name": "Unauthorized",
        "statusCode": "403",
        "headers": {},
        "x": 1120,
        "y": 100,
        "wires": []
    },
    {
        "id": "930906e47d7d39e1",
        "type": "http response",
        "z": "b24fe51f964dbf33",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1250,
        "y": 220,
        "wires": []
    },
    {
        "id": "d97a0d1c26ae1977",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "ConfigService",
        "func": "const dateFormat = \"YYYYMMDDHHmmss\";\n\nconst currentDate = moment().format(dateFormat);\n\nmsg.currentDate = currentDate\n\nconst BP_TYPE = msg?.req?.body?.bpType?.toUpperCase() ?? \"\"\n\nmsg.BP_TYPE = BP_TYPE\nmsg.logger = `Business partner type${BP_TYPE}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 580,
        "y": 440,
        "wires": [
            [
                "4e1adfd637b50dea"
            ]
        ]
    },
    {
        "id": "5d361684bdd9e52f",
        "type": "inject",
        "z": "b24fe51f964dbf33",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 440,
        "wires": [
            [
                "d97a0d1c26ae1977"
            ]
        ]
    },
    {
        "id": "665d98757b3e33bf",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst ENTERPRISE_EMAIL = \"darkhorse@gmail.com\"\nconst PASSWORD = \"User@123\"\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": ENTERPRISE_EMAIL,\n    \"password\": PASSWORD\n};\n\nmsg.logger = `Authenticate #${ENTERPRISE_EMAIL}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 540,
        "wires": [
            [
                "2a71acd3b1ed049e"
            ]
        ]
    },
    {
        "id": "cc8959e8ea9f20f1",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "set actyv Entity Token",
        "func": "flow.set('actyv_token', msg.payload.idToken);\n\n// msg.ent_token = msg.payload.idToken\n\nconsole.log(msg.payload.idToken,\"TOKEN\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 520,
        "wires": [
            [
                "596f522ac34a231e"
            ]
        ]
    },
    {
        "id": "bbe295cd1b6c97f2",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "getFileIdByEnterpriseIdAndBpType",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst enterpriseId = msg.req.body.enterpriseID\n\nmsg.headers = {}\nmsg.method = \"GET\"\nconst token = flow.get(\"actyv_token\") || \"\"\nmsg.url = `${PAYLATER_URL}/v1/file/config/${enterpriseId}/${msg.BP_TYPE}`\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers['actyventityid'] = msg.actyvEntityId\n\n\nmsg.logger = `getFileIdByEnterpriseIdAndBpType for enterpriseID = ${enterpriseId} and bpType = ${msg.BP_TYPE}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 740,
        "wires": [
            [
                "564c26f1382af754",
                "edf2e9591d5ead48"
            ]
        ]
    },
    {
        "id": "360c2fcb0b4813af",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "Tokens and Id's",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 640,
        "wires": []
    },
    {
        "id": "d5b9016570fba709",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "getFileIdByEnterpriseIdAndBpType",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 700,
        "wires": []
    },
    {
        "id": "fd0ed944bf0b33a5",
        "type": "switch",
        "z": "b24fe51f964dbf33",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 860,
        "wires": [
            [
                "e08bf1ab993eeb4e"
            ],
            [
                "b42e514f4235d4b4"
            ]
        ]
    },
    {
        "id": "e08bf1ab993eeb4e",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "No file found",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 840,
        "wires": []
    },
    {
        "id": "b42e514f4235d4b4",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "downloadKnockoffReport",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst fileID = msg.payload[0]\nconst enterpriseId = msg.req.body.enterpriseID\n\nmsg.method = \"GET\"\nconst token = flow.get(\"actyv_token\") || \"\"\nmsg.url = `${PAYLATER_URL}/v1/invoice-raw/get-invoice-raw-data-with-decision/${fileID}/${enterpriseId}/${msg.BP_TYPE}`\nmsg.payload = {}\n\nmsg.logger = `downloaded knockoff report for enterprise id #enterpriseId, fileId #${fileID} and bpType #${msg.BP_TYPE}`\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 920,
        "wires": [
            [
                "b6a303b6c9acb508"
            ]
        ]
    },
    {
        "id": "84b7d767d99c5b80",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "downloadKnockoffReport",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 900,
        "wires": []
    },
    {
        "id": "94684a2974cd1689",
        "type": "switch",
        "z": "b24fe51f964dbf33",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 1020,
        "wires": [
            [
                "74bbff86b3390efd"
            ],
            [
                "455eeb7805baef80"
            ]
        ]
    },
    {
        "id": "74bbff86b3390efd",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "Empty data from file id",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 1000,
        "wires": []
    },
    {
        "id": "3b1873befef65409",
        "type": "switch",
        "z": "b24fe51f964dbf33",
        "name": "",
        "property": "isValidBody",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 890,
        "y": 240,
        "wires": [
            [
                "0ec403f6b9a9ef90"
            ],
            [
                "d97a0d1c26ae1977"
            ]
        ]
    },
    {
        "id": "460992069c555096",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "custom switch",
        "func": "let isValidBody = false\nif(\"enterpriseID\" in msg.req.body && \"bpType\" in msg.req.body){\n    isValidBody = true\n}\nmsg.isValidBody = isValidBody;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 240,
        "wires": [
            [
                "3b1873befef65409"
            ]
        ]
    },
    {
        "id": "0ec403f6b9a9ef90",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "Return response",
        "func": "msg.payload = { statusCode: 400, message: \"Body should contain both enterpriseID and bpType\" }\n\nmsg.statusCode = 200\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 220,
        "wires": [
            [
                "930906e47d7d39e1"
            ]
        ]
    },
    {
        "id": "564c26f1382af754",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "getFileIdByEnterpriseIdAndBpType",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 820,
        "wires": []
    },
    {
        "id": "4c637d052c2eab43",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "ConfigService",
        "func": "const dateFormat = \"YYYYMMDDHHmmss\";\n\nconst currentDate = moment().format(dateFormat);\n\nmsg.currentDate = currentDate\n\nconst BP_TYPE = \"DISTRIBUTOR\"\n\nmsg.BP_TYPE = BP_TYPE\nmsg.logger = `Business partner type${BP_TYPE}`\nmsg.loggerNewLine = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1740,
        "y": 140,
        "wires": [
            [
                "596ba69ca5b5e109"
            ]
        ]
    },
    {
        "id": "5bca36647e13ce36",
        "type": "inject",
        "z": "b24fe51f964dbf33",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1580,
        "y": 140,
        "wires": [
            [
                "4c637d052c2eab43"
            ]
        ]
    },
    {
        "id": "92b89eabf8beaf77",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst ENTERPRISE_EMAIL = \"darkhorse@gmail.com\"\nconst PASSWORD = \"User@123\"\n\n// const ENTERPRISE_EMAIL = \"darkhorse1@gmail.com\"\n// const PASSWORD = \"890ioP@darkhorse\"\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": ENTERPRISE_EMAIL,\n    \"password\": PASSWORD\n};\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 240,
        "wires": [
            [
                "5746ccd74d62ce2d"
            ]
        ]
    },
    {
        "id": "b2eeb580b2f59187",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "set actyv Entity Token",
        "func": "flow.set('actyv_token', msg.payload.idToken);\n\n// msg.ent_token = msg.payload.idToken\n\nconsole.log(msg.payload.idToken,\"TOKEN\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 240,
        "wires": [
            [
                "0372a2cb4677a4e9",
                "61053b8b56e9060a"
            ]
        ]
    },
    {
        "id": "a874ed29f9a1dd7f",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "actyvEntityID",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2290,
        "y": 340,
        "wires": []
    },
    {
        "id": "c86d0963ddb6eeea",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "getFileIdByEnterpriseIdAndBpType",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nmsg.headers = {}\nmsg.method = \"GET\"\nconst token = flow.get(\"actyv_token\") || \"\"\nmsg.url = `${PAYLATER_URL}/v1/file/config/${msg.enterpriseID}/${msg.BP_TYPE}`\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers['actyventityid'] = msg.actyvEntityId\nmsg.headers['enterpriseid'] = msg.enterpriseID\n\nmsg.logger = `Get file Id for enterprise #${msg.enterpriseID} and bp type ${msg.BP_TYPE}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 440,
        "wires": [
            [
                "c6097fbf5744a045",
                "45bcb0420c7a5674"
            ]
        ]
    },
    {
        "id": "b9e9f6e81313cd2a",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "getFileIdByEnterpriseIdAndBpType",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2540,
        "y": 440,
        "wires": []
    },
    {
        "id": "ba95207e545b4eb6",
        "type": "switch",
        "z": "b24fe51f964dbf33",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1630,
        "y": 560,
        "wires": [
            [
                "d4a54708a50965e8"
            ],
            [
                "af14bbc4b9fe1080"
            ]
        ]
    },
    {
        "id": "d4a54708a50965e8",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "No file found",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1810,
        "y": 540,
        "wires": []
    },
    {
        "id": "af14bbc4b9fe1080",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "downloadKnockoffReport",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst fileID = msg.payload[0]\n\nmsg.method = \"GET\"\nconst token = flow.get(\"actyv_token\") || \"\"\nmsg.url = `${PAYLATER_URL}/v1/invoice-raw/get-invoice-raw-data-with-decision/${fileID}/${msg.enterpriseID}/${msg.BP_TYPE}`\nmsg.payload = {}\n\nmsg.logger = `Download Knockoff report for enterprise #${msg.enterpriseID} with fileID #${fileID}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 620,
        "wires": [
            [
                "8633f6bf7de9a706"
            ]
        ]
    },
    {
        "id": "dd1bde9c02732717",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "downloadKnockoffReport",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2490,
        "y": 620,
        "wires": []
    },
    {
        "id": "ead32249934a374a",
        "type": "switch",
        "z": "b24fe51f964dbf33",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1810,
        "y": 720,
        "wires": [
            [
                "6d9015637cb58fda"
            ],
            [
                "9969d8d840857263"
            ]
        ]
    },
    {
        "id": "6d9015637cb58fda",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "Empty data from file id",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2060,
        "y": 700,
        "wires": []
    },
    {
        "id": "650dd007133e5ffa",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "Save Enterprise ID",
        "func": "const enterpriseId = msg.payload?.id\n\nmsg.enterpriseID = enterpriseId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2490,
        "y": 140,
        "wires": [
            [
                "92b89eabf8beaf77",
                "19ddc96d9cb43719"
            ]
        ]
    },
    {
        "id": "0c0367738b9a02c5",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "getEnterpriseReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst BUSINESS_UNIQUE_IDENTIFIER = env.get(\"APL_BUSINESS_UNIQUE_IDENTIFIER\")\nconst BUSINESS_TYPE = \"ENTERPRISE\"\nmsg.headers = {}\nmsg.method = \"GET\"\nconst token = flow.get(\"ent_token\") || \"\"\nmsg.url = `${PAYLATER_URL}/v1/business/service/getByIdentifier/${BUSINESS_UNIQUE_IDENTIFIER}/${BUSINESS_TYPE}`;\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = {}\n// msg.headers[\"Authorization\"] = `Bearer ${token}`\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2090,
        "y": 140,
        "wires": [
            [
                "75478c7b5e1cc682"
            ]
        ]
    },
    {
        "id": "0372a2cb4677a4e9",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "actyvEntityToken",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 240,
        "wires": []
    },
    {
        "id": "19ddc96d9cb43719",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "enterpriseID",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "enterpriseID",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2710,
        "y": 140,
        "wires": []
    },
    {
        "id": "c6097fbf5744a045",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "getFileIdByEnterpriseIdAndBpType",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2060,
        "y": 500,
        "wires": []
    },
    {
        "id": "66dd8139b4bca960",
        "type": "comment",
        "z": "b24fe51f964dbf33",
        "name": "Knock off for DISTRIBUTOR",
        "info": "",
        "x": 1620,
        "y": 80,
        "wires": []
    },
    {
        "id": "7db3fd5930046f92",
        "type": "comment",
        "z": "b24fe51f964dbf33",
        "name": "Knock off Scheduler",
        "info": "",
        "x": 1590,
        "y": 20,
        "wires": []
    },
    {
        "id": "f94ee1a71d7e8e6a",
        "type": "comment",
        "z": "b24fe51f964dbf33",
        "name": "Knock off Scheduler",
        "info": "",
        "x": 3050,
        "y": 20,
        "wires": []
    },
    {
        "id": "66126e7e0e043d32",
        "type": "comment",
        "z": "b24fe51f964dbf33",
        "name": "Knock off for VENDOR",
        "info": "",
        "x": 3060,
        "y": 80,
        "wires": []
    },
    {
        "id": "86ed163783d58e9e",
        "type": "inject",
        "z": "b24fe51f964dbf33",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3040,
        "y": 140,
        "wires": [
            [
                "9c36529a7aec72c0"
            ]
        ]
    },
    {
        "id": "9c36529a7aec72c0",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "ConfigService",
        "func": "const dateFormat = \"YYYYMMDDHHmmss\";\n\nconst currentDate = moment().format(dateFormat);\n\nmsg.currentDate = currentDate\n\nconst BP_TYPE = \"VENDOR\"\n\nmsg.BP_TYPE = BP_TYPE\n\nmsg.logger = `Business partner type #${BP_TYPE}`\nmsg.loggerNewLine = true\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 3220,
        "y": 140,
        "wires": [
            [
                "45d0aac6a4a631c5"
            ]
        ]
    },
    {
        "id": "f0f9a45de620dace",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "getEnterpriseReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst BUSINESS_UNIQUE_IDENTIFIER = env.get(\"APL_BUSINESS_UNIQUE_IDENTIFIER\")\nconst BUSINESS_TYPE = \"ENTERPRISE\"\nmsg.headers = {}\nmsg.method = \"GET\"\nconst token = flow.get(\"ent_token\") || \"\"\nmsg.url = `${PAYLATER_URL}/v1/business/service/getByIdentifier/${BUSINESS_UNIQUE_IDENTIFIER}/${BUSINESS_TYPE}`;\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = {}\n// msg.headers[\"Authorization\"] = `Bearer ${token}`\n\nmsg.logger = `getEnterprise with unique BUSINESS_UNIQUE_IDENTIFIER #${BUSINESS_UNIQUE_IDENTIFIER}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3570,
        "y": 140,
        "wires": [
            [
                "c71433a441e9b797"
            ]
        ]
    },
    {
        "id": "7f537365e6a02db4",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "Save Enterprise ID",
        "func": "const enterpriseId = msg.payload?.id\n\nmsg.enterpriseID = enterpriseId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4130,
        "y": 160,
        "wires": [
            [
                "9a99238b66ce6242",
                "a3ecaabcc0615e67"
            ]
        ]
    },
    {
        "id": "9a99238b66ce6242",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst ENTERPRISE_EMAIL = \"darkhorse@gmail.com\"\nconst PASSWORD = \"User@123\"\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": ENTERPRISE_EMAIL,\n    \"password\": PASSWORD\n};\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3230,
        "y": 240,
        "wires": [
            [
                "d7c8766ac24c3ddc"
            ]
        ]
    },
    {
        "id": "a3ecaabcc0615e67",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "enterpriseID",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "enterpriseID",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4370,
        "y": 160,
        "wires": []
    },
    {
        "id": "46621b42ee5db373",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "set actyv Entity Token",
        "func": "flow.set('actyv_token', msg.payload.idToken);\n\n// msg.ent_token = msg.payload.idToken\n\nconsole.log(msg.payload.idToken,\"TOKEN\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3620,
        "y": 240,
        "wires": [
            [
                "306399aa6a03df77",
                "2e6a249922356f5c"
            ]
        ]
    },
    {
        "id": "306399aa6a03df77",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "actyvEntityToken",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3870,
        "y": 240,
        "wires": []
    },
    {
        "id": "17abba5cc3faf14d",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "actyvEntityID",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3770,
        "y": 320,
        "wires": []
    },
    {
        "id": "a364b2883cd25936",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "getFileIdByEnterpriseIdAndBpType",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nmsg.headers = {}\nmsg.method = \"GET\"\nconst token = flow.get(\"actyv_token\") || \"\"\nmsg.url = `${PAYLATER_URL}/v1/file/config/${msg.enterpriseID}/${msg.BP_TYPE}`\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers['actyventityid'] = msg.actyvEntityId\nmsg.headers['enterpriseid'] = msg.enterpriseID\n\nmsg.logger = `Get file for enterpriseID #${msg.enterpriseID} and bp type ${msg.BP_TYPE}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3160,
        "y": 440,
        "wires": [
            [
                "025df3a4d82b163b",
                "8aecb26eafcf5210"
            ]
        ]
    },
    {
        "id": "025df3a4d82b163b",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "getFileIdByEnterpriseIdAndBpType",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3200,
        "y": 480,
        "wires": []
    },
    {
        "id": "2ffc919a0db0ca49",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "getFileIdByEnterpriseIdAndBpType",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3920,
        "y": 440,
        "wires": []
    },
    {
        "id": "45c1a428a10d13e8",
        "type": "switch",
        "z": "b24fe51f964dbf33",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3090,
        "y": 560,
        "wires": [
            [
                "fa77c34ef2690e8f"
            ],
            [
                "6c5cf49a7fe1582a"
            ]
        ]
    },
    {
        "id": "fa77c34ef2690e8f",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "No file found",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3270,
        "y": 540,
        "wires": []
    },
    {
        "id": "6c5cf49a7fe1582a",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "downloadKnockoffReport",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst fileID = msg.payload[0]\n\nmsg.method = \"GET\"\nconst token = flow.get(\"actyv_token\") || \"\"\nmsg.url = `${PAYLATER_URL}/v1/invoice-raw/get-invoice-raw-data-with-decision/${fileID}/${msg.enterpriseID}/${msg.BP_TYPE}`\nmsg.payload = {}\n\nmsg.logger = `Download Knockoff report for enterprise #${msg.enterpriseID} with fileID #${fileID}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3270,
        "y": 620,
        "wires": [
            [
                "abe940a71ba3a1b3"
            ]
        ]
    },
    {
        "id": "3aadaa3ed6c10111",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "downloadKnockoffReport",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3930,
        "y": 620,
        "wires": []
    },
    {
        "id": "7c3569b6a331d3c4",
        "type": "switch",
        "z": "b24fe51f964dbf33",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3270,
        "y": 720,
        "wires": [
            [
                "0afd5e62478a051e"
            ],
            [
                "1324389eb2221ccc"
            ]
        ]
    },
    {
        "id": "0afd5e62478a051e",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "Empty data from file id",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3520,
        "y": 700,
        "wires": []
    },
    {
        "id": "1324389eb2221ccc",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "set filename",
        "func": "const filename = `knockoff_report_${msg.BP_TYPE}_${msg.currentDate}.csv`\nconst path = `${env.get(\"LOCAL_PATH\")}/${filename}`\n\nmsg.fileName = filename;\nmsg.path = path\n\nmsg.payload = msg.payload.replace(/\\u00A0/g, \"\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3130,
        "y": 860,
        "wires": [
            [
                "3ebf041f5bac1dd7",
                "a9015ad93a307b6e"
            ]
        ]
    },
    {
        "id": "3ebf041f5bac1dd7",
        "type": "base64",
        "z": "b24fe51f964dbf33",
        "name": "",
        "action": "str",
        "property": "payload",
        "x": 3340,
        "y": 820,
        "wires": [
            [
                "f67567379f3d284d"
            ]
        ]
    },
    {
        "id": "a9015ad93a307b6e",
        "type": "file",
        "z": "b24fe51f964dbf33",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 3320,
        "y": 880,
        "wires": [
            [
                "01cd79da0b9bc30d",
                "2c37f3432692782a"
            ]
        ]
    },
    {
        "id": "f67567379f3d284d",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "send email",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\n\nconsole.log({ base64Payload: msg.payload })\n\nconst receivers = [\"ramu.bugudi@actyv.com\", \"saravanakumar.k.intern@actyv.com\", \"nikil.s.external@actyv.com\"]\n\nmsg.payload = {\n    \"from\": \"shravan.pm@actyv.com\",\n    // \"to\": [\"ramu.bugudi@actyv.com\", \"saravanakumar.k.intern@actyv.com\", \"nikil.s.external@actyv.com\"],\n    \"to\": receivers,\n    \"subject\": `Knock Off Report`,\n    \"html\": `\n    <html>\n    </html>`,\n    \"priority\": \"low\",\n    \"attachments\": [\n        {\n            filename: `${msg.fileName}`,\n            encoding: 'base64',\n            content: msg.payload\n        }\n    ]\n}\n\nmsg.logger = `Send email to ${receivers}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3490,
        "y": 760,
        "wires": [
            [
                "5d659a238fae9f46"
            ]
        ]
    },
    {
        "id": "01cd79da0b9bc30d",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "Created file successfully",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3570,
        "y": 840,
        "wires": []
    },
    {
        "id": "5f04d864ae997908",
        "type": "SFTP-main",
        "z": "b24fe51f964dbf33",
        "path": "/",
        "method": "put",
        "remoteFilePath": "/sftpdir",
        "remoteFilePathType": "str",
        "localFilePath": "path",
        "localFilePathType": "msg",
        "server": "d4942248b841ce28",
        "outputs": 1,
        "debug": false,
        "name": "create file in sftp",
        "x": 3160,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "fca3572479b85376",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "Created file in SFTP successfully",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3580,
        "y": 980,
        "wires": []
    },
    {
        "id": "8852eaa5101f3fde",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "Mail sent successful",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4020,
        "y": 760,
        "wires": []
    },
    {
        "id": "156b1abae3fc4dae",
        "type": "catch",
        "z": "b24fe51f964dbf33",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 3160,
        "y": 1060,
        "wires": [
            [
                "316927f8e5e66fb5"
            ]
        ]
    },
    {
        "id": "316927f8e5e66fb5",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "Return error",
        "func": "msg.payload = msg._error\n\nmsg.statusCode = +msg._error.statusCode\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3350,
        "y": 1060,
        "wires": [
            [
                "fa11ac7d45498030"
            ]
        ]
    },
    {
        "id": "fa11ac7d45498030",
        "type": "http response",
        "z": "b24fe51f964dbf33",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 3510,
        "y": 1060,
        "wires": []
    },
    {
        "id": "200b3e702a66ab4a",
        "type": "catch",
        "z": "b24fe51f964dbf33",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 1680,
        "y": 1060,
        "wires": [
            [
                "fafb25600d45d81e"
            ]
        ]
    },
    {
        "id": "fafb25600d45d81e",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "Return error",
        "func": "msg.payload = msg._error\n\nmsg.statusCode = +msg._error.statusCode\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 1060,
        "wires": [
            [
                "58693477bb2c8377"
            ]
        ]
    },
    {
        "id": "58693477bb2c8377",
        "type": "http response",
        "z": "b24fe51f964dbf33",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2030,
        "y": 1060,
        "wires": []
    },
    {
        "id": "f2590db6e9f8f117",
        "type": "http request",
        "z": "b24fe51f964dbf33",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 3530,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "2c37f3432692782a",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "Better SFTP",
        "func": "let Client = ssh2SftpClient\n\nlet sftpClient = new Client();\n\nconst options = {\n    host: '43.204.74.60',\n    port: 22,\n    username: 'tata_uat_sftp',\n    password: 'QLYEe4B7eRCPjqm2fntn',\n    // readyTimeout: 120000\n};\n    console.log({\"sdkfhlksdjflksjdlkfs\": msg.fileName})\nasync function sftpInteraction() {\n    try {\n        await sftpClient.connect(options);\n        await sftpClient.fastPut(\n            msg.path,\n            `/sftpdir/test/${msg.fileName}`,           \n        );\n        node.send({\n            payload: `${msg.fileName} file transfered to sftp`,\n            logger: `Transfering file to sftp`\n        });\n        console.log(\"PUT worked...\")\n    } catch (error) {\n        node.send({\n            payload: error,\n            logger: `Transfering file to sftp`\n        });\n        throw new Error(error);\n    } finally {\n        await sftpClient.end();\n    }\n}\n\nsftpInteraction();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "ssh2SftpClient",
                "module": "ssh2-sftp-client"
            }
        ],
        "x": 3150,
        "y": 980,
        "wires": [
            [
                "d859ccdd1517ddf3"
            ]
        ]
    },
    {
        "id": "e616f2b9ab3f8407",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "Better SFTP",
        "func": "let Client = ssh2SftpClient\n\nlet sftpClient = new Client();\n\nconst options = {\n    host: '43.204.74.60',\n    port: 22,\n    username: 'tata_uat_sftp',\n    password: 'QLYEe4B7eRCPjqm2fntn',\n    // readyTimeout: 120000\n};\nasync function sftpInteraction() {\n    try {\n        await sftpClient.connect(options);\n        await sftpClient.fastPut(\n        \"/Users/ramu/Desktop/node-red/knockoff_report_VENDOR_20230503141803.csv\",\n        \"/sftpdir/test/knockoff_report_VENDOR_20230503141803.csv\"\n        );\n        console.log(\"PUT worked...\")\n    } catch (error) {\n        node.send({\n            payload: error\n        });\n        throw new Error(error);\n    } finally {\n        await sftpClient.end();\n    }\n}\n\nsftpInteraction();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "ssh2SftpClient",
                "module": "ssh2-sftp-client"
            }
        ],
        "x": 3330,
        "y": 1220,
        "wires": [
            [
                "fbd6be83586955e0"
            ]
        ]
    },
    {
        "id": "72208a6bdd7fc578",
        "type": "inject",
        "z": "b24fe51f964dbf33",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3160,
        "y": 1220,
        "wires": [
            [
                "e616f2b9ab3f8407"
            ]
        ]
    },
    {
        "id": "fbd6be83586955e0",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "debug 425",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3510,
        "y": 1220,
        "wires": []
    },
    {
        "id": "9969d8d840857263",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "set filename",
        "func": "const filename = `knockoff_report_${msg.BP_TYPE}_${msg.currentDate}.csv`\nconst path = `${env.get(\"LOCAL_PATH\")}/${filename}`\n\nmsg.fileName = filename;\nmsg.path = path\n\nmsg.payload = msg.payload.replace(/\\u00A0/g, \"\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 860,
        "wires": [
            [
                "3bf17802fa124e1a",
                "9cd474ee7b79f3e8"
            ]
        ]
    },
    {
        "id": "3bf17802fa124e1a",
        "type": "base64",
        "z": "b24fe51f964dbf33",
        "name": "",
        "action": "str",
        "property": "payload",
        "x": 1860,
        "y": 820,
        "wires": [
            [
                "7717d8bbe386e3fe"
            ]
        ]
    },
    {
        "id": "7717d8bbe386e3fe",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "send email",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\n\nconsole.log({ base64Payload: msg.payload })\nconst receivers = [\"ramu.bugudi@actyv.com\", \"saravanakumar.k.intern@actyv.com\", \"nikil.s.external@actyv.com\"]\n// const receivers = [\"shravan.pm@actyv.com\"]\nmsg.payload = {\n    \"from\": \"shravan.pm@actyv.com\",\n    \"to\": receivers,\n    // [\"ramu.bugudi@actyv.com\", \"saravanakumar.k.intern@actyv.com\", \"nikil.s.external@actyv.com\"]\n    \"subject\": `Knock Off Report`,\n    \"html\": `\n    <html>\n    </html>`,\n    \"priority\": \"low\",\n    \"attachments\": [\n        {\n            filename: `${msg.fileName}`,\n            encoding: 'base64',\n            content: msg.payload\n        }\n    ]\n}\n\nmsg.logger = `Send email to ${receivers}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 760,
        "wires": [
            [
                "c615fed49a2728c5"
            ]
        ]
    },
    {
        "id": "69b18e179df07b3e",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "Mail sent successful",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2520,
        "y": 760,
        "wires": []
    },
    {
        "id": "9cd474ee7b79f3e8",
        "type": "file",
        "z": "b24fe51f964dbf33",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1840,
        "y": 880,
        "wires": [
            [
                "b1ae7fe1f4c1bfd1",
                "5fd50695a71f6164"
            ]
        ]
    },
    {
        "id": "b1ae7fe1f4c1bfd1",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "Created file successfully",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2090,
        "y": 840,
        "wires": []
    },
    {
        "id": "5fd50695a71f6164",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "Better SFTP",
        "func": "let Client = ssh2SftpClient\n\nlet sftpClient = new Client();\n\nconst options = {\n    host: '43.204.74.60',\n    port: 22,\n    username: 'tata_uat_sftp',\n    password: 'QLYEe4B7eRCPjqm2fntn',\n    // readyTimeout: 120000\n};\n    console.log({\"sdkfhlksdjflksjdlkfs\": msg.fileName})\nasync function sftpInteraction() {\n    try {\n        await sftpClient.connect(options);\n        await sftpClient.fastPut(\n            msg.path,\n            `/sftpdir/test/${msg.fileName}`\n        );\n        console.log(\"PUT worked...\")\n        node.send({\n            payload: `${msg.fileName} file transfered to SFTP`,\n            logger: `Transfering file to sftp`\n        });\n    } catch (error) {\n        node.send({\n            payload: error,\n            logger: `Transfering file to sftp`\n        });\n        throw new Error(error);\n    } finally {\n        await sftpClient.end();\n    }\n}\n\nsftpInteraction();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "ssh2SftpClient",
                "module": "ssh2-sftp-client"
            }
        ],
        "x": 1670,
        "y": 980,
        "wires": [
            [
                "8524594849138669"
            ]
        ]
    },
    {
        "id": "0bc6d6b44495cb26",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "Created file in SFTP successfully",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2100,
        "y": 980,
        "wires": []
    },
    {
        "id": "0e46618ac634a69c",
        "type": "SFTP-main",
        "z": "b24fe51f964dbf33",
        "path": "/",
        "method": "put",
        "remoteFilePath": "/sftpdir",
        "remoteFilePathType": "str",
        "localFilePath": "path",
        "localFilePathType": "msg",
        "server": "d4942248b841ce28",
        "outputs": 1,
        "debug": false,
        "name": "create file in sftp",
        "x": 1680,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "455eeb7805baef80",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "set filename",
        "func": "const filename = `knockoff_report_${msg.BP_TYPE}_${msg.currentDate}.csv`\nconst path = `${env.get(\"LOCAL_PATH\")}/${filename}`\n\nmsg.fileName = filename;\nmsg.path = path\n\nmsg.payload = msg.payload.replace(/\\u00A0/g, \"\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1180,
        "wires": [
            [
                "e10060952b8ed120",
                "7360262055394eb5"
            ]
        ]
    },
    {
        "id": "e10060952b8ed120",
        "type": "base64",
        "z": "b24fe51f964dbf33",
        "name": "",
        "action": "str",
        "property": "payload",
        "x": 620,
        "y": 1140,
        "wires": [
            [
                "a20be7ef10955042"
            ]
        ]
    },
    {
        "id": "7360262055394eb5",
        "type": "file",
        "z": "b24fe51f964dbf33",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 600,
        "y": 1200,
        "wires": [
            [
                "270a2ea0967c7da1",
                "48fb044298029d07",
                "509054f4b6b3b8ef"
            ]
        ]
    },
    {
        "id": "a20be7ef10955042",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "send email",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\n\nconsole.log({ base64Payload: msg.payload })\nconst recievers = [\"ramu.bugudi@actyv.com\", \"saravanakumar.k.intern@actyv.com\", \"nikil.s.external@actyv.com\"]\nmsg.payload = {\n    \"from\": \"shravan.pm@actyv.com\",\n    \"to\": [\"ramu.bugudi@actyv.com\", \"saravanakumar.k.intern@actyv.com\", \"nikil.s.external@actyv.com\"],\n    \"subject\": `Knock Off Report`,\n    \"html\": `\n    <html>\n    </html>`,\n    \"priority\": \"low\",\n    \"attachments\": [\n        {\n            filename: `${msg.fileName}`,\n            encoding: 'base64',\n            content: msg.payload\n        }\n    ]\n}\n\nmsg.logger = `Send email to ${recievers}`\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1080,
        "wires": [
            [
                "612f339c8a3d1b0c"
            ]
        ]
    },
    {
        "id": "270a2ea0967c7da1",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "Created file successfully",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1160,
        "wires": []
    },
    {
        "id": "48fb044298029d07",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "Return response",
        "func": "msg.payload = {\n    statusCode: 200,\n    message: \"Success\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1220,
        "wires": [
            [
                "95d1c3a4f10faf18"
            ]
        ]
    },
    {
        "id": "509054f4b6b3b8ef",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "Better SFTP",
        "func": "let Client = ssh2SftpClient\n\nlet sftpClient = new Client();\n\nconst options = {\n    host: '43.204.74.60',\n    port: 22,\n    username: 'tata_uat_sftp',\n    password: 'QLYEe4B7eRCPjqm2fntn',\n    // readyTimeout: 120000\n};\n    console.log({\"sdkfhlksdjflksjdlkfs\": msg.fileName})\nasync function sftpInteraction() {\n    try {\n        await sftpClient.connect(options);\n        await sftpClient.fastPut(\n            msg.path,\n            `/sftpdir/test/${msg.fileName}`\n        );\n        node.send({\n            logger:`Knockoff report`,\n            payload: `${msg.fileName} is transfered to sftp`\n        });\n        console.log(\"PUT worked...\")\n    } catch (error) {\n        node.send({\n            logger: `Knockoff report`,\n            payload: error\n        });\n        throw new Error(error);\n    } finally {\n        await sftpClient.end();\n    }\n}\n\nsftpInteraction();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "ssh2SftpClient",
                "module": "ssh2-sftp-client"
            }
        ],
        "x": 430,
        "y": 1300,
        "wires": [
            [
                "0796d0019d918dd8"
            ]
        ]
    },
    {
        "id": "95d1c3a4f10faf18",
        "type": "http response",
        "z": "b24fe51f964dbf33",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1010,
        "y": 1220,
        "wires": []
    },
    {
        "id": "0796d0019d918dd8",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "Created file in SFTP successfully",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 1300,
        "wires": []
    },
    {
        "id": "49c27130f963daf4",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "Mail sent successful",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 1080,
        "wires": []
    },
    {
        "id": "2a71acd3b1ed049e",
        "type": "subflow:0cbd918f05921aae",
        "z": "b24fe51f964dbf33",
        "name": "Authenticate",
        "x": 710,
        "y": 540,
        "wires": [
            [
                "49304aecd392a87f"
            ],
            [
                "aa19bc13d8826793"
            ]
        ]
    },
    {
        "id": "edf2e9591d5ead48",
        "type": "subflow:0cbd918f05921aae",
        "z": "b24fe51f964dbf33",
        "name": "getFileIdByEnterpriseIdAndBpType",
        "x": 780,
        "y": 740,
        "wires": [
            [
                "737f178174e3070d"
            ],
            [
                "9a837c9d404cadfc"
            ]
        ]
    },
    {
        "id": "b6a303b6c9acb508",
        "type": "subflow:0cbd918f05921aae",
        "z": "b24fe51f964dbf33",
        "name": "downloadKnockoffReport",
        "x": 830,
        "y": 920,
        "wires": [
            [
                "94cde24078203142"
            ],
            [
                "53991acc8dc5c21e"
            ]
        ]
    },
    {
        "id": "612f339c8a3d1b0c",
        "type": "subflow:0cbd918f05921aae",
        "z": "b24fe51f964dbf33",
        "name": "send email",
        "x": 950,
        "y": 1080,
        "wires": [
            [
                "2a974ddf0c47ed2e"
            ],
            [
                "2a974ddf0c47ed2e"
            ]
        ]
    },
    {
        "id": "75478c7b5e1cc682",
        "type": "subflow:0cbd918f05921aae",
        "z": "b24fe51f964dbf33",
        "name": "getEnterpriseReq",
        "x": 2290,
        "y": 140,
        "wires": [
            [
                "650dd007133e5ffa",
                "2526016d15e6ec38"
            ],
            []
        ]
    },
    {
        "id": "5746ccd74d62ce2d",
        "type": "subflow:0cbd918f05921aae",
        "z": "b24fe51f964dbf33",
        "name": "Authenticate",
        "x": 1950,
        "y": 240,
        "wires": [
            [
                "b2eeb580b2f59187"
            ],
            []
        ]
    },
    {
        "id": "596f522ac34a231e",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "getActyvEntityUser",
        "func": "\n\nconst GO_URL = env.get('GO_URL');\n\n\nmsg.url = `${GO_URL}/actyv-entity`;\nmsg.method = \"GET\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 640,
        "wires": [
            [
                "cd549c23aba48eb5"
            ]
        ]
    },
    {
        "id": "cd549c23aba48eb5",
        "type": "subflow:0cbd918f05921aae",
        "z": "b24fe51f964dbf33",
        "name": "getCurrentUser",
        "x": 600,
        "y": 640,
        "wires": [
            [
                "f80620e38cf1e890"
            ],
            []
        ]
    },
    {
        "id": "f80620e38cf1e890",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "Save actyv entity ID",
        "func": "const found = msg.payload.find(entity => entity.key === \"dark_horse\") ?? undefined\n\nconsole.log(found?._id)\nif (found) {\n    msg.actyvEntityId = found?._id\n    msg.payload = found?._id\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 640,
        "wires": [
            [
                "360c2fcb0b4813af",
                "bbe295cd1b6c97f2"
            ]
        ]
    },
    {
        "id": "61053b8b56e9060a",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "getActyvEntityUser",
        "func": "\n\nconst GO_URL = env.get('GO_URL');\n\n\nmsg.url = `${GO_URL}/actyv-entity`;\nmsg.method = \"GET\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 340,
        "wires": [
            [
                "a9c0e09221660f4a"
            ]
        ]
    },
    {
        "id": "a9c0e09221660f4a",
        "type": "subflow:0cbd918f05921aae",
        "z": "b24fe51f964dbf33",
        "name": "getCurrentUser",
        "x": 1840,
        "y": 340,
        "wires": [
            [
                "98ca8b4af680c749"
            ],
            []
        ]
    },
    {
        "id": "98ca8b4af680c749",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "Save actyv entity ID",
        "func": "const found = msg.payload.find(entity => entity.key === \"dark_horse\") ?? undefined\n\nconsole.log(found?._id)\nif (found) {\n    msg.actyvEntityId = found?._id\n    msg.payload = found?._id\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 340,
        "wires": [
            [
                "a874ed29f9a1dd7f",
                "c86d0963ddb6eeea"
            ]
        ]
    },
    {
        "id": "45bcb0420c7a5674",
        "type": "subflow:0cbd918f05921aae",
        "z": "b24fe51f964dbf33",
        "name": "getFileIdByEnterpriseIdAndBpType",
        "x": 2040,
        "y": 440,
        "wires": [
            [
                "801685b05846afa5"
            ],
            [
                "acc36a8c375e7579"
            ]
        ]
    },
    {
        "id": "8633f6bf7de9a706",
        "type": "subflow:0cbd918f05921aae",
        "z": "b24fe51f964dbf33",
        "name": "downloadKnockoffReport",
        "x": 2050,
        "y": 620,
        "wires": [
            [
                "2accf13b772175a4"
            ],
            [
                "157bb48973c56c01"
            ]
        ]
    },
    {
        "id": "c615fed49a2728c5",
        "type": "subflow:0cbd918f05921aae",
        "z": "b24fe51f964dbf33",
        "name": "send email",
        "x": 2190,
        "y": 760,
        "wires": [
            [
                "64131b48ba2dfd78"
            ],
            [
                "64131b48ba2dfd78"
            ]
        ]
    },
    {
        "id": "c71433a441e9b797",
        "type": "subflow:0cbd918f05921aae",
        "z": "b24fe51f964dbf33",
        "name": "getEnterpriseReq",
        "x": 3770,
        "y": 140,
        "wires": [
            [
                "23b935061aebed4e"
            ],
            [
                "685ddb876bf89b93"
            ]
        ]
    },
    {
        "id": "d7c8766ac24c3ddc",
        "type": "subflow:0cbd918f05921aae",
        "z": "b24fe51f964dbf33",
        "name": "Authenticate",
        "x": 3410,
        "y": 240,
        "wires": [
            [
                "46621b42ee5db373"
            ],
            []
        ]
    },
    {
        "id": "8aecb26eafcf5210",
        "type": "subflow:0cbd918f05921aae",
        "z": "b24fe51f964dbf33",
        "name": "getFileIdByEnterpriseIdAndBpType",
        "x": 3480,
        "y": 440,
        "wires": [
            [
                "ea87cdeffc8c818a"
            ],
            [
                "6b52afe7964abc98"
            ]
        ]
    },
    {
        "id": "abe940a71ba3a1b3",
        "type": "subflow:0cbd918f05921aae",
        "z": "b24fe51f964dbf33",
        "name": "downloadKnockoffReport",
        "x": 3530,
        "y": 620,
        "wires": [
            [
                "c606ecbc48b9eb79"
            ],
            [
                "cd8226e37ed27b40"
            ]
        ]
    },
    {
        "id": "5d659a238fae9f46",
        "type": "subflow:0cbd918f05921aae",
        "z": "b24fe51f964dbf33",
        "name": "  send email",
        "x": 3670,
        "y": 760,
        "wires": [
            [
                "7d964e326056857c"
            ],
            [
                "7d964e326056857c"
            ]
        ]
    },
    {
        "id": "2526016d15e6ec38",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "debug 497",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2430,
        "y": 80,
        "wires": []
    },
    {
        "id": "2e6a249922356f5c",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "getActyvEntityUser",
        "func": "\n\nconst GO_URL = env.get('GO_URL');\n\n\nmsg.url = `${GO_URL}/actyv-entity`;\nmsg.method = \"GET\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3130,
        "y": 320,
        "wires": [
            [
                "1db166580b0acf38"
            ]
        ]
    },
    {
        "id": "1db166580b0acf38",
        "type": "subflow:0cbd918f05921aae",
        "z": "b24fe51f964dbf33",
        "name": "getCurrentUser",
        "x": 3320,
        "y": 320,
        "wires": [
            [
                "b8fe0b5e5e966840"
            ],
            []
        ]
    },
    {
        "id": "b8fe0b5e5e966840",
        "type": "function",
        "z": "b24fe51f964dbf33",
        "name": "Save actyv entity ID",
        "func": "const found = msg.payload.find(entity => entity.key === \"dark_horse\") ?? undefined\n\nconsole.log(found?._id)\nif (found) {\n    msg.actyvEntityId = found?._id\n    msg.payload = found?._id\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3560,
        "y": 320,
        "wires": [
            [
                "17abba5cc3faf14d",
                "a364b2883cd25936"
            ]
        ]
    },
    {
        "id": "4e1adfd637b50dea",
        "type": "subflow:951a533bb3498fe6",
        "z": "b24fe51f964dbf33",
        "name": "",
        "x": 760,
        "y": 440,
        "wires": [
            [
                "665d98757b3e33bf"
            ]
        ]
    },
    {
        "id": "49304aecd392a87f",
        "type": "subflow:951a533bb3498fe6",
        "z": "b24fe51f964dbf33",
        "name": "",
        "x": 860,
        "y": 520,
        "wires": [
            [
                "cc8959e8ea9f20f1"
            ]
        ]
    },
    {
        "id": "aa19bc13d8826793",
        "type": "subflow:951a533bb3498fe6",
        "z": "b24fe51f964dbf33",
        "name": "",
        "x": 860,
        "y": 560,
        "wires": [
            [
                "9e50b2b6dd726283"
            ]
        ]
    },
    {
        "id": "9e50b2b6dd726283",
        "type": "debug",
        "z": "b24fe51f964dbf33",
        "name": "debug 498",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 560,
        "wires": []
    },
    {
        "id": "9a837c9d404cadfc",
        "type": "subflow:951a533bb3498fe6",
        "z": "b24fe51f964dbf33",
        "name": "",
        "x": 1080,
        "y": 700,
        "wires": [
            [
                "d5b9016570fba709"
            ]
        ]
    },
    {
        "id": "737f178174e3070d",
        "type": "subflow:951a533bb3498fe6",
        "z": "b24fe51f964dbf33",
        "name": "",
        "x": 1080,
        "y": 740,
        "wires": [
            [
                "fd0ed944bf0b33a5",
                "d5b9016570fba709"
            ]
        ]
    },
    {
        "id": "53991acc8dc5c21e",
        "type": "subflow:951a533bb3498fe6",
        "z": "b24fe51f964dbf33",
        "name": "",
        "x": 1020,
        "y": 900,
        "wires": [
            [
                "84b7d767d99c5b80"
            ]
        ]
    },
    {
        "id": "94cde24078203142",
        "type": "subflow:951a533bb3498fe6",
        "z": "b24fe51f964dbf33",
        "name": "",
        "x": 1020,
        "y": 940,
        "wires": [
            [
                "94684a2974cd1689",
                "84b7d767d99c5b80"
            ]
        ]
    },
    {
        "id": "2a974ddf0c47ed2e",
        "type": "subflow:951a533bb3498fe6",
        "z": "b24fe51f964dbf33",
        "name": "",
        "x": 1120,
        "y": 1080,
        "wires": [
            [
                "49c27130f963daf4"
            ]
        ]
    },
    {
        "id": "a79f2f5c4b553460",
        "type": "subflow:951a533bb3498fe6",
        "z": "b24fe51f964dbf33",
        "name": "",
        "x": 620,
        "y": 180,
        "wires": [
            [
                "3f00e2e0b563ef11"
            ]
        ]
    },
    {
        "id": "596ba69ca5b5e109",
        "type": "subflow:951a533bb3498fe6",
        "z": "b24fe51f964dbf33",
        "name": "",
        "x": 1900,
        "y": 140,
        "wires": [
            [
                "0c0367738b9a02c5"
            ]
        ]
    },
    {
        "id": "acc36a8c375e7579",
        "type": "subflow:951a533bb3498fe6",
        "z": "b24fe51f964dbf33",
        "name": "",
        "x": 2280,
        "y": 420,
        "wires": [
            [
                "b9e9f6e81313cd2a"
            ]
        ]
    },
    {
        "id": "801685b05846afa5",
        "type": "subflow:951a533bb3498fe6",
        "z": "b24fe51f964dbf33",
        "name": "",
        "x": 2280,
        "y": 460,
        "wires": [
            [
                "ba95207e545b4eb6",
                "b9e9f6e81313cd2a"
            ]
        ]
    },
    {
        "id": "157bb48973c56c01",
        "type": "subflow:951a533bb3498fe6",
        "z": "b24fe51f964dbf33",
        "name": "",
        "x": 2260,
        "y": 600,
        "wires": [
            [
                "dd1bde9c02732717"
            ]
        ]
    },
    {
        "id": "2accf13b772175a4",
        "type": "subflow:951a533bb3498fe6",
        "z": "b24fe51f964dbf33",
        "name": "",
        "x": 2260,
        "y": 640,
        "wires": [
            [
                "dd1bde9c02732717",
                "ead32249934a374a"
            ]
        ]
    },
    {
        "id": "64131b48ba2dfd78",
        "type": "subflow:951a533bb3498fe6",
        "z": "b24fe51f964dbf33",
        "name": "",
        "x": 2340,
        "y": 760,
        "wires": [
            [
                "69b18e179df07b3e"
            ]
        ]
    },
    {
        "id": "8524594849138669",
        "type": "subflow:951a533bb3498fe6",
        "z": "b24fe51f964dbf33",
        "name": "",
        "x": 1840,
        "y": 980,
        "wires": [
            [
                "0bc6d6b44495cb26"
            ]
        ]
    },
    {
        "id": "45d0aac6a4a631c5",
        "type": "subflow:951a533bb3498fe6",
        "z": "b24fe51f964dbf33",
        "name": "",
        "x": 3380,
        "y": 140,
        "wires": [
            [
                "f0f9a45de620dace"
            ]
        ]
    },
    {
        "id": "23b935061aebed4e",
        "type": "subflow:951a533bb3498fe6",
        "z": "b24fe51f964dbf33",
        "name": "",
        "x": 3940,
        "y": 160,
        "wires": [
            [
                "7f537365e6a02db4"
            ]
        ]
    },
    {
        "id": "685ddb876bf89b93",
        "type": "subflow:951a533bb3498fe6",
        "z": "b24fe51f964dbf33",
        "name": "",
        "x": 3940,
        "y": 120,
        "wires": [
            [
                "a3ecaabcc0615e67"
            ]
        ]
    },
    {
        "id": "ea87cdeffc8c818a",
        "type": "subflow:951a533bb3498fe6",
        "z": "b24fe51f964dbf33",
        "name": "",
        "x": 3700,
        "y": 460,
        "wires": [
            [
                "2ffc919a0db0ca49",
                "45c1a428a10d13e8"
            ]
        ]
    },
    {
        "id": "6b52afe7964abc98",
        "type": "subflow:951a533bb3498fe6",
        "z": "b24fe51f964dbf33",
        "name": "",
        "x": 3700,
        "y": 420,
        "wires": [
            [
                "2ffc919a0db0ca49"
            ]
        ]
    },
    {
        "id": "c606ecbc48b9eb79",
        "type": "subflow:951a533bb3498fe6",
        "z": "b24fe51f964dbf33",
        "name": "",
        "x": 3720,
        "y": 640,
        "wires": [
            [
                "3aadaa3ed6c10111",
                "7c3569b6a331d3c4"
            ]
        ]
    },
    {
        "id": "cd8226e37ed27b40",
        "type": "subflow:951a533bb3498fe6",
        "z": "b24fe51f964dbf33",
        "name": "",
        "x": 3720,
        "y": 600,
        "wires": [
            [
                "3aadaa3ed6c10111"
            ]
        ]
    },
    {
        "id": "7d964e326056857c",
        "type": "subflow:951a533bb3498fe6",
        "z": "b24fe51f964dbf33",
        "name": "",
        "x": 3820,
        "y": 760,
        "wires": [
            [
                "8852eaa5101f3fde"
            ]
        ]
    },
    {
        "id": "d859ccdd1517ddf3",
        "type": "subflow:951a533bb3498fe6",
        "z": "b24fe51f964dbf33",
        "name": "",
        "x": 3320,
        "y": 980,
        "wires": [
            [
                "fca3572479b85376"
            ]
        ]
    },
    {
        "id": "c6562fad6221d811",
        "type": "inject",
        "z": "53e710bd040c67f4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 440,
        "y": 240,
        "wires": [
            [
                "e9554149a9ac562c"
            ]
        ]
    },
    {
        "id": "b2955fb8bb4d4396",
        "type": "SFTP-main",
        "z": "53e710bd040c67f4",
        "path": "/",
        "method": "list",
        "remoteFilePath": "/sftpdir/invoices",
        "remoteFilePathType": "str",
        "localFilePath": "C:\\Users\\Ayush Rarg\\OneDrive - actyv.ai\\Desktop\\node-red",
        "localFilePathType": "str",
        "server": "d4942248b841ce28",
        "outputs": 1,
        "debug": false,
        "name": "lisitng the files from sftp",
        "x": 230,
        "y": 920,
        "wires": [
            [
                "b58c81fd23e5de53"
            ]
        ]
    },
    {
        "id": "90cd670a59b52eba",
        "type": "SFTP-main",
        "z": "53e710bd040c67f4",
        "path": "/",
        "method": "get",
        "remoteFilePath": "payload",
        "remoteFilePathType": "msg",
        "localFilePath": "LOCAL_PATH",
        "localFilePathType": "env",
        "server": "d4942248b841ce28",
        "outputs": 1,
        "debug": false,
        "name": "get a single file from sftp",
        "x": 690,
        "y": 920,
        "wires": [
            [
                "a7402b65c307c04e",
                "73cc2c4169a559e7",
                "ccba5993653f5b56"
            ]
        ]
    },
    {
        "id": "19351d4dc770ed62",
        "type": "file in",
        "z": "53e710bd040c67f4",
        "name": "",
        "filename": "filename",
        "filenameType": "str",
        "format": "stream",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 1080,
        "y": 860,
        "wires": [
            [
                "3148a557c1d31fbb"
            ]
        ]
    },
    {
        "id": "73cc2c4169a559e7",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "setFilename",
        "func": "const folderPath = msg.payload[0].split(\"/\")\nconst fileName = folderPath[folderPath.length - 1]\nflow.set('filename', fileName)\nmsg.filename = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 860,
        "wires": [
            [
                "19351d4dc770ed62"
            ]
        ]
    },
    {
        "id": "3148a557c1d31fbb",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "getFilename",
        "func": "msg.filename = flow.get(\"filename\") || \"test.xlsx\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 860,
        "wires": [
            [
                "26566c8ceafdd940"
            ]
        ]
    },
    {
        "id": "ec35ca1ee3bb4a7e",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "getFilename",
        "func": "const filename = flow.get(\"filename\") || \"sample.xlsx\"\n// const s3Url = `https://nodered-test.s3.ap-northeast-1.amazonaws.com/${filename}`\nconst s3Url = `https://actyv-test-bucket.s3.amazonaws.com/ftpFiles/${filename}`\n\n// Assign filename and s3Url to flow variables\nflow.set(\"filename\",filename)\nflow.set(\"s3Url\",s3Url)\n\nmsg.filename = filename;\nmsg.s3Url = s3Url;\nmsg.filepath = `${env.get(\"LOCAL_PATH\")}/${filename}`\n\nconst PAYLATER_URL = env.get(\"PAYLATER_URL\")\nconst CONFIG_KEY = env.get(\"DEMO_CONFIG_KEY\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${PAYLATER_URL}/v1/configuration/service/config-key/${CONFIG_KEY}`\nmsg.method = \"GET\"\nconst token = flow.get(\"actyv_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n\nreturn msg;\n\n// Right now don't check the file present in s3 or not just hardcode the path with the real file name path",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1120,
        "wires": [
            [
                "6692f1d9cdbd8c4a",
                "3eeda0210c996cfb"
            ]
        ]
    },
    {
        "id": "4a05cdbb72745394",
        "type": "comment",
        "z": "53e710bd040c67f4",
        "name": "Get s3 link using filename",
        "info": "",
        "x": 230,
        "y": 760,
        "wires": []
    },
    {
        "id": "69c20629172eb45e",
        "type": "comment",
        "z": "53e710bd040c67f4",
        "name": "Upload to s3",
        "info": "",
        "x": 1430,
        "y": 820,
        "wires": []
    },
    {
        "id": "ecf3ab17cbc60748",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "Get env variables",
        "func": "msg.PAYLATER_URL = env.get(\"PAYLATER_URL\")\nmsg.GO_URL = env.get(\"GO_URL\")\nmsg.ADMIN_URL = env.get(\"ADMIN_URL\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1240,
        "wires": [
            [
                "ab41773c784fb56a"
            ]
        ]
    },
    {
        "id": "ba7ad04d2049462d",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "setDataSourceConfig",
        "func": "flow.set('dataSourceConfig',msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1240,
        "wires": [
            [
                "ecf3ab17cbc60748"
            ]
        ]
    },
    {
        "id": "ab41773c784fb56a",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "dataSourceConfigReq",
        "func": "const dataSourceConfig = flow.get(\"dataSourceConfig\") || {}\nconst body = {\n    dataSourceConfigId: dataSourceConfig.id,\n    direction: dataSourceConfig.direction,\n    fileOriginalName: `${msg.filename}`,\n    fileDestinationPath: `${msg.s3Url}`,\n    isValid: true,\n    noOfRows: null,\n    parsedOn: null,\n    parseAttempts: 0,\n    parseStatus: \"ingested\",\n    statusComment: null,\n    transmissionStatus: \"pending\",\n}\nmsg.payload = body;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1240,
        "wires": [
            [
                "afd4f42ee774e7e2",
                "507f057b233e6890"
            ]
        ]
    },
    {
        "id": "afd4f42ee774e7e2",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "Update data source config",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 1180,
        "wires": []
    },
    {
        "id": "c2d71daff82f28fd",
        "type": "comment",
        "z": "53e710bd040c67f4",
        "name": "Invoice creation",
        "info": "",
        "x": 200,
        "y": 1060,
        "wires": []
    },
    {
        "id": "57aa6e6b7a61e12d",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "getPendingFiles",
        "func": "\nconst pendingFiles = msg.payload.filter(\n    (item) =>\n        item.parseStatus == \"failure\" \n        ||\n        item.parseStatus == \"ingested\",\n);\nmsg.payload = pendingFiles;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 1380,
        "wires": [
            [
                "556d7cbfc5bdc924",
                "0beb789f7729670d"
            ]
        ]
    },
    {
        "id": "556d7cbfc5bdc924",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "loopOverPendingFiles",
        "func": "// let pendingFiles = [...msg.payload]\n// for (let i = 0; i < pendingFiles.length; i++) {\n//     msg.payload = pendingFiles[i]\n//     node.send(msg);\n//     // console.log(\"\\n\\n\",\"sd\",i,\"\\n\\n\")\n// }\n\n// // return msg\n\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    flow.set(\"fileId\", msg.payload[i].id)\n    // node.send(msg,{payload: msg.payload[i]});\n    node.send({ ...msg, payload: msg.payload[i] });\n    // console.log(\"\\n\\n\",\"sd\",i,\"\\n\\n\")\n}\n\n// return msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 1380,
        "wires": [
            [
                "02b9e9f171415ee2"
            ]
        ]
    },
    {
        "id": "02b9e9f171415ee2",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "getFlowVariables",
        "func": "const s3Url = flow.get('s3Url') || \"\"\nconst filename = flow.get('filename') || \"\"\n\nconst PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst url = msg.payload.fileDestinationPath\nconst fileId = flow.get(\"fileId\") || \"\"\n// msg.fileId = \"aff9a6b8-c94c-4b2b-bef8-2150841d234d\"\nmsg.url = `${PAYLATER_URL}/v1/file/service/patchParsingStatus/${fileId}`\nmsg.method = 'PATCH'\nconst token = flow.get(\"actyv_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = {\n    \"parseStatus\": \"parsing\",\n    \"statusComment\": \"File parsed successfully from File Parser service\"\n}\n\nmsg.logger = `Update file parser status of fileID #${fileId} and the status to #parsing`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1580,
        "wires": [
            [
                "ccbbd20a84898283"
            ]
        ]
    },
    {
        "id": "7e51c6241c82daac",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "fileParserRequest",
        "func": "msg.filename = `${env.get('LOCAL_PATH')}/${msg.filename.split(\".\").slice(0, -1).join(\".\").trimLeft()}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1580,
        "wires": [
            [
                "113a10a324c627d4"
            ]
        ]
    },
    {
        "id": "0358aa8669d13246",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "getOutstandingInvoices",
        "func": "// const outstandingInvoices = msg.payload.data[\"Sheet1\"][\"valid\"]\n// msg.outstandingInvoices = outstandingInvoices\n// return msg;\n\nmsg.outstandingInvoices = msg.payload\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1820,
        "wires": [
            [
                "5b02f1c9d81dea7a",
                "4d6e0ed2b1356623",
                "ecc04f93075a4cf3"
            ]
        ]
    },
    {
        "id": "5b02f1c9d81dea7a",
        "type": "switch",
        "z": "53e710bd040c67f4",
        "name": "",
        "property": "outstandingInvoices.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lte",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 1820,
        "wires": [
            [
                "e49c01d7750f0c44"
            ],
            [
                "b49f7d1e91918bf4"
            ]
        ]
    },
    {
        "id": "b49f7d1e91918bf4",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "getDistributorByERPID",
        "func": "\nconst PAYLATER_URL = env.get('PAYLATER_URL')\n\nmsg.url = `${PAYLATER_URL}/v1/business-relationship/getByBulkDistributorERP`\nmsg.method = 'POST'\nconst token = flow.get(\"actyv_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\nmsg.payload = {\n    erpIDList: msg.demoEnterpriseId\n}\n\nmsg.logger = `Get distributor erpID's for enterpriseID #${msg.demoEnterpriseId}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1840,
        "wires": [
            [
                "5cdf68fa97222089"
            ]
        ]
    },
    {
        "id": "d6a9068f14c63a82",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "invoiceRawFormat",
        "func": "const sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\nconst chunkSize = 50;\nconst fileId = flow.get('fileId') || \"\"\nconst chunks = []\nfor (let i = 0; i < msg.payload.length; i += chunkSize) {\n    chunks.push(msg.payload.slice(i, i + chunkSize));\n\n    // do whatever\n}\n\n\n// chunk the large array into multiple with (100 each)\n// loop through main array [1000 -> [[100],[100],...]\n// 100 -> push into invoiceRaw and send \nif (msg.payload.length > 0) {\n    let invoiceDate;\n    let actualDays;\n    let formatDueDate;\n    for (let i = 0; i < chunks.length; i++) {\n        const invoiceRaw = []\n        await sleep(250)\n\n        for (let j = 0; j < chunks[i].length; j++) {\n            let outstandingFile = chunks[i][j];\n            // let temp = outstandingFile[\"Posting Date\"].split(\"/\").reverse().join(\"/\")\n            invoiceDate = sheetDateToJSDate(outstandingFile[\"Posting Date\"]);\n            // let invoiceDate = \"2023-01-28\";\n\n            var date = new Date();\n            actualDays = addDays(0, invoiceDate)\n            // formatDueDate = `${new Date(actualDays).getDate()}-${new Date(actualDays).getMonth() + 1}-${new Date(actualDays).getFullYear()}`\n\n            fixDate({ ...outstandingFile, dueDate: formatDueDate, sytemDueDate: invoiceDate });\n            if (outstandingFile?.[\"Reference key\"]) {\n                let businessID = outstandingFile[\"Company Code\"] ? msg.erpIdAndBusinessIdMapping[`${outstandingFile[\"Account\"]}`] : msg.erpIdAndBusinessIdMapping[`${outstandingFile[\"Account\"]}`]\n                invoiceRaw.push({\n                    // businessID: msg.erpIdAndBusinessIdMapping[outstandingFile.RetailerCode],\n                    businessID: businessID ?? null,\n                    enterpriseID: msg.demoEnterpriseId,\n                    fileID: fileId,\n                    erpID: outstandingFile[\"Company Code\"] ? `${outstandingFile[\"Account\"]}` : `${outstandingFile[\"Account\"]}`,\n                    documentNo: outstandingFile[\"Reference key\"].toString() ?? \"\",\n                    amount: outstandingFile[\"Amount in local currency\"],\n                    dueDate: actualDays,\n                    documentDate: new Date(invoiceDate)?.toISOString(),\n                    remitTo: \"\",\n                    remitAccount: \"\",\n                    paymentTerm: \"\",\n                    rawData: JSON.parse(JSON.stringify(outstandingFile)) || {},\n                })\n            }\n        }\n        console.log({ invoiceRaw })\n        node.send({\n            payload: invoiceRaw,\n            isCompleted: \"false\",\n            invoiceDate,\n            formatDueDate,\n            actualDays,\n            length: i,\n            enterpriseId: msg.enterpriseId\n        })\n    }\n\n}\n\n// }\n\nfunction fixDate(invoice) {\n    let tempDocDate = new Date(invoice.postingDate);\n    let tempSystemDueDate = new Date(invoice.sytemDueDate);\n    let tempDueDate = new Date(invoice.dueDate);\n\n    tempDocDate.setTime(tempDocDate.getTime() + 1000 * 60);\n    tempDocDate.setHours(0, 0, 0);\n    tempSystemDueDate.setTime(tempSystemDueDate.getTime() + 1000 * 60);\n    tempSystemDueDate.setHours(0, 0, 0);\n    tempDueDate.setTime(tempDueDate.getTime() + 1000 * 60);\n    tempDueDate.setHours(0, 0, 0);\n\n    invoice.docDate = convertToISO(tempDocDate);\n    invoice.sytemDueDate = convertToISO(tempSystemDueDate);\n    invoice.dueDate = convertToISO(tempDueDate);\n}\n\nfunction convertToISO(date) {\n    return (\n        date.getFullYear() +\n        \"-\" +\n        (date.getMonth() + 1) +\n        \"-\" +\n        date.getDate() +\n        \" 00:00:00.000+00\"\n    );\n}\n\nfunction sliceIntoChunks(arr, chunkSize) {\n    const res = [];\n\n    for (let k = 0; k < arr.length; k += chunkSize) {\n        const chunk = arr.slice(k, k + chunkSize);\n        res.push(chunk);\n    }\n\n    return res;\n};\n\nfunction addDays(days, invoiceDate) {\n    var date = new Date(invoiceDate);\n    date.setDate(date.getDate() + days);\n    return date;\n}\n\nfunction formatDates(inputDate) {\n    const date = inputDate\n    const [day, month, year] = date.toString()?.split(\"/\")\n    const result = new Date(year, month - 1, day).toLocaleDateString('en-GB');\n    return result.split(\"/\").reverse().join(\"-\")\n}\n\nfunction sheetDateToJSDate(n) {\n    // const d = new Date(1899, 11, 30)\n    const d = new Date(1899, 11, 30)\n    d.setDate(d.getDate() + n)\n    // Rounds milliseconds to seconds\n    d.setSeconds(d.getSeconds() + Math.round(d.getMilliseconds() / 1000))\n    d.setMilliseconds(0)\n    // return `${d.getDate()}-${d.getMonth() + 1}-${d.getFullYear()}`\n    return `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`\n}\n\nmsg.isCompleted = \"true\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2300,
        "wires": [
            [
                "a2cc428f1bdf138a",
                "9c6f596c10a0c185"
            ]
        ]
    },
    {
        "id": "dffddee398d9731f",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "addInvoiceBulk",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst invoiceRawDataArray = msg.payload\nmsg.url = `${PAYLATER_URL}/v1/invoice-raw/service/bulk-insert`\nmsg.method = 'POST'\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\nmsg.payload = {\n invoiceRawDataArray: msg.payload\n}\n\nmsg.logger = `Add invoice bulk of length ${invoiceRawDataArray.length}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 2240,
        "wires": [
            [
                "1c4717a8a9f662df",
                "0e8447a8c054aaa7"
            ]
        ]
    },
    {
        "id": "eeb49b72b6c4b4d1",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "totalInvoices",
        "func": "let totalInvoiceRawInserted = {};\ntotalInvoiceRawInserted = {\n    ...totalInvoiceRawInserted,\n    ...msg.payload,\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 2320,
        "wires": [
            [
                "4bbf7800266ee052"
            ]
        ]
    },
    {
        "id": "4bbf7800266ee052",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "updateFileParsingStatus",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst fileId = flow.get(\"fileId\") || \"\";\n\nmsg.url = `${PAYLATER_URL}/v1/file/service/patchParsingStatus/${fileId}`\nmsg.method = 'PATCH'\nconst token = flow.get(\"actyv_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n\nmsg.payload = {\n    \"parseStatus\": \"aggregated\",\n    \"statusComment\": \"File parsed successfully from File Parser service\"\n}\n\nmsg.logger = `Update the file status of fileID #${fileId} to the status #aggregated`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 2320,
        "wires": [
            [
                "1df87818f2d0a14f"
            ]
        ]
    },
    {
        "id": "e49c01d7750f0c44",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "updateFileParsingStatus",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nmsg.url = `${PAYLATER_URL}/v1/file/service/patchParsingStatus/${msg.fileId}`\nmsg.method = 'PATCH'\nconst token = flow.get(\"actyv_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\nmsg.payload = {\n    \"parseStatus\": \"ingested\",\n    \"statusComment\": \"File parsed successfully from File Parser service\"\n}\n\nmsg.logger = `update the file parse status for fileID ${msg.fileId} to #ingested`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1740,
        "wires": [
            [
                "27c5a544c427da72"
            ]
        ]
    },
    {
        "id": "aaddd1b2a43e5ce0",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "callCopyInvoiceSP",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst fileId =flow.get('fileId') || \"\"\n\nmsg.url = `${PAYLATER_URL}/v1/invoice-raw/copy-invoices-sp/${fileId}`\nmsg.method = 'POST'\nconst token = flow.get(\"actyv_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 2520,
        "wires": [
            [
                "3488c08aac37c920",
                "9eeabaf8ec635b26"
            ]
        ]
    },
    {
        "id": "075291d295d828d3",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "erpIdAndBusinessIdMapping",
        "func": "msg.erpIdAndBusinessIdMapping = msg.payload\nmsg.payload = msg.outstandingInvoices\nreturn msg;\n\n// Response Type\n// {\n//   \"101104\": \"635f8ebfd988fd7c1800d8c9\"\n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 2300,
        "wires": [
            [
                "d6a9068f14c63a82",
                "1c015654f74987ce"
            ]
        ]
    },
    {
        "id": "ec8412f18d8740fd",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2370,
        "y": 2320,
        "wires": []
    },
    {
        "id": "a2cc428f1bdf138a",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "invoiceRawFormat",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 2360,
        "wires": []
    },
    {
        "id": "9c6f596c10a0c185",
        "type": "switch",
        "z": "53e710bd040c67f4",
        "name": "",
        "property": "isCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 930,
        "y": 2300,
        "wires": [
            [
                "dffddee398d9731f",
                "ddc2f85f0f5bd409"
            ],
            [
                "eeb49b72b6c4b4d1",
                "eef1279f87287b1d"
            ]
        ]
    },
    {
        "id": "ace490ec377ee797",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "debug 303",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2404.999984741211,
        "y": 454.99999809265137,
        "wires": []
    },
    {
        "id": "31333fa625bfc3ce",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "function 175",
        "func": "console.log(\"S3 Events\",msg)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2234.999984741211,
        "y": 454.99999809265137,
        "wires": [
            []
        ]
    },
    {
        "id": "54772097c0410e7d",
        "type": "comment",
        "z": "53e710bd040c67f4",
        "name": "Listen events from s3",
        "info": "",
        "x": 2064.999984741211,
        "y": 394.99999809265137,
        "wires": []
    },
    {
        "id": "113a10a324c627d4",
        "type": "alafile in",
        "z": "53e710bd040c67f4",
        "name": "",
        "filename": "",
        "format": "xlsx",
        "columns": "*",
        "headers": true,
        "x": 350,
        "y": 1820,
        "wires": [
            [
                "0358aa8669d13246"
            ]
        ]
    },
    {
        "id": "57c02beffb43f2b7",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "Update file parsing status to ingested",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 1740,
        "wires": []
    },
    {
        "id": "e8ba3ba5406ab6f4",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "Add invoice bulk",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2050,
        "y": 2240,
        "wires": []
    },
    {
        "id": "3488c08aac37c920",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "debug 304",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 2480,
        "wires": []
    },
    {
        "id": "507f057b233e6890",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "createFileReq",
        "func": "\nconst PAYLATER_URL = env.get(\"PAYLATER_URL\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${PAYLATER_URL}/v1/file/service`\nmsg.method = \"POST\"\nconst token = flow.get(\"actyv_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n\nmsg.logger = `Create file request`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 1240,
        "wires": [
            [
                "290f3471d4ab2992"
            ]
        ]
    },
    {
        "id": "c973f20693e99741",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "getFileByConfigKeyReq",
        "func": "\nconst PAYLATER_URL = env.get(\"PAYLATER_URL\")\nconst CONFIG_KEY = env.get(\"DEMO_CONFIG_KEY\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${PAYLATER_URL}/v1/file/service/config-key/${CONFIG_KEY}`\nmsg.method = \"GET\"\nconst token = flow.get(\"actyv_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n\nmsg.logger = `get File By Config Key with config key #${CONFIG_KEY}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1380,
        "wires": [
            [
                "93fd11a0fdaad440"
            ]
        ]
    },
    {
        "id": "b58c81fd23e5de53",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "getSingleFilename",
        "func": "\nconst files = msg.payload\nlet file;\nif (files.length > 0) {\n    file = files[0]\n}\n// msg.payload =  [file]\nmsg.payload = [\"/sftpdir/invoices/demo-invoice-ingestion-standard (2) (1).xlsx\"]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 920,
        "wires": [
            [
                "90cd670a59b52eba"
            ]
        ]
    },
    {
        "id": "ecc04f93075a4cf3",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 1920,
        "wires": []
    },
    {
        "id": "c7f8f68cbf857d51",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 1840,
        "wires": []
    },
    {
        "id": "1c015654f74987ce",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "erpIdAndBusinessIdMapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 2240,
        "wires": []
    },
    {
        "id": "fc5e81dbe3cb9334",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "sleep",
        "func": "const sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\nawait sleep(5000)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 2420,
        "wires": [
            [
                "aaddd1b2a43e5ce0"
            ]
        ]
    },
    {
        "id": "107224f9e389f8ef",
        "type": "comment",
        "z": "53e710bd040c67f4",
        "name": "Move file to failure folder",
        "info": "Send an email if any error occurs",
        "x": 370,
        "y": 2820,
        "wires": []
    },
    {
        "id": "1043f54a19afeec9",
        "type": "catch",
        "z": "53e710bd040c67f4",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 320,
        "y": 2880,
        "wires": [
            []
        ]
    },
    {
        "id": "ccba5993653f5b56",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "setRemotePath",
        "func": "msg.filename = msg.payload[0].split(\".\").slice(0, -1).join(\".\") // filename without extension\n\nconst folderPath = msg.payload[0].split(\"/\")\nconst fileName = folderPath[folderPath.length - 1]\nflow.set('filename', fileName) // filename with extension\nglobal.set('filename', fileName) // filename with extension\n\n// msg.filepath = `/Users/ramu/Desktop/node-red/${fileName}`\n// msg.successPath = `${env.get(\"SFTP_SUCCESS_FOLDER\")}`\nmsg.localPath = `${env.get(\"LOCAL_PATH\")}/${fileName}`\n// msg.remotePath = `${env.get(\"REMOTE_PATH_OUT\")}/${fileName}`\n\nmsg.successPath = `/sftpdir/success`\nmsg.remotePath = `/sftpdir/invoices/${fileName}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1040,
        "wires": [
            [
                "ec35ca1ee3bb4a7e"
            ]
        ]
    },
    {
        "id": "84189d23ce5e4a5b",
        "type": "SFTP-main",
        "z": "53e710bd040c67f4",
        "path": "/",
        "method": "put",
        "remoteFilePath": "/sftpdir/failed",
        "remoteFilePathType": "str",
        "localFilePath": "localPath",
        "localFilePathType": "msg",
        "server": "3dba22b286b032b4",
        "outputs": 1,
        "debug": false,
        "name": "move to failure folder",
        "x": 720,
        "y": 2880,
        "wires": [
            [
                "b362089292c7fe92"
            ]
        ]
    },
    {
        "id": "8100203573656e23",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "Deleted file from SFTP existing directory",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 2980,
        "wires": []
    },
    {
        "id": "b362089292c7fe92",
        "type": "SFTP-main",
        "z": "53e710bd040c67f4",
        "path": "/",
        "method": "delete",
        "remoteFilePath": "remotePath",
        "remoteFilePathType": "msg",
        "localFilePath": "filepath",
        "localFilePathType": "msg",
        "server": "3dba22b286b032b4",
        "outputs": 1,
        "debug": false,
        "name": "delete from existing folder",
        "x": 390,
        "y": 2980,
        "wires": [
            [
                "8100203573656e23"
            ]
        ]
    },
    {
        "id": "14054e8202b81b84",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "setRemotePath",
        "func": "const fileName = global.get('filename') // filename with extension\n\nmsg.failurePath = `${env.get(\"SFTP_FAILURE_FOLDER\")}`\nmsg.localPath = `${env.get(\"LOCAL_PATH\")}/${fileName}`\nmsg.remotePath = `${env.get(\"REMOTE_PATH_OUT\")}/${fileName}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 2880,
        "wires": [
            [
                "e819fab0978c4b25",
                "84189d23ce5e4a5b"
            ]
        ]
    },
    {
        "id": "e819fab0978c4b25",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "debug 305",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 2800,
        "wires": []
    },
    {
        "id": "e91f5720d322cf25",
        "type": "comment",
        "z": "53e710bd040c67f4",
        "name": "Error handling",
        "info": "Send an email if any error occurs",
        "x": 290,
        "y": 3200,
        "wires": []
    },
    {
        "id": "0e5b5d15fd38765d",
        "type": "catch",
        "z": "53e710bd040c67f4",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 280,
        "y": 3260,
        "wires": [
            []
        ]
    },
    {
        "id": "4498bbb6ce71883b",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "error",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 3260,
        "wires": []
    },
    {
        "id": "2648ef2706a96c3e",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "sendEmailReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\n\nmsg.payload = {\n    // \"from\": \"ramu.bugudi@actyv.com\",\n    \"from\": \"shravan.pm@actyv.com\",\n    \"to\": \"ramu.bugudi@actyv.com\",\n    \"subject\": `Error occured - ${msg.error.message}`,\n    // \"html\": `${msg.error}`,\n    \"html\": `\n    <html>\n        <body>\n            <p></p>\n            <p><b>FLOW NAME:</b> ${env.get(\"NR_FLOW_NAME\")} <b>FLOW ID:</b> ${env.get(\"NR_FLOW_ID\")} <b>PATH:</b> ${env.get(\"NR_NODE_PATH\")}</p>\n            <p>${msg.error.message}</p>\n            <p>Name: ${msg.error.source.name} - Type: ${msg.error.source.type}</p>\n            <p>Stacktrace: ${msg.error.stack}</p>\n        </body>\n    </html>`,\n    \"priority\": \"high\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 3260,
        "wires": [
            [
                "be6746f2392134b5"
            ]
        ]
    },
    {
        "id": "be6746f2392134b5",
        "type": "http request",
        "z": "53e710bd040c67f4",
        "name": "sendEmail",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 730,
        "y": 3260,
        "wires": [
            [
                "4498bbb6ce71883b"
            ]
        ],
        "info": "Get bank product config id"
    },
    {
        "id": "dd0b7fef8f213cd0",
        "type": "comment",
        "z": "53e710bd040c67f4",
        "name": "Delete from local folder aswell",
        "info": "Send an email if any error occurs",
        "x": 1020,
        "y": 2920,
        "wires": []
    },
    {
        "id": "4bebaf1ba1fe7ada",
        "type": "amazon s3 in",
        "z": "53e710bd040c67f4",
        "aws": "5d210162c7877d54",
        "bucket": "actyv-test-bucket",
        "region": "ap-south-1",
        "filepattern": "*.*",
        "name": "",
        "x": 2054.999984741211,
        "y": 454.99999809265137,
        "wires": [
            []
        ]
    },
    {
        "id": "26566c8ceafdd940",
        "type": "amazon s3 out",
        "z": "53e710bd040c67f4",
        "aws": "5d210162c7877d54",
        "bucket": "actyv-test-bucket",
        "filename": "",
        "localFilename": "",
        "region": "ap-south-1",
        "name": "Upload to s3",
        "x": 1470,
        "y": 860,
        "wires": []
    },
    {
        "id": "4ab4c4ee79f9271d",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "getFileName",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1120,
        "wires": []
    },
    {
        "id": "faeb3d3791c6567a",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "createFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1780,
        "y": 1260,
        "wires": []
    },
    {
        "id": "af9c1fb034090fe2",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "updateFileParsingStatus",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 1520,
        "wires": []
    },
    {
        "id": "ddc2f85f0f5bd409",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "Switch False",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 2200,
        "wires": []
    },
    {
        "id": "eef1279f87287b1d",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "Switch True",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 2360,
        "wires": []
    },
    {
        "id": "0beb789f7729670d",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "getFileByConfigKey",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 1320,
        "wires": []
    },
    {
        "id": "1c4717a8a9f662df",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "Add invoice bulk req",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 2140,
        "wires": []
    },
    {
        "id": "a7402b65c307c04e",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "debug 306",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 934.9999847412109,
        "y": 914.9999980926514,
        "wires": []
    },
    {
        "id": "d12fb5701be54ba1",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "getAplPipesEnterpriseReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\n// const BUSINESS_UNIQUE_IDENTIFIER = env.get(\"CKPL_BUSINESS_UNIQUE_IDENTIFIER\")\nconst BUSINESS_UNIQUE_IDENTIFIER = \"AABCB2066P\"\nconst BUSINESS_TYPE = \"ENTERPRISE\"\nmsg.headers = {}\nmsg.method = \"GET\"\nconst token = flow.get(\"ent_token\") || \"\"\nmsg.url = `${PAYLATER_URL}/v1/business/service/getByIdentifier/${BUSINESS_UNIQUE_IDENTIFIER}/${BUSINESS_TYPE}`;\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n// msg.headers[\"Authorization\"] = `Bearer ${token}`\n\n\n\nmsg.loggerNewLine = true\nmsg.logger = `Get apl enterprise with BUSINESS_UNIQUE_IDENTIFIER #${BUSINESS_UNIQUE_IDENTIFIER} and bpType #${BUSINESS_TYPE}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 620,
        "wires": [
            [
                "1e5d9297bcd3687e"
            ]
        ]
    },
    {
        "id": "801308851e6e0ed0",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "Save Enterprise ID",
        "func": "const enterpriseId = msg.payload?.id\n\nmsg.demoEnterpriseId = enterpriseId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 620,
        "wires": [
            [
                "de6e655b5edf9ec9",
                "b2955fb8bb4d4396"
            ]
        ]
    },
    {
        "id": "de6e655b5edf9ec9",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "debug 308",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 620,
        "wires": []
    },
    {
        "id": "e859abba610397a6",
        "type": "SFTP-main",
        "z": "53e710bd040c67f4",
        "path": "/",
        "method": "put",
        "remoteFilePath": "/sftpdir/success",
        "remoteFilePathType": "str",
        "localFilePath": "localPath",
        "localFilePathType": "msg",
        "server": "d4942248b841ce28",
        "outputs": 1,
        "debug": false,
        "name": "move to success folder",
        "x": 1430,
        "y": 2840,
        "wires": [
            [
                "27325b2b093f6be0"
            ]
        ]
    },
    {
        "id": "27325b2b093f6be0",
        "type": "SFTP-main",
        "z": "53e710bd040c67f4",
        "path": "/",
        "method": "delete",
        "remoteFilePath": "remotePath",
        "remoteFilePathType": "msg",
        "localFilePath": "filepath",
        "localFilePathType": "msg",
        "server": "d4942248b841ce28",
        "outputs": 1,
        "debug": false,
        "name": "delete from existing folder",
        "x": 1690,
        "y": 2840,
        "wires": [
            [
                "4d2f92b8c3e68863"
            ]
        ]
    },
    {
        "id": "4d2f92b8c3e68863",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "Deleted file from SFTP existing directory",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2000,
        "y": 2840,
        "wires": []
    },
    {
        "id": "e9554149a9ac562c",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "Setting Global Variables",
        "func": "const ENV_VARIABLES = {\n    \"ADMIN_EMAIL\": \"darkhorse@gmail.com\",\n    \"ADMIN_PASSWORD\": \"User@123\",\n    \"ACTYV_ENTITY_URL\": \"https://actyv1-platform.uat.actyv.com\"\n}\n\nglobal.set(\"ENV_VARIABLES\", ENV_VARIABLES);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 240,
        "wires": [
            [
                "41869fe329e0d51f"
            ]
        ]
    },
    {
        "id": "41869fe329e0d51f",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "AuthenticateActyvUserReq",
        "func": "// const envVariables = global.get('envVariables')\nconst ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\nconst EMAIL = ENV_VARIABLES.ADMIN_EMAIL;\nconst PASSWORD = ENV_VARIABLES.ADMIN_PASSWORD\n\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 320,
        "wires": [
            [
                "986aae9765bf9664"
            ]
        ]
    },
    {
        "id": "8d5dfc52d5376dbb",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyv_token\",msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 320,
        "wires": [
            [
                "8f6ca762cf17d5ab",
                "5fdaafc79640e01f"
            ]
        ]
    },
    {
        "id": "c6c21f46f5f8605a",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "debug 427",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2090,
        "y": 2520,
        "wires": []
    },
    {
        "id": "41d7837654f53445",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "updatePreviousInvoicesToPaid",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\nconst BP_TYPE = \"DISTRIBUTOR\"\n\nmsg.url = `${PAYLATER_URL}/v1/invoices/service/status/${msg.enterpriseId}?bpType=${BP_TYPE}`\nmsg.method = 'POST'\nconst token = flow.get(\"ent_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n// msg.headers[\"Authorization\"] = `Bearer ${token}`\n// msg.headers[\"enterpriseid\"] = msg.enterpriseId\n\nmsg.logger = `Update the previous invoices to paid for enterpriseID #${msg.enterpriseId} and bpType #${BP_TYPE}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 2700,
        "wires": [
            [
                "7086b9efcb2e898e"
            ]
        ]
    },
    {
        "id": "8f6ca762cf17d5ab",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "debug 429",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 320,
        "wires": []
    },
    {
        "id": "5fdaafc79640e01f",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "getActyvEntityUser",
        "func": "\n\nconst GO_URL = env.get('GO_URL');\n\n\nmsg.url = `${GO_URL}/actyv-entity`;\nmsg.method = \"GET\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 420,
        "wires": [
            [
                "f1c77244255a1c1f"
            ]
        ]
    },
    {
        "id": "f1c77244255a1c1f",
        "type": "subflow:0cbd918f05921aae",
        "z": "53e710bd040c67f4",
        "name": "getCurrentUser",
        "x": 640,
        "y": 420,
        "wires": [
            [
                "12966fca0b60de97"
            ],
            []
        ]
    },
    {
        "id": "12966fca0b60de97",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "Save actyv entity ID",
        "func": "const found = msg.payload.find(entity => entity.key === \"dark_horse\") ?? undefined\n\nconsole.log(found?._id)\nif (found) {\n    flow.set(\"actyvEntityId\", found?._id);\n    msg.actyvEntityId = found?._id\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 420,
        "wires": [
            [
                "4bdad447b9a60f71",
                "d12fb5701be54ba1"
            ]
        ]
    },
    {
        "id": "4bdad447b9a60f71",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "debug 499",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 420,
        "wires": []
    },
    {
        "id": "986aae9765bf9664",
        "type": "subflow:0cbd918f05921aae",
        "z": "53e710bd040c67f4",
        "name": "AuthenticateActyvUser",
        "x": 800,
        "y": 320,
        "wires": [
            [
                "8d5dfc52d5376dbb"
            ],
            []
        ]
    },
    {
        "id": "1e5d9297bcd3687e",
        "type": "subflow:0cbd918f05921aae",
        "z": "53e710bd040c67f4",
        "name": "getEnterprise",
        "x": 910,
        "y": 620,
        "wires": [
            [
                "801308851e6e0ed0"
            ],
            []
        ]
    },
    {
        "id": "6692f1d9cdbd8c4a",
        "type": "subflow:0cbd918f05921aae",
        "z": "53e710bd040c67f4",
        "name": "getFilename",
        "x": 710,
        "y": 1120,
        "wires": [
            [
                "4ab4c4ee79f9271d",
                "ba7ad04d2049462d"
            ],
            [
                "4ab4c4ee79f9271d",
                "ba7ad04d2049462d"
            ]
        ]
    },
    {
        "id": "290f3471d4ab2992",
        "type": "subflow:0cbd918f05921aae",
        "z": "53e710bd040c67f4",
        "name": "",
        "x": 1310,
        "y": 1240,
        "wires": [
            [
                "ea36287d9108197f",
                "307333a041789290"
            ],
            [
                "2c9f36ba34dd7a06"
            ]
        ]
    },
    {
        "id": "4b4cb776a523c28b",
        "type": "subflow:951a533bb3498fe6",
        "z": "53e710bd040c67f4",
        "name": "",
        "x": 1480,
        "y": 1260,
        "wires": [
            [
                "ea36287d9108197f"
            ]
        ]
    },
    {
        "id": "93fd11a0fdaad440",
        "type": "subflow:0cbd918f05921aae",
        "z": "53e710bd040c67f4",
        "name": "getFileByConfigKeyReq",
        "x": 730,
        "y": 1380,
        "wires": [
            [
                "9ddfd09c2f9f811a",
                "859f9d3e669395f4"
            ],
            [
                "82aa2d89d46cb901"
            ]
        ]
    },
    {
        "id": "82aa2d89d46cb901",
        "type": "subflow:951a533bb3498fe6",
        "z": "53e710bd040c67f4",
        "name": "",
        "x": 880,
        "y": 1440,
        "wires": [
            [
                "859f9d3e669395f4"
            ]
        ]
    },
    {
        "id": "05728f00338cf958",
        "type": "subflow:951a533bb3498fe6",
        "z": "53e710bd040c67f4",
        "name": "",
        "x": 900,
        "y": 1620,
        "wires": [
            [
                "d7eee2e044e12b71"
            ]
        ]
    },
    {
        "id": "ccbbd20a84898283",
        "type": "subflow:0cbd918f05921aae",
        "z": "53e710bd040c67f4",
        "name": "updateFileParsingStatus",
        "x": 710,
        "y": 1580,
        "wires": [
            [
                "d7eee2e044e12b71",
                "9b66c0df1b39ed56"
            ],
            [
                "05728f00338cf958"
            ]
        ]
    },
    {
        "id": "ea36287d9108197f",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "join",
        "func": "delete msg.logger\ndelete msg.logger2\ndelete msg.loggerNewLine\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 1260,
        "wires": [
            [
                "c973f20693e99741",
                "faeb3d3791c6567a"
            ]
        ]
    },
    {
        "id": "307333a041789290",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "logger",
        "func": "msg.payload = `File created succesfully with fileID #${msg.payload.id}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 1180,
        "wires": [
            [
                "1462e23d1877fa45"
            ]
        ]
    },
    {
        "id": "1462e23d1877fa45",
        "type": "subflow:951a533bb3498fe6",
        "z": "53e710bd040c67f4",
        "name": "",
        "x": 1560,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "859f9d3e669395f4",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "join",
        "func": "delete msg.logger\ndelete msg.logger2\ndelete msg.loggerNewLine\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1380,
        "wires": [
            [
                "57aa6e6b7a61e12d"
            ]
        ]
    },
    {
        "id": "9ddfd09c2f9f811a",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "logger",
        "func": "\n\nmsg.payload = `Fetched the total files  #${msg.payload.length}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1340,
        "wires": [
            [
                "ead1a23d94711c4d"
            ]
        ]
    },
    {
        "id": "ead1a23d94711c4d",
        "type": "subflow:951a533bb3498fe6",
        "z": "53e710bd040c67f4",
        "name": "",
        "x": 1040,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "d7eee2e044e12b71",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "join",
        "func": "delete msg.logger\ndelete msg.logger2\ndelete msg.loggerNewLine\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1580,
        "wires": [
            [
                "7e51c6241c82daac"
            ]
        ]
    },
    {
        "id": "9b66c0df1b39ed56",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "logger",
        "func": "\n\nmsg.payload = `File status updated`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1540,
        "wires": [
            [
                "7dbef30a2b14842c"
            ]
        ]
    },
    {
        "id": "7dbef30a2b14842c",
        "type": "subflow:951a533bb3498fe6",
        "z": "53e710bd040c67f4",
        "name": "",
        "x": 1020,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "4d6e0ed2b1356623",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "logger",
        "func": "msg.logger = `The length of outstanding invoices`\n\nmsg.payload = `# ${msg.payload.length}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1880,
        "wires": [
            [
                "881966f6a2fdf9f6"
            ]
        ]
    },
    {
        "id": "881966f6a2fdf9f6",
        "type": "subflow:951a533bb3498fe6",
        "z": "53e710bd040c67f4",
        "name": "",
        "x": 760,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "27c5a544c427da72",
        "type": "subflow:0cbd918f05921aae",
        "z": "53e710bd040c67f4",
        "name": "Update File Parsing Status",
        "x": 1280,
        "y": 1740,
        "wires": [
            [
                "57c02beffb43f2b7"
            ],
            [
                "6a5db69bd8940210"
            ]
        ]
    },
    {
        "id": "6a5db69bd8940210",
        "type": "subflow:951a533bb3498fe6",
        "z": "53e710bd040c67f4",
        "name": "",
        "x": 1480,
        "y": 1740,
        "wires": [
            [
                "57c02beffb43f2b7"
            ]
        ]
    },
    {
        "id": "5cdf68fa97222089",
        "type": "subflow:0cbd918f05921aae",
        "z": "53e710bd040c67f4",
        "name": "Get Distributor By ERP ID",
        "x": 1250,
        "y": 1840,
        "wires": [
            [
                "c7f8f68cbf857d51",
                "a4aad50db849b441",
                "1dd908a879ce9c77"
            ],
            [
                "4dfc14004ffb0dec"
            ]
        ]
    },
    {
        "id": "4dfc14004ffb0dec",
        "type": "subflow:951a533bb3498fe6",
        "z": "53e710bd040c67f4",
        "name": "",
        "x": 1440,
        "y": 1880,
        "wires": [
            [
                "a4aad50db849b441"
            ]
        ]
    },
    {
        "id": "a4aad50db849b441",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "join",
        "func": "delete msg.logger\ndelete msg.logger2\ndelete msg.loggerNewLine\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 1880,
        "wires": [
            [
                "c7f8f68cbf857d51",
                "075291d295d828d3"
            ]
        ]
    },
    {
        "id": "797d0b5a557a440e",
        "type": "subflow:951a533bb3498fe6",
        "z": "53e710bd040c67f4",
        "name": "",
        "x": 1560,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "1dd908a879ce9c77",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "logger",
        "func": "msg.payload = `fetching erpID's are succesfull`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 1800,
        "wires": [
            [
                "797d0b5a557a440e"
            ]
        ]
    },
    {
        "id": "0e8447a8c054aaa7",
        "type": "subflow:0cbd918f05921aae",
        "z": "53e710bd040c67f4",
        "name": "Add Invoice Raw Bulk",
        "x": 1620,
        "y": 2240,
        "wires": [
            [
                "72bcd41a68b2775b"
            ],
            [
                "e3b6350d16a534f2"
            ]
        ]
    },
    {
        "id": "e3b6350d16a534f2",
        "type": "subflow:951a533bb3498fe6",
        "z": "53e710bd040c67f4",
        "name": "",
        "x": 1860,
        "y": 2260,
        "wires": [
            [
                "e8ba3ba5406ab6f4"
            ]
        ]
    },
    {
        "id": "72bcd41a68b2775b",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "logger",
        "func": "msg.payload = `Completed`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 2200,
        "wires": [
            [
                "5d540de507e2d7d0"
            ]
        ]
    },
    {
        "id": "5d540de507e2d7d0",
        "type": "subflow:951a533bb3498fe6",
        "z": "53e710bd040c67f4",
        "name": "",
        "x": 1920,
        "y": 2200,
        "wires": [
            [
                "e8ba3ba5406ab6f4"
            ]
        ]
    },
    {
        "id": "1df87818f2d0a14f",
        "type": "subflow:0cbd918f05921aae",
        "z": "53e710bd040c67f4",
        "name": "Update File Parsing Status",
        "x": 1920,
        "y": 2320,
        "wires": [
            [
                "43cb974328a2d4a6",
                "9c83a3f61e700282"
            ],
            [
                "f6e53a67f6b67a70"
            ]
        ]
    },
    {
        "id": "43cb974328a2d4a6",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "join",
        "func": "delete msg.logger\ndelete msg.logger2\ndelete msg.loggerNewLine\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 2320,
        "wires": [
            [
                "ec8412f18d8740fd",
                "fc5e81dbe3cb9334"
            ]
        ]
    },
    {
        "id": "f6e53a67f6b67a70",
        "type": "subflow:951a533bb3498fe6",
        "z": "53e710bd040c67f4",
        "name": "",
        "x": 2100,
        "y": 2360,
        "wires": [
            [
                "43cb974328a2d4a6"
            ]
        ]
    },
    {
        "id": "9c83a3f61e700282",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "logger",
        "func": "msg.payload = `Success`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2230,
        "y": 2260,
        "wires": [
            [
                "db4cbd52eff56a17"
            ]
        ]
    },
    {
        "id": "db4cbd52eff56a17",
        "type": "subflow:951a533bb3498fe6",
        "z": "53e710bd040c67f4",
        "name": "",
        "x": 2360,
        "y": 2260,
        "wires": [
            []
        ]
    },
    {
        "id": "9eeabaf8ec635b26",
        "type": "subflow:0cbd918f05921aae",
        "z": "53e710bd040c67f4",
        "name": "Call Copy Invoice SP",
        "x": 1660,
        "y": 2520,
        "wires": [
            [
                "ee03e318f5d23658",
                "930977ccf026507e"
            ],
            [
                "b2b9b305348d9ce2"
            ]
        ]
    },
    {
        "id": "b2b9b305348d9ce2",
        "type": "subflow:951a533bb3498fe6",
        "z": "53e710bd040c67f4",
        "name": "",
        "x": 1800,
        "y": 2560,
        "wires": [
            [
                "ee03e318f5d23658"
            ]
        ]
    },
    {
        "id": "ee03e318f5d23658",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "join",
        "func": "delete msg.logger\ndelete msg.logger2\ndelete msg.loggerNewLine\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 2560,
        "wires": [
            [
                "41d7837654f53445",
                "c6c21f46f5f8605a"
            ]
        ]
    },
    {
        "id": "930977ccf026507e",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "logger",
        "func": "msg.payload = `Success`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 2460,
        "wires": [
            [
                "c7892029c8c0fe76"
            ]
        ]
    },
    {
        "id": "c7892029c8c0fe76",
        "type": "subflow:951a533bb3498fe6",
        "z": "53e710bd040c67f4",
        "name": "",
        "x": 2060,
        "y": 2460,
        "wires": [
            []
        ]
    },
    {
        "id": "7086b9efcb2e898e",
        "type": "subflow:0cbd918f05921aae",
        "z": "53e710bd040c67f4",
        "name": "Call Copy Invoice SP",
        "x": 1740,
        "y": 2700,
        "wires": [
            [
                "790eac0f205b8963",
                "34e9c03ae7ac6e5b"
            ],
            [
                "749079dd146906a1"
            ]
        ]
    },
    {
        "id": "34e9c03ae7ac6e5b",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "logger",
        "func": "msg.payload = `Success`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 2640,
        "wires": [
            [
                "993fcb0db108426c"
            ]
        ]
    },
    {
        "id": "993fcb0db108426c",
        "type": "subflow:951a533bb3498fe6",
        "z": "53e710bd040c67f4",
        "name": "",
        "x": 2140,
        "y": 2640,
        "wires": [
            []
        ]
    },
    {
        "id": "749079dd146906a1",
        "type": "subflow:951a533bb3498fe6",
        "z": "53e710bd040c67f4",
        "name": "",
        "x": 1880,
        "y": 2740,
        "wires": [
            [
                "790eac0f205b8963"
            ]
        ]
    },
    {
        "id": "790eac0f205b8963",
        "type": "function",
        "z": "53e710bd040c67f4",
        "name": "join",
        "func": "delete msg.logger\ndelete msg.logger2\ndelete msg.loggerNewLine\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 2740,
        "wires": [
            [
                "69507da9a901f0aa"
            ]
        ]
    },
    {
        "id": "69507da9a901f0aa",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "debug 500",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2170,
        "y": 2700,
        "wires": []
    },
    {
        "id": "3eeda0210c996cfb",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "debug 522",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 1060,
        "wires": []
    },
    {
        "id": "2c9f36ba34dd7a06",
        "type": "debug",
        "z": "53e710bd040c67f4",
        "name": "debug 523",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 1220,
        "wires": []
    },
    {
        "id": "836254fbcc60eda3",
        "type": "inject",
        "z": "99fe1ea7a0633a03",
        "name": "11 AM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 05 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "00d81cdf3a6cc4a7",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "getAllBankApplicationReq",
        "func": "const GO_URL = env.get('GO_URL')\n// msg.payload = {}\nconst status = \"AWAITING_CHANGE\"\n\nmsg.url = `${GO_URL}/bank-application?applicationStatus=${status}`\nmsg.method = 'GET'\n\nglobal.set(\"res\",msg.res)\n\nmsg.logger = `Get all bank-application with status #${status}`\nmsg.loggerNewLine = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 320,
        "wires": [
            [
                "7826de1f7db2221c",
                "e85d4e4b6fc5b3b7"
            ]
        ]
    },
    {
        "id": "73efd1a0e23068e7",
        "type": "debug",
        "z": "99fe1ea7a0633a03",
        "name": "debug 61",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 320,
        "wires": []
    },
    {
        "id": "60ed19da4669681a",
        "type": "switch",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 130,
        "y": 440,
        "wires": [
            [
                "5bcfa1884aa52661"
            ],
            [
                "ab8736dcb09c67fb"
            ]
        ]
    },
    {
        "id": "ab8736dcb09c67fb",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "loop",
        "func": "delete msg.loggerNewLine\n\nfor (const application of msg.payload) {\n    let fieldValuePayload = {\n        key: \"date_of_effect\",\n        businessPartnerId: application.businessPartnerID,\n        bankApplicationId: application._id,\n    };\n    node.send({\n        ...msg,\n        payload: fieldValuePayload,\n        application: application,\n        isComplete: false\n    })\n}\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 480,
        "wires": [
            [
                "22b74d580682af5c"
            ]
        ]
    },
    {
        "id": "5bcfa1884aa52661",
        "type": "debug",
        "z": "99fe1ea7a0633a03",
        "name": "No bank application found",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 400,
        "wires": []
    },
    {
        "id": "a65a2361062244e0",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "getFieldValue",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nmsg.url = `${GO_URL}/field-value/find-field-value`\nmsg.method = 'POST',\nmsg.headers = {}\nmsg.headers['x-actyv-api-config-key'] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = msg.payload\n\n\nmsg.logger = `Fetching the field value date_of_effect`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 580,
        "wires": [
            [
                "95a94fc8d08c27fc"
            ]
        ]
    },
    {
        "id": "2c9e6275ccda193b",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "switch",
        "func": "delete msg.logger\n\n\nconst currentDate = moment().format(\"YYYY-MM-DD\");\n\nif (\n    !_.isEmpty(msg.payload[0].value) &&\n    msg.payload[0].value === currentDate\n) {\n    return msg\n}else{\n    throw new Error(\"Date is not matched\")\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            },
            {
                "var": "_",
                "module": "lodash"
            },
            {
                "var": "axios",
                "module": "axios"
            }
        ],
        "x": 130,
        "y": 660,
        "wires": [
            [
                "d2bf01948cca5fbc"
            ]
        ]
    },
    {
        "id": "d2bf01948cca5fbc",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "getFieldValue",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nlet fieldValuePayloadLimit = {\n    key: \"new_limit\",\n    businessPartnerId: msg.application.businessPartnerID,\n    bankApplicationId: msg.application._id,\n};\n\nmsg.url = `${GO_URL}/field-value/find-field-value`\nmsg.method = 'POST',\nmsg.headers = {}\nmsg.headers['x-actyv-api-config-key'] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = fieldValuePayloadLimit\n\nmsg.logger = `get field value for #new_limit ${msg.payload}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 660,
        "wires": [
            [
                "3e3a05e8beaf94d3"
            ]
        ]
    },
    {
        "id": "2207b00b41916fc5",
        "type": "switch",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "property": "payload[0].value",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 700,
        "wires": [
            [
                "a85626fa8fb6ae87"
            ],
            [
                "db8c3a6141ee0633"
            ]
        ]
    },
    {
        "id": "a85626fa8fb6ae87",
        "type": "debug",
        "z": "99fe1ea7a0633a03",
        "name": "Field value empty",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 680,
        "wires": []
    },
    {
        "id": "db8c3a6141ee0633",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "getLoanTerms",
        "func": "delete msg.logger\n\nconst PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\n\nlet roiUpdateResponse = {};\nconst fieldValueLimit = msg.payload\n\nconst loanTermPayload = {\n    borrowerID: msg.application.businessPartnerID,\n    bankID: msg.application.bankId,\n    enterpriseID: msg.application.enterpriseId,\n};\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/service/fetchByBankID`\nmsg.method = 'POST'\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = loanTermPayload\n\nmsg.fieldValueLimit = fieldValueLimit\n\nmsg.logger = `Fetching Loan term for ${loanTermPayload}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 860,
        "wires": [
            [
                "ae9af8859e2a8113"
            ]
        ]
    },
    {
        "id": "2a62c48df96b9b78",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "limitUpdatepayload",
        "func": "const limitUpdatepayload = {\n    loanTermsID: msg.payload[0].id,\n    approvedLimit: msg.fieldValueLimit[0].value,\n};\n\nmsg.old_approved_limit = msg.payload[0].approvedLimit\nmsg.new_approved_limit = msg.fieldValueLimit[0].value\n\n// flow.set(\"old_approved_limit\", msg.payload[0].approvedLimit)\n// flow.set(\"new_approved_limit\", msg.fieldValueLimit[0].value)\n\nmsg.payload = limitUpdatepayload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 860,
        "wires": [
            [
                "0bbf173a2b1b7a37",
                "27c254f1fcd75ed7"
            ]
        ]
    },
    {
        "id": "27c254f1fcd75ed7",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "updateLoanTerm",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/service/update`\nmsg.method = 'PATCH',\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = msg.payload\n\nmsg.logger = `Update the loan term`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 980,
        "wires": [
            [
                "8f43f3a5abd8e128"
            ]
        ]
    },
    {
        "id": "b674d948d130177d",
        "type": "debug",
        "z": "99fe1ea7a0633a03",
        "name": "Limit updated:",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 1000,
        "wires": []
    },
    {
        "id": "af1f79a7cd2b795c",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "getFieldValue",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nmsg.limitUpdateResponse = msg.payload\n\nlet fieldValuePayloadRoi = {\n    key: \"new_roi\",\n    businessPartnerId: msg.application.businessPartnerID,\n    bankApplicationId: msg.application._id,\n};\n\nmsg.url = `${GO_URL}/field-value/find-field-value`\nmsg.method = 'POST'\nmsg.headers = {}\nmsg.headers['x-actyv-api-config-key'] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = fieldValuePayloadRoi\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1140,
        "wires": [
            [
                "5d165813f168d287"
            ]
        ]
    },
    {
        "id": "c21578e31c759f45",
        "type": "switch",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "property": "payload[0].value",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 552,
        "y": 1138,
        "wires": [
            [
                "0ee4ee82d9f1d7e2"
            ],
            [
                "6011376056f2f88f"
            ]
        ]
    },
    {
        "id": "0ee4ee82d9f1d7e2",
        "type": "debug",
        "z": "99fe1ea7a0633a03",
        "name": "Field value empty",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 772,
        "y": 1118,
        "wires": []
    },
    {
        "id": "6011376056f2f88f",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "ROI Update",
        "func": "const PAYLATER_URL = env.get(\"PAYLATER_URL\")\n\nconst roiUpdatePayload = {\n    bankID: msg.application.bankId,\n    borrowerID: msg.application.businessPartnerID,\n    bankSpread: parseFloat(msg.payload[0].value),\n};\n\nmsg.new_roi = parseFloat(msg.payload[0].value)\n\nmsg.url = `${PAYLATER_URL}/v1/tenor-and-rate-spread/update-roi`\nmsg.method = 'PATCH',\nmsg.payload = roiUpdatePayload\nconst token = flow.get(\"actyv_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers['actyventityid'] = msg.actyvEntityId\n\nmsg.logger = `Update ROI ${roiUpdatePayload}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1300,
        "wires": [
            [
                "a98caf8a469b9e6f"
            ]
        ]
    },
    {
        "id": "b4f44b2582544ddc",
        "type": "debug",
        "z": "99fe1ea7a0633a03",
        "name": "ROI Updated",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 1300,
        "wires": []
    },
    {
        "id": "910b17584e535ca0",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "Switch 1",
        "func": "console.log({ limitUpdateResponse: msg.limitUpdateResponse,roiUpdate:msg.payload,application:msg.application})\nif (\n    !_.isEmpty(msg.limitUpdateResponse) && !_.isEmpty(msg.payload)\n) {\n    return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "_",
                "module": "lodash"
            }
        ],
        "x": 140,
        "y": 1400,
        "wires": [
            [
                "33a9a91c7f3bc626"
            ]
        ]
    },
    {
        "id": "33a9a91c7f3bc626",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "updateBPMNVariable",
        "func": "const CAMUNDA_BASE_URL = env.get(\"CAMUNDA_BASE_URL\")\n\nconst variableName =  \"awaiting_change_action\"\n\nmsg.url = `${CAMUNDA_BASE_URL}/engine-rest/process-instance/${msg.application.workflowTaskID}/variables/${variableName}`\nmsg.method = 'PUT',\nmsg.payload = { value: true }\n\nmsg.logger = `Update BPMN variable`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1400,
        "wires": [
            [
                "77db2a9d285bf521"
            ]
        ]
    },
    {
        "id": "669f9e6f4882ec3c",
        "type": "debug",
        "z": "99fe1ea7a0633a03",
        "name": "Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 2400,
        "wires": []
    },
    {
        "id": "d83dcbd251b641bb",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "sendEmailReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\n// const oldApprovedLimit = flow.get('old_approved_limit') || \"\"\n// const newApprovedLimit = flow.get('new_approved_limit') || \"\"\n// const oldROI = flow.get(\"old_roi\") || \"\"\n// const newROI = flow.get('new_roi') || \"\"\n\nconst oldApprovedLimit = msg.old_approved_limit\nconst newApprovedLimit = msg.new_approved_limit\nconst oldROI = msg.old_roi\nconst newROI = msg.new_roi\n\nconst oldApprovedLimitCurrencyFormat = new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(+oldApprovedLimit)\nconst newApprovedLimitCurrencyFormat = new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(+newApprovedLimit)\n\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n  \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\nconst emails = [\n  // `${msg.businessPartnerEmail}`,\n  // \"mahesh.kumar@actyv.com\",\n  // \"vijaychand@actyv.com\",\n  // \"anand.rastogi@actyv.com\",\n  // \"aniruddha@actyv.com\",\n  // \"shailvi.shukla@actyv.com\",\n  \"ramu.bugudi@actyv.com\",\n  \"saravanakumar.k.intern@actyv.com\"\n]\nmsg.payload = {\n  \"from\": \"help@actyv.com\",\n  \"to\": emails,\n  \"subject\": `actyv BNPL ROI and LIMIT update`,\n  // \"html\": `${msg.error}`,\n  \"html\": `\n<html>\n  <body>\n    <p>Dear <strong>${msg.payload.businessName}</strong></p>\n    <p>\n      Your Paylater limit from the ${msg.bankName} is changed from ${oldApprovedLimitCurrencyFormat} to\n      ${newApprovedLimitCurrencyFormat}.\n    </p>\n    <p>ROI is changed from ${oldROI}% to ${newROI}%.</p>\n    <p>These changes will be effective from ${new Date().toLocaleDateString()}.</p>\n\n    <p>For any queries please contact: ${msg.bankEmailId}.</p>\n\n    Thanks, <br />\n    ${msg.bankName}\n  </body>\n</html>\n`,\n  \"priority\": \"high\"\n}\n\n\nmsg.logger = `Send emails to ${emails} with ${{oldROI,newROI,oldApprovedLimitCurrencyFormat,newApprovedLimitCurrencyFormat}}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 2400,
        "wires": [
            [
                "a01a29f4bcaad706"
            ]
        ]
    },
    {
        "id": "67f9a16ac9933361",
        "type": "debug",
        "z": "99fe1ea7a0633a03",
        "name": "debug 62",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 600,
        "wires": []
    },
    {
        "id": "5695abab0cfae963",
        "type": "http in",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "url": "/api/update-roi",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 238,
        "y": 42,
        "wires": [
            [
                "b3265c63dfe7d64b"
            ]
        ]
    },
    {
        "id": "28c47f3df1ec38b6",
        "type": "inject",
        "z": "99fe1ea7a0633a03",
        "name": "4 PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 10 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 70,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "d83c04569943aff2",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "Get user",
        "func": "const ADMIN_URL = env.get(\"ADMIN_URL\")\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nmsg.url = `${ADMIN_URL}/api/business-partner-user/all/businessPartner/${msg.application.businessPartnerID}`\nmsg.method = 'GET'\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n\nmsg.logger = `Get user for business partner ID ${msg.application.businessPartnerID}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1580,
        "wires": [
            [
                "f7482658032ce2fc"
            ]
        ]
    },
    {
        "id": "2cc5454941a8a7d8",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "Get user email",
        "func": "const ADMIN_URL = env.get(\"ADMIN_URL\")\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nmsg.url = `${ADMIN_URL}/api/user?_id=${msg.payload[0].userId}`\nmsg.method = 'GET'\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n\nmsg.logger = `Fetch the user with id #${msg.payload[0].userId}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1700,
        "wires": [
            [
                "1d25ac819ab2a63d"
            ]
        ]
    },
    {
        "id": "057acc8f08c28e68",
        "type": "debug",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 1580,
        "wires": []
    },
    {
        "id": "04679b7c2ebd32e2",
        "type": "debug",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 552,
        "y": 1698,
        "wires": []
    },
    {
        "id": "729a0e3c1527725b",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "getFieldValueCurrentLimit",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nmsg.businessPartnerEmail = msg.payload.email\n\nlet fieldValuePayloadRoi = {\n    key: \"current_limit\",\n    businessPartnerId: msg.application.businessPartnerID,\n    bankApplicationId: msg.application._id,\n};\n\nmsg.url = `${GO_URL}/field-value/find-field-value`\nmsg.method = 'POST'\nmsg.headers = {}\nmsg.headers['x-actyv-api-config-key'] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = fieldValuePayloadRoi\n\nmsg.logger = `Fetch the field value for #current_limit`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 1820,
        "wires": [
            [
                "945db5d448b79ec0"
            ]
        ]
    },
    {
        "id": "fbe6a5e4b98ca7eb",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "getFieldValueCurrentRoi",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nmsg.limitUpdateResponse = msg.payload\n\nlet fieldValuePayloadRoi = {\n    key: \"current_roi\",\n    businessPartnerId: msg.application.businessPartnerID,\n    bankApplicationId: msg.application._id,\n};\n\nmsg.url = `${GO_URL}/field-value/find-field-value`\nmsg.method = 'POST'\nmsg.headers = {}\nmsg.headers['x-actyv-api-config-key'] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = fieldValuePayloadRoi\n\nmsg.logger = `Fetch the field value for #current_roi`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 1960,
        "wires": [
            [
                "1de68f43ae553525"
            ]
        ]
    },
    {
        "id": "b58740c334677877",
        "type": "debug",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 1820,
        "wires": []
    },
    {
        "id": "8a52a738342643c7",
        "type": "debug",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 652,
        "y": 1958,
        "wires": []
    },
    {
        "id": "21eb1b93b174da2b",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "getBank",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nmsg.old_roi = parseFloat(msg.payload[0].value)\n\nmsg.url = `${GO_URL}/bank/${msg.application.bankId}`\nmsg.method = 'GET'\n\nmsg.logger = `Fetch the bank with id #${msg.application.bankId}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 2100,
        "wires": [
            [
                "0f074d6a6935e850"
            ]
        ]
    },
    {
        "id": "d8cfbc16c629c2a3",
        "type": "debug",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 2100,
        "wires": []
    },
    {
        "id": "9047135ff7a9eb3c",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "getBusinessPartner",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\n\nmsg.bankName = msg.payload.name\nmsg.bankEmailId = msg?.payload?.eSignTenant?.emailId\n\nmsg.url = `${GO_URL}/business-partner/get/${msg.application.businessPartnerID}`\nmsg.method = 'GET'\nmsg.headers = {}\nmsg.headers['x-actyv-api-config-key'] = X_ACTYV_API_CONFIG_KEY\n\nmsg.logger = `Get business partner with id #${msg.application.businessPartnerID}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 167.14285278320312,
        "y": 2241.4284648895264,
        "wires": [
            [
                "dd23616996c12d08"
            ]
        ]
    },
    {
        "id": "a0750c90b152f454",
        "type": "debug",
        "z": "99fe1ea7a0633a03",
        "name": "Before send email",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 660,
        "y": 2240,
        "wires": []
    },
    {
        "id": "09e6e4de23cb649b",
        "type": "inject",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 60,
        "wires": [
            [
                "b8ffe51c7db3f8fb"
            ]
        ]
    },
    {
        "id": "b3265c63dfe7d64b",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "checkTheHeaders",
        "func": "const X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nif(msg.req.headers[\"x-actyv-api-config-key\"]===X_ACTYV_API_CONFIG_KEY){\n    msg.isKeyPresent = true\n}else{\n    msg.isKeyPresent = false\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 482,
        "y": 42,
        "wires": [
            [
                "6b0b9d822e6b75c7"
            ]
        ]
    },
    {
        "id": "6b0b9d822e6b75c7",
        "type": "switch",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "property": "isKeyPresent",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 722,
        "y": 42,
        "wires": [
            [
                "6d14c04ed7fea575"
            ],
            [
                "b8ffe51c7db3f8fb"
            ]
        ]
    },
    {
        "id": "6d14c04ed7fea575",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "func": "msg.payload = {\n    \"statusCode\": 403,\n    \"message\": \"Unauthorized\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 892,
        "y": 22,
        "wires": [
            [
                "1a804d3f2b046d6f"
            ]
        ]
    },
    {
        "id": "1a804d3f2b046d6f",
        "type": "http response",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1082,
        "y": 22,
        "wires": []
    },
    {
        "id": "22b74d580682af5c",
        "type": "switch",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 412,
        "y": 478,
        "wires": [
            [
                "a783df2e265f4952"
            ],
            [
                "a65a2361062244e0"
            ]
        ]
    },
    {
        "id": "a783df2e265f4952",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "func": "msg.payload = {\n    \"statusCode\": 200,\n    \"message\": \"Success\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 602,
        "y": 458,
        "wires": [
            [
                "55a7a5fd4f5eea48"
            ]
        ]
    },
    {
        "id": "55a7a5fd4f5eea48",
        "type": "http response",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 772,
        "y": 458,
        "wires": []
    },
    {
        "id": "67ebf1d57aa3c4a5",
        "type": "inject",
        "z": "99fe1ea7a0633a03",
        "name": "9 PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 15 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 70,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "8a0e567614970acc",
        "type": "debug",
        "z": "99fe1ea7a0633a03",
        "name": "updateBPMNVariable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 862,
        "y": 1398,
        "wires": []
    },
    {
        "id": "0bbf173a2b1b7a37",
        "type": "debug",
        "z": "99fe1ea7a0633a03",
        "name": "limitUpdatepayload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 860,
        "wires": []
    },
    {
        "id": "b8ffe51c7db3f8fb",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst ENTERPRISE_EMAIL = \"darkhorse@gmail.com\"\nconst PASSWORD = \"User@123\"\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": ENTERPRISE_EMAIL,\n    \"password\": PASSWORD\n};\n\nmsg.loggerNewLine = true\nmsg.logger = `Authenticate ${ENTERPRISE_EMAIL}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 180,
        "wires": [
            [
                "6af4298ef2207439"
            ]
        ]
    },
    {
        "id": "6af4298ef2207439",
        "type": "subflow:0cbd918f05921aae",
        "z": "99fe1ea7a0633a03",
        "name": "Authenticate",
        "x": 490,
        "y": 180,
        "wires": [
            [
                "8946b3341031d677"
            ],
            [
                "26db78a6e12abc03"
            ]
        ]
    },
    {
        "id": "8946b3341031d677",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "set actyv Entity Token",
        "func": "flow.set('actyv_token', msg.payload.idToken);\n\n// msg.ent_token = msg.payload.idToken\n\nconsole.log(msg.payload.idToken,\"TOKEN\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 180,
        "wires": [
            [
                "0700d7aee7dfa809",
                "41f5fe52ad1ed9f4"
            ]
        ]
    },
    {
        "id": "41f5fe52ad1ed9f4",
        "type": "debug",
        "z": "99fe1ea7a0633a03",
        "name": "actyvEntityToken",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 180,
        "wires": []
    },
    {
        "id": "0700d7aee7dfa809",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "getActyvEntityUser",
        "func": "\n\nconst GO_URL = env.get('GO_URL');\n\n\nmsg.url = `${GO_URL}/actyv-entity`;\nmsg.method = \"GET\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 260,
        "wires": [
            [
                "8b2fca1bd2484861"
            ]
        ]
    },
    {
        "id": "8b2fca1bd2484861",
        "type": "subflow:0cbd918f05921aae",
        "z": "99fe1ea7a0633a03",
        "name": "getCurrentUser",
        "x": 520,
        "y": 260,
        "wires": [
            [
                "d219b901377cd74e"
            ],
            []
        ]
    },
    {
        "id": "d219b901377cd74e",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "Save actyv entity ID",
        "func": "const found = msg.payload.find(entity => entity.key === \"dark_horse\") ?? undefined\n\nconsole.log(found?._id)\nif (found) {\n    msg.actyvEntityId = found?._id\n    msg.payload = found?._id\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 260,
        "wires": [
            [
                "00d81cdf3a6cc4a7"
            ]
        ]
    },
    {
        "id": "7cf33bdb30406551",
        "type": "debug",
        "z": "99fe1ea7a0633a03",
        "name": "actyvEntityID",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 260,
        "wires": []
    },
    {
        "id": "26db78a6e12abc03",
        "type": "debug",
        "z": "99fe1ea7a0633a03",
        "name": "actyvEntityToken",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 140,
        "wires": []
    },
    {
        "id": "95a94fc8d08c27fc",
        "type": "subflow:0cbd918f05921aae",
        "z": "99fe1ea7a0633a03",
        "name": "getFieldValue",
        "x": 440,
        "y": 580,
        "wires": [
            [
                "07aaf5667f5b53d8",
                "2c9e6275ccda193b",
                "67f9a16ac9933361"
            ],
            [
                "39fd2e84e909c88d"
            ]
        ]
    },
    {
        "id": "3e3a05e8beaf94d3",
        "type": "subflow:0cbd918f05921aae",
        "z": "99fe1ea7a0633a03",
        "name": "getFieldValue",
        "x": 540,
        "y": 660,
        "wires": [
            [
                "2207b00b41916fc5",
                "07e5f93a21036689"
            ],
            [
                "e39f5ce7d78f1ab3"
            ]
        ]
    },
    {
        "id": "ae9af8859e2a8113",
        "type": "subflow:0cbd918f05921aae",
        "z": "99fe1ea7a0633a03",
        "name": "getLoanTerms",
        "x": 398,
        "y": 862,
        "wires": [
            [
                "2a62c48df96b9b78",
                "33e8b707117aa143"
            ],
            [
                "c261bf28e5d2ce3c"
            ]
        ]
    },
    {
        "id": "8f43f3a5abd8e128",
        "type": "subflow:0cbd918f05921aae",
        "z": "99fe1ea7a0633a03",
        "name": "updateLoanTerm",
        "x": 408,
        "y": 982,
        "wires": [
            [
                "b674d948d130177d",
                "d0756311a6931e3f",
                "af1f79a7cd2b795c"
            ],
            [
                "9ee4d7a1490dbfa5",
                "b674d948d130177d"
            ]
        ]
    },
    {
        "id": "5d165813f168d287",
        "type": "subflow:0cbd918f05921aae",
        "z": "99fe1ea7a0633a03",
        "name": "getFieldValue",
        "x": 380,
        "y": 1140,
        "wires": [
            [
                "c21578e31c759f45",
                "331b7a87cc87039c"
            ],
            [
                "045c3b82aa7378fe"
            ]
        ]
    },
    {
        "id": "a98caf8a469b9e6f",
        "type": "subflow:0cbd918f05921aae",
        "z": "99fe1ea7a0633a03",
        "name": "ROI update",
        "x": 350,
        "y": 1300,
        "wires": [
            [
                "b4f44b2582544ddc",
                "910b17584e535ca0",
                "410a875ae0319e57"
            ],
            [
                "6a39020d6b6a07fa",
                "b4f44b2582544ddc"
            ]
        ]
    },
    {
        "id": "77db2a9d285bf521",
        "type": "subflow:0cbd918f05921aae",
        "z": "99fe1ea7a0633a03",
        "name": "updateBPMNVariable",
        "x": 620,
        "y": 1400,
        "wires": [
            [
                "8a0e567614970acc",
                "e69651523365a757",
                "d83c04569943aff2"
            ],
            [
                "a0c09401a2f64e61",
                "8a0e567614970acc"
            ]
        ]
    },
    {
        "id": "f7482658032ce2fc",
        "type": "subflow:0cbd918f05921aae",
        "z": "99fe1ea7a0633a03",
        "name": "Get user",
        "x": 360,
        "y": 1580,
        "wires": [
            [
                "057acc8f08c28e68",
                "55fe9d37831e34ed",
                "2cc5454941a8a7d8"
            ],
            [
                "6589e93459a6320b",
                "057acc8f08c28e68"
            ]
        ]
    },
    {
        "id": "1d25ac819ab2a63d",
        "type": "subflow:0cbd918f05921aae",
        "z": "99fe1ea7a0633a03",
        "name": "Get user id",
        "x": 370,
        "y": 1700,
        "wires": [
            [
                "04679b7c2ebd32e2",
                "80417423b24b92b6",
                "729a0e3c1527725b"
            ],
            [
                "04679b7c2ebd32e2",
                "dca0d77a02a2db1c"
            ]
        ]
    },
    {
        "id": "945db5d448b79ec0",
        "type": "subflow:0cbd918f05921aae",
        "z": "99fe1ea7a0633a03",
        "name": "getFieldValue",
        "x": 440,
        "y": 1820,
        "wires": [
            [
                "fbe6a5e4b98ca7eb",
                "c5051c37f19417c8",
                "b58740c334677877"
            ],
            [
                "b58740c334677877",
                "eacf3a50fb67db7a"
            ]
        ]
    },
    {
        "id": "1de68f43ae553525",
        "type": "subflow:0cbd918f05921aae",
        "z": "99fe1ea7a0633a03",
        "name": "getFieldValue",
        "x": 440,
        "y": 1960,
        "wires": [
            [
                "8a52a738342643c7",
                "21eb1b93b174da2b",
                "72efd9de4230e6d7"
            ],
            [
                "8a52a738342643c7",
                "858ca62b04076156"
            ]
        ]
    },
    {
        "id": "0f074d6a6935e850",
        "type": "subflow:0cbd918f05921aae",
        "z": "99fe1ea7a0633a03",
        "name": "getBank",
        "x": 320,
        "y": 2100,
        "wires": [
            [
                "d8cfbc16c629c2a3",
                "9047135ff7a9eb3c",
                "24fbe15646aba3d6"
            ],
            [
                "d8cfbc16c629c2a3",
                "f99a920aacb1692b"
            ]
        ]
    },
    {
        "id": "dd23616996c12d08",
        "type": "subflow:0cbd918f05921aae",
        "z": "99fe1ea7a0633a03",
        "name": "getBusinessPartner",
        "x": 407.1428527832031,
        "y": 2241.4284648895264,
        "wires": [
            [
                "a0750c90b152f454",
                "d83dcbd251b641bb",
                "f431df0585fda7b8"
            ],
            [
                "a0750c90b152f454",
                "79e18177d64117fe"
            ]
        ]
    },
    {
        "id": "a01a29f4bcaad706",
        "type": "subflow:0cbd918f05921aae",
        "z": "99fe1ea7a0633a03",
        "name": "send email",
        "x": 390,
        "y": 2400,
        "wires": [
            [
                "ef41d5b2f6538aa6"
            ],
            [
                "ef41d5b2f6538aa6"
            ]
        ]
    },
    {
        "id": "e39f5ce7d78f1ab3",
        "type": "subflow:951a533bb3498fe6",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "x": 860,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "07aaf5667f5b53d8",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "logger",
        "func": "msg.payload = `Fetched the field value for #new_limit and length ${msg.payload.length}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 540,
        "wires": [
            [
                "f7b10265192ab7f7"
            ]
        ]
    },
    {
        "id": "f7b10265192ab7f7",
        "type": "subflow:951a533bb3498fe6",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "x": 740,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "63200785cdbd0b72",
        "type": "subflow:951a533bb3498fe6",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "x": 980,
        "y": 460,
        "wires": [
            [
                "abbde649f17083c4"
            ]
        ]
    },
    {
        "id": "abbde649f17083c4",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "join",
        "func": "delete msg.logger\ndelete msg.logger2\ndelete msg.loggerNewLine\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "39fd2e84e909c88d",
        "type": "subflow:951a533bb3498fe6",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "x": 640,
        "y": 600,
        "wires": [
            [
                "67f9a16ac9933361"
            ]
        ]
    },
    {
        "id": "07e5f93a21036689",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "logger",
        "func": "msg.payload = `Fetched the field value for #date_of_effect and length ${msg.payload.length}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 640,
        "wires": [
            [
                "e39f5ce7d78f1ab3"
            ]
        ]
    },
    {
        "id": "c261bf28e5d2ce3c",
        "type": "subflow:951a533bb3498fe6",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "x": 680,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "33e8b707117aa143",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "logger",
        "func": "msg.payload = `Succesfully fetched the loan term`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 800,
        "wires": [
            [
                "c261bf28e5d2ce3c"
            ]
        ]
    },
    {
        "id": "d0756311a6931e3f",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "logger",
        "func": "msg.payload = `loan term updated succesfully`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 940,
        "wires": [
            [
                "9ee4d7a1490dbfa5"
            ]
        ]
    },
    {
        "id": "9ee4d7a1490dbfa5",
        "type": "subflow:951a533bb3498fe6",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "x": 740,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "331b7a87cc87039c",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "logger",
        "func": "msg.payload = `Fetched the field value for #new_roi and length ${msg.payload.length}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1080,
        "wires": [
            [
                "045c3b82aa7378fe"
            ]
        ]
    },
    {
        "id": "045c3b82aa7378fe",
        "type": "subflow:951a533bb3498fe6",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "x": 680,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "410a875ae0319e57",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "logger",
        "func": "msg.payload = `ROI updated succesfully`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1240,
        "wires": [
            [
                "6a39020d6b6a07fa"
            ]
        ]
    },
    {
        "id": "6a39020d6b6a07fa",
        "type": "subflow:951a533bb3498fe6",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "x": 640,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "e69651523365a757",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "logger",
        "func": "msg.payload = `BPMN variable updated succesfully`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1320,
        "wires": [
            [
                "a0c09401a2f64e61"
            ]
        ]
    },
    {
        "id": "a0c09401a2f64e61",
        "type": "subflow:951a533bb3498fe6",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "x": 920,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "55fe9d37831e34ed",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "logger",
        "func": "msg.payload = `Fetched the #${msg.payload.length} bp users `\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1520,
        "wires": [
            [
                "6589e93459a6320b"
            ]
        ]
    },
    {
        "id": "6589e93459a6320b",
        "type": "subflow:951a533bb3498fe6",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "x": 600,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "dca0d77a02a2db1c",
        "type": "subflow:951a533bb3498fe6",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "x": 640,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "80417423b24b92b6",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "logger",
        "func": "msg.payload = `Fetched the user `\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1660,
        "wires": [
            [
                "dca0d77a02a2db1c"
            ]
        ]
    },
    {
        "id": "c5051c37f19417c8",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "logger",
        "func": "msg.payload = `Fetched the field value for current limit ${msg.payload.length} `\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1780,
        "wires": [
            [
                "eacf3a50fb67db7a"
            ]
        ]
    },
    {
        "id": "eacf3a50fb67db7a",
        "type": "subflow:951a533bb3498fe6",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "x": 720,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "72efd9de4230e6d7",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "logger",
        "func": "msg.payload = `Fetched the field value for current_roi ${msg.payload.length} `\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1920,
        "wires": [
            [
                "858ca62b04076156"
            ]
        ]
    },
    {
        "id": "858ca62b04076156",
        "type": "subflow:951a533bb3498fe6",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "x": 720,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "24fbe15646aba3d6",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "logger",
        "func": "msg.payload = `Fetched the bank `\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 2060,
        "wires": [
            [
                "f99a920aacb1692b"
            ]
        ]
    },
    {
        "id": "f99a920aacb1692b",
        "type": "subflow:951a533bb3498fe6",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "x": 600,
        "y": 2060,
        "wires": [
            []
        ]
    },
    {
        "id": "f431df0585fda7b8",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "logger",
        "func": "msg.payload = `Fetched the business partner `\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 2200,
        "wires": [
            [
                "79e18177d64117fe"
            ]
        ]
    },
    {
        "id": "79e18177d64117fe",
        "type": "subflow:951a533bb3498fe6",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "x": 700,
        "y": 2200,
        "wires": [
            []
        ]
    },
    {
        "id": "ef41d5b2f6538aa6",
        "type": "subflow:951a533bb3498fe6",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "x": 540,
        "y": 2400,
        "wires": [
            [
                "669f9e6f4882ec3c"
            ]
        ]
    },
    {
        "id": "7826de1f7db2221c",
        "type": "subflow:0cbd918f05921aae",
        "z": "99fe1ea7a0633a03",
        "name": "getAllBankApplication",
        "x": 620,
        "y": 320,
        "wires": [
            [
                "60ed19da4669681a",
                "73efd1a0e23068e7",
                "8f604d14684696c8"
            ],
            [
                "73efd1a0e23068e7",
                "145bf1da17bdf1f6"
            ]
        ]
    },
    {
        "id": "145bf1da17bdf1f6",
        "type": "subflow:951a533bb3498fe6",
        "z": "99fe1ea7a0633a03",
        "name": "",
        "x": 889.9999885559082,
        "y": 372.8571367263794,
        "wires": [
            []
        ]
    },
    {
        "id": "8f604d14684696c8",
        "type": "function",
        "z": "99fe1ea7a0633a03",
        "name": "logger",
        "func": "msg.payload = `Fetched the bank applications and length ${msg.payload.length}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 759.9999885559082,
        "y": 372.8571367263794,
        "wires": [
            [
                "145bf1da17bdf1f6"
            ]
        ]
    },
    {
        "id": "e85d4e4b6fc5b3b7",
        "type": "debug",
        "z": "99fe1ea7a0633a03",
        "name": "debug 501",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 400,
        "wires": []
    },
    {
        "id": "575fe542cbc6a29d",
        "type": "function",
        "z": "1a96990e9c8ce6d6",
        "name": "Get business partner",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nmsg.url = `${GO_URL}/business-partner/service/${msg.salesData[0][\"Business Partner GST\"]}`;\nmsg.method = \"GET\"\nmsg.headers = {}\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n}\nmsg.logger = `Get business partner by gst #${msg.salesData[0][\"Business Partner GST\"]}`\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 480,
        "wires": [
            [
                "df74f85e84d99d5a"
            ]
        ]
    },
    {
        "id": "5290eb93c20f259d",
        "type": "function",
        "z": "1a96990e9c8ce6d6",
        "name": "Loop and Sleep",
        "func": "\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\n// msg.salesData = msg.seedingData\n// console.log(msg.seedingData,'kjdfls')\nlet seedingData = msg.payload\nfor (let i = 0; i < seedingData.length; i++) {\n        await sleep(500)\n        if(Object.keys(seedingData[i]).length){\n        node.send({...msg, payload: seedingData[i],salesData : [seedingData[i]] });\n        }\n    }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 300,
        "wires": [
            [
                "575fe542cbc6a29d"
            ]
        ]
    },
    {
        "id": "df74f85e84d99d5a",
        "type": "http request",
        "z": "1a96990e9c8ce6d6",
        "name": "Get bp by pan",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 560,
        "y": 480,
        "wires": [
            [
                "4eb333b939e9d875",
                "a2298265cd9cb0eb"
            ]
        ]
    },
    {
        "id": "a2298265cd9cb0eb",
        "type": "debug",
        "z": "1a96990e9c8ce6d6",
        "name": "debug 502",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 440,
        "wires": []
    },
    {
        "id": "4eb333b939e9d875",
        "type": "subflow:951a533bb3498fe6",
        "z": "1a96990e9c8ce6d6",
        "name": "",
        "x": 720,
        "y": 480,
        "wires": [
            [
                "2a8bc105e2fb9496"
            ]
        ]
    },
    {
        "id": "2a8bc105e2fb9496",
        "type": "switch",
        "z": "1a96990e9c8ce6d6",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 480,
        "wires": [
            [
                "fcb420adbd57ac38"
            ],
            [
                "8fd1ee38c9f4178e"
            ]
        ]
    },
    {
        "id": "fcb420adbd57ac38",
        "type": "debug",
        "z": "1a96990e9c8ce6d6",
        "name": "Business partner not found",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 460,
        "wires": []
    },
    {
        "id": "8fd1ee38c9f4178e",
        "type": "function",
        "z": "1a96990e9c8ce6d6",
        "name": "Format sales summary",
        "func": "\n\nconst salesSummary = []\nmsg.enterpriseId = `638c73f16ea52ce57470c1a9`\nconst {enterpriseId} = msg\nconst businessPartnerId = msg.payload._id\nfor(let key in msg.salesData[0]){\n    if (key.includes(\"Transaction History\")){\n        let monthSplit = key.split(\"M\")\n        \n        let month = monthSplit[monthSplit.length-1]\n        if (msg.salesData[0][key]){\n            salesSummary.push(\n                {\n                    \"businessPartner\": businessPartnerId,\n                    \"enterprise\": enterpriseId,\n                    \"year\": +getMonthAndYear(month).split(\"-\")[0],\n                    \"month\": +getMonthAndYear(month).split(\"-\")[1],\n                    \"totalSalesAmount\": msg.salesData[0][key],\n                    \"totalSalesProjected\": msg.salesData[0][key]\n                }\n            )\n        }\n        \n    }\n}\n// msg.payload = salesSummary\nconsole.log({ \"Format sales summary\": salesSummary })\nfunction getMonthAndYear(month){\n    let date = moment().subtract(Number(month), 'months').format()\n    date = date.split(\"T\")[0]\n    console.log({date})\n    return date\n}\nfor(let req of salesSummary.slice(0,1)){\n    node.send({\n        ...msg,\n        req,\n        isComplete : false\n    })\n}\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 380,
        "y": 700,
        "wires": [
            [
                "47d51e9683c3a59a"
            ]
        ]
    },
    {
        "id": "085589a362bc5ac3",
        "type": "subflow:951a533bb3498fe6",
        "z": "1a96990e9c8ce6d6",
        "name": "",
        "x": 1500,
        "y": 560,
        "wires": [
            [
                "feec2a4a1f2a5452"
            ]
        ]
    },
    {
        "id": "47d51e9683c3a59a",
        "type": "switch",
        "z": "1a96990e9c8ce6d6",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 700,
        "wires": [
            [
                "207af8e06db9649e"
            ],
            [
                "fbbb3eca9d03f4d5"
            ]
        ]
    },
    {
        "id": "feec2a4a1f2a5452",
        "type": "debug",
        "z": "1a96990e9c8ce6d6",
        "name": "get relation",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 560,
        "wires": []
    },
    {
        "id": "207af8e06db9649e",
        "type": "debug",
        "z": "1a96990e9c8ce6d6",
        "name": "seedingData",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 700,
        "wires": []
    },
    {
        "id": "fbbb3eca9d03f4d5",
        "type": "function",
        "z": "1a96990e9c8ce6d6",
        "name": "post business-partner-sales-summary",
        "func": "const GO_URL = env.get(\"GO_URL\")\n\nmsg.url = `${GO_URL}/business-partner-sales-summary`,\nmsg.method = \"POST\"\nmsg.payload = msg.req\nmsg.logger = `post business-partner-sales-summary with ${JSON.stringify(msg.payload)}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 780,
        "wires": [
            [
                "40bdde3292f9de32",
                "1e8774919659aef1"
            ]
        ]
    },
    {
        "id": "ce6970b480971097",
        "type": "subflow:951a533bb3498fe6",
        "z": "1a96990e9c8ce6d6",
        "name": "",
        "x": 1800,
        "y": 400,
        "wires": [
            [
                "1f6a2ef97c443a7d"
            ]
        ]
    },
    {
        "id": "40bdde3292f9de32",
        "type": "http request",
        "z": "1a96990e9c8ce6d6",
        "name": "post business-partner-sales-summary",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 770,
        "y": 780,
        "wires": [
            [
                "685a01f4933a2eca"
            ]
        ]
    },
    {
        "id": "1f6a2ef97c443a7d",
        "type": "debug",
        "z": "1a96990e9c8ce6d6",
        "name": "Create business relation with erpId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2040,
        "y": 400,
        "wires": []
    },
    {
        "id": "685a01f4933a2eca",
        "type": "subflow:951a533bb3498fe6",
        "z": "1a96990e9c8ce6d6",
        "name": "",
        "x": 1060,
        "y": 780,
        "wires": [
            [
                "d6df7efadab81f63"
            ]
        ]
    },
    {
        "id": "d6df7efadab81f63",
        "type": "debug",
        "z": "1a96990e9c8ce6d6",
        "name": "post business-partner-sales-summary",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 780,
        "wires": []
    },
    {
        "id": "c368bba0303fffe8",
        "type": "inject",
        "z": "1a96990e9c8ce6d6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 300,
        "wires": [
            [
                "502059f287aed2bb"
            ]
        ]
    },
    {
        "id": "502059f287aed2bb",
        "type": "alafile in",
        "z": "1a96990e9c8ce6d6",
        "name": "",
        "filename": "/Users/shravanpm/Downloads/Format_File_GO_Seeding (1)",
        "format": "xlsx",
        "columns": "*",
        "headers": true,
        "x": 530,
        "y": 300,
        "wires": [
            [
                "5290eb93c20f259d",
                "6750362829b720ce"
            ]
        ]
    },
    {
        "id": "6750362829b720ce",
        "type": "debug",
        "z": "1a96990e9c8ce6d6",
        "name": "debug 503",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 220,
        "wires": []
    },
    {
        "id": "1e8774919659aef1",
        "type": "debug",
        "z": "1a96990e9c8ce6d6",
        "name": "debug 504",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 860,
        "wires": []
    },
    {
        "id": "03d2aef6a3cff6a5",
        "type": "inject",
        "z": "9ab61dee89975794",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 440,
        "y": 240,
        "wires": [
            [
                "149bb6d908ebf3e5"
            ]
        ]
    },
    {
        "id": "3c16137f786f2289",
        "type": "SFTP-main",
        "z": "9ab61dee89975794",
        "path": "/",
        "method": "list",
        "remoteFilePath": "/sftpdir/invoices",
        "remoteFilePathType": "str",
        "localFilePath": "C:\\Users\\Ayush Rarg\\OneDrive - actyv.ai\\Desktop\\node-red",
        "localFilePathType": "str",
        "server": "d4942248b841ce28",
        "outputs": 1,
        "debug": false,
        "name": "lisitng the files from sftp",
        "x": 250,
        "y": 1080,
        "wires": [
            [
                "feaf59583f3d583a"
            ]
        ]
    },
    {
        "id": "328dad2f3b50217d",
        "type": "SFTP-main",
        "z": "9ab61dee89975794",
        "path": "/",
        "method": "get",
        "remoteFilePath": "payload",
        "remoteFilePathType": "msg",
        "localFilePath": "LOCAL_PATH",
        "localFilePathType": "env",
        "server": "d4942248b841ce28",
        "outputs": 1,
        "debug": false,
        "name": "get a single file from sftp",
        "x": 710,
        "y": 1080,
        "wires": [
            [
                "2a8ad74a00d474d4",
                "50a3138ef7763ef3",
                "c6a01e8df9afb192"
            ]
        ]
    },
    {
        "id": "368565978550f8d2",
        "type": "file in",
        "z": "9ab61dee89975794",
        "name": "",
        "filename": "filename",
        "format": "stream",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 1100,
        "y": 1020,
        "wires": [
            [
                "cba1026c94e953f7"
            ]
        ]
    },
    {
        "id": "50a3138ef7763ef3",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "setFilename",
        "func": "const folderPath = msg.payload[0].split(\"/\")\nconst fileName = folderPath[folderPath.length - 1]\nflow.set('filename', fileName)\nmsg.filename = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1020,
        "wires": [
            [
                "368565978550f8d2"
            ]
        ]
    },
    {
        "id": "cba1026c94e953f7",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "getFilename",
        "func": "msg.filename = flow.get(\"filename\") || \"test.xlsx\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 1020,
        "wires": [
            [
                "d64e94e0b5d9aa04"
            ]
        ]
    },
    {
        "id": "80c693b47315ba43",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "getFilename",
        "func": "const filename = flow.get(\"filename\") || \"sample.xlsx\"\n// const s3Url = `https://nodered-test.s3.ap-northeast-1.amazonaws.com/${filename}`\nconst s3Url = `https://actyv-test-bucket.s3.amazonaws.com/ftpFiles/${filename}`\n\n// Assign filename and s3Url to flow variables\nflow.set(\"filename\",filename)\nflow.set(\"s3Url\",s3Url)\n\nmsg.filename = filename;\nmsg.s3Url = s3Url;\nmsg.filepath = `/home/ec2-user/data/${filename}`\n\nconst PAYLATER_URL = env.get(\"PAYLATER_URL\")\nconst CONFIG_KEY = env.get(\"APL_PIPES_CONFIG_KEY\")\n\nmsg.url = `${PAYLATER_URL}/v1/configuration/config-key/${CONFIG_KEY}`\nmsg.method = \"GET\"\nconst token = flow.get(\"actyvToken\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\n\nmsg.logger = `Get the file config for #${CONFIG_KEY}`\nreturn msg;\n\n// Right now don't check the file present in s3 or not just hardcode the path with the real file name path",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1280,
        "wires": [
            [
                "2902c0292d3896a5"
            ]
        ]
    },
    {
        "id": "9f0905f9571ba60f",
        "type": "comment",
        "z": "9ab61dee89975794",
        "name": "Get s3 link using filename",
        "info": "",
        "x": 230,
        "y": 760,
        "wires": []
    },
    {
        "id": "11c86bb5b50cf437",
        "type": "comment",
        "z": "9ab61dee89975794",
        "name": "Upload to s3",
        "info": "",
        "x": 1470,
        "y": 820,
        "wires": []
    },
    {
        "id": "f8794fb349aff8d1",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "Get env variables",
        "func": "msg.PAYLATER_URL = env.get(\"PAYLATER_URL\")\nmsg.GO_URL = env.get(\"GO_URL\")\nmsg.ADMIN_URL = env.get(\"ADMIN_URL\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1400,
        "wires": [
            [
                "ffd07b713ca28c59"
            ]
        ]
    },
    {
        "id": "445163594649eb76",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "setDataSourceConfig",
        "func": "flow.set('dataSourceConfig',msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1400,
        "wires": [
            [
                "f8794fb349aff8d1"
            ]
        ]
    },
    {
        "id": "ffd07b713ca28c59",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "dataSourceConfigReq",
        "func": "const dataSourceConfig = flow.get(\"dataSourceConfig\") || {}\nconst body = {\n    dataSourceConfigId: dataSourceConfig.id,\n    direction: dataSourceConfig.direction,\n    fileOriginalName: `${msg.filename}`,\n    fileDestinationPath: `${msg.s3Url}`,\n    isValid: true,\n    noOfRows: null,\n    parsedOn: null,\n    parseAttempts: 0,\n    parseStatus: \"ingested\",\n    statusComment: null,\n    transmissionStatus: \"pending\",\n}\nmsg.payload = body;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1400,
        "wires": [
            [
                "4b1f963b6ce33fb1"
            ]
        ]
    },
    {
        "id": "be987b2fb7ebfc13",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "Update data source config",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 1340,
        "wires": []
    },
    {
        "id": "56d2ea98bab3a49b",
        "type": "comment",
        "z": "9ab61dee89975794",
        "name": "Invoice creation",
        "info": "",
        "x": 200,
        "y": 1060,
        "wires": []
    },
    {
        "id": "10a5707014a86472",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "getPendingFiles",
        "func": "\nconst pendingFiles = msg.payload.filter(\n    (item) =>\n        item.parseStatus == \"failure\" \n        ||\n        item.parseStatus == \"ingested\",\n);\nmsg.payload = pendingFiles;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1540,
        "wires": [
            [
                "100e5d8374d28825",
                "25ea59b71ec56b9b"
            ]
        ]
    },
    {
        "id": "100e5d8374d28825",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "loopOverPendingFiles",
        "func": "// let pendingFiles = [...msg.payload]\n// for (let i = 0; i < pendingFiles.length; i++) {\n//     msg.payload = pendingFiles[i]\n//     node.send(msg);\n//     // console.log(\"\\n\\n\",\"sd\",i,\"\\n\\n\")\n// }\n\n// // return msg\n\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    flow.set(\"fileId\", msg.payload[i].id)\n    // node.send(msg,{payload: msg.payload[i]});\n    node.send({ ...msg, payload: msg.payload[i] });\n    // console.log(\"\\n\\n\",\"sd\",i,\"\\n\\n\")\n}\n\n// return msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 1540,
        "wires": [
            [
                "7d6b2d0f753c65e2"
            ]
        ]
    },
    {
        "id": "7d6b2d0f753c65e2",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "getFlowVariables",
        "func": "const s3Url = flow.get('s3Url') || \"\"\nconst filename = flow.get('filename') || \"\"\n\nconst PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst url = msg.payload.fileDestinationPath\nconst fileId = flow.get(\"fileId\") || \"\"\n// msg.fileId = \"aff9a6b8-c94c-4b2b-bef8-2150841d234d\"\nmsg.url = `${PAYLATER_URL}/v1/file/patchParsingStatus/${fileId}`\nmsg.method = 'PATCH'\nconst token = flow.get(\"actyvToken\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\nmsg.payload = {\n    \"parseStatus\": \"parsing\",\n    \"statusComment\": \"File parsed successfully from File Parser service\"\n}\n\nmsg.logger = `update the file status of #${fileId} to \"parsing\"`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1740,
        "wires": [
            [
                "d64570c39697cdd7"
            ]
        ]
    },
    {
        "id": "cc2b3b657f252c23",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "fileParserRequest",
        "func": "msg.filename = `${env.get('LOCAL_PATH')}/${msg.filename.split(\".\").slice(0, -1).join(\".\").trimLeft()}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 1740,
        "wires": [
            [
                "6d34d642469ed050"
            ]
        ]
    },
    {
        "id": "feebfb257097e802",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "getOutstandingInvoices",
        "func": "// const outstandingInvoices = msg.payload.data[\"Sheet1\"][\"valid\"]\n// msg.outstandingInvoices = outstandingInvoices\n// return msg;\nlet data = msg.payload.filter((d)=>{\n    if (d[\"Company Code\"]){\nreturn d\n    }\n})\nmsg.outstandingInvoices = data\nmsg.payload = data\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1980,
        "wires": [
            [
                "29a819865987700d",
                "d52c0a262e45aeb5"
            ]
        ]
    },
    {
        "id": "d52c0a262e45aeb5",
        "type": "switch",
        "z": "9ab61dee89975794",
        "name": "",
        "property": "outstandingInvoices.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lte",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 830,
        "y": 1980,
        "wires": [
            [
                "111716bba54eddd2"
            ],
            [
                "6982350b233d1cc7"
            ]
        ]
    },
    {
        "id": "6982350b233d1cc7",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "getDistributorByERPID",
        "func": "\nconst PAYLATER_URL = env.get('PAYLATER_URL')\n\nmsg.url = `${PAYLATER_URL}/v1/business-relationship/getByBulkDistributorERP`\nmsg.method = 'POST'\nconst token = flow.get(\"actyvToken\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\nmsg.payload = {\n    erpIDList: msg.aplPipesenterpriseId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 2000,
        "wires": [
            [
                "5563ba96779cbbd8"
            ]
        ]
    },
    {
        "id": "3eb2f97f85509bc4",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "invoiceRawFormat",
        "func": "const sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\nconst chunkSize = 50;\nconst fileId = flow.get('fileId') || \"\"\nconst chunks = []\nfor (let i = 0; i < msg.payload.length; i += chunkSize) {\n    chunks.push(msg.payload.slice(i, i + chunkSize));\n\n    // do whatever\n}\n\n\n// chunk the large array into multiple with (100 each)\n// loop through main array [1000 -> [[100],[100],...]\n// 100 -> push into invoiceRaw and send \nif (msg.payload.length > 0) {\n    let invoiceDate;\n    let actualDays;\n    let formatDueDate;\n    for (let i = 0; i < chunks.length; i++) {\n        const invoiceRaw = []\n        await sleep(250)\n\n        for (let j = 0; j < chunks[i].length; j++) {\n            let outstandingFile = chunks[i][j];\n            invoiceDate = sheetDateToJSDate(outstandingFile[\"Posting Date\"]);\n            // let invoiceDate = \"2023-01-28\";\n\n            var date = new Date();\n            actualDays = addDays(0, invoiceDate)\n            // formatDueDate = `${new Date(actualDays).getDate()}-${new Date(actualDays).getMonth() + 1}-${new Date(actualDays).getFullYear()}`\n\n            fixDate({ ...outstandingFile, dueDate: formatDueDate, sytemDueDate: invoiceDate });\n            if (outstandingFile?.[\"Reference Key\"]) {\n                // let businessID = outstandingFile[\"Company Code\"] ? msg.erpIdAndBusinessIdMapping[`AATL${outstandingFile[\"Account\"]}`] : msg.erpIdAndBusinessIdMapping[`${outstandingFile[\"Account\"]}`]\n                let businessID = msg.erpIdAndBusinessIdMapping[`AATL${outstandingFile[\"Account\"]}`]//outstandingFile[\"Company Code\"] ? msg.erpIdAndBusinessIdMapping[`AATL${outstandingFile[\"Account\"]}`] : msg.erpIdAndBusinessIdMapping[`${outstandingFile[\"Account\"]}`]\n                invoiceRaw.push({\n                    // businessID: msg.erpIdAndBusinessIdMapping[outstandingFile.RetailerCode],\n                    businessID: businessID ?? null,\n                    enterpriseID: msg.aplPipesenterpriseId,\n                    fileID: fileId,\n                    erpID: outstandingFile[\"Company Code\"] ? `AATL${outstandingFile[\"Account\"]}` : `${outstandingFile[\"Account\"]}`,\n                    documentNo: outstandingFile[\"Reference Key\"].toString() ?? \"\",\n                    amount: outstandingFile[\"Amount in local currency\"],\n                    dueDate: actualDays,\n                    documentDate: new Date(invoiceDate)?.toISOString(),\n                    remitTo: \"\",\n                    remitAccount: \"\",\n                    paymentTerm: \"\",\n                    rawData: JSON.parse(JSON.stringify(outstandingFile)) || {},\n                })\n        }\n        \n    }\n        console.log({ invoiceRaw })\n        node.send({\n            payload: invoiceRaw,\n            isCompleted: \"false\",\n            invoiceDate,\n            formatDueDate,\n            actualDays,\n            length: i,\n            enterpriseId: msg.enterpriseId,\n            bankId: msg.bankId,\n            actyvEntityId: msg.actyvEntityId\n        })\n}\n\n}\n\nfunction fixDate(invoice) {\n    let tempDocDate = new Date(invoice.postingDate);\n    let tempSystemDueDate = new Date(invoice.sytemDueDate);\n    let tempDueDate = new Date(invoice.dueDate);\n\n    tempDocDate.setTime(tempDocDate.getTime() + 1000 * 60);\n    tempDocDate.setHours(0, 0, 0);\n    tempSystemDueDate.setTime(tempSystemDueDate.getTime() + 1000 * 60);\n    tempSystemDueDate.setHours(0, 0, 0);\n    tempDueDate.setTime(tempDueDate.getTime() + 1000 * 60);\n    tempDueDate.setHours(0, 0, 0);\n\n    invoice.docDate = convertToISO(tempDocDate);\n    invoice.sytemDueDate = convertToISO(tempSystemDueDate);\n    invoice.dueDate = convertToISO(tempDueDate);\n}\n\nfunction convertToISO(date) {\n    return (\n        date.getFullYear() +\n        \"-\" +\n        (date.getMonth() + 1) +\n        \"-\" +\n        date.getDate() +\n        \" 00:00:00.000+00\"\n    );\n}\n\nfunction sliceIntoChunks(arr, chunkSize) {\n    const res = [];\n\n    for (let k = 0; k < arr.length; k += chunkSize) {\n        const chunk = arr.slice(k, k + chunkSize);\n        res.push(chunk);\n    }\n\n    return res;\n};\n\nfunction addDays(days, invoiceDate) {\n    var date = new Date(invoiceDate);\n    date.setDate(date.getDate() + days);\n    return date;\n}\n\nfunction formatDates(inputDate) {\n    const date = inputDate\n    const [day, month, year] = date.toString()?.split(\"/\")\n    const result = new Date(year, month - 1, day).toLocaleDateString('en-GB');\n    return result.split(\"/\").reverse().join(\"-\")\n}\n\nfunction sheetDateToJSDate(n) {\n    // const d = new Date(1899, 11, 30)\n    const d = new Date(1899, 11, 30)\n    d.setDate(d.getDate() + n)\n    // Rounds milliseconds to seconds\n    d.setSeconds(d.getSeconds() + Math.round(d.getMilliseconds() / 1000))\n    d.setMilliseconds(0)\n    // return `${d.getDate()}-${d.getMonth() + 1}-${d.getFullYear()}`\n    return `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`\n}\n\nmsg.isCompleted = \"true\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 2460,
        "wires": [
            [
                "ac38de8334ee12ca",
                "d236f387826a8932"
            ]
        ]
    },
    {
        "id": "d51f3eb3c9a3bda5",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "addInvoiceBulk",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${PAYLATER_URL}/v1/invoice-raw/service/bulk-insert`\nmsg.method = 'POST'\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = {\n invoiceRawDataArray: msg.payload\n}\n\nmsg.logger = `Add invoice bulk`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 2400,
        "wires": [
            [
                "1129ea4d884392a4",
                "fdd64fe91a0d0a94"
            ]
        ]
    },
    {
        "id": "632f826e26288b82",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "totalInvoices",
        "func": "let totalInvoiceRawInserted = {};\ntotalInvoiceRawInserted = {\n    ...totalInvoiceRawInserted,\n    ...msg.payload,\n};\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 2480,
        "wires": [
            [
                "e2b6f71738b107f6"
            ]
        ]
    },
    {
        "id": "e2b6f71738b107f6",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "updateFileParsingStatus",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst fileId = flow.get(\"fileId\") || \"\";\n\nmsg.url = `${PAYLATER_URL}/v1/file/patchParsingStatus/${fileId}`\nmsg.method = 'PATCH'\nconst token = flow.get(\"actyvToken\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\nmsg.payload = {\n    \"parseStatus\": \"aggregated\",\n    \"statusComment\": \"File parsed successfully from File Parser service\"\n}\n\nmsg.logger = `Update file parseStatus of fileId #${fileId} to \"aggregated\"`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 2480,
        "wires": [
            [
                "2349860a34629ea4"
            ]
        ]
    },
    {
        "id": "111716bba54eddd2",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "updateFileParsingStatus",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nmsg.url = `${PAYLATER_URL}/v1/file/patchParsingStatus/${msg.fileId}`\nmsg.method = 'PATCH'\nconst token = flow.get(\"actyvToken\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\nmsg.payload = {\n    \"parseStatus\": \"ingested\",\n    \"statusComment\": \"File parsed successfully from File Parser service\"\n}\n\nmsg.logger = `Update file parsing status of fileId #${msg.fileId} to \"ingested\"`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1940,
        "wires": [
            [
                "8d2455220d829c89"
            ]
        ]
    },
    {
        "id": "2380acaed60f564a",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "callCopyInvoiceSP",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst fileId =flow.get('fileId') || \"\"\n\nmsg.url = `${PAYLATER_URL}/v1/invoice-raw/copy-invoices-sp/${fileId}`\nmsg.method = 'POST'\nconst token = flow.get(\"actyvToken\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\n\nmsg.logger = `Call copy invoiceSP`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 2680,
        "wires": [
            [
                "90f47dc2644fc7dc",
                "27cbd04f1c9210e0"
            ]
        ]
    },
    {
        "id": "4f6e2501436d21f3",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "updatePreviousInvoicesToPaid",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\nconst BP_TYPE = \"DISTRIBUTOR\"\n\nmsg.url = `${PAYLATER_URL}/v1/invoices/service/status/${msg.enterpriseId}?bpType=${BP_TYPE}`\nmsg.method = 'POST'\nconst token = flow.get(\"actyvToken\") || \"\"\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n// msg.headers[\"Authorization\"] = `Bearer ${token}`\n// msg.headers[\"enterpriseid\"] = msg.enterpriseId\n\nmsg.logger = `update Previous invoices to paid`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 2760,
        "wires": [
            [
                "209a2636682964f1"
            ]
        ]
    },
    {
        "id": "8431dffaccfe3c37",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "erpIdAndBusinessIdMapping",
        "func": "msg.erpIdAndBusinessIdMapping = msg.payload\nmsg.payload = msg.outstandingInvoices\nreturn msg;\n\n// Response Type\n// {\n//   \"101104\": \"635f8ebfd988fd7c1800d8c9\"\n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2460,
        "wires": [
            [
                "3eb2f97f85509bc4",
                "9bf026ee8f2ebfec"
            ]
        ]
    },
    {
        "id": "62c3a7f3c578d7b2",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2230,
        "y": 2480,
        "wires": []
    },
    {
        "id": "ac38de8334ee12ca",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "invoiceRawFormat",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 2520,
        "wires": []
    },
    {
        "id": "d236f387826a8932",
        "type": "switch",
        "z": "9ab61dee89975794",
        "name": "",
        "property": "isCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 950,
        "y": 2460,
        "wires": [
            [
                "d51f3eb3c9a3bda5",
                "556366e2fcdc4759"
            ],
            [
                "632f826e26288b82",
                "8fd578e806a36196"
            ]
        ]
    },
    {
        "id": "3971991b08ea0e19",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "debug 303",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2404.999984741211,
        "y": 454.99999809265137,
        "wires": []
    },
    {
        "id": "31c822cd99f7e93b",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "function 175",
        "func": "console.log(\"S3 Events\",msg)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2234.999984741211,
        "y": 454.99999809265137,
        "wires": [
            []
        ]
    },
    {
        "id": "b363e106a0f7a675",
        "type": "comment",
        "z": "9ab61dee89975794",
        "name": "Listen events from s3",
        "info": "",
        "x": 2064.999984741211,
        "y": 394.99999809265137,
        "wires": []
    },
    {
        "id": "6d34d642469ed050",
        "type": "alafile in",
        "z": "9ab61dee89975794",
        "name": "",
        "filename": "",
        "format": "xlsx",
        "columns": "*",
        "headers": true,
        "x": 370,
        "y": 1980,
        "wires": [
            [
                "feebfb257097e802"
            ]
        ]
    },
    {
        "id": "f11d6e87aeda8dfa",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "Update file parsing status to ingested",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 1940,
        "wires": []
    },
    {
        "id": "95b49fa01b37a2b1",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "Add invoice bulk",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1890,
        "y": 2400,
        "wires": []
    },
    {
        "id": "90f47dc2644fc7dc",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "debug 304",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 2640,
        "wires": []
    },
    {
        "id": "4b1f963b6ce33fb1",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "createFileReq",
        "func": "\nconst PAYLATER_URL = env.get(\"PAYLATER_URL\")\n\nmsg.url = `${PAYLATER_URL}/v1/file`\nmsg.method = \"POST\"\nconst token = flow.get(\"actyvToken\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\n\nmsg.logger = `create file request`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 1400,
        "wires": [
            [
                "8e58c418de55762c",
                "be987b2fb7ebfc13"
            ]
        ]
    },
    {
        "id": "15d05e085ad39201",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "getFileByConfigKeyReq",
        "func": "\nconst PAYLATER_URL = env.get(\"PAYLATER_URL\")\nconst CONFIG_KEY = env.get(\"APL_PIPES_CONFIG_KEY\")\n\nmsg.url = `${PAYLATER_URL}/v1/file/config-key/${CONFIG_KEY}`\nmsg.method = \"GET\"\nconst token = flow.get(\"actyvToken\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\n\nmsg.logger = `Get file by config key #${CONFIG_KEY}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1540,
        "wires": [
            [
                "8054ace7672b22b8"
            ]
        ]
    },
    {
        "id": "feaf59583f3d583a",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "getSingleFilename",
        "func": "\nconst files = msg.payload\nlet file;\nif (files.length > 0) {\n    file = files[0]\n}\n// const fileName = file.split(\".\")[-1]\n\n// const filename = [file]\n// const filename = file.split(\".\")[file.split(\".\").length - 1].replace(\"XLSX\", 'xlsx')\n\n// msg.payload =  [file]\nmsg.payload = [`/sftpdir/invoices/Distributor Invoice file (18).xlsx`]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1080,
        "wires": [
            [
                "328dad2f3b50217d"
            ]
        ]
    },
    {
        "id": "1e65cb6c194a278c",
        "type": "inject",
        "z": "9ab61dee89975794",
        "name": "Every 10 minutes",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "*/15 4-13 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 430,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "29a819865987700d",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 2080,
        "wires": []
    },
    {
        "id": "7fc02aa5fd76e347",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 1980,
        "wires": []
    },
    {
        "id": "9bf026ee8f2ebfec",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "erpIdAndBusinessIdMapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 2400,
        "wires": []
    },
    {
        "id": "f9449f2754040ee8",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "sleep",
        "func": "const sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\nawait sleep(5000)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 2580,
        "wires": [
            [
                "2380acaed60f564a"
            ]
        ]
    },
    {
        "id": "82d48ba551032931",
        "type": "comment",
        "z": "9ab61dee89975794",
        "name": "Move file to failure folder",
        "info": "Send an email if any error occurs",
        "x": 370,
        "y": 3520,
        "wires": []
    },
    {
        "id": "d30221936402b392",
        "type": "catch",
        "z": "9ab61dee89975794",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 320,
        "y": 3580,
        "wires": [
            []
        ]
    },
    {
        "id": "c6a01e8df9afb192",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "setRemotePath",
        "func": "msg.filename = msg.payload[0].split(\".\").slice(0, -1).join(\".\") // filename without extension\n\nconst folderPath = msg.payload[0].split(\"/\")\nconst fileName = folderPath[folderPath.length - 1]\nflow.set('filename', fileName) // filename with extension\nglobal.set('filename', fileName) // filename with extension\n\n// msg.filepath = `/Users/ramu/Desktop/node-red/${fileName}`\n// msg.successPath = `${env.get(\"SFTP_SUCCESS_FOLDER\")}`\nmsg.localPath = `${env.get(\"LOCAL_PATH\")}/${fileName}`\n// msg.remotePath = `${env.get(\"REMOTE_PATH_OUT\")}/${fileName}`\n\nmsg.successPath = `/sftpdir/success`\nmsg.remotePath = `/sftpdir/Outstanding Invoices_Pipes/${fileName}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1200,
        "wires": [
            [
                "80c693b47315ba43"
            ]
        ]
    },
    {
        "id": "d61296b9f6a749b2",
        "type": "SFTP-main",
        "z": "9ab61dee89975794",
        "path": "/",
        "method": "put",
        "remoteFilePath": "/sftpdir/failed",
        "remoteFilePathType": "str",
        "localFilePath": "localPath",
        "localFilePathType": "msg",
        "server": "b8a52d61cb94408c",
        "outputs": 1,
        "debug": false,
        "name": "move to failure folder",
        "x": 720,
        "y": 3580,
        "wires": [
            [
                "fb7bb9593a0c1f28"
            ]
        ]
    },
    {
        "id": "5363216fcfff7c8a",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "Deleted file from SFTP existing directory",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 3680,
        "wires": []
    },
    {
        "id": "fb7bb9593a0c1f28",
        "type": "SFTP-main",
        "z": "9ab61dee89975794",
        "path": "/",
        "method": "delete",
        "remoteFilePath": "remotePath",
        "remoteFilePathType": "msg",
        "localFilePath": "filepath",
        "localFilePathType": "msg",
        "server": "b8a52d61cb94408c",
        "outputs": 1,
        "debug": false,
        "name": "delete from existing folder",
        "x": 390,
        "y": 3680,
        "wires": [
            [
                "5363216fcfff7c8a"
            ]
        ]
    },
    {
        "id": "c8318f0ada661893",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "setRemotePath",
        "func": "const fileName = global.get('filename') // filename with extension\n\nmsg.failurePath = `${env.get(\"SFTP_FAILURE_FOLDER\")}`\nmsg.localPath = `${env.get(\"LOCAL_PATH\")}/${fileName}`\nmsg.remotePath = `${env.get(\"REMOTE_PATH_OUT\")}/${fileName}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 3580,
        "wires": [
            [
                "6f12656621bb645a",
                "d61296b9f6a749b2"
            ]
        ]
    },
    {
        "id": "6f12656621bb645a",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "debug 305",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 3500,
        "wires": []
    },
    {
        "id": "7c3a11cf21821f31",
        "type": "comment",
        "z": "9ab61dee89975794",
        "name": "Error handling",
        "info": "Send an email if any error occurs",
        "x": 290,
        "y": 3900,
        "wires": []
    },
    {
        "id": "a92ef788b9c4c0b0",
        "type": "catch",
        "z": "9ab61dee89975794",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 280,
        "y": 3960,
        "wires": [
            []
        ]
    },
    {
        "id": "6d3b86123a304cf1",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "error",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 3960,
        "wires": []
    },
    {
        "id": "c1183d5833b14f41",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "sendEmailReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\n\nmsg.payload = {\n    // \"from\": \"ramu.bugudi@actyv.com\",\n    \"from\": \"shravan.pm@actyv.com\",\n    \"to\": \"ramu.bugudi@actyv.com\",\n    \"subject\": `Error occured - ${msg.error.message}`,\n    // \"html\": `${msg.error}`,\n    \"html\": `\n    <html>\n        <body>\n            <p></p>\n            <p><b>FLOW NAME:</b> ${env.get(\"NR_FLOW_NAME\")} <b>FLOW ID:</b> ${env.get(\"NR_FLOW_ID\")} <b>PATH:</b> ${env.get(\"NR_NODE_PATH\")}</p>\n            <p>${msg.error.message}</p>\n            <p>Name: ${msg.error.source.name} - Type: ${msg.error.source.type}</p>\n            <p>Stacktrace: ${msg.error.stack}</p>\n        </body>\n    </html>`,\n    \"priority\": \"high\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 3960,
        "wires": [
            [
                "a6b3f640830c1d33"
            ]
        ]
    },
    {
        "id": "a6b3f640830c1d33",
        "type": "http request",
        "z": "9ab61dee89975794",
        "name": "sendEmail",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 730,
        "y": 3960,
        "wires": [
            [
                "6d3b86123a304cf1"
            ]
        ],
        "info": "Get bank product config id"
    },
    {
        "id": "5a80b2b883ebb306",
        "type": "comment",
        "z": "9ab61dee89975794",
        "name": "Delete from local folder aswell",
        "info": "Send an email if any error occurs",
        "x": 1020,
        "y": 3620,
        "wires": []
    },
    {
        "id": "e7d20cec6049dec1",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "getEnterpriseReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst BUSINESS_UNIQUE_IDENTIFIER = env.get(\"APL_BUSINESS_UNIQUE_IDENTIFIER\")\nconst BUSINESS_TYPE = \"ENTERPRISE\"\nmsg.headers = {}\nmsg.method = \"GET\"\nconst token = flow.get(\"ent_token\") || \"\"\nmsg.url = `${PAYLATER_URL}/v1/business/service/getByIdentifier/${BUSINESS_UNIQUE_IDENTIFIER}/${BUSINESS_TYPE}`;\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n// msg.headers[\"Authorization\"] = `Bearer ${token}`\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 520,
        "wires": [
            [
                "ea0576bf173d6872"
            ]
        ]
    },
    {
        "id": "9d16667714e8c7dd",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "Save Enterprise ID",
        "func": "const enterpriseId = msg.payload?.id\n\nmsg.enterpriseId = enterpriseId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "ab3e56f595c04413",
        "type": "amazon s3 in",
        "z": "9ab61dee89975794",
        "aws": "5d210162c7877d54",
        "bucket": "actyv-test-bucket",
        "region": "ap-south-1",
        "filepattern": "*.*",
        "name": "",
        "x": 2054.999984741211,
        "y": 454.99999809265137,
        "wires": [
            []
        ]
    },
    {
        "id": "d64e94e0b5d9aa04",
        "type": "amazon s3 out",
        "z": "9ab61dee89975794",
        "aws": "5d210162c7877d54",
        "bucket": "actyv-test-bucket",
        "filename": "",
        "localFilename": "",
        "region": "ap-south-1",
        "name": "Upload to s3",
        "x": 1490,
        "y": 1020,
        "wires": []
    },
    {
        "id": "83444eaf857cf2dc",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst ENTERPRISE_EMAIL = env.get('APL_PIPES_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": ENTERPRISE_EMAIL,\n    \"password\": PASSWORD\n};\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 340,
        "wires": [
            [
                "2c1beed52716de4c"
            ]
        ]
    },
    {
        "id": "95446dacf77f7ae2",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "set Enterprise Token",
        "func": "flow.set('ent_token', msg.payload.idToken);\n\nmsg.ent_token = msg.payload.idToken\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 340,
        "wires": [
            [
                "0bbe1063ec89bbed"
            ]
        ]
    },
    {
        "id": "26488f1e49b83557",
        "type": "inject",
        "z": "9ab61dee89975794",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 840,
        "y": 60,
        "wires": [
            [
                "5b3d7d04fbcd322a"
            ]
        ]
    },
    {
        "id": "dc4d287c476833fa",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 100,
        "wires": []
    },
    {
        "id": "5b3d7d04fbcd322a",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst PAYLATER_URL = env.get('PAYLATER_URL')\nconst GO_URL = env.get('GO_URL')\nconst ENTERPRISE_EMAIL = env.get('APL_PIPES_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst CONFIG_KEY = env.get('CONFIG_KEY')\nconst APL_PIPES_CONFIG_KEY = env.get('APL_PIPES_CONFIG_KEY')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\nconst MSL_BANK_KEY = env.get('MSL_BANK_KEY')\nconst CKPL_CONFIG_KEY = env.get('CKPL_CONFIG_KEY')\nconst AXIS_BANK_KEY = env.get('AXIS_BANK_KEY')\nconst MSL_BANK_ADMIN_EMAIL = env.get(\"MSL_BANK_ADMIN_EMAIL\")\nconst APL_PIPES_ENTERPRISE_ADMIN_EMAIL = env.get(\"APL_PIPES_ENTERPRISE_ADMIN_EMAIL\")\nconst SABARI_BENEFICIARY_NAME = env.get(\"SABARI_BENEFICIARY_NAME\")\nconst SFTP_SUCCESS_FOLDER = env.get(\"SFTP_SUCCESS_FOLDER\")\n\nmsg.payload = {\n    ADMIN_URL, PAYLATER_URL, GO_URL,\n    ENTERPRISE_EMAIL,\n    PASSWORD,\n    CONFIG_KEY,\n    APL_PIPES_CONFIG_KEY,\n    X_ACTYV_API_CONFIG_KEY,\n    MSL_BANK_ADMIN_EMAIL,\n    APL_PIPES_ENTERPRISE_ADMIN_EMAIL,\n    MSL_BANK_KEY,\n    CKPL_CONFIG_KEY,\n    AXIS_BANK_KEY,\n    SABARI_BENEFICIARY_NAME,\n    SFTP_SUCCESS_FOLDER\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 100,
        "wires": [
            [
                "dc4d287c476833fa"
            ]
        ]
    },
    {
        "id": "10cbcf3fe25ab493",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "getFileName",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 1280,
        "wires": []
    },
    {
        "id": "27c38a66d8459eba",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "createFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 1400,
        "wires": []
    },
    {
        "id": "ce8435d654b47e2b",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "updateFileParsingStatus",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 1700,
        "wires": []
    },
    {
        "id": "556366e2fcdc4759",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "Switch False",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 2360,
        "wires": []
    },
    {
        "id": "8fd578e806a36196",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "Switch True",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 2520,
        "wires": []
    },
    {
        "id": "25ea59b71ec56b9b",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "getFileByConfigKey",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 1480,
        "wires": []
    },
    {
        "id": "a5c4f825824fddeb",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst BANK_ADMIN_EMAIL = env.get('MSL_BANK_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": BANK_ADMIN_EMAIL,\n    \"password\": PASSWORD\n};\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 260,
        "wires": [
            [
                "714f096b5f1ed313"
            ]
        ]
    },
    {
        "id": "6342d23b29a44a56",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "set Bank Token",
        "func": "flow.set('bank_token', msg.payload.idToken);\n\nmsg.bank_token = msg.payload.idToken\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 260,
        "wires": [
            [
                "83444eaf857cf2dc"
            ]
        ]
    },
    {
        "id": "0bbe1063ec89bbed",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "getBankReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_KEY = env.get(\"MSL_BANK_KEY\")\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank/key/${BANK_KEY}`;\n\n\nmsg.loggerNewLine = true\nmsg.logger = `Get bankId for bank key #${BANK_KEY}`\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 420,
        "wires": [
            [
                "27ea7a90bd71646f"
            ]
        ]
    },
    {
        "id": "c14065caf635ad8e",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "Save Bank ID",
        "func": "const bankId = msg.payload?._id\nmsg.bankId = bankId\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 400,
        "wires": [
            [
                "e7d20cec6049dec1"
            ]
        ]
    },
    {
        "id": "1129ea4d884392a4",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "Add invoice bulk req",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 2280,
        "wires": []
    },
    {
        "id": "2a8ad74a00d474d4",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "debug 306",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 954.9999847412109,
        "y": 1074.9999980926514,
        "wires": []
    },
    {
        "id": "e4b9658bbb9526b5",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "getAplPipesEnterpriseReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst BUSINESS_UNIQUE_IDENTIFIER = env.get(\"APL_BUSINESS_UNIQUE_IDENTIFIER\")\nconst BUSINESS_TYPE = \"ENTERPRISE\"\nmsg.headers = {}\nmsg.method = \"GET\"\nconst token = flow.get(\"ent_token\") || \"\"\nmsg.url = `${PAYLATER_URL}/v1/business/service/getByIdentifier/${BUSINESS_UNIQUE_IDENTIFIER}/${BUSINESS_TYPE}`;\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n// msg.headers[\"Authorization\"] = `Bearer ${token}`\n\nmsg.logger = `get apl pipes enterpriseID`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 880,
        "wires": [
            [
                "d08f345f9cf87b86"
            ]
        ]
    },
    {
        "id": "c806075eeb46a27b",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "Save Enterprise ID",
        "func": "const enterpriseId = msg.payload?.id\n\nmsg.aplPipesenterpriseId = enterpriseId\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 860,
        "wires": [
            [
                "f19dbcbee17a24b3",
                "3c16137f786f2289"
            ]
        ]
    },
    {
        "id": "f19dbcbee17a24b3",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "debug 308",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 920,
        "wires": []
    },
    {
        "id": "a3e4a8312a9e2713",
        "type": "SFTP-main",
        "z": "9ab61dee89975794",
        "path": "/",
        "method": "put",
        "remoteFilePath": "/sftpdir/success",
        "remoteFilePathType": "str",
        "localFilePath": "localPath",
        "localFilePathType": "msg",
        "server": "015617f7b1e92c5e",
        "outputs": 1,
        "debug": false,
        "name": "move to success folder",
        "x": 2050,
        "y": 2760,
        "wires": [
            [
                "c63f9134312e25e6"
            ]
        ]
    },
    {
        "id": "c63f9134312e25e6",
        "type": "SFTP-main",
        "z": "9ab61dee89975794",
        "path": "/",
        "method": "delete",
        "remoteFilePath": "remotePath",
        "remoteFilePathType": "msg",
        "localFilePath": "filepath",
        "localFilePathType": "msg",
        "server": "d4942248b841ce28",
        "outputs": 1,
        "debug": false,
        "name": "delete from existing folder",
        "x": 2310,
        "y": 2760,
        "wires": [
            [
                "e78ac6218b8a2502"
            ]
        ]
    },
    {
        "id": "e78ac6218b8a2502",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "Deleted file from SFTP existing directory",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2620,
        "y": 2760,
        "wires": []
    },
    {
        "id": "2f652646bdf6030b",
        "type": "alafile in",
        "z": "9ab61dee89975794",
        "name": "",
        "filename": "/home/ec2-user/data/AMOUNT TO BE FUNDED DT 22.04.2023",
        "format": "xlsx",
        "columns": "*",
        "headers": true,
        "x": 770,
        "y": 3020,
        "wires": [
            [
                "ec980d6a44a9e402"
            ]
        ]
    },
    {
        "id": "ec980d6a44a9e402",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 3020,
        "wires": []
    },
    {
        "id": "dc0421b88e85d1f0",
        "type": "inject",
        "z": "9ab61dee89975794",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 540,
        "y": 3020,
        "wires": [
            [
                "2f652646bdf6030b"
            ]
        ]
    },
    {
        "id": "9befb680426c2211",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "",
        "func": "const filename = \"/sftpdir/Outstanding Invoices_Pipes/AMOUNT TO BE FUNDED DT 22.04.2023.XLSX\"\n// msg.filename = `${env.get('LOCAL_PATH')}/${filename.split(\".\").slice(0, -1).join(\".\").trimLeft()}`\nmsg.filename = filename.split(\".\")[filename.split(\".\").length - 1].replace(\"XLSX\",'xlsx')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 3080,
        "wires": [
            []
        ]
    },
    {
        "id": "149bb6d908ebf3e5",
        "type": "SFTP-main",
        "z": "9ab61dee89975794",
        "path": "/",
        "method": "list",
        "remoteFilePath": "/sftpdir/invoices",
        "remoteFilePathType": "str",
        "localFilePath": "C:\\Users\\Ayush Rarg\\OneDrive - actyv.ai\\Desktop\\node-red",
        "localFilePathType": "str",
        "server": "015617f7b1e92c5e",
        "outputs": 1,
        "debug": false,
        "name": "lisitng the files from sftp",
        "x": 650,
        "y": 200,
        "wires": [
            [
                "55db31b142d7c44c"
            ]
        ]
    },
    {
        "id": "b30fcf81e1eef849",
        "type": "SFTP-main",
        "z": "9ab61dee89975794",
        "path": "/",
        "method": "get",
        "remoteFilePath": "payload",
        "remoteFilePathType": "msg",
        "localFilePath": "LOCAL_PATH",
        "localFilePathType": "env",
        "server": "d4942248b841ce28",
        "outputs": 1,
        "debug": false,
        "name": "get a single file from sftp",
        "x": 1110,
        "y": 200,
        "wires": [
            [
                "e20cbfbd76dff392"
            ]
        ]
    },
    {
        "id": "55db31b142d7c44c",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "getSingleFilename",
        "func": "\nconst files = msg.payload\nlet file;\nif (files.length > 0) {\n    file = files[0]\n}\n// const fileName = file.split(\".\")[-1]\n\n// const filename = [file]\n// msg.payload = filename.split(\".\")[filename.split(\".\").length - 1].replace(\"XLSX\", 'xlsx')\n\n// msg.payload =  [file]\nmsg.payload = [`/sftpdir/invoices/Distributor Invoice file (18).xlsx`]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 200,
        "wires": [
            [
                "b30fcf81e1eef849"
            ]
        ]
    },
    {
        "id": "e20cbfbd76dff392",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "catch error",
        "func": "const isError = \"err\" in msg;\n\nmsg.isError = isError\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 200,
        "wires": [
            [
                "293f0655b06cd70b"
            ]
        ]
    },
    {
        "id": "293f0655b06cd70b",
        "type": "switch",
        "z": "9ab61dee89975794",
        "name": "",
        "property": "isError",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1550,
        "y": 200,
        "wires": [
            [
                "e0e03f899c91fde3"
            ],
            [
                "c32d8f52b0c901e7",
                "6d88d388a980f051"
            ]
        ]
    },
    {
        "id": "e0e03f899c91fde3",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "Error Occured",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1760,
        "y": 160,
        "wires": []
    },
    {
        "id": "c32d8f52b0c901e7",
        "type": "debug",
        "z": "9ab61dee89975794",
        "name": "No Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1740,
        "y": 220,
        "wires": []
    },
    {
        "id": "714f096b5f1ed313",
        "type": "subflow:0cbd918f05921aae",
        "z": "9ab61dee89975794",
        "name": "Authenticate",
        "x": 810,
        "y": 260,
        "wires": [
            [
                "6342d23b29a44a56"
            ],
            []
        ]
    },
    {
        "id": "2c1beed52716de4c",
        "type": "subflow:0cbd918f05921aae",
        "z": "9ab61dee89975794",
        "name": "",
        "x": 790,
        "y": 340,
        "wires": [
            [
                "95446dacf77f7ae2"
            ],
            []
        ]
    },
    {
        "id": "27ea7a90bd71646f",
        "type": "subflow:0cbd918f05921aae",
        "z": "9ab61dee89975794",
        "name": "getBankReq",
        "x": 810,
        "y": 420,
        "wires": [
            [
                "c404c2f9a02dbbea"
            ],
            [
                "a60cf4278ffaddf2"
            ]
        ]
    },
    {
        "id": "c404c2f9a02dbbea",
        "type": "subflow:951a533bb3498fe6",
        "z": "9ab61dee89975794",
        "name": "",
        "x": 960,
        "y": 400,
        "wires": [
            [
                "c14065caf635ad8e"
            ]
        ]
    },
    {
        "id": "a60cf4278ffaddf2",
        "type": "subflow:951a533bb3498fe6",
        "z": "9ab61dee89975794",
        "name": "",
        "x": 960,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "ea0576bf173d6872",
        "type": "subflow:0cbd918f05921aae",
        "z": "9ab61dee89975794",
        "name": "getEnterprise",
        "x": 810,
        "y": 520,
        "wires": [
            [
                "0ff41c2c3666cab2"
            ],
            [
                "11e22abf9971d559"
            ]
        ]
    },
    {
        "id": "0ff41c2c3666cab2",
        "type": "subflow:951a533bb3498fe6",
        "z": "9ab61dee89975794",
        "name": "",
        "x": 960,
        "y": 500,
        "wires": [
            [
                "9d16667714e8c7dd"
            ]
        ]
    },
    {
        "id": "11e22abf9971d559",
        "type": "subflow:951a533bb3498fe6",
        "z": "9ab61dee89975794",
        "name": "",
        "x": 960,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "d08f345f9cf87b86",
        "type": "subflow:0cbd918f05921aae",
        "z": "9ab61dee89975794",
        "name": "getEnterprise",
        "x": 890,
        "y": 880,
        "wires": [
            [
                "6ede6e1b53f5d4d9"
            ],
            [
                "81279bbb6e5ace5a",
                "f19dbcbee17a24b3"
            ]
        ]
    },
    {
        "id": "6ede6e1b53f5d4d9",
        "type": "subflow:951a533bb3498fe6",
        "z": "9ab61dee89975794",
        "name": "",
        "x": 1040,
        "y": 860,
        "wires": [
            [
                "c806075eeb46a27b"
            ]
        ]
    },
    {
        "id": "81279bbb6e5ace5a",
        "type": "subflow:951a533bb3498fe6",
        "z": "9ab61dee89975794",
        "name": "",
        "x": 1040,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "8e58c418de55762c",
        "type": "subflow:0cbd918f05921aae",
        "z": "9ab61dee89975794",
        "name": "",
        "x": 1290,
        "y": 1400,
        "wires": [
            [
                "22962001a0a43e3d"
            ],
            [
                "22962001a0a43e3d"
            ]
        ]
    },
    {
        "id": "22962001a0a43e3d",
        "type": "subflow:951a533bb3498fe6",
        "z": "9ab61dee89975794",
        "name": "",
        "x": 1420,
        "y": 1400,
        "wires": [
            [
                "15d05e085ad39201",
                "27c38a66d8459eba"
            ]
        ]
    },
    {
        "id": "8054ace7672b22b8",
        "type": "subflow:0cbd918f05921aae",
        "z": "9ab61dee89975794",
        "name": "",
        "x": 710,
        "y": 1540,
        "wires": [
            [
                "321fb8de82f9c2d6"
            ],
            [
                "321fb8de82f9c2d6"
            ]
        ]
    },
    {
        "id": "321fb8de82f9c2d6",
        "type": "subflow:951a533bb3498fe6",
        "z": "9ab61dee89975794",
        "name": "",
        "x": 860,
        "y": 1540,
        "wires": [
            [
                "10a5707014a86472"
            ]
        ]
    },
    {
        "id": "d64570c39697cdd7",
        "type": "subflow:0cbd918f05921aae",
        "z": "9ab61dee89975794",
        "name": "updateFileParsingStatus",
        "x": 710,
        "y": 1740,
        "wires": [
            [
                "8146f9cdcc2acca5"
            ],
            [
                "8146f9cdcc2acca5"
            ]
        ]
    },
    {
        "id": "8146f9cdcc2acca5",
        "type": "subflow:951a533bb3498fe6",
        "z": "9ab61dee89975794",
        "name": "",
        "x": 900,
        "y": 1740,
        "wires": [
            [
                "ce8435d654b47e2b",
                "cc2b3b657f252c23"
            ]
        ]
    },
    {
        "id": "109020c63e085018",
        "type": "subflow:951a533bb3498fe6",
        "z": "9ab61dee89975794",
        "name": "",
        "x": 1500,
        "y": 1940,
        "wires": [
            [
                "f11d6e87aeda8dfa"
            ]
        ]
    },
    {
        "id": "8d2455220d829c89",
        "type": "subflow:0cbd918f05921aae",
        "z": "9ab61dee89975794",
        "name": "Update File Parsing Status",
        "x": 1280,
        "y": 1940,
        "wires": [
            [
                "109020c63e085018"
            ],
            [
                "109020c63e085018"
            ]
        ]
    },
    {
        "id": "5563ba96779cbbd8",
        "type": "subflow:0cbd918f05921aae",
        "z": "9ab61dee89975794",
        "name": "Get Distributor By ERP ID",
        "x": 1230,
        "y": 2000,
        "wires": [
            [
                "8e9a586e283571ab"
            ],
            []
        ]
    },
    {
        "id": "8e9a586e283571ab",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "join",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 2000,
        "wires": [
            [
                "7fc02aa5fd76e347",
                "8431dffaccfe3c37"
            ]
        ]
    },
    {
        "id": "fdd64fe91a0d0a94",
        "type": "subflow:0cbd918f05921aae",
        "z": "9ab61dee89975794",
        "name": "Add Invoice Raw Bulk",
        "x": 1620,
        "y": 2400,
        "wires": [
            [
                "95b49fa01b37a2b1"
            ],
            [
                "95b49fa01b37a2b1"
            ]
        ]
    },
    {
        "id": "2349860a34629ea4",
        "type": "subflow:0cbd918f05921aae",
        "z": "9ab61dee89975794",
        "name": "",
        "x": 1890,
        "y": 2480,
        "wires": [
            [
                "e2c6832fa713a177"
            ],
            [
                "e2c6832fa713a177"
            ]
        ]
    },
    {
        "id": "e2c6832fa713a177",
        "type": "subflow:951a533bb3498fe6",
        "z": "9ab61dee89975794",
        "name": "",
        "x": 2040,
        "y": 2480,
        "wires": [
            [
                "f9449f2754040ee8",
                "62c3a7f3c578d7b2"
            ]
        ]
    },
    {
        "id": "27cbd04f1c9210e0",
        "type": "subflow:0cbd918f05921aae",
        "z": "9ab61dee89975794",
        "name": "",
        "x": 1690,
        "y": 2680,
        "wires": [
            [
                "29f76067cc2f7910"
            ],
            [
                "29f76067cc2f7910"
            ]
        ]
    },
    {
        "id": "29f76067cc2f7910",
        "type": "subflow:951a533bb3498fe6",
        "z": "9ab61dee89975794",
        "name": "",
        "x": 1860,
        "y": 2680,
        "wires": [
            [
                "4f6e2501436d21f3"
            ]
        ]
    },
    {
        "id": "209a2636682964f1",
        "type": "subflow:0cbd918f05921aae",
        "z": "9ab61dee89975794",
        "name": "Update Previous Invoices To Paid",
        "x": 1740,
        "y": 2760,
        "wires": [
            [
                "a3e4a8312a9e2713"
            ],
            []
        ]
    },
    {
        "id": "2902c0292d3896a5",
        "type": "subflow:0cbd918f05921aae",
        "z": "9ab61dee89975794",
        "name": "",
        "x": 670,
        "y": 1280,
        "wires": [
            [
                "0e882d23a0cb95ae"
            ],
            [
                "0e882d23a0cb95ae"
            ]
        ]
    },
    {
        "id": "0e882d23a0cb95ae",
        "type": "subflow:951a533bb3498fe6",
        "z": "9ab61dee89975794",
        "name": "",
        "x": 820,
        "y": 1280,
        "wires": [
            [
                "10cbcf3fe25ab493",
                "445163594649eb76"
            ]
        ]
    },
    {
        "id": "6d88d388a980f051",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "Setting Global Variables",
        "func": "const ENV_VARIABLES = {\n    \"ADMIN_EMAIL\": \"darkhorse@gmail.com\",\n    \"ADMIN_PASSWORD\": \"User@123\",\n    \"ACTYV_ENTITY_URL\": \"https://actyv1-platform.uat.actyv.com\"\n}\n\nglobal.set(\"ENV_VARIABLES\", ENV_VARIABLES);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 580,
        "wires": [
            [
                "c13213cd2a6e0fc6"
            ]
        ]
    },
    {
        "id": "c13213cd2a6e0fc6",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "AuthenticateActyvUserReq",
        "func": "// const envVariables = global.get('envVariables')\nconst ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\nconst EMAIL = ENV_VARIABLES.ADMIN_EMAIL;\nconst PASSWORD = ENV_VARIABLES.ADMIN_PASSWORD\n\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 660,
        "wires": [
            [
                "20d59690d9b26d41"
            ]
        ]
    },
    {
        "id": "20d59690d9b26d41",
        "type": "subflow:0cbd918f05921aae",
        "z": "9ab61dee89975794",
        "name": "AuthenticateActyvUser",
        "x": 900,
        "y": 660,
        "wires": [
            [
                "5f0db6f7d818df79"
            ],
            []
        ]
    },
    {
        "id": "5f0db6f7d818df79",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 660,
        "wires": [
            [
                "b68120a4b705f202"
            ]
        ]
    },
    {
        "id": "b68120a4b705f202",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "getActyvEntityUser",
        "func": "\n\nconst GO_URL = env.get('GO_URL');\n\n\nmsg.url = `${GO_URL}/actyv-entity`;\nmsg.method = \"GET\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 760,
        "wires": [
            [
                "9e314d06201f35fb"
            ]
        ]
    },
    {
        "id": "9e314d06201f35fb",
        "type": "subflow:0cbd918f05921aae",
        "z": "9ab61dee89975794",
        "name": "getCurrentUser",
        "x": 740,
        "y": 760,
        "wires": [
            [
                "123ef1d1d6a2ec4e"
            ],
            []
        ]
    },
    {
        "id": "123ef1d1d6a2ec4e",
        "type": "function",
        "z": "9ab61dee89975794",
        "name": "Save actyv entity ID",
        "func": "const found = msg.payload.find(entity => entity.key === \"dark_horse\") ?? undefined\n\nconsole.log(found?._id)\nif (found) {\n    flow.set(\"actyvEntityId\", found?._id);\n    msg.actyvEntityId = found?._id\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 760,
        "wires": [
            [
                "e4b9658bbb9526b5"
            ]
        ]
    },
    {
        "id": "79fe9d96e15236d8",
        "type": "inject",
        "z": "f40935e17e5fc0c9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 580,
        "y": 40,
        "wires": [
            [
                "82e7b24134f2bd8c"
            ]
        ]
    },
    {
        "id": "b2c0f3c954d7d726",
        "type": "SFTP-main",
        "z": "f40935e17e5fc0c9",
        "path": "/",
        "method": "list",
        "remoteFilePath": "/Out",
        "remoteFilePathType": "str",
        "localFilePath": "C:\\Users\\Ayush Rarg\\OneDrive - actyv.ai\\Desktop\\node-red",
        "localFilePathType": "str",
        "server": "55c08fb94e980196",
        "outputs": 1,
        "debug": false,
        "name": "lisitng the files from sftp",
        "x": 670,
        "y": 320,
        "wires": [
            [
                "b4b64ff3dc56e337"
            ]
        ]
    },
    {
        "id": "5c9831d46eb60303",
        "type": "SFTP-main",
        "z": "f40935e17e5fc0c9",
        "path": "/",
        "method": "get",
        "remoteFilePath": "payload",
        "remoteFilePathType": "msg",
        "localFilePath": "LOCAL_PATH",
        "localFilePathType": "env",
        "server": "55c08fb94e980196",
        "outputs": 1,
        "debug": false,
        "name": "get a single file from sftp",
        "x": 1210,
        "y": 320,
        "wires": [
            [
                "3ca7015596d6d1ad"
            ]
        ]
    },
    {
        "id": "b8c08c7b171cd033",
        "type": "alafile in",
        "z": "f40935e17e5fc0c9",
        "name": "",
        "filename": "",
        "format": "xlsx",
        "columns": "*",
        "headers": true,
        "x": 970,
        "y": 500,
        "wires": [
            [
                "eed9ed663583ab49"
            ]
        ]
    },
    {
        "id": "2c6367ef18589ff9",
        "type": "switch",
        "z": "f40935e17e5fc0c9",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 620,
        "wires": [
            [
                "d99c3870828de01d"
            ],
            [
                "32c94d1358c75e17"
            ]
        ]
    },
    {
        "id": "32c94d1358c75e17",
        "type": "function",
        "z": "f40935e17e5fc0c9",
        "name": "mapJsonFromXLSX",
        "func": "\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\nconst len = msg.payload.length;\n\nfor (let item of msg.payload) {\n    if (item[\"Dealer Code\"].toString().length > 0) {\n    await sleep(500)\n    node.send({\n        ...msg,\n        payload: {},\n        paymentInfo: item,\n        len,\n        isCompleted: false\n    })\n    }\n}\nawait sleep(msg.payload.length * 1000)\nmsg.isCompleted = true\nmsg.logger = `The length of data from file `\nmsg.payload = len\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 660,
        "wires": [
            [
                "09de50aa0b29c9e4",
                "895b67602fb93856"
            ]
        ]
    },
    {
        "id": "d99c3870828de01d",
        "type": "debug",
        "z": "f40935e17e5fc0c9",
        "name": "Response repayments length",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.length",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 560,
        "wires": []
    },
    {
        "id": "895b67602fb93856",
        "type": "switch",
        "z": "f40935e17e5fc0c9",
        "name": "",
        "property": "isCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 840,
        "wires": [
            [
                "a9286ee186d0fb5c"
            ],
            [
                "75806cf28914463f"
            ]
        ]
    },
    {
        "id": "75806cf28914463f",
        "type": "function",
        "z": "f40935e17e5fc0c9",
        "name": "updateDrawdownReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown`\nmsg.method = 'PATCH'\nconst token = flow.get(\"bank_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"bankid\"] = msg.bankId\n\nconst item = msg.paymentInfo;\n    msg.payload = {\n        \"requestUniqueCode\": item[\"Instrument / Invoice Number\"]\n}\n\nmsg.logger = `get the drawdown by request unique code`\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1020,
        "wires": [
            [
                "ec29693892a469b7"
            ]
        ]
    },
    {
        "id": "eed9ed663583ab49",
        "type": "debug",
        "z": "f40935e17e5fc0c9",
        "name": "File data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 500,
        "wires": []
    },
    {
        "id": "09051130b3828c41",
        "type": "function",
        "z": "f40935e17e5fc0c9",
        "name": "createLoanPayment",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-payment/service`\nmsg.method = 'POST'\nconst token = flow.get(\"bank_token\") || \"\"\nmsg.headers = {}\n// msg.headers[\"Authorization\"] = `Bearer ${token}`\n// msg.headers[\"bankid\"] = msg.bankId\nmsg.headers['x-actyv-api-config-key'] = X_ACTYV_API_CONFIG_KEY\n\nconst item = msg.paymentInfo;\n\nlet repaymentDate = item[\"Repayment date\"]\nlet newDate = \"\";\nconst date = repaymentDate.split(\" \");\nconst dateSplit = date[0].split(\"/\");\nconst time = date[1];\nnewDate = `${dateSplit[2]}/${dateSplit[1]}/${dateSplit[0]}`;\nconsole.log(newDate);\nconsole.log(moment(`${newDate} ${time}`).add(330, \"minutes\").toISOString());\n\n\n    msg.payload = {\n        loanID: msg.payload.loanID,\n        drawdownID: msg.payload.id,\n        amount: Number(msg.payload.disbursedAmount),\n        // date: item[\"Repayment date\"],\n        date: moment(`${newDate} ${time}`).add(330, 'minutes').toISOString(),\n        paymentMethod: \"PRINCIPAL\",\n        fromAccount: \" \",\n        principal: Number(item[\"Principal repaid\"]),\n        interest:0,\n        balance: Number(item[\"Loan outstanding\"]),\n}\nconsole.log({ principal: msg.payload})\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 920,
        "y": 1060,
        "wires": [
            [
                "f8e6807aa8a018d0",
                "35d2f73dd8669a15"
            ]
        ]
    },
    {
        "id": "09de50aa0b29c9e4",
        "type": "debug",
        "z": "f40935e17e5fc0c9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 660,
        "wires": []
    },
    {
        "id": "0b3a7c13b837a122",
        "type": "debug",
        "z": "f40935e17e5fc0c9",
        "name": "Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 1060,
        "wires": []
    },
    {
        "id": "b4b64ff3dc56e337",
        "type": "function",
        "z": "f40935e17e5fc0c9",
        "name": "getSingleFilename",
        "func": "\nconst files = msg.payload.filter(f => f.includes('_repayment'))\nconsole.log(files)\nlet file;\nif (files.length !== 0) {\n    const todaysDate = moment(new Date()).format(\"DD-MM-YYYY\");\n    const todaysLastFile = files\n        .filter((file) => file.includes(`${todaysDate}T18`));\n    // file = files[0]\n    if(!todaysLastFile){\n        file = []\n        return \n    }\n    file = todaysLastFile\n}\n// msg.payload = file\nmsg.payload = [\"/Out/CPLDFACT1_18-05-2023T18-00-00_repayment.txt\"]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 910,
        "y": 320,
        "wires": [
            [
                "575356a3552c5630",
                "5c9831d46eb60303"
            ]
        ]
    },
    {
        "id": "33ede3b7b22788bb",
        "type": "file in",
        "z": "f40935e17e5fc0c9",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 320,
        "y": 480,
        "wires": [
            [
                "54bbc76860ce4253"
            ]
        ]
    },
    {
        "id": "54bbc76860ce4253",
        "type": "csv",
        "z": "f40935e17e5fc0c9",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "Dealer Code,Invoice Date,Instrument / Invoice Number,Invoice Amount,Financed Date,Financed amount,Repayment Due date,Repayment date,Total amount repaid,Principal repaid,Interest repaid,Loan outstanding",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 530,
        "y": 480,
        "wires": [
            [
                "553f0ee48239a83e",
                "2c6367ef18589ff9"
            ]
        ]
    },
    {
        "id": "553f0ee48239a83e",
        "type": "debug",
        "z": "f40935e17e5fc0c9",
        "name": "File data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 480,
        "wires": []
    },
    {
        "id": "93f2286550dd768c",
        "type": "switch",
        "z": "f40935e17e5fc0c9",
        "name": "",
        "property": "paymentInfo[\"Principal repaid\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 710,
        "y": 1060,
        "wires": [
            [
                "09051130b3828c41"
            ]
        ]
    },
    {
        "id": "4405460c5e1e261f",
        "type": "function",
        "z": "f40935e17e5fc0c9",
        "name": "createLoanPayment",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nmsg.url = `${PAYLATER_URL}/v1/loan-payment/service`\nmsg.method = 'POST'\nconst token = flow.get(\"bank_token\") || \"\"\nmsg.headers = {}\n// msg.headers[\"Authorization\"] = `Bearer ${token}`\n// msg.headers[\"bankid\"] = msg.bankId\nmsg.headers['x-actyv-api-config-key'] = X_ACTYV_API_CONFIG_KEY\n\nconst item = msg.paymentInfo;\n\nlet repaymentDate = item[\"Repayment date\"]\nlet newDate = \"\";\nconst date = repaymentDate.split(\" \");\nconst dateSplit = date[0].split(\"/\");\nconst time = date[1];\nnewDate = `${dateSplit[2]}/${dateSplit[1]}/${dateSplit[0]}`;\nconsole.log(newDate);\nconsole.log(moment(`${newDate} ${time}`).add(330, \"minutes\").toISOString());\n\n    msg.payload = {\n        loanID: msg.payload.loanID,\n        drawdownID: msg.payload.id,\n        amount: Number(item[\"Interest repaid\"]),\n        // date: item[\"Repayment date\"],\n        date: moment(`${newDate} ${time}`).add(330, 'minutes').toISOString(),\n        paymentMethod: \"INTEREST\",\n        fromAccount: \" \",\n        principal: 0,\n        interest: Number(item[\"Interest repaid\"]),\n        balance: Number(item[\"Loan outstanding\"]),\n}\n\nconsole.log({ interest: msg.payload })\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 920,
        "y": 980,
        "wires": [
            [
                "3e82ecaa323adad8",
                "35b74f8b49d75c1d"
            ]
        ]
    },
    {
        "id": "3cfacf46c86420f3",
        "type": "debug",
        "z": "f40935e17e5fc0c9",
        "name": "Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 980,
        "wires": []
    },
    {
        "id": "aee1c34897e6ef4c",
        "type": "switch",
        "z": "f40935e17e5fc0c9",
        "name": "",
        "property": "paymentInfo[\"Interest repaid\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 710,
        "y": 980,
        "wires": [
            [
                "4405460c5e1e261f"
            ]
        ]
    },
    {
        "id": "24e0907f4e3394d2",
        "type": "comment",
        "z": "f40935e17e5fc0c9",
        "name": "Error handling",
        "info": "Send an email if any error occurs",
        "x": 250,
        "y": 1200,
        "wires": []
    },
    {
        "id": "e6b65d5517359f0d",
        "type": "catch",
        "z": "f40935e17e5fc0c9",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 240,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "6b4ff98d743754ff",
        "type": "debug",
        "z": "f40935e17e5fc0c9",
        "name": "error",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 1260,
        "wires": []
    },
    {
        "id": "bba0621bff0a8080",
        "type": "function",
        "z": "f40935e17e5fc0c9",
        "name": "sendEmailReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\n\nmsg.payload = {\n    // \"from\": \"ramu.bugudi@actyv.com\",\n    \"from\": \"shravan.pm@actyv.com\",\n    \"to\": \"ramu.bugudi@actyv.com\",\n    \"subject\": `Error occured - ${msg.error.message}`,\n    // \"html\": `${msg.error}`,\n    \"html\": `\n    <html>\n        <body>\n            <p></p>\n            <p><b>FLOW NAME:</b> ${env.get(\"NR_FLOW_NAME\")} <b>FLOW ID:</b> ${env.get(\"NR_FLOW_ID\")} <b>PATH:</b> ${env.get(\"NR_NODE_PATH\")}</p>\n            <p>${msg.error.message}</p>\n            <p>Name: ${msg.error.source.name} - Type: ${msg.error.source.type}</p>\n            <p>Stacktrace: ${msg.error.stack}</p>\n        </body>\n    </html>`,\n    \"priority\": \"high\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1260,
        "wires": [
            [
                "4bddecae21c4e080"
            ]
        ]
    },
    {
        "id": "4bddecae21c4e080",
        "type": "http request",
        "z": "f40935e17e5fc0c9",
        "name": "sendEmail",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 690,
        "y": 1260,
        "wires": [
            [
                "6b4ff98d743754ff"
            ]
        ],
        "info": "Get bank product config id"
    },
    {
        "id": "07fc5b2e11d06d28",
        "type": "status",
        "z": "f40935e17e5fc0c9",
        "name": "",
        "scope": null,
        "x": 240,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "3fc8637fd40e462a",
        "type": "comment",
        "z": "f40935e17e5fc0c9",
        "name": "Repayment File - Once a day 7 pm",
        "info": "",
        "x": 460,
        "y": 80,
        "wires": []
    },
    {
        "id": "adaff91fcd5ece9a",
        "type": "inject",
        "z": "f40935e17e5fc0c9",
        "name": "7PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 15 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 490,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "82e7b24134f2bd8c",
        "type": "function",
        "z": "f40935e17e5fc0c9",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst AXIS_BANK_ADMIN_EMAIL = env.get('MSL_BANK_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": AXIS_BANK_ADMIN_EMAIL,\n    \"password\": PASSWORD\n};\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 40,
        "wires": [
            [
                "e0386893aab95e46"
            ]
        ]
    },
    {
        "id": "30f0f9ac5fd2bd74",
        "type": "function",
        "z": "f40935e17e5fc0c9",
        "name": "set Bank Token",
        "func": "flow.set('bank_token', msg.payload.idToken);\n\nmsg.bank_token = msg.payload.idToken\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 40,
        "wires": [
            [
                "72d8d578874b67f0"
            ]
        ]
    },
    {
        "id": "72d8d578874b67f0",
        "type": "function",
        "z": "f40935e17e5fc0c9",
        "name": "getMSLBankReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_KEY = env.get(\"MSL_BANK_KEY\")\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank/key/${BANK_KEY}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 140,
        "wires": [
            [
                "bb66c2178c45b67b"
            ]
        ]
    },
    {
        "id": "3d541e6919671412",
        "type": "function",
        "z": "f40935e17e5fc0c9",
        "name": "Save MSL Bank ID",
        "func": "const bankId = msg.payload?._id\n\nmsg.bankId = bankId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 140,
        "wires": [
            [
                "722171c78f8ad9e6"
            ]
        ]
    },
    {
        "id": "722171c78f8ad9e6",
        "type": "function",
        "z": "f40935e17e5fc0c9",
        "name": "getAxisBankReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_KEY = env.get(\"AXIS_BANK_KEY\")\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank/key/${BANK_KEY}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 240,
        "wires": [
            [
                "eb0236a04ba20ca6"
            ]
        ]
    },
    {
        "id": "ebd55af203a38424",
        "type": "function",
        "z": "f40935e17e5fc0c9",
        "name": "Save Axis Bank ID",
        "func": "const bankId = msg.payload?._id\n\nmsg.axisBankId = bankId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 240,
        "wires": [
            [
                "8a61fc186152b225",
                "b2c0f3c954d7d726"
            ]
        ]
    },
    {
        "id": "3ca7015596d6d1ad",
        "type": "function",
        "z": "f40935e17e5fc0c9",
        "name": "setRemotePath",
        "func": "msg.filename = msg.payload[0].split('.')[0] // filename without extension\n\nconst folderPath = msg.payload[0].split(\"/\")\nconst fileName = folderPath[folderPath.length - 1]\nflow.set('filename', fileName) // filename with extension\n\n// msg.filepath = `/Users/ramu/Desktop/node-red/${fileName}`\nmsg.successPath = `${env.get(\"SFTP_SUCCESS_FOLDER\")}`\nmsg.localPath = `${env.get(\"LOCAL_PATH\")}/${fileName}`\nmsg.remotePath = `${env.get(\"REMOTE_PATH_OUT\")}/${fileName}`\n\nmsg.filename = msg.localPath\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 380,
        "wires": [
            [
                "33ede3b7b22788bb"
            ]
        ]
    },
    {
        "id": "575356a3552c5630",
        "type": "debug",
        "z": "f40935e17e5fc0c9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 280,
        "wires": []
    },
    {
        "id": "8a61fc186152b225",
        "type": "debug",
        "z": "f40935e17e5fc0c9",
        "name": "All tokens and Id's",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 240,
        "wires": []
    },
    {
        "id": "3e82ecaa323adad8",
        "type": "debug",
        "z": "f40935e17e5fc0c9",
        "name": "CreateLoanPaymentRequest",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 880,
        "wires": []
    },
    {
        "id": "f8e6807aa8a018d0",
        "type": "debug",
        "z": "f40935e17e5fc0c9",
        "name": "CreateLoanPaymentReq",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1120,
        "wires": []
    },
    {
        "id": "ac782fcde8133d1e",
        "type": "inject",
        "z": "f40935e17e5fc0c9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1480,
        "y": 80,
        "wires": [
            [
                "701fa16234032828"
            ]
        ]
    },
    {
        "id": "3bc6436cb2c2b5b6",
        "type": "function",
        "z": "f40935e17e5fc0c9",
        "name": "callDailyLedgerSP",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nmsg.url = `${PAYLATER_URL}/v1/daily-ledger/refreshCashAppDailyLedgerSP`\nmsg.method = 'POST'\nconst token = flow.get(\"actyv_token\")\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = \"6454a70c713a4168ca1362d0\"\n\nmsg.payload = {\n     \"transactionDate\": \"2023-02-01\",\n     \"bankID\": \"63da88d30f3330f1ad09e175\"\n     // \"enterpriseID\": \"string\",\n     // \"borrowerID\": \"63a3ded6a4f0cc6a4565a32f\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 140,
        "wires": [
            [
                "5d1bd01db1b55d0f"
            ]
        ]
    },
    {
        "id": "701fa16234032828",
        "type": "function",
        "z": "f40935e17e5fc0c9",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst ACTYV_ENTITY_EMAIL = \"darkhorse1@gmail.com\"\nconst PASSWORD = \"890ioP@darkhorse\"\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": ACTYV_ENTITY_EMAIL,\n    \"password\": PASSWORD\n};\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 80,
        "wires": [
            [
                "8ab9a9b8e7506c11"
            ]
        ]
    },
    {
        "id": "ba59efaa005f6226",
        "type": "function",
        "z": "f40935e17e5fc0c9",
        "name": "set Bank Token",
        "func": "flow.set('actyv_token', msg.payload.idToken);\n\nmsg.actyv_token = msg.payload.idToken\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 80,
        "wires": [
            [
                "3bc6436cb2c2b5b6"
            ]
        ]
    },
    {
        "id": "c0019394f5cffc8c",
        "type": "debug",
        "z": "f40935e17e5fc0c9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 140,
        "wires": []
    },
    {
        "id": "e0386893aab95e46",
        "type": "subflow:0cbd918f05921aae",
        "z": "f40935e17e5fc0c9",
        "name": "",
        "x": 930,
        "y": 40,
        "wires": [
            [
                "30f0f9ac5fd2bd74"
            ],
            []
        ]
    },
    {
        "id": "bb66c2178c45b67b",
        "type": "subflow:0cbd918f05921aae",
        "z": "f40935e17e5fc0c9",
        "name": "getMSLBankReq",
        "x": 950,
        "y": 140,
        "wires": [
            [
                "3d541e6919671412"
            ],
            []
        ]
    },
    {
        "id": "eb0236a04ba20ca6",
        "type": "subflow:0cbd918f05921aae",
        "z": "f40935e17e5fc0c9",
        "name": "getAxisBankReq",
        "x": 950,
        "y": 240,
        "wires": [
            [
                "ebd55af203a38424"
            ],
            []
        ]
    },
    {
        "id": "a9286ee186d0fb5c",
        "type": "subflow:951a533bb3498fe6",
        "z": "f40935e17e5fc0c9",
        "name": "",
        "x": 400,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "ec29693892a469b7",
        "type": "subflow:0cbd918f05921aae",
        "z": "f40935e17e5fc0c9",
        "name": "",
        "x": 450,
        "y": 1020,
        "wires": [
            [
                "7ce9fc340ea6121e"
            ],
            [
                "7ce9fc340ea6121e"
            ]
        ]
    },
    {
        "id": "7ce9fc340ea6121e",
        "type": "subflow:951a533bb3498fe6",
        "z": "f40935e17e5fc0c9",
        "name": "",
        "x": 580,
        "y": 1020,
        "wires": [
            [
                "aee1c34897e6ef4c",
                "93f2286550dd768c"
            ]
        ]
    },
    {
        "id": "35b74f8b49d75c1d",
        "type": "subflow:0cbd918f05921aae",
        "z": "f40935e17e5fc0c9",
        "name": "createLoanPayment",
        "x": 1200,
        "y": 980,
        "wires": [
            [
                "3cfacf46c86420f3"
            ],
            [
                "3cfacf46c86420f3"
            ]
        ]
    },
    {
        "id": "35d2f73dd8669a15",
        "type": "subflow:0cbd918f05921aae",
        "z": "f40935e17e5fc0c9",
        "name": "createLoanPayment",
        "x": 1200,
        "y": 1060,
        "wires": [
            [
                "0b3a7c13b837a122"
            ],
            [
                "0b3a7c13b837a122"
            ]
        ]
    },
    {
        "id": "8ab9a9b8e7506c11",
        "type": "subflow:0cbd918f05921aae",
        "z": "f40935e17e5fc0c9",
        "name": "",
        "x": 1830,
        "y": 80,
        "wires": [
            [
                "ba59efaa005f6226"
            ],
            []
        ]
    },
    {
        "id": "5d1bd01db1b55d0f",
        "type": "subflow:0cbd918f05921aae",
        "z": "f40935e17e5fc0c9",
        "name": "",
        "x": 1890,
        "y": 140,
        "wires": [
            [
                "c0019394f5cffc8c"
            ],
            []
        ]
    },
    {
        "id": "40af8fc35354db99",
        "type": "SFTP-main",
        "z": "cdaff48bc60630c8",
        "path": "/",
        "method": "list",
        "remoteFilePath": "/sftpdir/invoices",
        "remoteFilePathType": "str",
        "localFilePath": "C:\\Users\\Ayush Rarg\\OneDrive - actyv.ai\\Desktop\\node-red",
        "localFilePathType": "str",
        "server": "8713902662c7b8a4",
        "outputs": 1,
        "debug": false,
        "name": "lisitng the files from sftp",
        "x": 290,
        "y": 720,
        "wires": [
            [
                "87170c13eac04357"
            ]
        ]
    },
    {
        "id": "9f7572e988b466fd",
        "type": "SFTP-main",
        "z": "cdaff48bc60630c8",
        "path": "/",
        "method": "get",
        "remoteFilePath": "payload",
        "remoteFilePathType": "msg",
        "localFilePath": "LOCAL_PATH",
        "localFilePathType": "env",
        "server": "8713902662c7b8a4",
        "outputs": 1,
        "debug": false,
        "name": "get a single file from sftp",
        "x": 750,
        "y": 720,
        "wires": [
            [
                "638a8089bc611742",
                "d7d93e1a9f417239"
            ]
        ]
    },
    {
        "id": "6eacd90f423f6f40",
        "type": "file in",
        "z": "cdaff48bc60630c8",
        "name": "",
        "filename": "filename",
        "format": "stream",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 1174.999984741211,
        "y": 694.9999980926514,
        "wires": [
            [
                "cfb9763cfab2fa61"
            ]
        ]
    },
    {
        "id": "d7d93e1a9f417239",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "setFilename",
        "func": "const folderPath = msg.payload[0].split(\"/\")\nconst fileName = folderPath[folderPath.length - 1]\nflow.set('filename', fileName)\nmsg.filename = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1014.9999847412109,
        "y": 694.9999980926514,
        "wires": [
            [
                "6eacd90f423f6f40"
            ]
        ]
    },
    {
        "id": "cfb9763cfab2fa61",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "getFilename",
        "func": "msg.filename = flow.get(\"filename\") || \"test.xlsx\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1354.999984741211,
        "y": 694.9999980926514,
        "wires": [
            [
                "e6ad2ccccd240c19"
            ]
        ]
    },
    {
        "id": "7ed58ebf600bf569",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "getConfig",
        "func": "const filename = flow.get(\"filename\") || \"sample.xlsx\"\n// const s3Url = `https://nodered-test.s3.ap-northeast-1.amazonaws.com/${filename}`\nconst s3Url = `https://actyv-test-bucket.s3.amazonaws.com/ftpFiles/${filename}`\n\n// Assign filename and s3Url to flow variables\nflow.set(\"filename\",filename)\nflow.set(\"s3Url\",s3Url)\n\nmsg.filename = filename;\nmsg.s3Url = s3Url;\nmsg.filepath = `/home/ec2-user/data/${filename}`\n\nconst PAYLATER_URL = env.get(\"PAYLATER_URL\")\nconst CONFIG_KEY = env.get(\"CKPL_CONFIG_KEY\")\n\nmsg.url = `${PAYLATER_URL}/v1/configuration/config-key/${CONFIG_KEY}`\nmsg.method = \"GET\"\nconst token = flow.get(\"actyvToken\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\n\nmsg.logger = `Get config for ${CONFIG_KEY}`\n\nreturn msg;\n\n// Right now don't check the file present in s3 or not just hardcode the path with the real file name path",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 355.00001525878906,
        "y": 985.0000019073486,
        "wires": [
            [
                "8f7243024a5a7695"
            ]
        ]
    },
    {
        "id": "867c784bfa9b9b0b",
        "type": "comment",
        "z": "cdaff48bc60630c8",
        "name": "Get s3 link using filename",
        "info": "",
        "x": 370,
        "y": 800,
        "wires": []
    },
    {
        "id": "b60865715338e5dc",
        "type": "comment",
        "z": "cdaff48bc60630c8",
        "name": "Upload to s3",
        "info": "",
        "x": 1534.999984741211,
        "y": 534.9999980926514,
        "wires": []
    },
    {
        "id": "5ae9c165307de254",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "Get env variables",
        "func": "msg.PAYLATER_URL = env.get(\"PAYLATER_URL\")\nmsg.GO_URL = env.get(\"GO_URL\")\nmsg.ADMIN_URL = env.get(\"ADMIN_URL\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 725.0000152587891,
        "y": 1105.0000019073486,
        "wires": [
            [
                "6742885b0db357c6"
            ]
        ]
    },
    {
        "id": "9841f93f6d848f2d",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "setDataSourceConfig",
        "func": "flow.set('dataSourceConfig',msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 415.00001525878906,
        "y": 1105.0000019073486,
        "wires": [
            [
                "5ae9c165307de254"
            ]
        ]
    },
    {
        "id": "6742885b0db357c6",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "dataSourceConfigReq",
        "func": "const dataSourceConfig = flow.get(\"dataSourceConfig\") || {}\nconst body = {\n    dataSourceConfigId: dataSourceConfig.id,\n    direction: dataSourceConfig.direction,\n    fileOriginalName: `${msg.filename}`,\n    fileDestinationPath: `${msg.s3Url}`,\n    isValid: true,\n    noOfRows: null,\n    parsedOn: null,\n    parseAttempts: 0,\n    parseStatus: \"ingested\",\n    statusComment: null,\n    transmissionStatus: \"pending\",\n}\nmsg.payload = body;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 955.0000152587891,
        "y": 1105.0000019073486,
        "wires": [
            [
                "6ec96454dc12a7c0",
                "35ea2c4c7f7b6024"
            ]
        ]
    },
    {
        "id": "6ec96454dc12a7c0",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "Update data source config",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1255.000015258789,
        "y": 1045.0000019073486,
        "wires": []
    },
    {
        "id": "48053be6b1beebc5",
        "type": "comment",
        "z": "cdaff48bc60630c8",
        "name": "Invoice creation",
        "info": "",
        "x": 140,
        "y": 1100,
        "wires": []
    },
    {
        "id": "ba19c730c902d934",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "getPendingFiles",
        "func": "\nconst pendingFiles = msg.payload.filter(\n    (item) =>\n        item.parseStatus == \"failure\" \n        ||\n        item.parseStatus == \"ingested\",\n);\nmsg.payload = pendingFiles;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1240,
        "wires": [
            [
                "70a12aaed0398a05",
                "93c2d66063741fec"
            ]
        ]
    },
    {
        "id": "70a12aaed0398a05",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "loopOverPendingFiles",
        "func": "// let pendingFiles = [...msg.payload]\n// for (let i = 0; i < pendingFiles.length; i++) {\n//     msg.payload = pendingFiles[i]\n//     node.send(msg);\n//     // console.log(\"\\n\\n\",\"sd\",i,\"\\n\\n\")\n// }\n\n// // return msg\n\n\nfor (let i = 0; i < msg.payload.length; i++) {\n    flow.set(\"fileId\", msg.payload[i].id)\n    node.send(msg,{payload: msg.payload[i]});\n    // console.log(\"\\n\\n\",\"sd\",i,\"\\n\\n\")\n}\n\n// return msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 1240,
        "wires": [
            [
                "327f3f3689174e07",
                "42c2ab0e19943318"
            ]
        ]
    },
    {
        "id": "42c2ab0e19943318",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "getFlowVariables",
        "func": "const s3Url = flow.get('s3Url') || \"\"\nconst filename = flow.get('filename') || \"\"\n\nconst PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst url = msg.payload.fileDestinationPath\nconst fileId = flow.get(\"fileId\") || \"\"\n// msg.fileId = \"aff9a6b8-c94c-4b2b-bef8-2150841d234d\"\nmsg.url = `${PAYLATER_URL}/v1/file/patchParsingStatus/${fileId}`\nmsg.method = 'PATCH'\nconst token = flow.get(\"actyvToken\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\nmsg.payload = {\n    \"parseStatus\": \"parsing\",\n    \"statusComment\": \"File parsed successfully from File Parser service\"\n}\n\nmsg.logger = `Update file parse status of fileId #${fileId} to \"parsing\"`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1380,
        "wires": [
            [
                "db1f05e196ec6f69"
            ]
        ]
    },
    {
        "id": "488dd1edef7b689c",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "fileParserRequest",
        "func": "msg.filename = `${env.get('LOCAL_PATH')}/${msg.filename.split(\".\").slice(0, -1).join(\".\").trimLeft()}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1380,
        "wires": [
            [
                "c61fe17a0df0cf5f"
            ]
        ]
    },
    {
        "id": "e548c725ad588831",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "getOutstandingInvoices",
        "func": "// const outstandingInvoices = msg.payload.data[\"Sheet1\"][\"valid\"]\n// msg.outstandingInvoices = outstandingInvoices\n// return msg;\n\nmsg.outstandingInvoices = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 445.00001525878906,
        "y": 1525.0000019073486,
        "wires": [
            [
                "eea56e9a7b2259af",
                "b1b9a68fb34a6953"
            ]
        ]
    },
    {
        "id": "b1b9a68fb34a6953",
        "type": "switch",
        "z": "cdaff48bc60630c8",
        "name": "",
        "property": "outstandingInvoices.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lte",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 645.0000152587891,
        "y": 1525.0000019073486,
        "wires": [
            [
                "4135b79cd241bd66"
            ],
            [
                "e3994a50c87c908b"
            ]
        ]
    },
    {
        "id": "e3994a50c87c908b",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "getDistributorByERPID",
        "func": "\nconst PAYLATER_URL = env.get('PAYLATER_URL')\n\nmsg.url = `${PAYLATER_URL}/v1/business-relationship/getByBulkDistributorERP`\nmsg.method = 'POST'\nconst token = flow.get(\"actyvToken\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\nmsg.payload = {\n    erpIDList: msg.ckplEnterpriseId \n}\n\nmsg.logger = `getDistributorsErpId by enterpriseId #${msg.ckplEnterpriseId }`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1560,
        "wires": [
            [
                "71d1dffe094dc73c"
            ]
        ]
    },
    {
        "id": "114b81ec5858d1d1",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "invoiceRawFormat",
        "func": "const sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\nconst chunkSize = 50;\nconst fileId = flow.get('fileId') || \"\"\nconst chunks = []\nfor (let i = 0; i < msg.payload.length; i += chunkSize) {\n    chunks.push(msg.payload.slice(i, i + chunkSize));\n\n    // do whatever\n}\n\n\n// chunk the large array into multiple with (100 each)\n// loop through main array [1000 -> [[100],[100],...]\n// 100 -> push into invoiceRaw and send \nif (msg.payload.length > 0) {\n    let invoiceDate;\n    let dueDate;\n    let actualDays;\n    let formatDueDate;\n    for (let i = 0; i < chunks.length; i++) {\n        const invoiceRaw = []\n        await sleep(250)\n\n        for (let j = 0; j < chunks[i].length; j++) {\n            let outstandingFile = chunks[i][j];\n            invoiceDate = sheetDateToJSDate(outstandingFile[\"Posting Date\"]);\n            dueDate = sheetDateToJSDate(outstandingFile[\"Due Date\"]);\n            // let invoiceDate = \"2023-01-28\";\n\n            var date = new Date();\n            // actualDays = addDays(0, invoiceDate)\n            // formatDueDate = `${new Date(actualDays).getDate()}-${new Date(actualDays).getMonth() + 1}-${new Date(actualDays).getFullYear()}`\n\n            fixDate({ ...outstandingFile, dueDate: formatDueDate, sytemDueDate: invoiceDate });\n            if (outstandingFile?.[\"Reference Key\"]) {\n                let rawData = {\n                    \"Company Code\": outstandingFile[\"Company Code\"],\n                    \"Account\": outstandingFile[\"Account\"],\n                    \"Posting Date\": new Date(invoiceDate)?.toISOString(),\n                    \"Due Date\": new Date(dueDate)?.toISOString(),\n                    \"Document Number\": outstandingFile[\"Document Number\"],\n                    \"Billing Document\": outstandingFile[\"Billing Document\"],\n                    \"Assignment\": outstandingFile[\"Assignment\"],\n                    \"Document Type\": outstandingFile[\"Document Type\"],\n                    \"Amount in local currency\": outstandingFile[\"Amount in local currency\"],\n                    \"Reference\": outstandingFile[\"Reference\"],\n                    \"Reference Key\": outstandingFile[\"Reference Key\"],\n                    \"Text\": outstandingFile[\"Text\"],\n                }\n                let businessID = outstandingFile[\"Company Code\"] ? msg.erpIdAndBusinessIdMapping[`CKPL${outstandingFile[\"Account\"]}`] : msg.erpIdAndBusinessIdMapping[`${outstandingFile[\"Account\"]}`]\n                invoiceRaw.push({\n                    // businessID: msg.erpIdAndBusinessIdMapping[outstandingFile.RetailerCode],\n                    businessID: businessID ?? null,\n                    enterpriseID: msg.ckplEnterpriseId,\n                    fileID: fileId,\n                    erpID: outstandingFile[\"Company Code\"] ? `CKPL${outstandingFile[\"Account\"]}` : `${outstandingFile[\"Account\"]}`,\n                    documentNo: outstandingFile[\"Reference Key\"].toString() ?? \"\",\n                    amount: outstandingFile[\"Amount in local currency\"],\n                    dueDate: new Date(dueDate)?.toISOString(),\n                    documentDate: new Date(invoiceDate)?.toISOString(),\n                    remitTo: \"\",\n                    remitAccount: \"\",\n                    paymentTerm: \"\",\n                    // rawData: JSON.parse(JSON.stringify(outstandingFile)) || {},\n                    rawData: JSON.parse(JSON.stringify(rawData)) || {},\n                })\n            }\n        }\n        console.log({ invoiceRaw })\n        node.send({\n            payload: invoiceRaw,\n            isCompleted: \"false\",\n            invoiceDate,\n            formatDueDate,\n            actualDays,\n            length: i,\n            enterpriseId: msg.enterpriseId,\n            bankId: msg.bankId\n        })\n    }\n\n}\n\n// }\n\nfunction fixDate(invoice) {\n    let tempDocDate = new Date(invoice.postingDate);\n    let tempSystemDueDate = new Date(invoice.sytemDueDate);\n    let tempDueDate = new Date(invoice.dueDate);\n\n    tempDocDate.setTime(tempDocDate.getTime() + 1000 * 60);\n    tempDocDate.setHours(0, 0, 0);\n    tempSystemDueDate.setTime(tempSystemDueDate.getTime() + 1000 * 60);\n    tempSystemDueDate.setHours(0, 0, 0);\n    tempDueDate.setTime(tempDueDate.getTime() + 1000 * 60);\n    tempDueDate.setHours(0, 0, 0);\n\n    invoice.docDate = convertToISO(tempDocDate);\n    invoice.sytemDueDate = convertToISO(tempSystemDueDate);\n    invoice.dueDate = convertToISO(tempDueDate);\n}\n\nfunction convertToISO(date) {\n    return (\n        date.getFullYear() +\n        \"-\" +\n        (date.getMonth() + 1) +\n        \"-\" +\n        date.getDate() +\n        \" 00:00:00.000+00\"\n    );\n}\n\nfunction sliceIntoChunks(arr, chunkSize) {\n    const res = [];\n\n    for (let k = 0; k < arr.length; k += chunkSize) {\n        const chunk = arr.slice(k, k + chunkSize);\n        res.push(chunk);\n    }\n\n    return res;\n};\n\nfunction addDays(days, invoiceDate) {\n    var date = new Date(invoiceDate);\n    date.setDate(date.getDate() + days);\n    return date;\n}\n\nfunction formatDates(inputDate) {\n    const date = inputDate\n    const [day, month, year] = date.toString()?.split(\"/\")\n    const result = new Date(year, month - 1, day).toLocaleDateString('en-GB');\n    return result.split(\"/\").reverse().join(\"-\")\n}\n\nfunction sheetDateToJSDate(n) {\n    // const d = new Date(1899, 11, 30)\n    const d = new Date(1899, 11, 30)\n    d.setDate(d.getDate() + n)\n    // Rounds milliseconds to seconds\n    d.setSeconds(d.getSeconds() + Math.round(d.getMilliseconds() / 1000))\n    d.setMilliseconds(0)\n    // return `${d.getDate()}-${d.getMonth() + 1}-${d.getFullYear()}`\n    return `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`\n}\n\nmsg.isCompleted = \"true\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 605.0000152587891,
        "y": 1965.0000019073486,
        "wires": [
            [
                "7be3caf875d9f06c",
                "471785ebf565d072"
            ]
        ]
    },
    {
        "id": "ab32bdadf2bfb5d7",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "addInvoiceBulk",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${PAYLATER_URL}/v1/invoice-raw/service/bulk-insert`\nmsg.method = 'POST'\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = {\n invoiceRawDataArray: msg.payload\n}\n\nmsg.logger = `Add invoice bulk`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1275.000015258789,
        "y": 1765.0000019073486,
        "wires": [
            [
                "4daac17875cf01a4",
                "8307616a669f6efe"
            ]
        ]
    },
    {
        "id": "c6430ce3b7ded194",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "totalInvoices",
        "func": "let totalInvoiceRawInserted = {};\ntotalInvoiceRawInserted = {\n    ...totalInvoiceRawInserted,\n    ...msg.payload,\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 1880,
        "wires": [
            [
                "6299babf02d6398c"
            ]
        ]
    },
    {
        "id": "6299babf02d6398c",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "updateFileParsingStatus",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst fileId = flow.get(\"fileId\") || \"\";\n\nmsg.url = `${PAYLATER_URL}/v1/file/patchParsingStatus/${fileId}`\nmsg.method = 'PATCH'\nconst token = flow.get(\"actyvToken\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\nmsg.payload = {\n    \"parseStatus\": \"aggregated\",\n    \"statusComment\": \"File parsed successfully from File Parser service\"\n}\n\nmsg.logger = `Update file parse status of fileId #${fileId} to `\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 1880,
        "wires": [
            [
                "fe809e839658709a"
            ]
        ]
    },
    {
        "id": "4135b79cd241bd66",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "updateFileParsingStatus",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nmsg.url = `${PAYLATER_URL}/v1/file/patchParsingStatus/${msg.fileId}`\nmsg.method = 'PATCH'\nconst token = flow.get(\"actyvToken\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\nmsg.payload = {\n    \"parseStatus\": \"ingested\",\n    \"statusComment\": \"File parsed successfully from File Parser service\"\n}\n\nmsg.logger = `Update file parsing status of fileId ${msg.fileId} to \"ingested\"`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1480,
        "wires": [
            [
                "dabe5f65f74cf1cb"
            ]
        ]
    },
    {
        "id": "dbd2193a4819c3e4",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "callCopyInvoiceSP",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst fileId =flow.get('fileId') || \"\"\n\nmsg.url = `${PAYLATER_URL}/v1/invoice-raw/copy-invoices-sp/${fileId}`\nmsg.method = 'POST'\nconst token = flow.get(\"actyvToken\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 2040,
        "wires": [
            [
                "7c57704673ddefd4"
            ]
        ]
    },
    {
        "id": "86b69392bdf006b8",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "updatePreviousInvoicesToPaid",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\nconst BP_TYPE = \"DISTRIBUTOR\"\n\n\nconst fileId = flow.get('fileId') || \"\"\n\nmsg.url = `${PAYLATER_URL}/v1/invoices/service/status/${fileId}`\nmsg.method = 'PATCH'\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n\nmsg.logger = `update Previous Invoices To Paid`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 2120,
        "wires": [
            [
                "c421197750f0fa15"
            ]
        ]
    },
    {
        "id": "0d2944e8d8039ed9",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "erpIdAndBusinessIdMapping",
        "func": "msg.erpIdAndBusinessIdMapping = msg.payload\nmsg.payload = msg.outstandingInvoices\nreturn msg;\n\n// Response Type\n// {\n//   \"101104\": \"635f8ebfd988fd7c1800d8c9\"\n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 235.00001525878906,
        "y": 1965.0000019073486,
        "wires": [
            [
                "114b81ec5858d1d1",
                "65a6ccde1aa0f125"
            ]
        ]
    },
    {
        "id": "0ced6e799b814d4b",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2150,
        "y": 1960,
        "wires": []
    },
    {
        "id": "7be3caf875d9f06c",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "invoiceRawFormat",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 605.0000152587891,
        "y": 2025.0000019073486,
        "wires": []
    },
    {
        "id": "471785ebf565d072",
        "type": "switch",
        "z": "cdaff48bc60630c8",
        "name": "",
        "property": "isCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 845.0000152587891,
        "y": 1965.0000019073486,
        "wires": [
            [
                "ab32bdadf2bfb5d7",
                "950f48bbdcda9415"
            ],
            [
                "c6430ce3b7ded194",
                "fa5b938c8bc827c7"
            ]
        ]
    },
    {
        "id": "ef5e7e6a603bd48b",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "debug 54",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2320,
        "y": 340,
        "wires": []
    },
    {
        "id": "ebb1a233d9417749",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "function 14",
        "func": "console.log(\"S3 Events\",msg)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "cc827507e3b19d45",
        "type": "comment",
        "z": "cdaff48bc60630c8",
        "name": "Listen events from s3",
        "info": "",
        "x": 1980,
        "y": 280,
        "wires": []
    },
    {
        "id": "c61fe17a0df0cf5f",
        "type": "alafile in",
        "z": "cdaff48bc60630c8",
        "name": "",
        "filename": "",
        "format": "xlsx",
        "columns": "*",
        "headers": true,
        "x": 225.00001525878906,
        "y": 1525.0000019073486,
        "wires": [
            [
                "e548c725ad588831"
            ]
        ]
    },
    {
        "id": "9ac8612ce8532953",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "Update file parsing status to ingested",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 1480,
        "wires": []
    },
    {
        "id": "285f310729763707",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "Add invoice bulk",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 1840,
        "wires": []
    },
    {
        "id": "35ea2c4c7f7b6024",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "createFileReq",
        "func": "\nconst PAYLATER_URL = env.get(\"PAYLATER_URL\")\n\nmsg.url = `${PAYLATER_URL}/v1/file`\nmsg.method = \"POST\"\nconst token = flow.get(\"actyvToken\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\n\nmsg.logger = `Create file request`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 1100,
        "wires": [
            [
                "21f154ebd9f3457e",
                "5dab5da1da8f8b1a"
            ]
        ]
    },
    {
        "id": "c940ce9213f06ecc",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "getFileByConfigKeyReq",
        "func": "\nconst PAYLATER_URL = env.get(\"PAYLATER_URL\")\nconst CONFIG_KEY = env.get(\"CKPL_CONFIG_KEY\")\n\nmsg.url = `${PAYLATER_URL}/v1/file/config-key/${CONFIG_KEY}`\nmsg.method = \"GET\"\nconst token = flow.get(\"actyvToken\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"actyventityid\"] = msg.actyvEntityId\n\nmsg.logger = `Get file by config key #${CONFIG_KEY}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1240,
        "wires": [
            [
                "eec43f3537ba7c40"
            ]
        ]
    },
    {
        "id": "87170c13eac04357",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "getSingleFilename",
        "func": "\nconst files = msg.payload\nlet file;\nif (files.length > 0) {\n    file = files[0]\n}\nconst fileName = file.split(\".\")[-1]\n\n// msg.payload =  [file]\nmsg.payload = [`/sftpdir/invoices/act 16th may to 18th may.xlsx`]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 720,
        "wires": [
            [
                "9f7572e988b466fd"
            ]
        ]
    },
    {
        "id": "4372be7bef9c7fa0",
        "type": "inject",
        "z": "cdaff48bc60630c8",
        "name": "Every 10 minutes",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1150,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "eea56e9a7b2259af",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 565.0000152587891,
        "y": 1625.0000019073486,
        "wires": []
    },
    {
        "id": "01eb72ec5789c27d",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 1520,
        "wires": []
    },
    {
        "id": "65a6ccde1aa0f125",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "erpIdAndBusinessIdMapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 495.00001525878906,
        "y": 1905.0000019073486,
        "wires": []
    },
    {
        "id": "ee827560941d29b4",
        "type": "inject",
        "z": "cdaff48bc60630c8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 975.0000152587891,
        "y": 2065.0000019073486,
        "wires": [
            [
                "dbd2193a4819c3e4"
            ]
        ]
    },
    {
        "id": "db175334fe5b2204",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "sleep",
        "func": "const sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\nawait sleep(5000)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1565.000015258789,
        "y": 1965.0000019073486,
        "wires": [
            [
                "dbd2193a4819c3e4"
            ]
        ]
    },
    {
        "id": "eaa27472c3ac5991",
        "type": "comment",
        "z": "cdaff48bc60630c8",
        "name": "Move file to failure folder",
        "info": "Send an email if any error occurs",
        "x": 490,
        "y": 2760,
        "wires": []
    },
    {
        "id": "ecdc60162eb225fe",
        "type": "catch",
        "z": "cdaff48bc60630c8",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 440,
        "y": 2820,
        "wires": [
            []
        ]
    },
    {
        "id": "638a8089bc611742",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "setRemotePath",
        "func": "msg.filename = msg.payload[0].split(\".\").slice(0, -1).join(\".\") // filename without extension\n\nconst folderPath = msg.payload[0].split(\"/\")\nconst fileName = folderPath[folderPath.length - 1]\nflow.set('filename', fileName) // filename with extension\nglobal.set('filename', fileName) // filename with extension\n\n// msg.filepath = `/Users/ramu/Desktop/node-red/${fileName}`\nmsg.successPath = `${env.get(\"SFTP_SUCCESS_FOLDER\")}`\nmsg.localPath = `${env.get(\"LOCAL_PATH\")}/${fileName}`\nmsg.remotePath = `${env.get(\"REMOTE_PATH_OUT\")}/${fileName}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 840,
        "wires": [
            [
                "7ed58ebf600bf569"
            ]
        ]
    },
    {
        "id": "1762a9f8d41c8e49",
        "type": "SFTP-main",
        "z": "cdaff48bc60630c8",
        "path": "/",
        "method": "put",
        "remoteFilePath": "failurePath",
        "remoteFilePathType": "msg",
        "localFilePath": "localPath",
        "localFilePathType": "msg",
        "server": "8713902662c7b8a4",
        "outputs": 1,
        "debug": false,
        "name": "move to failure folder",
        "x": 840,
        "y": 2820,
        "wires": [
            [
                "13d3250b72f7eccd"
            ]
        ]
    },
    {
        "id": "25dee82625a8390a",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "Deleted file from SFTP existing directory",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 2920,
        "wires": []
    },
    {
        "id": "13d3250b72f7eccd",
        "type": "SFTP-main",
        "z": "cdaff48bc60630c8",
        "path": "/",
        "method": "delete",
        "remoteFilePath": "remotePath",
        "remoteFilePathType": "msg",
        "localFilePath": "filepath",
        "localFilePathType": "msg",
        "server": "8713902662c7b8a4",
        "outputs": 1,
        "debug": false,
        "name": "delete from existing folder",
        "x": 510,
        "y": 2920,
        "wires": [
            [
                "25dee82625a8390a"
            ]
        ]
    },
    {
        "id": "77c7661b13ab7a09",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "setRemotePath",
        "func": "const fileName = global.get('filename') // filename with extension\n\nmsg.failurePath = `${env.get(\"SFTP_FAILURE_FOLDER\")}`\nmsg.localPath = `${env.get(\"LOCAL_PATH\")}/${fileName}`\nmsg.remotePath = `${env.get(\"REMOTE_PATH_OUT\")}/${fileName}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 2820,
        "wires": [
            [
                "6a4c3774616b7965",
                "1762a9f8d41c8e49"
            ]
        ]
    },
    {
        "id": "6a4c3774616b7965",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "debug 57",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 2740,
        "wires": []
    },
    {
        "id": "4f07ba372b212d09",
        "type": "comment",
        "z": "cdaff48bc60630c8",
        "name": "Error handling",
        "info": "Send an email if any error occurs",
        "x": 410,
        "y": 3140,
        "wires": []
    },
    {
        "id": "caa90e6310b16184",
        "type": "catch",
        "z": "cdaff48bc60630c8",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 400,
        "y": 3200,
        "wires": [
            []
        ]
    },
    {
        "id": "eac54a890e025812",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "error",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 3200,
        "wires": []
    },
    {
        "id": "0490b8206cc01fa0",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "sendEmailReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\n\nmsg.payload = {\n    // \"from\": \"ramu.bugudi@actyv.com\",\n    \"from\": \"shravan.pm@actyv.com\",\n    \"to\": \"ramu.bugudi@actyv.com\",\n    \"subject\": `Error occured - ${msg.error.message}`,\n    // \"html\": `${msg.error}`,\n    \"html\": `\n    <html>\n        <body>\n            <p></p>\n            <p><b>FLOW NAME:</b> ${env.get(\"NR_FLOW_NAME\")} <b>FLOW ID:</b> ${env.get(\"NR_FLOW_ID\")} <b>PATH:</b> ${env.get(\"NR_NODE_PATH\")}</p>\n            <p>${msg.error.message}</p>\n            <p>Name: ${msg.error.source.name} - Type: ${msg.error.source.type}</p>\n            <p>Stacktrace: ${msg.error.stack}</p>\n        </body>\n    </html>`,\n    \"priority\": \"high\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 3200,
        "wires": [
            [
                "e61d6c8990772465"
            ]
        ]
    },
    {
        "id": "e61d6c8990772465",
        "type": "http request",
        "z": "cdaff48bc60630c8",
        "name": "sendEmail",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 850,
        "y": 3200,
        "wires": [
            [
                "eac54a890e025812"
            ]
        ],
        "info": "Get bank product config id"
    },
    {
        "id": "327f3f3689174e07",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 265.00001525878906,
        "y": 1305.0000019073486,
        "wires": []
    },
    {
        "id": "5c7293e20bae0dc3",
        "type": "comment",
        "z": "cdaff48bc60630c8",
        "name": "Delete from local folder aswell",
        "info": "Send an email if any error occurs",
        "x": 1140,
        "y": 2860,
        "wires": []
    },
    {
        "id": "19be37579eb2d379",
        "type": "amazon s3 in",
        "z": "cdaff48bc60630c8",
        "aws": "5d210162c7877d54",
        "bucket": "actyv-test-bucket",
        "region": "ap-south-1",
        "filepattern": "*.*",
        "name": "",
        "x": 1970,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "e6ad2ccccd240c19",
        "type": "amazon s3 out",
        "z": "cdaff48bc60630c8",
        "aws": "5d210162c7877d54",
        "bucket": "actyv-test-bucket",
        "filename": "",
        "localFilename": "",
        "region": "ap-south-1",
        "name": "Upload to s3",
        "x": 1564.999984741211,
        "y": 694.9999980926514,
        "wires": []
    },
    {
        "id": "e267aafc3fc29d43",
        "type": "inject",
        "z": "cdaff48bc60630c8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 540,
        "y": 40,
        "wires": [
            [
                "ee518161f9122706"
            ]
        ]
    },
    {
        "id": "3eaa1f370791ad4e",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 40,
        "wires": []
    },
    {
        "id": "ee518161f9122706",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst PAYLATER_URL = env.get('PAYLATER_URL')\nconst GO_URL = env.get('GO_URL')\nconst ENTERPRISE_EMAIL = env.get('APL_PIPES_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst CONFIG_KEY = env.get('CONFIG_KEY')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\nconst MSL_BANK_ADMIN_EMAIL = env.get('MSL_BANK_ADMIN_EMAIL')\nconst MSL_BANK_KEY = env.get('MSL_BANK_KEY')\nconst CKPL_CONFIG_KEY = env.get('CKPL_CONFIG_KEY')\nconst AXIS_BANK_KEY = env.get('AXIS_BANK_KEY')\n\nmsg.payload = {\n    ADMIN_URL, PAYLATER_URL, GO_URL,\n    ENTERPRISE_EMAIL,\n    PASSWORD,\n    CONFIG_KEY,\n    X_ACTYV_API_CONFIG_KEY,\n    MSL_BANK_ADMIN_EMAIL,\n    MSL_BANK_KEY,\n    CKPL_CONFIG_KEY,\n    AXIS_BANK_KEY\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 40,
        "wires": [
            [
                "3eaa1f370791ad4e"
            ]
        ]
    },
    {
        "id": "fe6b7ce70a04c141",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "getFileName",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 825.0000152587891,
        "y": 985.0000019073486,
        "wires": []
    },
    {
        "id": "49d3e7c37ae56e66",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "createFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 1100,
        "wires": []
    },
    {
        "id": "bc3ba6ad61786216",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "updateFileParsingStatus",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 1340,
        "wires": []
    },
    {
        "id": "950f48bbdcda9415",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "Switch False",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 925.0000152587891,
        "y": 1865.0000019073486,
        "wires": []
    },
    {
        "id": "fa5b938c8bc827c7",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "Switch True",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 945.0000152587891,
        "y": 2025.0000019073486,
        "wires": []
    },
    {
        "id": "93c2d66063741fec",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "getFileByConfigKey",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1105.000015258789,
        "y": 1205.0000019073486,
        "wires": []
    },
    {
        "id": "4daac17875cf01a4",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "Add invoice bulk req",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 1680,
        "wires": []
    },
    {
        "id": "21f154ebd9f3457e",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "createFile Req",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1540,
        "y": 1040,
        "wires": []
    },
    {
        "id": "3a07ac831fe2bad5",
        "type": "SFTP-main",
        "z": "cdaff48bc60630c8",
        "path": "/",
        "method": "put",
        "remoteFilePath": "/sftpdir/success",
        "remoteFilePathType": "str",
        "localFilePath": "localPath",
        "localFilePathType": "msg",
        "server": "8713902662c7b8a4",
        "outputs": 1,
        "debug": false,
        "name": "move to success folder",
        "x": 1290,
        "y": 2220,
        "wires": [
            [
                "739f0293da1246be"
            ]
        ]
    },
    {
        "id": "739f0293da1246be",
        "type": "SFTP-main",
        "z": "cdaff48bc60630c8",
        "path": "/",
        "method": "delete",
        "remoteFilePath": "remotePath",
        "remoteFilePathType": "msg",
        "localFilePath": "filepath",
        "localFilePathType": "msg",
        "server": "8713902662c7b8a4",
        "outputs": 1,
        "debug": false,
        "name": "delete from existing folder",
        "x": 1570,
        "y": 2220,
        "wires": [
            [
                "50c4052e68679f64"
            ]
        ]
    },
    {
        "id": "50c4052e68679f64",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "Deleted file from SFTP existing directory",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1880,
        "y": 2220,
        "wires": []
    },
    {
        "id": "f15a024b9dc1ce86",
        "type": "inject",
        "z": "cdaff48bc60630c8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 140,
        "wires": [
            [
                "312cb3c2a27d0246",
                "869a1d4ecce5f926"
            ]
        ]
    },
    {
        "id": "9cf6507e35ef57de",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "getEnterpriseReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst BUSINESS_UNIQUE_IDENTIFIER = env.get(\"APL_BUSINESS_UNIQUE_IDENTIFIER\")\nconst BUSINESS_TYPE = \"ENTERPRISE\"\nmsg.headers = {}\nmsg.method = \"GET\"\nconst token = flow.get(\"ent_token\") || \"\"\nmsg.url = `${PAYLATER_URL}/v1/business/service/getByIdentifier/${BUSINESS_UNIQUE_IDENTIFIER}/${BUSINESS_TYPE}`;\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n// msg.headers[\"Authorization\"] = `Bearer ${token}`\n\nmsg.logger = `Get enterpriseId by #${BUSINESS_UNIQUE_IDENTIFIER}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 360,
        "wires": [
            [
                "a5b7ebb6b2a1d128"
            ]
        ]
    },
    {
        "id": "625e01ad831cbba0",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "Save Enterprise ID",
        "func": "const enterpriseId = msg.payload?.id\n\nmsg.enterpriseId = enterpriseId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "a604d6b5aeaff1c7",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\n// const ENTERPRISE_EMAIL = env.get('APL_ENTERPRISE_ADMIN_EMAIL')\nconst ENTERPRISE_EMAIL = \"paylater.support+apl@actyv.com\"\nconst PASSWORD = env.get('PASSWORD')\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": ENTERPRISE_EMAIL,\n    \"password\": PASSWORD\n};\n\nmsg.logger = `Authenticate Enterprise`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 180,
        "wires": [
            [
                "90c47d31727c5250"
            ]
        ]
    },
    {
        "id": "869a1d4ecce5f926",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst BANK_ADMIN_EMAIL = env.get('MSL_BANK_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": BANK_ADMIN_EMAIL,\n    \"password\": PASSWORD\n};\nmsg.loggerNewLine = true\nmsg.logger = `Authenticate bank email`\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 100,
        "wires": [
            [
                "38af8b05a7433f21"
            ]
        ]
    },
    {
        "id": "63b63b95ed6568e9",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "set Bank Token",
        "func": "flow.set('bank_token', msg.payload.idToken);\n\nmsg.bank_token = msg.payload.idToken\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 100,
        "wires": [
            [
                "a604d6b5aeaff1c7"
            ]
        ]
    },
    {
        "id": "5bab8c41be6b3bd5",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "getBankReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_KEY = env.get(\"AXIS_BANK_KEY\")\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank/key/${BANK_KEY}`;\n\nmsg.logger = `Get bankID by #${BANK_KEY}`\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 260,
        "wires": [
            [
                "3489d76b4bf13e96"
            ]
        ]
    },
    {
        "id": "a92e4e4a9ea319a5",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "Save Bank ID",
        "func": "const bankId = msg.payload?._id\nmsg.bankId = bankId\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 260,
        "wires": [
            [
                "9cf6507e35ef57de"
            ]
        ]
    },
    {
        "id": "37072cc8ed62d01c",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "getCKPLEnterpriseReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst BUSINESS_UNIQUE_IDENTIFIER = env.get(\"CKPL_BUSINESS_UNIQUE_IDENTIFIER\")\nconst BUSINESS_TYPE = \"ENTERPRISE\"\nmsg.headers = {}\nmsg.method = \"GET\"\nconst token = flow.get(\"ent_token\") || \"\"\nmsg.url = `${PAYLATER_URL}/v1/business/service/getByIdentifier/${BUSINESS_UNIQUE_IDENTIFIER}/${BUSINESS_TYPE}`;\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n// msg.headers[\"Authorization\"] = `Bearer ${token}`\n\nmsg.logger =  `Get CKPL enterprise id by business unique identifier #${BUSINESS_UNIQUE_IDENTIFIER}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 620,
        "wires": [
            [
                "9d38622a3648aae1"
            ]
        ]
    },
    {
        "id": "16c315103a94ee4e",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "Save Enterprise ID",
        "func": "const enterpriseId = msg.payload?.id\n\nmsg.ckplEnterpriseId = enterpriseId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 620,
        "wires": [
            [
                "fa8bead28066e636",
                "40af8fc35354db99"
            ]
        ]
    },
    {
        "id": "92683ccf23d5d6c3",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "debug 55",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1960,
        "y": 2040,
        "wires": []
    },
    {
        "id": "9c5f58524018bafb",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "debug 55",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2040,
        "y": 2120,
        "wires": []
    },
    {
        "id": "fa8bead28066e636",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "debug 301",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 620,
        "wires": []
    },
    {
        "id": "38af8b05a7433f21",
        "type": "subflow:0cbd918f05921aae",
        "z": "cdaff48bc60630c8",
        "name": "",
        "x": 590,
        "y": 100,
        "wires": [
            [
                "9e1ea1d1b1373f5c"
            ],
            [
                "72f6f1bcb0dd70c0"
            ]
        ]
    },
    {
        "id": "9e1ea1d1b1373f5c",
        "type": "subflow:951a533bb3498fe6",
        "z": "cdaff48bc60630c8",
        "name": "",
        "x": 720,
        "y": 80,
        "wires": [
            [
                "63b63b95ed6568e9"
            ]
        ]
    },
    {
        "id": "72f6f1bcb0dd70c0",
        "type": "subflow:951a533bb3498fe6",
        "z": "cdaff48bc60630c8",
        "name": "",
        "x": 720,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "846b9112f30082e0",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "set Enterprise Token",
        "func": "flow.set('ent_token', msg.payload.idToken);\n\nmsg.ent_token = msg.payload.idToken\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 180,
        "wires": [
            [
                "5bab8c41be6b3bd5"
            ]
        ]
    },
    {
        "id": "90c47d31727c5250",
        "type": "subflow:0cbd918f05921aae",
        "z": "cdaff48bc60630c8",
        "name": "",
        "x": 610,
        "y": 180,
        "wires": [
            [
                "25d4862411ce267f"
            ],
            [
                "fae4e9f03db3d035"
            ]
        ]
    },
    {
        "id": "25d4862411ce267f",
        "type": "subflow:951a533bb3498fe6",
        "z": "cdaff48bc60630c8",
        "name": "",
        "x": 740,
        "y": 160,
        "wires": [
            [
                "846b9112f30082e0"
            ]
        ]
    },
    {
        "id": "fae4e9f03db3d035",
        "type": "subflow:951a533bb3498fe6",
        "z": "cdaff48bc60630c8",
        "name": "",
        "x": 740,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "3489d76b4bf13e96",
        "type": "subflow:0cbd918f05921aae",
        "z": "cdaff48bc60630c8",
        "name": "",
        "x": 570,
        "y": 260,
        "wires": [
            [
                "b3287e45fb7b6d7b"
            ],
            [
                "b10fe1e276ace3bf"
            ]
        ]
    },
    {
        "id": "b3287e45fb7b6d7b",
        "type": "subflow:951a533bb3498fe6",
        "z": "cdaff48bc60630c8",
        "name": "",
        "x": 700,
        "y": 240,
        "wires": [
            [
                "a92e4e4a9ea319a5"
            ]
        ]
    },
    {
        "id": "b10fe1e276ace3bf",
        "type": "subflow:951a533bb3498fe6",
        "z": "cdaff48bc60630c8",
        "name": "",
        "x": 700,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "a5b7ebb6b2a1d128",
        "type": "subflow:0cbd918f05921aae",
        "z": "cdaff48bc60630c8",
        "name": "getEnterprise",
        "x": 610,
        "y": 360,
        "wires": [
            [
                "8ab77b5a9f724993"
            ],
            [
                "e29bcfcb24797b08"
            ]
        ]
    },
    {
        "id": "8ab77b5a9f724993",
        "type": "subflow:951a533bb3498fe6",
        "z": "cdaff48bc60630c8",
        "name": "",
        "x": 760,
        "y": 340,
        "wires": [
            [
                "625e01ad831cbba0"
            ]
        ]
    },
    {
        "id": "e29bcfcb24797b08",
        "type": "subflow:951a533bb3498fe6",
        "z": "cdaff48bc60630c8",
        "name": "",
        "x": 740,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "9d38622a3648aae1",
        "type": "subflow:0cbd918f05921aae",
        "z": "cdaff48bc60630c8",
        "name": "getEnterprise",
        "x": 590,
        "y": 620,
        "wires": [
            [
                "3c5f88499ff5c9f4"
            ],
            [
                "3c5f88499ff5c9f4"
            ]
        ]
    },
    {
        "id": "3c5f88499ff5c9f4",
        "type": "subflow:951a533bb3498fe6",
        "z": "cdaff48bc60630c8",
        "name": "",
        "x": 740,
        "y": 620,
        "wires": [
            [
                "16c315103a94ee4e"
            ]
        ]
    },
    {
        "id": "8f7243024a5a7695",
        "type": "subflow:0cbd918f05921aae",
        "z": "cdaff48bc60630c8",
        "name": "getConfig",
        "x": 500,
        "y": 980,
        "wires": [
            [
                "b754b09c73e407e4"
            ],
            [
                "b754b09c73e407e4"
            ]
        ]
    },
    {
        "id": "b754b09c73e407e4",
        "type": "subflow:951a533bb3498fe6",
        "z": "cdaff48bc60630c8",
        "name": "",
        "x": 640,
        "y": 980,
        "wires": [
            [
                "fe6b7ce70a04c141",
                "9841f93f6d848f2d"
            ]
        ]
    },
    {
        "id": "5dab5da1da8f8b1a",
        "type": "subflow:0cbd918f05921aae",
        "z": "cdaff48bc60630c8",
        "name": "",
        "x": 1410,
        "y": 1100,
        "wires": [
            [
                "042f4c7a349be85e"
            ],
            [
                "042f4c7a349be85e"
            ]
        ]
    },
    {
        "id": "042f4c7a349be85e",
        "type": "subflow:951a533bb3498fe6",
        "z": "cdaff48bc60630c8",
        "name": "",
        "x": 1540,
        "y": 1100,
        "wires": [
            [
                "49d3e7c37ae56e66",
                "c940ce9213f06ecc"
            ]
        ]
    },
    {
        "id": "d6f7770d4e34ba64",
        "type": "subflow:951a533bb3498fe6",
        "z": "cdaff48bc60630c8",
        "name": "",
        "x": 760,
        "y": 1240,
        "wires": [
            [
                "ba19c730c902d934"
            ]
        ]
    },
    {
        "id": "eec43f3537ba7c40",
        "type": "subflow:0cbd918f05921aae",
        "z": "cdaff48bc60630c8",
        "name": "getFileByConfig",
        "x": 600,
        "y": 1240,
        "wires": [
            [
                "d6f7770d4e34ba64"
            ],
            [
                "d6f7770d4e34ba64",
                "13982b01fc4e9490"
            ]
        ]
    },
    {
        "id": "db1f05e196ec6f69",
        "type": "subflow:0cbd918f05921aae",
        "z": "cdaff48bc60630c8",
        "name": "updateFileStatus",
        "x": 530,
        "y": 1380,
        "wires": [
            [
                "417b687438728871"
            ],
            [
                "417b687438728871"
            ]
        ]
    },
    {
        "id": "417b687438728871",
        "type": "subflow:951a533bb3498fe6",
        "z": "cdaff48bc60630c8",
        "name": "",
        "x": 700,
        "y": 1380,
        "wires": [
            [
                "488dd1edef7b689c",
                "bc3ba6ad61786216"
            ]
        ]
    },
    {
        "id": "dabe5f65f74cf1cb",
        "type": "subflow:0cbd918f05921aae",
        "z": "cdaff48bc60630c8",
        "name": "updateFileStatus",
        "x": 1090,
        "y": 1480,
        "wires": [
            [
                "ab77e8e07e09d845"
            ],
            [
                "ab77e8e07e09d845"
            ]
        ]
    },
    {
        "id": "ab77e8e07e09d845",
        "type": "subflow:951a533bb3498fe6",
        "z": "cdaff48bc60630c8",
        "name": "",
        "x": 1260,
        "y": 1480,
        "wires": [
            [
                "9ac8612ce8532953"
            ]
        ]
    },
    {
        "id": "71d1dffe094dc73c",
        "type": "subflow:0cbd918f05921aae",
        "z": "cdaff48bc60630c8",
        "name": "Get Distributor By ERP ID",
        "x": 1130,
        "y": 1560,
        "wires": [
            [
                "62f741bb4a37727c"
            ],
            [
                "62f741bb4a37727c"
            ]
        ]
    },
    {
        "id": "62f741bb4a37727c",
        "type": "subflow:951a533bb3498fe6",
        "z": "cdaff48bc60630c8",
        "name": "",
        "x": 1360,
        "y": 1560,
        "wires": [
            [
                "0d2944e8d8039ed9",
                "01eb72ec5789c27d"
            ]
        ]
    },
    {
        "id": "8307616a669f6efe",
        "type": "subflow:0cbd918f05921aae",
        "z": "cdaff48bc60630c8",
        "name": "addInvoiceBulk",
        "x": 1500,
        "y": 1780,
        "wires": [
            [
                "8c596cccf7f5ec55"
            ],
            [
                "8c596cccf7f5ec55"
            ]
        ]
    },
    {
        "id": "8c596cccf7f5ec55",
        "type": "subflow:951a533bb3498fe6",
        "z": "cdaff48bc60630c8",
        "name": "",
        "x": 1720,
        "y": 1780,
        "wires": [
            [
                "285f310729763707"
            ]
        ]
    },
    {
        "id": "fe809e839658709a",
        "type": "subflow:0cbd918f05921aae",
        "z": "cdaff48bc60630c8",
        "name": "Update File Parsing Status",
        "x": 1800,
        "y": 1880,
        "wires": [
            [
                "db28414a55a2bcc8"
            ],
            [
                "db28414a55a2bcc8"
            ]
        ]
    },
    {
        "id": "db28414a55a2bcc8",
        "type": "subflow:951a533bb3498fe6",
        "z": "cdaff48bc60630c8",
        "name": "",
        "x": 2020,
        "y": 1880,
        "wires": [
            [
                "0ced6e799b814d4b",
                "db175334fe5b2204"
            ]
        ]
    },
    {
        "id": "7c57704673ddefd4",
        "type": "subflow:0cbd918f05921aae",
        "z": "cdaff48bc60630c8",
        "name": "Call Copy Invoice SP",
        "x": 1520,
        "y": 2040,
        "wires": [
            [
                "deeef93606efb8b4"
            ],
            [
                "deeef93606efb8b4"
            ]
        ]
    },
    {
        "id": "deeef93606efb8b4",
        "type": "subflow:951a533bb3498fe6",
        "z": "cdaff48bc60630c8",
        "name": "",
        "x": 1720,
        "y": 2040,
        "wires": [
            [
                "86b69392bdf006b8",
                "92683ccf23d5d6c3"
            ]
        ]
    },
    {
        "id": "c421197750f0fa15",
        "type": "subflow:0cbd918f05921aae",
        "z": "cdaff48bc60630c8",
        "name": "Update File Parsing Status",
        "x": 1620,
        "y": 2120,
        "wires": [
            [
                "26847745e091dd35"
            ],
            [
                "26847745e091dd35"
            ]
        ]
    },
    {
        "id": "26847745e091dd35",
        "type": "subflow:951a533bb3498fe6",
        "z": "cdaff48bc60630c8",
        "name": "",
        "x": 1840,
        "y": 2120,
        "wires": [
            [
                "9c5f58524018bafb",
                "3a07ac831fe2bad5"
            ]
        ]
    },
    {
        "id": "cf631f6dba96f699",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "AuthenticateActyvUserReq",
        "func": "// const envVariables = global.get('envVariables')\nconst ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\nconst EMAIL = ENV_VARIABLES.ADMIN_EMAIL;\nconst PASSWORD = ENV_VARIABLES.ADMIN_PASSWORD\n\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 440,
        "wires": [
            [
                "57d0d6ed0bb3dc63"
            ]
        ]
    },
    {
        "id": "57d0d6ed0bb3dc63",
        "type": "subflow:0cbd918f05921aae",
        "z": "cdaff48bc60630c8",
        "name": "AuthenticateActyvUser",
        "x": 760,
        "y": 440,
        "wires": [
            [
                "ccea222acd6d016d"
            ],
            []
        ]
    },
    {
        "id": "ccea222acd6d016d",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 440,
        "wires": [
            [
                "504de3c235418e44"
            ]
        ]
    },
    {
        "id": "504de3c235418e44",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "getActyvEntityUser",
        "func": "\n\nconst GO_URL = env.get('GO_URL');\n\n\nmsg.url = `${GO_URL}/actyv-entity`;\nmsg.method = \"GET\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 540,
        "wires": [
            [
                "43c00bc7042c4c50"
            ]
        ]
    },
    {
        "id": "43c00bc7042c4c50",
        "type": "subflow:0cbd918f05921aae",
        "z": "cdaff48bc60630c8",
        "name": "getCurrentUser",
        "x": 600,
        "y": 540,
        "wires": [
            [
                "0cc6e4ba55914201"
            ],
            []
        ]
    },
    {
        "id": "0cc6e4ba55914201",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "Save actyv entity ID",
        "func": "const found = msg.payload.find(entity => entity.key === \"dark_horse\") ?? undefined\n\nconsole.log(found?._id)\nif (found) {\n    flow.set(\"actyvEntityId\", found?._id);\n    msg.actyvEntityId = found?._id\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 540,
        "wires": [
            [
                "37072cc8ed62d01c"
            ]
        ]
    },
    {
        "id": "312cb3c2a27d0246",
        "type": "function",
        "z": "cdaff48bc60630c8",
        "name": "Setting Global Variables",
        "func": "const ENV_VARIABLES = {\n    \"ADMIN_EMAIL\": \"darkhorse@gmail.com\",\n    \"ADMIN_PASSWORD\": \"User@123\",\n    \"ACTYV_ENTITY_URL\": \"https://actyv1-platform.uat.actyv.com\"\n}\n\nglobal.set(\"ENV_VARIABLES\", ENV_VARIABLES);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 400,
        "wires": [
            [
                "cf631f6dba96f699"
            ]
        ]
    },
    {
        "id": "13982b01fc4e9490",
        "type": "debug",
        "z": "cdaff48bc60630c8",
        "name": "debug 545",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1340,
        "wires": []
    },
    {
        "id": "3f45e9b11858072f",
        "type": "inject",
        "z": "0ffe25cc2bd52d12",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 220,
        "wires": [
            [
                "3d9bd1972c882867"
            ]
        ]
    },
    {
        "id": "8163c6b86a8c551e",
        "type": "debug",
        "z": "0ffe25cc2bd52d12",
        "name": "Pending drawdowns length",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.length",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 640,
        "wires": []
    },
    {
        "id": "9d5662a76283194b",
        "type": "function",
        "z": "0ffe25cc2bd52d12",
        "name": "getPendingDrawdownsReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst BANK_UNIQUE_IDENTIFIER = env.get('AXIS_BANK_UNIQUE_IDENTIFIER')\n\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown/send-drawdowns-to-bank/${BANK_UNIQUE_IDENTIFIER}`\nmsg.method = 'PUT'\nconst token = flow.get(\"bank_token\") || \"\"\nconsole.log({token})\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"bankid\"] = msg.bankId\n\nmsg.logger = `get pending drawdowns for #${BANK_UNIQUE_IDENTIFIER}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 520,
        "wires": [
            [
                "abbbec79cf8a784b"
            ]
        ]
    },
    {
        "id": "e8239b774252473a",
        "type": "switch",
        "z": "0ffe25cc2bd52d12",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 700,
        "wires": [
            [
                "8163c6b86a8c551e"
            ],
            [
                "e6a715f3557adef1"
            ]
        ]
    },
    {
        "id": "e6a715f3557adef1",
        "type": "function",
        "z": "0ffe25cc2bd52d12",
        "name": "setDrawdownReqFormat",
        "func": "const pendingDrawdowns = msg.payload\nconst formatPendingDrawdownsForAxis = []\nfor (let pendingDrawdown of pendingDrawdowns) {\n    formatPendingDrawdownsForAxis.push({\n        \"Dealer Code\": pendingDrawdown.loanTerm?.crnNumber || \"\",\n        \"Invoice Date\": changeDateFormat(pendingDrawdown.invoice.documentDate.split(\"T\")[0]),\n        // \"Invoice Number\": pendingDrawdown.invoice.finalInvoiceNo,\n        \"Invoice Number\": pendingDrawdown.loanDrawdown.requestUniqueCode,\n        \"Invoice Amount\": pendingDrawdown.invoice.netAmount,\n        // \"Due Date\": changeDateFormat(pendingDrawdown.invoice.dueDate.split(\"T\")[0]),\n        // \"Account No\": pendingDrawdown.businessRelationShip.bankAccountNumber || \"\",\n        \"Account No\": pendingDrawdown.loanTerm?.bankProvidedLoanCode || \"\",\n        \"Email ID\": \"\",\n        // \"Request Unique Code\": pendingDrawdown.loanDrawdown?.requestUniqueCode\n    })\n\n}\n\nfunction changeDateFormat(str) {\n    str = str.split(\"-\");\n    let res = str[2] + \"-\" + str[1] + \"-\" + str[0]\n    return res\n}\n\nmsg.payload = formatPendingDrawdownsForAxis;\nmsg.formatPendingDrawdownsForAxis = formatPendingDrawdownsForAxis\n// TODO: Follow naming of the filename as per Axis\n// const fileConvention = createFileNameForAxis()\t\n// msg.filename = `${env.get(\"LOCAL_PATH\")}/${fileConvention}`\n// msg.filename = `${env.get(\"LOCAL_PATH\")}/${fileConvention}`\n\nfunction createFileNameForAxis() {\n    const input = new Date().toISOString().split('.')\n    const modified = `${input[0].split(\":\").join(\"-\")}.txt`\n\n    return `CPLDFACT1_${modified}`\n}\n// return msg;\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nconst fileConvention = createFileNameForAxis()\n\nmsg.filename = `${env.get(\"LOCAL_PATH\")}/${fileConvention}`\n\nmsg.payload = formatPendingDrawdownsForAxis\n\n// for (let drawdown of formatPendingDrawdownsForAxis) {\n\n//     const fileConvention = createFileNameForAxis()\n\n//     node.send({\n//         ...msg,\n//         filename: `${env.get(\"LOCAL_PATH\")}/${fileConvention}`,\n//         fileConvention,\n//         payload: [drawdown]\n//     })\n//     await sleep(1500)\n// }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 800,
        "wires": [
            [
                "ee013392528c57a4",
                "88810e2bb27bedf3"
            ]
        ]
    },
    {
        "id": "4f8b9a048edd63e1",
        "type": "SFTP-main",
        "z": "0ffe25cc2bd52d12",
        "path": "/",
        "method": "put",
        "remoteFilePath": "/Convert/IN",
        "remoteFilePathType": "str",
        "localFilePath": "filename",
        "localFilePathType": "msg",
        "server": "55c08fb94e980196",
        "outputs": 1,
        "debug": false,
        "name": "Create file in SFTP drawdowns folder ",
        "x": 930,
        "y": 800,
        "wires": [
            [
                "1eed4ee0395b1b41"
            ]
        ]
    },
    {
        "id": "c0f2913f480605ad",
        "type": "function",
        "z": "0ffe25cc2bd52d12",
        "name": "updateDrawdownReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown`\nmsg.method = 'PATCH'\nconst token = flow.get(\"bank_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"bankid\"] = msg.bankId\n\nmsg.payload = {\n    requestUniqueCode: msg.payload[\"Invoice Number\"],\n    // requestUniqueCode: \"ACTY3891675257142081\",\n    drawdownStatus: 'inProgress'\n}\n\nmsg.logger = `Update drawdown request to \"inProgress`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1040,
        "wires": [
            [
                "7e0e899904689c06"
            ]
        ]
    },
    {
        "id": "897cce98d109fbec",
        "type": "function",
        "z": "0ffe25cc2bd52d12",
        "name": "updateHoldAmountReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/hold-amount`\nmsg.method = 'POST'\nmsg.payload = {\n    \"loanDetails\": [\n        {\n            \"loanID\": msg.payload.loanID,\n            \"holdAmount\": Number(msg.payload.requestAmount)\n        }\n    ],\n    \"update\": true\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1420,
        "wires": [
            [
                "4b4607f5902b8be5"
            ]
        ]
    },
    {
        "id": "4b4607f5902b8be5",
        "type": "http request",
        "z": "0ffe25cc2bd52d12",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 510,
        "y": 1420,
        "wires": [
            [
                "8b4021beddd98d0d"
            ]
        ]
    },
    {
        "id": "ee013392528c57a4",
        "type": "function",
        "z": "0ffe25cc2bd52d12",
        "name": "mapJsonFromXLSX",
        "func": "const formatPendingDrawdownsForAxis = msg.formatPendingDrawdownsForAxis\nconst sleep = async (milliseconds) => {\n        await new Promise(resolve => {\n                return setTimeout(resolve, milliseconds)\n        });\n};\n\nfor (let item of formatPendingDrawdownsForAxis) {\n        await sleep(250)\n        console.log({item})\n        node.send({...msg,payload: item})\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 940,
        "wires": [
            [
                "29b4396fed85e7dc",
                "c0f2913f480605ad"
            ]
        ]
    },
    {
        "id": "8b4021beddd98d0d",
        "type": "debug",
        "z": "0ffe25cc2bd52d12",
        "name": "Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 1420,
        "wires": []
    },
    {
        "id": "cb57717f513d8d3c",
        "type": "debug",
        "z": "0ffe25cc2bd52d12",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1100,
        "wires": []
    },
    {
        "id": "29b4396fed85e7dc",
        "type": "debug",
        "z": "0ffe25cc2bd52d12",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 940,
        "wires": []
    },
    {
        "id": "88810e2bb27bedf3",
        "type": "csv",
        "z": "0ffe25cc2bd52d12",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "Dealer Code,Account No,Invoice Date,Invoice Number,Invoice Amount,Email ID",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 530,
        "y": 800,
        "wires": [
            [
                "cd8a03cd4205e161"
            ]
        ]
    },
    {
        "id": "cd8a03cd4205e161",
        "type": "file",
        "z": "0ffe25cc2bd52d12",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 660,
        "y": 800,
        "wires": [
            [
                "4f8b9a048edd63e1"
            ]
        ]
    },
    {
        "id": "45e29bf5d43b54e8",
        "type": "comment",
        "z": "0ffe25cc2bd52d12",
        "name": "Error handling",
        "info": "Send an email if any error occurs",
        "x": 230,
        "y": 1600,
        "wires": []
    },
    {
        "id": "bb24a8ce81bc24d5",
        "type": "catch",
        "z": "0ffe25cc2bd52d12",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 220,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "68914776a4285c17",
        "type": "debug",
        "z": "0ffe25cc2bd52d12",
        "name": "error",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 1660,
        "wires": []
    },
    {
        "id": "06e84e93dec34339",
        "type": "function",
        "z": "0ffe25cc2bd52d12",
        "name": "sendEmailReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\n\nmsg.payload = {\n    // \"from\": \"ramu.bugudi@actyv.com\",\n    \"from\": \"shravan.pm@actyv.com\",\n    \"to\": \"ramu.bugudi@actyv.com\",\n    \"subject\": `Error occured - ${msg.error.message}`,\n    // \"html\": `${msg.error}`,\n    \"html\": `\n    <html>\n        <body>\n            <p></p>\n            <p><b>FLOW NAME:</b> ${env.get(\"NR_FLOW_NAME\")} <b>FLOW ID:</b> ${env.get(\"NR_FLOW_ID\")} <b>PATH:</b> ${env.get(\"NR_NODE_PATH\")}</p>\n            <p>${msg.error.message}</p>\n            <p>Name: ${msg.error.source.name} - Type: ${msg.error.source.type}</p>\n            <p>Stacktrace: ${msg.error.stack}</p>\n        </body>\n    </html>`,\n    \"priority\": \"high\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1660,
        "wires": [
            [
                "01b0816d243485be"
            ]
        ]
    },
    {
        "id": "01b0816d243485be",
        "type": "http request",
        "z": "0ffe25cc2bd52d12",
        "name": "sendEmail",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 670,
        "y": 1660,
        "wires": [
            [
                "68914776a4285c17"
            ]
        ],
        "info": "Get bank product config id"
    },
    {
        "id": "9c9750432b72dae8",
        "type": "status",
        "z": "0ffe25cc2bd52d12",
        "name": "",
        "scope": null,
        "x": 220,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "172ab26b9059c096",
        "type": "inject",
        "z": "0ffe25cc2bd52d12",
        "name": "9AM - 6PM (every hour)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "0 4-12 * * 1,2,3,4,5,6",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "286ddd81cc324c30",
        "type": "debug",
        "z": "0ffe25cc2bd52d12",
        "name": "debug 295",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 520,
        "wires": []
    },
    {
        "id": "3d9bd1972c882867",
        "type": "function",
        "z": "0ffe25cc2bd52d12",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst AXIS_BANK_ADMIN_EMAIL = env.get('MSL_BANK_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": AXIS_BANK_ADMIN_EMAIL,\n    \"password\": PASSWORD\n};\n\nmsg.newLoggerLine = true;\nmsg.logger = `Authenticate bank admin`\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 220,
        "wires": [
            [
                "cd71d1a7649248fb"
            ]
        ]
    },
    {
        "id": "48bbf8f6ce686595",
        "type": "function",
        "z": "0ffe25cc2bd52d12",
        "name": "set Bank Token",
        "func": "flow.set('bank_token', msg.payload.idToken);\n\nmsg.bank_token = msg.payload.idToken\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 220,
        "wires": [
            [
                "f18326a4393e24db"
            ]
        ]
    },
    {
        "id": "6a305313d9cf9487",
        "type": "function",
        "z": "0ffe25cc2bd52d12",
        "name": "getAxisBankReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_KEY = env.get(\"AXIS_BANK_KEY\")\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank/key/${BANK_KEY}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 420,
        "wires": [
            [
                "9293c614d2c6761b"
            ]
        ]
    },
    {
        "id": "2c22c59f9544642b",
        "type": "function",
        "z": "0ffe25cc2bd52d12",
        "name": "Save Axis Bank ID",
        "func": "const bankId = msg.payload?._id\n\nmsg.axisBankId = bankId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 420,
        "wires": [
            [
                "9d5662a76283194b"
            ]
        ]
    },
    {
        "id": "f18326a4393e24db",
        "type": "function",
        "z": "0ffe25cc2bd52d12",
        "name": "getMSLBankReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_KEY = env.get(\"MSL_BANK_KEY\")\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank/key/${BANK_KEY}`;\n\nmsg.logger = `get msl bank id`\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 320,
        "wires": [
            [
                "ca72136efb9867a8"
            ]
        ]
    },
    {
        "id": "751ca1a9d0e22f24",
        "type": "function",
        "z": "0ffe25cc2bd52d12",
        "name": "Save MSL Bank ID",
        "func": "const bankId = msg.payload?._id\n\nmsg.bankId = bankId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 320,
        "wires": [
            [
                "6a305313d9cf9487"
            ]
        ]
    },
    {
        "id": "1eed4ee0395b1b41",
        "type": "debug",
        "z": "0ffe25cc2bd52d12",
        "name": "File created in /Convert/IN path ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 800,
        "wires": []
    },
    {
        "id": "1ca4815dd6fa6c09",
        "type": "debug",
        "z": "0ffe25cc2bd52d12",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 740,
        "wires": []
    },
    {
        "id": "266a4e43eaf08021",
        "type": "comment",
        "z": "0ffe25cc2bd52d12",
        "name": "",
        "info": "",
        "x": 860,
        "y": 740,
        "wires": []
    },
    {
        "id": "cd71d1a7649248fb",
        "type": "subflow:0cbd918f05921aae",
        "z": "0ffe25cc2bd52d12",
        "name": "",
        "x": 550,
        "y": 220,
        "wires": [
            [
                "67bda08a706589d7"
            ],
            [
                "38d35aa24e6456c0"
            ]
        ]
    },
    {
        "id": "67bda08a706589d7",
        "type": "subflow:951a533bb3498fe6",
        "z": "0ffe25cc2bd52d12",
        "name": "",
        "x": 680,
        "y": 200,
        "wires": [
            [
                "48bbf8f6ce686595"
            ]
        ]
    },
    {
        "id": "38d35aa24e6456c0",
        "type": "subflow:951a533bb3498fe6",
        "z": "0ffe25cc2bd52d12",
        "name": "",
        "x": 680,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "ca72136efb9867a8",
        "type": "subflow:0cbd918f05921aae",
        "z": "0ffe25cc2bd52d12",
        "name": "getMSLBankReq",
        "x": 570,
        "y": 320,
        "wires": [
            [
                "6941e4901390ae70"
            ],
            [
                "b90b99967c4e2f7a"
            ]
        ]
    },
    {
        "id": "6941e4901390ae70",
        "type": "subflow:951a533bb3498fe6",
        "z": "0ffe25cc2bd52d12",
        "name": "",
        "x": 760,
        "y": 300,
        "wires": [
            [
                "751ca1a9d0e22f24"
            ]
        ]
    },
    {
        "id": "b90b99967c4e2f7a",
        "type": "subflow:951a533bb3498fe6",
        "z": "0ffe25cc2bd52d12",
        "name": "",
        "x": 740,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "9293c614d2c6761b",
        "type": "subflow:0cbd918f05921aae",
        "z": "0ffe25cc2bd52d12",
        "name": "getAxisBankReq",
        "x": 530,
        "y": 420,
        "wires": [
            [
                "610b61245e399306"
            ],
            [
                "4495d0640d47cbf5"
            ]
        ]
    },
    {
        "id": "610b61245e399306",
        "type": "subflow:951a533bb3498fe6",
        "z": "0ffe25cc2bd52d12",
        "name": "",
        "x": 740,
        "y": 400,
        "wires": [
            [
                "2c22c59f9544642b"
            ]
        ]
    },
    {
        "id": "4495d0640d47cbf5",
        "type": "subflow:951a533bb3498fe6",
        "z": "0ffe25cc2bd52d12",
        "name": "",
        "x": 740,
        "y": 440,
        "wires": [
            [
                "2c22c59f9544642b"
            ]
        ]
    },
    {
        "id": "abbbec79cf8a784b",
        "type": "subflow:0cbd918f05921aae",
        "z": "0ffe25cc2bd52d12",
        "name": "",
        "x": 490,
        "y": 520,
        "wires": [
            [
                "286ddd81cc324c30",
                "f7282ef52b006f82"
            ],
            [
                "fc342bc93d352ae3"
            ]
        ]
    },
    {
        "id": "f7282ef52b006f82",
        "type": "subflow:951a533bb3498fe6",
        "z": "0ffe25cc2bd52d12",
        "name": "",
        "x": 260,
        "y": 640,
        "wires": [
            [
                "e8239b774252473a"
            ]
        ]
    },
    {
        "id": "fc342bc93d352ae3",
        "type": "subflow:951a533bb3498fe6",
        "z": "0ffe25cc2bd52d12",
        "name": "",
        "x": 620,
        "y": 560,
        "wires": [
            [
                "286ddd81cc324c30"
            ]
        ]
    },
    {
        "id": "7e0e899904689c06",
        "type": "subflow:0cbd918f05921aae",
        "z": "0ffe25cc2bd52d12",
        "name": "updateDrawdownReq",
        "x": 500,
        "y": 1040,
        "wires": [
            [
                "20030453aab599cf"
            ],
            [
                "20030453aab599cf"
            ]
        ]
    },
    {
        "id": "20030453aab599cf",
        "type": "subflow:951a533bb3498fe6",
        "z": "0ffe25cc2bd52d12",
        "name": "",
        "x": 680,
        "y": 1040,
        "wires": [
            [
                "cb57717f513d8d3c"
            ]
        ]
    },
    {
        "id": "a8beb1899595bcd1",
        "type": "inject",
        "z": "4dd61965a51abc1b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 480,
        "y": 40,
        "wires": [
            [
                "0208da592ecaace5"
            ]
        ]
    },
    {
        "id": "9ba48c859a2a7f2f",
        "type": "SFTP-main",
        "z": "4dd61965a51abc1b",
        "path": "/",
        "method": "list",
        "remoteFilePath": "/Out",
        "remoteFilePathType": "str",
        "localFilePath": "C:\\Users\\Ayush Rarg\\OneDrive - actyv.ai\\Desktop\\node-red",
        "localFilePathType": "str",
        "server": "55c08fb94e980196",
        "outputs": 1,
        "debug": false,
        "name": "lisitng the files from sftp",
        "x": 490,
        "y": 320,
        "wires": [
            [
                "7d8c53c6c52deed3"
            ]
        ]
    },
    {
        "id": "4b8f291a1c267a3e",
        "type": "SFTP-main",
        "z": "4dd61965a51abc1b",
        "path": "/",
        "method": "get",
        "remoteFilePath": "payload",
        "remoteFilePathType": "msg",
        "localFilePath": "LOCAL_PATH",
        "localFilePathType": "env",
        "server": "55c08fb94e980196",
        "outputs": 1,
        "debug": false,
        "name": "get a single file from sftp",
        "x": 1030,
        "y": 320,
        "wires": [
            [
                "5c30d9ccaa62fdde"
            ]
        ]
    },
    {
        "id": "78d2f7273d1d75f6",
        "type": "switch",
        "z": "4dd61965a51abc1b",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 660,
        "wires": [
            [
                "048ea8defb2c945e"
            ],
            [
                "a3492255eedada35"
            ]
        ]
    },
    {
        "id": "a3492255eedada35",
        "type": "function",
        "z": "4dd61965a51abc1b",
        "name": "mapJsonFromXLSX",
        "func": "\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\n    for (let item of msg.payload) {\n        if (item[\"Dealer Code\"].toString().length > 0) {\n            // await sleep(500)\n            node.send({\n                ...msg,\n                payload: item,\n                isCompleted: false\n            })\n        }\n}\n\nmsg.isCompleted = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 700,
        "wires": [
            [
                "7df2975471603d83"
            ]
        ]
    },
    {
        "id": "048ea8defb2c945e",
        "type": "debug",
        "z": "4dd61965a51abc1b",
        "name": "Response drawdowns length",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.length",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 600,
        "wires": []
    },
    {
        "id": "8631c0c65d9cc74b",
        "type": "function",
        "z": "4dd61965a51abc1b",
        "name": "updateDrawdownReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown`\nmsg.method = 'PATCH'\nconst token = flow.get(\"bank_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"bankid\"] = msg.bankId\n\nconst item = msg.payload;\n\nif(item.Status === 'S'){\n    msg.payload = {\n        \"drawdownStatus\": \"paid\",\n        \"bankProvidedDrawdownCodes\": item[\"UTR No\"] ?? item[\"Invoice Number\"],\n        \"disbursedAmount\": item[\"Invoice Amount\"],\n        \"requestUniqueCode\": item[\"Invoice Number\"]\n    }\n}else{\n    msg.payload = {\n        \"bankProvidedDrawdownCodes\": item[\"UTR No\"] ?? item[\"Invoice Number\"],\n        \"drawdownStatus\": \"failed\",\n        \"requestUniqueCode\": item[\"Invoice Number\"]\n    }\n}\n\nmsg.logger = `Update drawdown status to ${msg.payload.drawdownStatus}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 640,
        "wires": [
            [
                "7b035c80a935812d"
            ]
        ]
    },
    {
        "id": "7df2975471603d83",
        "type": "switch",
        "z": "4dd61965a51abc1b",
        "name": "",
        "property": "isCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 830,
        "y": 700,
        "wires": [
            [
                "8631c0c65d9cc74b"
            ],
            [
                "49836dbcb827da47",
                "1a2f3d3aacf2d5b3"
            ]
        ]
    },
    {
        "id": "7d8c53c6c52deed3",
        "type": "function",
        "z": "4dd61965a51abc1b",
        "name": "getSingleFilename",
        "func": "\nconst files = msg.payload.filter(f => f.includes('_Rev'))\nconsole.log(files)\nlet file;\nif (files.length !== 0) {\n    const todaysDate = moment(new Date()).format(\"YYYY-MM-DD\");\n    const todaysLastFile = files\n        .filter((file) => file.includes(`${todaysDate}`));\n    // file = files[0]\n    if (!todaysLastFile) {\n        file = []\n        return\n    }\n    file = todaysLastFile\n}\nmsg.payload = file\n// msg.payload = [\"/Out/CPLDFACT1_19-05-2023T18-00-00_repayment.txt\"]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 770,
        "y": 320,
        "wires": [
            [
                "4b8f291a1c267a3e",
                "ddaebdafa79668b0"
            ]
        ]
    },
    {
        "id": "b9bfa3e75b6ac016",
        "type": "file in",
        "z": "4dd61965a51abc1b",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 480,
        "y": 500,
        "wires": [
            [
                "34d634c9b356a9a4"
            ]
        ]
    },
    {
        "id": "34d634c9b356a9a4",
        "type": "csv",
        "z": "4dd61965a51abc1b",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "Dealer Code,Account No,Invoice Date,Invoice Number,Invoice Amount,Email ID,Status,Status Description,UTR No",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 650,
        "y": 500,
        "wires": [
            [
                "14fd2abae17567e0",
                "78d2f7273d1d75f6"
            ]
        ]
    },
    {
        "id": "14fd2abae17567e0",
        "type": "debug",
        "z": "4dd61965a51abc1b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 500,
        "wires": []
    },
    {
        "id": "09201d078fde40e2",
        "type": "comment",
        "z": "4dd61965a51abc1b",
        "name": "Error handling",
        "info": "Send an email if any error occurs",
        "x": 450,
        "y": 980,
        "wires": []
    },
    {
        "id": "37c2956b95e1c1c0",
        "type": "catch",
        "z": "4dd61965a51abc1b",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 440,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "8b74c5cc149ef547",
        "type": "debug",
        "z": "4dd61965a51abc1b",
        "name": "error",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 1040,
        "wires": []
    },
    {
        "id": "71542ce4fb5f7ade",
        "type": "function",
        "z": "4dd61965a51abc1b",
        "name": "sendEmailReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\n\nmsg.payload = {\n    // \"from\": \"ramu.bugudi@actyv.com\",\n    \"from\": \"shravan.pm@actyv.com\",\n    \"to\": \"ramu.bugudi@actyv.com\",\n    \"subject\": `Error occured - ${msg.error.message}`,\n    // \"html\": `${msg.error}`,\n    \"html\": `\n    <html>\n        <body>\n            <p></p>\n            <p><b>FLOW NAME:</b> ${env.get(\"NR_FLOW_NAME\")} <b>FLOW ID:</b> ${env.get(\"NR_FLOW_ID\")} <b>PATH:</b> ${env.get(\"NR_NODE_PATH\")}</p>\n            <p>${msg.error.message}</p>\n            <p>Name: ${msg.error.source.name} - Type: ${msg.error.source.type}</p>\n            <p>Stacktrace: ${msg.error.stack}</p>\n        </body>\n    </html>`,\n    \"priority\": \"high\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1040,
        "wires": [
            [
                "8ea9ec7f4682eef2"
            ]
        ]
    },
    {
        "id": "8ea9ec7f4682eef2",
        "type": "http request",
        "z": "4dd61965a51abc1b",
        "name": "sendEmail",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 890,
        "y": 1040,
        "wires": [
            [
                "8b74c5cc149ef547"
            ]
        ],
        "info": "Get bank product config id"
    },
    {
        "id": "43b6236ed26f37a5",
        "type": "status",
        "z": "4dd61965a51abc1b",
        "name": "",
        "scope": null,
        "x": 440,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "35f0f6101c98a0e5",
        "type": "inject",
        "z": "4dd61965a51abc1b",
        "name": "9:05AM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 03 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "8493cc3127e24413",
        "type": "inject",
        "z": "4dd61965a51abc1b",
        "name": "10:05AM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 04 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "0265b7dac11db7e6",
        "type": "inject",
        "z": "4dd61965a51abc1b",
        "name": "11:05AM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 05 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "a58d930521f317bb",
        "type": "inject",
        "z": "4dd61965a51abc1b",
        "name": "12:05AM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 06 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "a3f5d44170c11351",
        "type": "inject",
        "z": "4dd61965a51abc1b",
        "name": "1:05PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 07 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "c4fb15cd02c856da",
        "type": "inject",
        "z": "4dd61965a51abc1b",
        "name": "2:05PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 08 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "8328f27d66baba1c",
        "type": "inject",
        "z": "4dd61965a51abc1b",
        "name": "3:05PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 08 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "ae432238ae7f01d0",
        "type": "inject",
        "z": "4dd61965a51abc1b",
        "name": "4:05PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 08 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "46063a3fb98a1274",
        "type": "inject",
        "z": "4dd61965a51abc1b",
        "name": "5:05PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 09 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "6161a735ec1c4b6e",
        "type": "inject",
        "z": "4dd61965a51abc1b",
        "name": "6:05PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 10 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "a064938145257f91",
        "type": "debug",
        "z": "4dd61965a51abc1b",
        "name": "Update drawdown",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 640,
        "wires": []
    },
    {
        "id": "0208da592ecaace5",
        "type": "function",
        "z": "4dd61965a51abc1b",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst AXIS_BANK_ADMIN_EMAIL = env.get('MSL_BANK_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": AXIS_BANK_ADMIN_EMAIL,\n    \"password\": PASSWORD\n};\n\nmsg.loggerNewLine = true\nmsg.logger = `Authenticate Axis_bank_email`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 40,
        "wires": [
            [
                "c45af7a151bee630"
            ]
        ]
    },
    {
        "id": "7be4668a1dee0c0a",
        "type": "function",
        "z": "4dd61965a51abc1b",
        "name": "set Bank Token",
        "func": "flow.set('bank_token', msg.payload.idToken);\n\nmsg.bank_token = msg.payload.idToken\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 40,
        "wires": [
            [
                "f3cfdbbf1a064c0e"
            ]
        ]
    },
    {
        "id": "f3cfdbbf1a064c0e",
        "type": "function",
        "z": "4dd61965a51abc1b",
        "name": "getMSLBankReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_KEY = env.get(\"MSL_BANK_KEY\")\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank/key/${BANK_KEY}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 140,
        "wires": [
            [
                "e9183ae27810e281"
            ]
        ]
    },
    {
        "id": "88068abf06cb1c76",
        "type": "function",
        "z": "4dd61965a51abc1b",
        "name": "Save MSL Bank ID",
        "func": "const bankId = msg.payload?._id\n\nmsg.bankId = bankId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 140,
        "wires": [
            [
                "6f42a0a7bd063a32"
            ]
        ]
    },
    {
        "id": "6f42a0a7bd063a32",
        "type": "function",
        "z": "4dd61965a51abc1b",
        "name": "getAxisBankReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_KEY = env.get(\"AXIS_BANK_KEY\")\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank/key/${BANK_KEY}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 240,
        "wires": [
            [
                "934cbf69a5eecdc7"
            ]
        ]
    },
    {
        "id": "e46a6173e15fad03",
        "type": "function",
        "z": "4dd61965a51abc1b",
        "name": "Save Axis Bank ID",
        "func": "const bankId = msg.payload?._id\n\nmsg.axisBankId = bankId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 240,
        "wires": [
            [
                "9ba48c859a2a7f2f",
                "13edef3179f1a0a7"
            ]
        ]
    },
    {
        "id": "5c30d9ccaa62fdde",
        "type": "function",
        "z": "4dd61965a51abc1b",
        "name": "setRemotePath",
        "func": "msg.filename = msg.payload[0].split('.')[0] // filename without extension\n\nconst folderPath = msg.payload[0].split(\"/\")\nconst fileName = folderPath[folderPath.length - 1]\nflow.set('filename', fileName) // filename with extension\n\n// msg.filepath = `/Users/ramu/Desktop/node-red/${fileName}`\nmsg.successPath = `${env.get(\"SFTP_SUCCESS_FOLDER\")}`\nmsg.localPath = `${env.get(\"LOCAL_PATH\")}/${fileName}`\nmsg.remotePath = `${env.get(\"REMOTE_PATH_OUT\")}/${fileName}`\n\nmsg.filename = msg.localPath\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 400,
        "wires": [
            [
                "b9bfa3e75b6ac016"
            ]
        ]
    },
    {
        "id": "49836dbcb827da47",
        "type": "debug",
        "z": "4dd61965a51abc1b",
        "name": "Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 720,
        "wires": []
    },
    {
        "id": "1a2f3d3aacf2d5b3",
        "type": "SFTP-main",
        "z": "4dd61965a51abc1b",
        "path": "/",
        "method": "put",
        "remoteFilePath": "/Success",
        "remoteFilePathType": "str",
        "localFilePath": "localPath",
        "localFilePathType": "msg",
        "server": "55c08fb94e980196",
        "outputs": 1,
        "debug": false,
        "name": "move to success folder",
        "x": 1040,
        "y": 860,
        "wires": [
            [
                "8aea45fee0ce576a"
            ]
        ]
    },
    {
        "id": "8aea45fee0ce576a",
        "type": "SFTP-main",
        "z": "4dd61965a51abc1b",
        "path": "/",
        "method": "delete",
        "remoteFilePath": "remotePath",
        "remoteFilePathType": "msg",
        "localFilePath": "filepath",
        "localFilePathType": "msg",
        "server": "55c08fb94e980196",
        "outputs": 1,
        "debug": false,
        "name": "delete from existing folder",
        "x": 1320,
        "y": 860,
        "wires": [
            [
                "113c3081383a6d4e"
            ]
        ]
    },
    {
        "id": "113c3081383a6d4e",
        "type": "debug",
        "z": "4dd61965a51abc1b",
        "name": "Deleted file from SFTP existing directory",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 860,
        "wires": []
    },
    {
        "id": "ddaebdafa79668b0",
        "type": "debug",
        "z": "4dd61965a51abc1b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 280,
        "wires": []
    },
    {
        "id": "13edef3179f1a0a7",
        "type": "debug",
        "z": "4dd61965a51abc1b",
        "name": "All tokens and Id's",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 240,
        "wires": []
    },
    {
        "id": "a7e868ca628f238f",
        "type": "inject",
        "z": "4dd61965a51abc1b",
        "name": "9AM - 6PM (every hour)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "0 4-12 * * 1,2,3,4,5,6",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 450,
        "y": 80,
        "wires": [
            [
                "0208da592ecaace5"
            ]
        ]
    },
    {
        "id": "c45af7a151bee630",
        "type": "subflow:0cbd918f05921aae",
        "z": "4dd61965a51abc1b",
        "name": "",
        "x": 810,
        "y": 40,
        "wires": [
            [
                "aed107bb437512e6"
            ],
            [
                "58e9bf4f63984aae"
            ]
        ]
    },
    {
        "id": "aed107bb437512e6",
        "type": "subflow:951a533bb3498fe6",
        "z": "4dd61965a51abc1b",
        "name": "",
        "x": 940,
        "y": 20,
        "wires": [
            [
                "7be4668a1dee0c0a"
            ]
        ]
    },
    {
        "id": "58e9bf4f63984aae",
        "type": "subflow:951a533bb3498fe6",
        "z": "4dd61965a51abc1b",
        "name": "",
        "x": 940,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "e9183ae27810e281",
        "type": "subflow:0cbd918f05921aae",
        "z": "4dd61965a51abc1b",
        "name": "getMSLBankReq",
        "x": 710,
        "y": 140,
        "wires": [
            [
                "407b601419503c42"
            ],
            [
                "9fea9033c0d57ebe"
            ]
        ]
    },
    {
        "id": "407b601419503c42",
        "type": "subflow:951a533bb3498fe6",
        "z": "4dd61965a51abc1b",
        "name": "",
        "x": 900,
        "y": 120,
        "wires": [
            [
                "88068abf06cb1c76"
            ]
        ]
    },
    {
        "id": "9fea9033c0d57ebe",
        "type": "subflow:951a533bb3498fe6",
        "z": "4dd61965a51abc1b",
        "name": "",
        "x": 900,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "934cbf69a5eecdc7",
        "type": "subflow:0cbd918f05921aae",
        "z": "4dd61965a51abc1b",
        "name": "getAxisBankReq",
        "x": 630,
        "y": 240,
        "wires": [
            [
                "645728781c55e3de"
            ],
            [
                "3d7627dd3ec643f5"
            ]
        ]
    },
    {
        "id": "645728781c55e3de",
        "type": "subflow:951a533bb3498fe6",
        "z": "4dd61965a51abc1b",
        "name": "",
        "x": 820,
        "y": 220,
        "wires": [
            [
                "e46a6173e15fad03"
            ]
        ]
    },
    {
        "id": "3d7627dd3ec643f5",
        "type": "subflow:951a533bb3498fe6",
        "z": "4dd61965a51abc1b",
        "name": "",
        "x": 820,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "7b035c80a935812d",
        "type": "subflow:0cbd918f05921aae",
        "z": "4dd61965a51abc1b",
        "name": "updateDrawdownReq",
        "x": 1300,
        "y": 640,
        "wires": [
            [
                "44f7102d0ee10724"
            ],
            [
                "44f7102d0ee10724"
            ]
        ]
    },
    {
        "id": "44f7102d0ee10724",
        "type": "subflow:951a533bb3498fe6",
        "z": "4dd61965a51abc1b",
        "name": "",
        "x": 1500,
        "y": 640,
        "wires": [
            [
                "a064938145257f91"
            ]
        ]
    },
    {
        "id": "dc9ee793cede44d4",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Encryption",
        "func": "const kotakConfig = flow.get(\"KOTAK_CONFIG\");\n\nconst crypto = cryptoImport\n\nconst payload = msg.payload;\n\nfunction encrypt(plainText) {\n    const iv = crypto.randomBytes(kotakConfig.ivLength);\n    const ivBuffer = Buffer.from(iv);\n\n    const cipher = crypto.createCipheriv(\n        kotakConfig.algorithm,\n        kotakConfig.leadPush.clientSecret,\n        iv\n    );\n\n    const encryptedBuffer = cipher.update(plainText);\n    const lastBuffer = cipher.final();\n\n    return Buffer.concat([ivBuffer, encryptedBuffer, lastBuffer]).toString(\n        \"base64\"\n    );\n}\n\nmsg.encryptedPayload = encrypt(payload);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "cryptoImport",
                "module": "crypto"
            }
        ],
        "x": 1099,
        "y": 664,
        "wires": [
            [
                "ec5c65f6b41b0b42"
            ]
        ]
    },
    {
        "id": "11bea025ebcc59a5",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Decryption",
        "func": "const kotakConfig = flow.get(\"KOTAK_CONFIG\");\n\nconst crypto = cryptoImport\n\nconst payload = msg.payload;\n\nconsole.log(\"KOTAK RESPONSE\", payload);\n\nfunction decrypt(encryptedText) {\n    const buffer = Buffer.from(encryptedText, \"base64\");\n\n    const iv = buffer.slice(0, kotakConfig.ivLength);\n    const encrypted = buffer.slice(kotakConfig.ivLength);\n\n    const decipher = crypto.createDecipheriv(\n        kotakConfig.algorithm,\n        kotakConfig.leadPush.clientSecret,\n        iv\n    );\n\n    const decrypted = decipher.update(encrypted);\n    const final = Buffer.concat([decrypted, decipher.final()]);\n\n    return final.toString();\n}\n\nmsg.payload = decrypt(msg.payload);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "cryptoImport",
                "module": "crypto"
            }
        ],
        "x": 1119,
        "y": 784,
        "wires": [
            [
                "3f3b0c6e993adf3c"
            ]
        ]
    },
    {
        "id": "cb3d637838f1e0c0",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Init Global Vars",
        "func": "// const ENV = \"prod\";  // PROD\nconst ENV = \"qa\";  // QA\n// const ENV = \"uat\";\n\nconst ADMIN_SERVICE_URL = `https://actyv-platform-admin-service.${ENV}.actyv.com/api`;\nconst GO_SERVICE_URL = `https://actyv-platform-go-service.${ENV}.actyv.com/api`;\nconst PAYLATER_SERVICE_URL = `https://actyv-platform-paylater-service-v1.${ENV}.actyv.com/v1`;\n\nconst API_URLS = {\n    go: {\n        bankApplications: `${GO_SERVICE_URL}/bank-application`,\n        bank: `${GO_SERVICE_URL}/bank`,\n        enterprise: `${GO_SERVICE_URL}/enterprise`,\n        businessPartner: `${GO_SERVICE_URL}/business-partner`,\n        businessPartnerApplication: `${GO_SERVICE_URL}/business-partner-application`,\n        file: `${GO_SERVICE_URL}/file`,\n    },\n\n    admin: {\n        user: `${ADMIN_SERVICE_URL}/user`,\n    },\n\n    paylater: {\n        business: `${PAYLATER_SERVICE_URL}/business`,\n    },\n\n    // kotak: \"https://apigw.kotak.com:8446\",  // PROD\n    kotak: \"https://apigwuat.kotak.com:8443\",\n};\n\nconst BUSINESS_CONSTANTS = {\n    bankKey: \"kotak\",\n    enterpriseKey: \"cavinkare\",\n\n    applicationStatus: \"AWAITING_LEAD_PUSH\",\n    // applicationStatus: \"CREDIT_MANAGER_REVIEW\",\n\n    bankIdentifier: \"AAACK4409J\",\n    enterpriseIdentifier: \"AAACB3754B\",\n};\n\nconst USER_CONSTANTS = {\n    bank: {\n        email: \"anand.rastogi@actyv.com\",\n        password: \"890ioP@12\",\n    },\n\n    enterprise: {\n        email: \"anand.rastogi@actyv.com\",\n        password: \"890ioP@12\",\n    },\n};\n\nconst KOTAK_CONFIG = {\n    algorithm: \"aes-256-cbc\",\n    ivLength: 16,\n\n    // PROD\n    // leadPush: {\n    //     clientID: \"l70a3247a3bf6a41bebb8dbc41745e53bd\",\n    //     clientSecret: \"15b4084e4a0c43f1a8f018df8feb50b5\",\n    // },\n\n    leadPush: {\n        clientID: \"l7xx4a0eb303bda24dc393af68924f3bb009\",\n        clientSecret: \"fd8fe23dce7b440eb976eeb7c0351ebd\",\n    },\n};\n\nflow.set(\"API_URLS\", API_URLS);\nflow.set(\"BUSINESS_CONSTANTS\", BUSINESS_CONSTANTS);\nflow.set(\"USER_CONSTANTS\", USER_CONSTANTS);\nflow.set(\"KOTAK_CONFIG\", KOTAK_CONFIG);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "lodash",
                "module": "lodash"
            }
        ],
        "x": 900,
        "y": 100,
        "wires": [
            [
                "91cf657473f834a0"
            ]
        ]
    },
    {
        "id": "535adac67cf7b6c1",
        "type": "http request",
        "z": "2805f1a60c3bda60",
        "name": "Fetch Bank ID",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 849,
        "y": 324,
        "wires": [
            [
                "b18af4eb2c784ccf"
            ]
        ]
    },
    {
        "id": "c225ed060f850fc5",
        "type": "http request",
        "z": "2805f1a60c3bda60",
        "name": "GET BANK APPLICATIONS",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 989,
        "y": 484,
        "wires": [
            [
                "923ddd5439c54c86",
                "7aa67da8329944f4"
            ]
        ]
    },
    {
        "id": "9c0c2f55555b399b",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Getting Bank ID",
        "func": "const apiUrls = flow.get(\"API_URLS\");\nconst businessConstants = flow.get(\"BUSINESS_CONSTANTS\");\n\nmsg.url = `${apiUrls.paylater.business}/getByIdentifier/${businessConstants.bankIdentifier}/BANK`;\n\nmsg.method = \"get\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 609,
        "y": 324,
        "wires": [
            [
                "535adac67cf7b6c1"
            ]
        ]
    },
    {
        "id": "7527e88f2ef3926e",
        "type": "inject",
        "z": "2805f1a60c3bda60",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 660,
        "y": 100,
        "wires": [
            [
                "cb3d637838f1e0c0"
            ]
        ]
    },
    {
        "id": "91cf657473f834a0",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Setting Enterprise Token",
        "func": "const apiUrls = flow.get(\"API_URLS\");\nconst users = flow.get(\"USER_CONSTANTS\");\n\nconst enterpriseUserEmail = users.enterprise.email;\nconst enterpriseUserPassword = users.enterprise.password;\n\nmsg.payload = {\n    email: enterpriseUserEmail,\n    password: enterpriseUserPassword,\n};\n\nmsg.url = `${apiUrls.admin.user}/authenticateUser`;\nmsg.method = \"post\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 579,
        "y": 184,
        "wires": [
            [
                "064b75d774927845"
            ]
        ]
    },
    {
        "id": "8fb614b2eb5d18dc",
        "type": "http request",
        "z": "2805f1a60c3bda60",
        "name": "Generate Token",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "bearer",
        "senderr": false,
        "x": 849,
        "y": 244,
        "wires": [
            [
                "dabaf2467e33cebd"
            ]
        ]
    },
    {
        "id": "8b6dcfb326bc2f3d",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Get Bank Applications Request",
        "func": "const apiUrls = flow.get(\"API_URLS\");\nconst businessConstants = flow.get(\"BUSINESS_CONSTANTS\");\n\nconst bankID = flow.get(\"BANK_DETAILS\").id;\nconst enterpriseID = flow.get(\"ENTERPRISE_DETAILS\").id;\n\nconst queryString = `applicationStatus=${businessConstants.applicationStatus}&bankID=${\"63db43b9a6c0a40a89981a38\"}&enterpriseID=${\"639ad10556684b825577d96d\"}`;\n// const queryString = `applicationStatus=${businessConstants.applicationStatus}&bankID=${\"642d3bc0ebc96f31f3daebe9\"}&enterpriseID=${\"637670c7f8e9564da0dea656\"}`;\n\nmsg.url = `${apiUrls.go.bankApplications}?${queryString}`;\n\nmsg.method = \"get\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 619,
        "y": 484,
        "wires": [
            [
                "c225ed060f850fc5"
            ]
        ]
    },
    {
        "id": "e3b721ff6bd9ba3a",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Getting Enterprise ID",
        "func": "const apiUrls = flow.get(\"API_URLS\");\nconst businessConstants = flow.get(\"BUSINESS_CONSTANTS\");\n\nmsg.url = `${apiUrls.paylater.business}/getByIdentifier/${businessConstants.enterpriseIdentifier}/ENTERPRISE`;\n\nmsg.method = \"get\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 589,
        "y": 404,
        "wires": [
            [
                "7a6eebb17b88faa7"
            ]
        ]
    },
    {
        "id": "7a6eebb17b88faa7",
        "type": "http request",
        "z": "2805f1a60c3bda60",
        "name": "Fetch Enterprise ID",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 839,
        "y": 404,
        "wires": [
            [
                "2059b84447a9f6dc"
            ]
        ]
    },
    {
        "id": "b18af4eb2c784ccf",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Set Bank details",
        "func": "const bank = msg.payload;\n\nflow.set(\"BANK_DETAILS\", bank);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1089,
        "y": 324,
        "wires": [
            [
                "e3b721ff6bd9ba3a"
            ]
        ]
    },
    {
        "id": "2059b84447a9f6dc",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Set Enterprise details",
        "func": "const enterprise = msg.payload;\n\nflow.set(\"ENTERPRISE_DETAILS\", enterprise);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1109,
        "y": 404,
        "wires": [
            [
                "8b6dcfb326bc2f3d"
            ]
        ]
    },
    {
        "id": "a1dd81b9c30ba80f",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Setting enterprise token",
        "func": "const idToken = msg.payload.idToken\n\nflow.set(\"enterpriseToken\", idToken)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1119,
        "y": 184,
        "wires": [
            [
                "f0fe47584392d9a2"
            ]
        ]
    },
    {
        "id": "f0fe47584392d9a2",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Setting bank token Request",
        "func": "const apiUrls = flow.get(\"API_URLS\");\nconst users = flow.get(\"USER_CONSTANTS\");\n\nconst bankUserEmail = users.bank.email;\nconst bankUserPassword = users.bank.password;\n\nmsg.payload = {\n    email: bankUserEmail,\n    password: bankUserPassword,\n};\n\nmsg.url = `${apiUrls.admin.user}/authenticateUser`;\nmsg.method = \"post\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 569,
        "y": 244,
        "wires": [
            [
                "8fb614b2eb5d18dc"
            ]
        ]
    },
    {
        "id": "dabaf2467e33cebd",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Setting bank token",
        "func": "const idToken = msg.payload.idToken\n\nflow.set(\"bankToken\", idToken)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1099,
        "y": 244,
        "wires": [
            [
                "9c0c2f55555b399b"
            ]
        ]
    },
    {
        "id": "064b75d774927845",
        "type": "http request",
        "z": "2805f1a60c3bda60",
        "name": "Generate Token",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "bearer",
        "senderr": false,
        "x": 849,
        "y": 184,
        "wires": [
            [
                "a1dd81b9c30ba80f"
            ]
        ]
    },
    {
        "id": "6a4feee50a1c8f06",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Fetch Business Partner Details",
        "func": "const apiUrls = flow.get(\"API_URLS\");\n\nmsg.businessPartnerID = msg.payload.businessPartnerID;\nmsg.taskID = msg.payload.workflowTaskID;\nmsg.productType = msg.payload.productType;\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    businesspartnerid: msg.businessPartnerID,\n};\n\nmsg.url = `${apiUrls.go.businessPartner}/data/${msg.businessPartnerID}`;\n\nmsg.method = \"get\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 659,
        "y": 604,
        "wires": [
            [
                "687b377f13cf2354"
            ]
        ]
    },
    {
        "id": "095723dd7e3c073c",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Generate Base Payload",
        "func": "const _ = lodash;\nconst { v4 } = uuid;\nconst moment = momentImport;\n\nconst businessPartnerDetails = msg.payload;\n\nflow.set(\"BP_DETAILS\", businessPartnerDetails);\n\nconst userDetails = _.get(businessPartnerDetails, \"persons[0]\", {});\nconst address = _.get(businessPartnerDetails, \"address\", {});\nconst documents = _.get(businessPartnerDetails, \"documents\", []);\nconst fieldValues = _.get(businessPartnerDetails, \"fieldValues\", []);\n\nconst leadAmount = fieldValues.find((fields) => fields.key === \"leadAmount\");\n\nconst aadharDocument = documents.find(\n    (document) => document.documentType === \"AADHAAR\"\n);\nconst panDocument = documents.find(\n    (document) => document.documentType === \"BUSINESS_PAN\"\n);\n\nconst productKey =\n    msg.productType === \"ENTERPRISE BASED PRODUCT\"\n        ? \"1000106\"\n        : msg.productType === \"GST BASED PRODUCT\"\n            ? \"1000059\"\n            : msg.productType === \"BANK BASED PRODUCT\"\n                ? \"1000061\"\n                : \"1000061\";\n\nconst applicantTypes = {\n    P: \"SP\",\n    C: \"PVT\",\n    H: \"HUF\",\n    A: \"\",\n    B: \"\",\n    G: \"\",\n    J: \"\",\n    L: \"\",\n    F: \"LLP\",\n    T: \"T\",\n};\n\nconst payload = {\n    CreateLeadReq: {\n        Header: {\n            SrcAppCd: \"CRMNext\",\n            RequestID: v4(),\n        },\n        CreateLead: {\n            AssigntoCode: \"135229\",\n            DateofBirth: moment(\n                _.get(aadharDocument, \"data.dob\", new Date()),\n                \"YYYY-MM-DDTHH:mm:ss\"\n            ).format(\"YYYY-MM-DDT00:00:00\"),\n            GenderID: _.get(aadharDocument, \"data.gender\", \"M\") === \"M\" ? 1 : 2,\n            PanNumber: _.get(panDocument, \"data.panNumber\", \"\"),\n            City: _.get(address, \"city\", \"\"),\n            Country: `${_.get(aadharDocument, \"data.country\", \"\")}`\n                .replace(/[^,a-zA-Z0-9 ]/g, \"\")\n                .trim(),\n            Custom: {\n                Address_Line_1_Le: `${_.get(aadharDocument, \"data.address\", \"\")}`\n                    .replace(/[^,a-zA-Z0-9 ]/g, \"\")\n                    .trim(),\n                Address_Line_P1_Le: `${_.get(aadharDocument, \"data.district\", \"\")}`\n                    .replace(/[^,a-zA-Z0-9 ]/g, \"\")\n                    .trim(),\n                CRN: \"\",\n                CampaignCode: \"\",\n                CampaignName: \"\",\n                Remarks_Le: \"\",\n                Address_Type_Le: \"Residence Address\",\n                OutStndngLoanTnurInMnth: \"\",\n                LoanTnurInMnth: \"\",\n                StrtmMnthYrOfCurntLoan: \"\",\n                Landmark_LE: \"\",\n                Source_SystemID: \"102\",\n                Process_Type: \"N\",\n                Existing_Customer: \"N\",\n                Resident_Type: \"R\",\n                Applicant_Type:\n                    applicantTypes[\n                    _.get(panDocument, \"data.panNumber\", \"\").charAt(3) || \"\"\n                    ],\n                RsiednceOrOfcPrmiseSelfOwnd: \"Y\",\n                Sub_Source: \"Online Aggregator\",\n                Sub_Sub_Source: \"Autolytics\",\n                Perfios_Fetch_Applicable: \"\",\n                CurntBankLoanName: \"\",\n                Work_Experience: \"\",\n                Propert_Identified: \"\",\n                RateOfInterest_LE: \"\",\n                CoApplicant_Required: \"N\",\n                PermntAddSamAsCurnt: \"2\",\n                Country1_LE: `${_.get(aadharDocument, \"data.country\", \"\")}`\n                    .replace(/[^,a-zA-Z0-9 ]/g, \"\")\n                    .trim(),\n                TypeOfProperty_LE: \"\",\n                State1_LE: \"\",\n                District1_LE: \"\",\n                City1_LE: \"\",\n                Pincode1_LE: \"\",\n                Landmark1_LE: \"\",\n                PermntAddLine_2: \"\",\n                NetMonthlyIncome_LE: \"\",\n                Outstanding_Loan_Amnt: \"\",\n                CorrespondenceAddLine_2: \"\",\n                Cmpny_Emp_Name: \"\",\n                TenureInMonths_LE: \"\",\n                Individual: \"I\",\n                Finfort_Fetch_Applicable: \"No\",\n                EMI_Le: \"\",\n                Business_Le: \"\",\n                Vintage_Le: \"\",\n                Turnover_Le: \"\",\n                property_Le: \"Residential\",\n                LEA_Prospect: \"Lead\",\n            },\n            FirstName: \"Kankipati\",\n            Email: _.get(userDetails, \"email\", \"\"),\n            LastName: \"Supriya\",\n            LayoutKey: \"111206\",\n            LeadAmount: 600000,\n            LeadSourceKey: \"49\",\n            MiddleName: \"\",\n            MobilePhone: _.get(userDetails, \"phone\", \"\").replace(\"+91\", \"\"),\n            ProductKey: productKey,\n            RatingKey: \"2\",\n            SalutationKey: \"\",\n            State: `${_.get(aadharDocument, \"data.state\", \"\")}`\n                .replace(/[^,a-zA-Z0-9 ]/g, \"\")\n                .trim(),\n            StatusCodeKey: \"100012\",\n            ZipCode: `${_.get(aadharDocument, \"data.pinCode\", \"\")}`\n                .replace(/[^,a-zA-Z0-9 ]/g, \"\")\n                .trim(),\n            LeadID: \"\",\n        },\n        \"@_xmlns\": \"http://www.kotak.com/schemas/AggregatorLeadCRM/CreateLeadReq\",\n    },\n};\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "lodash",
                "module": "lodash"
            },
            {
                "var": "uuid",
                "module": "uuid"
            },
            {
                "var": "momentImport",
                "module": "moment"
            }
        ],
        "x": 639,
        "y": 664,
        "wires": [
            [
                "c3b87108f3b46b05",
                "c479aa9ce25d73ba"
            ]
        ]
    },
    {
        "id": "eb8856446c293ec2",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Generate Lead ID request",
        "func": "const apiUrls = flow.get(\"API_URLS\");\n\nmsg.url = `${apiUrls.kotak}/CRM_LeadCreation`;\n\nmsg.method = \"post\";\n\nmsg.headers = {\n    Authorization: `Bearer ${msg.payload.access_token}`,\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n};\n\nmsg.payload = msg.encryptedPayload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 659,
        "y": 784,
        "wires": [
            [
                "b61cf43a8a4f379f"
            ]
        ]
    },
    {
        "id": "2e9dbdba4c068ebe",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Fetch Required Documents",
        "func": "const _ = lodash;\n\nconst bpDetails = flow.get(\"BP_DETAILS\");\n\nconst files = [];\n\nconst documents = _.get(bpDetails, \"documents\", []);\nconst fieldValues = _.get(bpDetails, \"fieldValues\", []);\n\nconst requiredDocuments = [\n    {\n        key: \"AADHAAR\",\n        type: \"documents\",\n        documentName: \"aadhaar\",\n        documentDescription: \"Aadhar Card\",\n    },\n    {\n        key: \"UDYAM\",\n        type: \"documents\",\n        documentName: \"udyam\",\n        documentDescription: \"Udyam certificate\",\n    },\n    {\n        key: \"BUSINESS_PAN\",\n        type: \"documents\",\n        documentName: \"business_pan\",\n        documentDescription: \"Business PAN\",\n    },\n    {\n        key: \"PERSONAL_PAN\",\n        type: \"documents\",\n        documentName: \"personal_pan\",\n        documentDescription: \"Personal PAN\",\n    },\n    {\n        key: \"GST\",\n        type: \"documents\",\n        documentName: \"gst_certificate\",\n        documentDescription: \"GST Certificate for distributor\",\n    },\n    {\n        key: \"GSTR3B_RETSUM\",\n        type: \"documents\",\n        documentName: \"gstr_3b\",\n        documentDescription: \"GSTR 3B Raw file\",\n    },\n    {\n        key: \"BANK_STATEMENT\",\n        type: \"documents\",\n        documentName: \"bank_statement\",\n        documentDescription: \"Bank Statement Raw file\",\n    },\n    {\n        key: \"ITR\",\n        type: \"documents\",\n        documentName: \"itr\",\n        documentDescription: \"ITR Raw file\",\n    },\n\n    {\n        key: \"kotak_shop_and_establishment\",\n        type: \"fieldValue\",\n        documentName: \"shop_establishment\",\n        documentDescription: \"Shop Establishment Certificate\",\n    },\n    {\n        key: \"kotak_partnership_deed_1\",\n        type: \"fieldValue\",\n        documentName: \"partnership_deed\",\n        documentDescription: \"Kotak Partnership Deed\",\n    },\n    {\n        key: \"kotak_electricity_bill_1\",\n        type: \"fieldValue\",\n        documentName: \"electricity_bill\",\n        documentDescription: \"Distributor Electricity bill\",\n    },\n    {\n        key: \"kotak_passport_photo\",\n        type: \"fieldValue\",\n        documentName: \"passport_photo\",\n        documentDescription: \"BP Passport size photo\",\n    },\n];\n\nfor (const requiredDocument of requiredDocuments) {\n    if (requiredDocument.type === \"documents\") {\n        const filteredDocuments = documents.filter(\n            (document) => document.documentType === requiredDocument.key\n        );\n\n        let index = 0;\n\n        for (const filteredDocument of filteredDocuments) {\n            if (filteredDocument.files.length <= 0) {\n                continue;\n            }\n\n            files.push(\n                ...filteredDocument.files.map((documentFile) => ({\n                    fileID: documentFile.fileId,\n                    documentName: `${requiredDocument.documentName}_${++index}.${fileType(\n                        documentFile.fileType\n                    )}`,\n                    documentDescription: `${requiredDocument.documentDescription}`,\n                }))\n            );\n        }\n    }\n\n    if (requiredDocument.type === \"fieldValue\") {\n        const filteredFieldValues = fieldValues.filter(\n            (fieldValue) => fieldValue.key === requiredDocument.key\n        );\n\n        let index = 0;\n\n        for (const filteredFieldValue of filteredFieldValues) {\n            const fieldValue = filteredFieldValue.value;\n\n            if (_.isArray(fieldValue)) {\n                for (const value of fieldValue) {\n                    if (!_.isEmpty(value.fileId)) {\n                        files.push({\n                            fileID: value.fileId,\n                            documentName: `${requiredDocument.documentName\n                                }_${++index}.${fileType(value.fileType)}`,\n                            documentDescription: `${requiredDocument.documentDescription}`,\n                        });\n                    }\n                }\n            }\n\n            if (!_.isEmpty(fieldValue.filedId)) {\n                files.push({\n                    fileID: fieldValue.fileId,\n                    documentName: `${requiredDocument.documentName}_${++index}.${fileType(\n                        fieldValue.fileType\n                    )}`,\n                    documentDescription: `${requiredDocument.documentDescription}`,\n                });\n            }\n        }\n    }\n}\n\nfunction fileType(type) {\n    switch (type) {\n        case \"application/pdf\":\n            return \"pdf\";\n\n        case \"application/xlsx\":\n            return \"xlsx\";\n\n        case \"image/png\":\n            return \"png\";\n\n        case \"image/jpeg\":\n            return \"jpeg\";\n\n        case \"image/jpg\":\n            return \"jpg\";\n    }\n}\n\nmsg.files = files;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "lodash",
                "module": "lodash"
            }
        ],
        "x": 1780,
        "y": 640,
        "wires": [
            [
                "54f3c806e04c5ed4",
                "3851c5aea6b00e9b"
            ]
        ]
    },
    {
        "id": "ec5c65f6b41b0b42",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Genereate Kotak Token Request",
        "func": "const apiUrls = flow.get(\"API_URLS\");\nconst kotakConfig = flow.get(\"KOTAK_CONFIG\");\n\nconst queryString = `?grant_type=client_credentials&client_id=${kotakConfig.leadPush.clientID}&client_secret=${kotakConfig.leadPush.clientSecret}`;\n\nmsg.url = `${apiUrls.kotak}/auth/oauth/v2/token${queryString}`;\n\nmsg.method = \"post\";\n\nmsg.headers = {\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 679,
        "y": 724,
        "wires": [
            [
                "7aba859943d3ec95"
            ]
        ]
    },
    {
        "id": "7aba859943d3ec95",
        "type": "http request",
        "z": "2805f1a60c3bda60",
        "name": "Generate Kotak Token",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1069,
        "y": 724,
        "wires": [
            [
                "eb8856446c293ec2"
            ]
        ]
    },
    {
        "id": "687b377f13cf2354",
        "type": "http request",
        "z": "2805f1a60c3bda60",
        "name": "Fetch business partner details",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 976,
        "y": 604,
        "wires": [
            [
                "aa3a236123bc9135",
                "095723dd7e3c073c"
            ]
        ]
    },
    {
        "id": "b61cf43a8a4f379f",
        "type": "http request",
        "z": "2805f1a60c3bda60",
        "name": "Generate Lead ID",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 899,
        "y": 784,
        "wires": [
            [
                "11bea025ebcc59a5",
                "399762f0b1893e06"
            ]
        ]
    },
    {
        "id": "c479aa9ce25d73ba",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Convert to XML",
        "func": "const { XMLBuilder } = fastXmlParser;\n\nconst xmlBuilder = new XMLBuilder({\n  ignoreAttributes: false,\n});\n\nconst payload = xmlBuilder.build(msg.payload);\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fastXmlParser",
                "module": "fast-xml-parser"
            }
        ],
        "x": 889,
        "y": 664,
        "wires": [
            [
                "dc9ee793cede44d4"
            ]
        ]
    },
    {
        "id": "a2e202e01009fbcf",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Set Lead ID",
        "func": "const _ = lodash\n\nmsg.leadID = _.get(msg.payload, \"CreateLeadRes.CreateLead.CRMLeadNum\", \"FAILED\");\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "lodash",
                "module": "lodash"
            }
        ],
        "x": 1659,
        "y": 584,
        "wires": [
            [
                "31a6de8b711135dc"
            ]
        ]
    },
    {
        "id": "31a6de8b711135dc",
        "type": "switch",
        "z": "2805f1a60c3bda60",
        "name": "Lead Gen Check",
        "property": "leadID",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1859,
        "y": 584,
        "wires": [
            [
                "7aa67da8329944f4"
            ],
            [
                "2e9dbdba4c068ebe"
            ]
        ]
    },
    {
        "id": "af3604bfee1f8d17",
        "type": "http request",
        "z": "2805f1a60c3bda60",
        "name": "Read Files from fileID",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1789,
        "y": 784,
        "wires": [
            [
                "1abbbd0e682c4e48"
            ]
        ]
    },
    {
        "id": "a99d25c0c09301e3",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Fetch File",
        "func": "const apiUrls = flow.get(\"API_URLS\");\n\nmsg.file = msg.payload;\n\nconst fileID = msg.file.fileID;\n\nmsg.method = \"get\";\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\")\n};\n\nmsg.url = `${apiUrls.go.file}/read/${fileID}`;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1569,
        "y": 784,
        "wires": [
            [
                "af3604bfee1f8d17"
            ]
        ]
    },
    {
        "id": "1abbbd0e682c4e48",
        "type": "base64",
        "z": "2805f1a60c3bda60",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 2029,
        "y": 784,
        "wires": [
            [
                "284d62ad86c538f3"
            ]
        ]
    },
    {
        "id": "284d62ad86c538f3",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Generate Base Payload for File push",
        "func": "const { v4 } = uuid\nconst _ = lodash\n\nconst file = msg.file;\n\nconst basePayload = {\n    CreateLeadReq: {\n        Header: {\n            SrcAppCd: \"CRMNext\",\n            RequestID: v4(),\n        },\n        CreateLead: {\n            Custom: {\n                Sub_Source: \"Online Aggregator\",\n                Sub_Sub_Source: \"\",\n            },\n            DocumentDetails: {\n                DocumentName: _.get(file, \"documentName\", \"\"),\n                FileBase64String: `${msg.payload}`,\n                Description: _.get(file, \"documentDescription\", \"\"),\n            },\n            LeadID: msg.leadID,\n        },\n        \"@_xmlns\": \"http://www.kotak.com/schemas/AggregatorLeadCRM/CreateLeadReq\",\n    },\n};\n\nmsg.payload = basePayload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "lodash",
                "module": "lodash"
            },
            {
                "var": "uuid",
                "module": "uuid"
            }
        ],
        "x": 1579,
        "y": 844,
        "wires": [
            [
                "18cdc4befc4b4e4c"
            ]
        ]
    },
    {
        "id": "e41ed49051484327",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Generate file push request",
        "func": "const apiUrls = flow.get(\"API_URLS\");\n\nmsg.url = `${apiUrls.kotak}/CRM_LeadCreation`;\n\nmsg.method = \"post\";\n\nmsg.headers = {\n    Authorization: `Bearer ${msg.payload.access_token}`,\n    'Content-Type': 'text/plain',\n};\n\nmsg.payload = msg.encryptedPayload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1749,
        "y": 944,
        "wires": [
            [
                "2b30a15f633441d9"
            ]
        ]
    },
    {
        "id": "2b30a15f633441d9",
        "type": "http request",
        "z": "2805f1a60c3bda60",
        "name": "Push document",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 2009,
        "y": 944,
        "wires": [
            [
                "235c657d52f2dc36",
                "8ab092bea6cc0e63"
            ]
        ]
    },
    {
        "id": "78f8af3d304c52c6",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Update Document Status",
        "func": "const _ = lodash\n\nmsg.uploadStatus = _.get(\n    msg.payload,\n    \"CreateLeadRes.CreateLead.Status\",\n    \"FAILED\"\n);\n\nconsole.log(\"UPLOAD STATUS\", msg.uploadStatus);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "lodash",
                "module": "lodash"
            }
        ],
        "x": 2079,
        "y": 1004,
        "wires": [
            [
                "54f3c806e04c5ed4"
            ]
        ]
    },
    {
        "id": "3f3b0c6e993adf3c",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Convert to JSON",
        "func": "const { XMLParser } = fastXmlParser\n\nconst xmlParser = new XMLParser({\n  ignoreAttributes: false,\n});\n\nconst payload = xmlParser.parse(msg.payload);\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fastXmlParser",
                "module": "fast-xml-parser"
            }
        ],
        "x": 1399,
        "y": 684,
        "wires": [
            [
                "a2e202e01009fbcf",
                "c1bd4465fad522d3"
            ]
        ]
    },
    {
        "id": "1c2e214f3f2e481f",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Convert to JSON",
        "func": "const { XMLParser } = fastXmlParser\n\nconst xmlParser = new XMLParser({\n  ignoreAttributes: false,\n});\n\nconst payload = xmlParser.parse(msg.payload);\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fastXmlParser",
                "module": "fast-xml-parser"
            }
        ],
        "x": 1839,
        "y": 1004,
        "wires": [
            [
                "78f8af3d304c52c6",
                "99f92cd62ad13faa"
            ]
        ]
    },
    {
        "id": "a43b90b58c79bd4e",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Encryption",
        "func": "const kotakConfig = flow.get(\"KOTAK_CONFIG\");\n\nconst crypto = cryptoImport\n\nconst payload = msg.payload;\n\nfunction encrypt(plainText) {\n    const iv = crypto.randomBytes(kotakConfig.ivLength);\n    const ivBuffer = Buffer.from(iv);\n\n    const cipher = crypto.createCipheriv(\n        kotakConfig.algorithm,\n        kotakConfig.leadPush.clientSecret,\n        iv\n    );\n\n    const encryptedBuffer = cipher.update(plainText);\n    const lastBuffer = cipher.final();\n\n    return Buffer.concat([ivBuffer, encryptedBuffer, lastBuffer]).toString(\n        \"base64\"\n    );\n}\n\nmsg.encryptedPayload = encrypt(payload);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "cryptoImport",
                "module": "crypto"
            }
        ],
        "x": 2059,
        "y": 844,
        "wires": [
            [
                "d36bb68f8b2773fa"
            ]
        ]
    },
    {
        "id": "18cdc4befc4b4e4c",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Convert to XML",
        "func": "const { XMLBuilder } = fastXmlParser\n\nconst xmlBuilder = new XMLBuilder({\n  ignoreAttributes: false,\n});\n\nconst payload = xmlBuilder.build(msg.payload);\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fastXmlParser",
                "module": "fast-xml-parser"
            }
        ],
        "x": 1869,
        "y": 844,
        "wires": [
            [
                "a43b90b58c79bd4e"
            ]
        ]
    },
    {
        "id": "235c657d52f2dc36",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Decryption",
        "func": "const kotakConfig = flow.get(\"KOTAK_CONFIG\");\n\nconsole.log(\"KOTAK DOCUMENT PUSH RESPONSE\", msg.payload);\n\nconst crypto = cryptoImport\n\nconst payload = msg.payload;\n\nfunction decrypt(encryptedText) {\n    const buffer = Buffer.from(encryptedText, \"base64\");\n\n    const iv = buffer.slice(0, kotakConfig.ivLength);\n    const encrypted = buffer.slice(kotakConfig.ivLength);\n\n    const decipher = crypto.createDecipheriv(\n        kotakConfig.algorithm,\n        kotakConfig.leadPush.clientSecret,\n        iv\n    );\n\n    const decrypted = decipher.update(encrypted);\n    const final = Buffer.concat([decrypted, decipher.final()]);\n\n    return final.toString();\n}\n\nmsg.payload = decrypt(msg.payload);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "cryptoImport",
                "module": "crypto"
            }
        ],
        "x": 1639,
        "y": 1004,
        "wires": [
            [
                "1c2e214f3f2e481f"
            ]
        ]
    },
    {
        "id": "d36bb68f8b2773fa",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Genereate Kotak Token Request",
        "func": "const apiUrls = flow.get(\"API_URLS\");\nconst kotakConfig = flow.get(\"KOTAK_CONFIG\");\n\nconst queryString = `?grant_type=client_credentials&client_id=${kotakConfig.leadPush.clientID}&client_secret=${kotakConfig.leadPush.clientSecret}`;\n\nmsg.url = `${apiUrls.kotak}/auth/oauth/v2/token${queryString}`;\n\nmsg.method = \"post\";\n\nmsg.headers = {\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1722,
        "y": 895,
        "wires": [
            [
                "b8d57e2330febc3d"
            ]
        ]
    },
    {
        "id": "b8d57e2330febc3d",
        "type": "http request",
        "z": "2805f1a60c3bda60",
        "name": "Generate Kotak Token",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 2012,
        "y": 896,
        "wires": [
            [
                "e41ed49051484327"
            ]
        ]
    },
    {
        "id": "923ddd5439c54c86",
        "type": "debug",
        "z": "2805f1a60c3bda60",
        "name": "BANK APPLICATIONS",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 400,
        "wires": []
    },
    {
        "id": "aa3a236123bc9135",
        "type": "debug",
        "z": "2805f1a60c3bda60",
        "name": "Business Partner Details",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 480,
        "wires": []
    },
    {
        "id": "399762f0b1893e06",
        "type": "debug",
        "z": "2805f1a60c3bda60",
        "name": "Kotak Lead push raw response",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 920,
        "wires": []
    },
    {
        "id": "8ab092bea6cc0e63",
        "type": "debug",
        "z": "2805f1a60c3bda60",
        "name": "Kotak document push raw response",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2430,
        "y": 880,
        "wires": []
    },
    {
        "id": "c1bd4465fad522d3",
        "type": "debug",
        "z": "2805f1a60c3bda60",
        "name": "Kotak Lead push JSON response",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 1000,
        "wires": []
    },
    {
        "id": "99f92cd62ad13faa",
        "type": "debug",
        "z": "2805f1a60c3bda60",
        "name": "Kotak document push JSON response",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2260,
        "y": 1100,
        "wires": []
    },
    {
        "id": "3851c5aea6b00e9b",
        "type": "debug",
        "z": "2805f1a60c3bda60",
        "name": "Files to be pushed",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "files",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2260,
        "y": 580,
        "wires": []
    },
    {
        "id": "8bdb2489d74cd2bd",
        "type": "function",
        "z": "2805f1a60c3bda60",
        "name": "Update Applicaiton State",
        "func": "const apiUrls = flow.get(\"API_URLS\");\n\nmsg.url = `${apiUrls.go.businessPartnerApplication}/update-external-variable`;\n\nmsg.method = \"post\";\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    businesspartnerid: msg.businessPartnerID,\n};\n\nmsg.payload = {\n    taskId: msg.taskID,\n    variableName: \"awaiting_lead_push_action\",\n    value: \"completed\",\n    type: \"string\",\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 700,
        "wires": [
            [
                "265cf3213ee709a4"
            ]
        ]
    },
    {
        "id": "265cf3213ee709a4",
        "type": "http request",
        "z": "2805f1a60c3bda60",
        "name": "Update Application State",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 2250,
        "y": 700,
        "wires": [
            [
                "f69a25e49067126d",
                "7aa67da8329944f4"
            ]
        ]
    },
    {
        "id": "f69a25e49067126d",
        "type": "debug",
        "z": "2805f1a60c3bda60",
        "name": "State Updated",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2350,
        "y": 760,
        "wires": []
    },
    {
        "id": "c3b87108f3b46b05",
        "type": "debug",
        "z": "2805f1a60c3bda60",
        "name": "Business Partner payload",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 920,
        "wires": []
    },
    {
        "id": "7aa67da8329944f4",
        "type": "loop",
        "z": "2805f1a60c3bda60",
        "name": "Bank Application Loop",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "payload",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-count",
        "x": 809,
        "y": 544,
        "wires": [
            [],
            [
                "6a4feee50a1c8f06"
            ]
        ]
    },
    {
        "id": "54f3c806e04c5ed4",
        "type": "loop",
        "z": "2805f1a60c3bda60",
        "name": "Bank file Loop",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "files",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-last",
        "x": 1729,
        "y": 704,
        "wires": [
            [
                "8bdb2489d74cd2bd"
            ],
            [
                "a99d25c0c09301e3"
            ]
        ]
    },
    {
        "id": "a350f99fb160fdf3",
        "type": "inject",
        "z": "e10b010af9b7eb48",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 60,
        "wires": [
            [
                "c3ed5642ddc4ec6f"
            ]
        ]
    },
    {
        "id": "c3ed5642ddc4ec6f",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "name": "Setting Global Variables",
        "func": "let BP_TYPE = \"DISTRIBUTOR\";\n\n\n\n\n\nconst ENVIRONMENT = env.get(\"ENVIRONMENT\");\nconst CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\");\n\nconst ROLE_ID = env.get(\"ROLE_ID\");\nconst EMAIL = env.get(\"SEEDING_EMAIL\");\nconst PASSWORD = env.get(\"SEEDING_PASSWORD\");\n// const RATE_OF_INTEREST = env.get(\"RATE_OF_INTEREST\");\n// let XLSX_FILE_PATH = env.get(\"XLSX_FILE_PATH\");\n// let XLSX_FILE_PATH = \"C:/Users/Ruthvik/Downloads/Format_File_BNPL_Seeding.xlsx\";\n\n\nconst SLEEP_TIME = 500;\nconst MIN_INVOICE_AMOUNT_THRESHOLD = 1000;\n\nlet PRODUCT_TYPE_ID;\n\n\n\n\nconst GO_SERVICE_URL = `https://actyv-platform-go-service.${ENVIRONMENT}.actyv.com/api`;\nconst PAYLATER_SERVICE_URL = `https://actyv-platform-paylater-service-v1.${ENVIRONMENT}.actyv.com/v1`;\nconst ADMIN_SERVICE_URL = `https://actyv-platform-admin-service.${ENVIRONMENT}.actyv.com/api`;\nconst AUTH_URL = `https://actyv-platform-admin-service.${ENVIRONMENT}.actyv.com/api/user/authenticateUser`;\n\nconst date = new Date();\n\nconst ENV_VARIABLES = {\n    \"GO_SERVICE_URL\": GO_SERVICE_URL,\n    \"PAYLATER_SERVICE_URL\": PAYLATER_SERVICE_URL,\n    \"ADMIN_SERVICE_URL\": ADMIN_SERVICE_URL,\n    \"GET_BP\": `${GO_SERVICE_URL}/business-partner/service`,\n    \"BP_USER\": `${ADMIN_SERVICE_URL}/business-partner-user/get/all`,\n    \"USER\": `${ADMIN_SERVICE_URL}/user`,\n    \"ROLE_USER_MAPPING\": `${ADMIN_SERVICE_URL}/role-user-mapping`,\n    \"BP_SALES_SUMMARY\": `${GO_SERVICE_URL}/business-partner-sales-summary`,\n    \"BP_BANK_RELATIONSHIP\": `${GO_SERVICE_URL}/business-relationship`,\n    \"LOAN_TERM\": `${PAYLATER_SERVICE_URL}/loan-terms`,\n    \"BNPL_PREFERENCE\": `${PAYLATER_SERVICE_URL}/bnpl-preference`,\n    \"AUTH_URL\": `${AUTH_URL}`,\n    \"CHECK_ROLE_USER_MAPPING\": `${ADMIN_SERVICE_URL}/role-user-mapping/byBusinessPartnerId`,\n    \"GET_SALES_SUMMARY\": `${GO_SERVICE_URL}/business-partner-sales-summary`,\n    \"CHECK_BP_RELATIONSHIP\": `${GO_SERVICE_URL}/business-relationship/service`,\n    \"TENOR_AND_RATE_SPREAD\": `${PAYLATER_SERVICE_URL}/tenor-and-rate-spread`,\n    \"YEAR\": date.getFullYear(),\n    \"MONTH\": date.getMonth() + 1,\n    // \"BUSINESSTYPE\" : `${BP_TYPE}`,\n    // \"RELATION1\": `${BP_TYPE}-BANK`,\n    // \"RELATION2\": `${BP_TYPE}-ENTERPRISE`,\n    \"CONFIG_KEY\": `${CONFIG_KEY}`,\n    // \"BANK_ID\": `${BANK_ID}`,\n    // \"ENTERPRISE_ID\": `${ENTERPRISE_ID}`,\n    \"ROLE_ID\": `${ROLE_ID}`,\n    \"EMAIL\": `${EMAIL}`,\n    \"PASSWORD\": `${PASSWORD}`,\n    \"SLEEP_TIME\": `${SLEEP_TIME}`,\n    //\"RATE_OF_INTEREST\": `${RATE_OF_INTEREST}`,\n    \"MIN_INVOICE_AMOUNT_THRESHOLD\": MIN_INVOICE_AMOUNT_THRESHOLD,\n    \"PRODUCT_TYPE_ID\": `${PRODUCT_TYPE_ID}`\n}\n\nglobal.set(\"ENV_VARIABLES\", ENV_VARIABLES);\n\n// msg.payload = `${XLSX_FILE_PATH}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 60,
        "wires": [
            [
                "f866a26c8d79e80a"
            ]
        ]
    },
    {
        "id": "f866a26c8d79e80a",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "name": "AuthenticateActyvEntityUserReq",
        "func": "\nconst EMAIL = env.get(\"ACTYV_ADMIN_EMAIL\");\nconst PASSWORD = env.get(\"ACTYV_ADMIN_PASSWORD\")\n// const EMAIL = env.get('EMAIL')\n// const PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \"password\": PASSWORD,\n    \"email\": EMAIL\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 60,
        "wires": [
            [
                "ccd6520d0545dd2e"
            ]
        ]
    },
    {
        "id": "f3a703a81cc53f1f",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "name": "saveActyvEntityUserToken",
        "func": "const env_var = global.get(\"ENV_VARIABLES\");\n\nconst token = msg.payload.idToken\nmsg.actyvToken = token;\n\nflow.set(\"actyvToken\", token);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 160,
        "wires": [
            [
                "25785f040374916c"
            ]
        ]
    },
    {
        "id": "25785f040374916c",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "name": "Getting Actyv Entity User",
        "func": "const actyvToken = flow.get(\"actyvToken\");\n\nconst ADMIN_URL = env.get('ADMIN_URL');\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`\n}\n\nmsg.url = `${ADMIN_URL}/api/user/getCurrentUser?url=${env.get(\"ACTYV_ENTITY_URL\")}`;\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 160,
        "wires": [
            [
                "2f04f87e67ae932a"
            ]
        ]
    },
    {
        "id": "2f04f87e67ae932a",
        "type": "http request",
        "z": "e10b010af9b7eb48",
        "name": "Getting Actyv_id",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 740,
        "y": 160,
        "wires": [
            [
                "d63937df0bb33f1a"
            ]
        ]
    },
    {
        "id": "d63937df0bb33f1a",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "name": "saveactyvId",
        "func": "flow.set(\"actyv_id\", msg.payload.actyvEntityId);\nmsg.actyvId = msg.payload.actyvEntityId\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 160,
        "wires": [
            [
                "5429e636e8546281",
                "7ed8c29f087d0c7b"
            ]
        ]
    },
    {
        "id": "7ed8c29f087d0c7b",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "name": "Setting Payload For Fetching INITIATED Status Files",
        "func": "// const enterpriseToken = flow.get(\"enterpriseToken\")\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/fileInfoBySeedingStatus/INITIATED`;\nconst flow_var = flow.get('FLOW_VARIABLES');\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${flow.get(\"actyvToken\")}`,\n    \"actyventityid\": `${flow.get(\"actyv_id\")}`\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'GET';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 260,
        "wires": [
            [
                "347aadb52390484b"
            ]
        ]
    },
    {
        "id": "347aadb52390484b",
        "type": "http request",
        "z": "e10b010af9b7eb48",
        "name": "INITIATED Files",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 640,
        "y": 260,
        "wires": [
            [
                "465dee93871ccd33",
                "f2b2ab4f7b63a53f"
            ]
        ]
    },
    {
        "id": "f2b2ab4f7b63a53f",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "name": "Looping and Segregating Files",
        "func": "const files = msg.payload.fileInfo.filter((file) => file.seedingType == \"BNPL_SEEDING\");\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\n\n\n\nfor (const file of files) {\n    console.log(\"file\", file)\n    if (file.seedingType == \"BNPL_SEEDING\") {\n        node.send({\n            ...file,\n            actyvId: msg.actyvId,\n            payload: file.fileId,\n            seedingType: file.seedingType,\n            isComplete: false,\n            logger: \"fileId for BNPL seeding\",\n            actyvToken: msg.actyvToken\n        })\n        sleep(200000)\n    }\n    \n}\nmsg.isComplete = true\nmsg.logger = \"No file found for BNPL\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 340,
        "wires": [
            [
                "3350d54812361092",
                "3882b081c5a4f96d"
            ]
        ]
    },
    {
        "id": "0a65496561eb3b5b",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\n\n\nflow.set(\"failedRows\", [])\n\nflow.set(\"failed_Create_BP\", []) \n\n// msg.fileId = msg.payload\nmsg.method = \"GET\"\nmsg.headers = {\n    fileType: \"xlsx\"\n}\nmsg.url = `${GO_URL}/file/read/${msg.fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 440,
        "wires": [
            [
                "faeee8d01a2f1865"
            ]
        ]
    },
    {
        "id": "faeee8d01a2f1865",
        "type": "http request",
        "z": "e10b010af9b7eb48",
        "name": "readFile",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 340,
        "y": 440,
        "wires": [
            [
                "4d28b8169dd1f162"
            ]
        ]
    },
    {
        "id": "d1dc9e4c47d0f95b",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "name": "read xls",
        "func": "let data = xlsx.read(msg.payload, { type: \"buffer\" })\nconst wsname = data.SheetNames[0];\nconst ws = data.Sheets[wsname];\nconst payload = xlsx.utils.sheet_to_json(ws);\nmsg.seedingData = payload\nmsg.completedSeeding = [],\nmsg.failedSeeding = []\nmsg.anchored = false;\nif(msg.enterpriseId){\n    msg.anchored = true\n}\n\nmsg.numOfRows = payload.length\nmsg.logger = \"read xlsx\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "xlsx",
                "module": "xlsx"
            }
        ],
        "x": 740,
        "y": 500,
        "wires": [
            [
                "6c120fb24d6ee767"
            ]
        ]
    },
    {
        "id": "7bde0c48d403dd02",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "name": "Loop",
        "func": "const users = msg.seedingData;\nconst ENTERPRISE_ID = msg.enterpriseId;\nconst BANK_ID = msg.bankId;\nflow.set(\"failedRows\", []);\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\nfor (const [key,user] of users.entries()) {\n    node.send({\n        ...msg,\n        payload : user,\n        isCompleted : \"false\",\n        ENTERPRISE_ID: ENTERPRISE_ID,\n        BANK_ID: BANK_ID,\n        actyvToken: msg.actyvToken,\n        isFileProcessingCompleted: key == users.length-1? true:false\n    })\n    await sleep(10000);\n}\nawait sleep(30000);\nmsg.isCompleted = \"true\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 660,
        "wires": [
            [
                "eaf1999ad283aa3a"
            ]
        ]
    },
    {
        "id": "eaf1999ad283aa3a",
        "type": "switch",
        "z": "e10b010af9b7eb48",
        "name": "",
        "property": "isCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 640,
        "wires": [
            [],
            [
                "28eb40dac764c10e"
            ]
        ]
    },
    {
        "id": "28eb40dac764c10e",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "name": "Creating  an Object which contains all info required in the flow",
        "func": "const document = msg.payload;\nmsg.obj = {\n    pan: document[\"Business Partner PAN\"],\n    gst: document[\"Business Partner GST\"],\n    mobileNo: document[\"Business Partner Phone\"],\n    email: document[\"Business Partner Email\"],\n    bankIdentifierByParent: document[\"Bank CRN\"],\n    bankAccountNumber: document[\"Loan Repayment Account Number\"],\n    bankIFSC: document[\"Loan Repayment Account IFSC\"],\n    bankName: document[\"Loan Repayment Account Name\"],\n    approvedLimit: document[\"Approved Limit\"],\n    bankProvidedLoanCodes: document[\"Loan Account Number\"],\n    businessPartnerId: \"\",\n    token: \"\",\n    businessType: \"\",\n    bnpl_preference: document[\"Create BNPL Preference\"]\n}\n\nconsole.log(msg.obj[\"bnpl_preference\"]);\n\nif (document[\"Rate Of Interest\"] !== undefined) {\n    msg.obj[\"rateOfInterest\"] = document[\"Rate Of Interest\"];\n}\n\nfunction checkAllMandatoryFieldsPresentOrNot(row) {\n    if (\n        validatePan(row[\"Business Partner PAN\"]) &&\n        validateGst(row[\"Business Partner GST\"]) &&\n        row[\"Loan Account Number\"] &&\n        validateApprovedLimit(row[\"Approved Limit\"]) &&\n        row[\"Loan Repayment Account Number\"] &&\n        row[\"Loan Repayment Account Name\"] &&\n        validateIFSC(row[\"Loan Repayment Account IFSC\"])\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n\n\n\n// validate IFSC\nfunction validateIFSC(ifsc) {\n    const IFSC_pattern = /^[A-Z]{4}0[A-Z0-9]{6}$/;\n\n    if (IFSC_pattern.test(ifsc)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\nfunction validateApprovedLimit(approvedLimit){\n    if (!isNaN(approvedLimit) && approvedLimit >= 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction validateInterestRate(interestRate){\n    if(!isNaN(interestRate) && interestRate >= 0){\n        return true;\n    }\n    return false;\n}\n\nfunction validatePan(pan) {\n    const panPattern = /^([A-Z]{5}[0-9]{4}[A-Z]{1})$/;\n\n    if (panPattern.test(pan)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction validateGst(gst) {\n    const gstinPattern =\n        /^([0-9]{2}[a-zA-Z]{5}[0-9]{4}[a-zA-Z]{1}[1-9A-Za-z]{1}Z[0-9A-Za-z]{1})$/;\n\n    if (gstinPattern.test(gst)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// function validateBNPLPreference(bnplpreference){\n//     if(bnplpreference === )\n// }\n\n//****************************************************************************************************************************************** */\n\n\n\nlet checkAllMandatoryFieldPresent = checkAllMandatoryFieldsPresentOrNot(document);\n\nlet a = true;\nif (document[\"Rate Of Interest\"] !== undefined) {\n    a = validateInterestRate(msg.obj[\"rateOfInterest\"]);\n}\ncheckAllMandatoryFieldPresent = checkAllMandatoryFieldPresent && a;\n\nconsole.log(checkAllMandatoryFieldPresent, \"checkALlMandatory Fields\");\nconsole.log(a, \"A\");\nlet message = checkAllMandatoryFieldPresent ? \"\" : \"All mandatory fields are not present\"\n\n\n\n\nconst isValidPan = validatePan(document[\"Business Partner PAN\"])\nif (!isValidPan) {\n    message = \"PAN number is not valid\"\n}\n\nconst isGstValid = validateGst(document[\"Business Partner GST\"])\nif (!isGstValid) {\n    message = \"GST number is not valid\"\n}\n\nconst isApprovedLimitValid = validateApprovedLimit(document[\"Approved Limit\"]);\nif(!isApprovedLimitValid){\n    message = \"Approved Limit is not valid\"\n}\n\nif (document[\"Rate Of Interest\"] !== undefined){\n    const isInterestRateValid = validateInterestRate(document[\"Rate Of Interest\"]);\n    if (!isInterestRateValid) {\n        message = \"Interest Rate is not valid\"\n    }\n}\n\nconst isIFSCValid = validateIFSC(document[\"Loan Repayment Account IFSC\"]);\nif(!isIFSCValid){\n    message = \"Invalid IFSC number\"\n}\n\n// const isBNPLPreferenceValid = validateBNPLPreference(document[\"Create BNPL Preference\"]);\n// if(!isBNPLPreferenceValid){\n//         message = \"Invalid BNPL Preference\"\n// }\n\n\nmsg.primaryChecks = false\nmsg.message = message\nif (checkAllMandatoryFieldPresent) {\n    msg.primaryChecks = true\n}\n\nconsole.log(isIFSCValid, \"IFSC\");\nconsole.log(document[\"Loan Repayment Account IFSC\"], \"IFSC Number\")\n// console.log()\n\nmsg.result = {\n    \"Business Partner ID\" : \"\",\n    \"User ID\": \"\",\n    \"Role User Mapping\": \"\",\n    \"Business Partner Sales Summary for current month\": \"\",\n    \"Business-Relationship with Bank\": \"\",\n    \"Business-Relationship with Enterprise\": \"\",\n    \"Create Loan Term\": \"\",\n    \"Update Loan Term\": \"\",\n    \"Fetch Tenor\": \"\",\n    \"Create BNPL Preference\": \"\"\n}\n\n\n\n\n\n\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 640,
        "wires": [
            [
                "6e8a0c799a048b6f",
                "eb73b122118443d1"
            ]
        ]
    },
    {
        "id": "bcc9af957cdc3d1a",
        "type": "http request",
        "z": "e10b010af9b7eb48",
        "name": "Get BP_ID",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 210,
        "y": 1000,
        "wires": [
            [
                "94013fc1946266a5",
                "ad8e82dba7527fc1"
            ]
        ]
    },
    {
        "id": "94013fc1946266a5",
        "type": "switch",
        "z": "e10b010af9b7eb48",
        "name": "",
        "property": "payload._id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 1000,
        "wires": [
            [
                "0aaf5703457c6ba7"
            ],
            [
                "2bf1063c49328a85"
            ]
        ]
    },
    {
        "id": "0aaf5703457c6ba7",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "name": "Failed Row Update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Failed to get business Partner with the GST\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "6ed6d2bc9fa1eb2a",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "name": "UnsuccessFul row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 960,
        "wires": []
    },
    {
        "id": "2bf1063c49328a85",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "name": "Get userId from businessPartnerId",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${actyvToken}`\n}\n\nif (msg.statusCode === 200){\n    const data = msg.payload;\n    msg.obj.businessPartnerId = data._id;\n    msg.result[\"Business Partner ID\"] = `${msg.obj.businessPartnerId}`;\n    msg.method = 'get';\n    msg.url = `${env_var.CHECK_BP_RELATIONSHIP}/${msg.obj.businessPartnerId}/${msg.ENTERPRISE_ID}`\n    // msg.url = `${env_var.CHECK_BP_RELATIONSHIP}/64521b0164c7df65fb660c22/${msg.ENTERPRISE_ID}`\n    // msg.url = `${env_var.BP_USER}/${msg.obj.businessPartnerId}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1080,
        "wires": [
            [
                "41fb77d98d67e924"
            ]
        ]
    },
    {
        "id": "41fb77d98d67e924",
        "type": "http request",
        "z": "e10b010af9b7eb48",
        "name": "getting relationship type",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 1080,
        "wires": [
            [
                "d30095cc60058e54",
                "e1c0c18b63717f48"
            ]
        ]
    },
    {
        "id": "b9d7205285b9cab1",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "name": "Get userId from businessPartnerId",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\n\nmsg.obj[\"businessType\"] = msg.payload.relationType.split(\"-\")[0];\n\nif (msg.obj.businessType === \"DISTRIBUTOR\") {\n    msg.product_type_id = msg.bankApplicationConfigId;\n}\nelse {\n    msg.product_type_id = msg.bankApplicationConfigId;\n}\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${actyvToken}`\n}\n\nmsg.method = 'get';\nmsg.url = `${env_var.BP_USER}/${msg.obj.businessPartnerId}`\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 1100,
        "wires": [
            [
                "4e6bfd5de2520860",
                "cff9537e06655f34"
            ]
        ]
    },
    {
        "id": "4e6bfd5de2520860",
        "type": "http request",
        "z": "e10b010af9b7eb48",
        "g": "7cfa0a2f3327f16b",
        "name": "Get User_ID",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 670,
        "y": 1180,
        "wires": [
            [
                "9d13c8b0d97bf08b",
                "602f059d51125800"
            ]
        ]
    },
    {
        "id": "465dee93871ccd33",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "name": "get initiated files",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 260,
        "wires": []
    },
    {
        "id": "9d13c8b0d97bf08b",
        "type": "switch",
        "z": "e10b010af9b7eb48",
        "g": "7cfa0a2f3327f16b",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 1300,
        "wires": [
            [
                "e94a24f58805dd25"
            ],
            [
                "c6353b86319ca405"
            ]
        ]
    },
    {
        "id": "13cfd26a88981db1",
        "type": "switch",
        "z": "e10b010af9b7eb48",
        "name": "",
        "property": "userExists",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 1620,
        "wires": [
            [
                "9f1a318ffa6b7b8f"
            ],
            [
                "f15eb261fa241aa1"
            ]
        ]
    },
    {
        "id": "6e8a0c799a048b6f",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "name": "debug 447",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 580,
        "wires": []
    },
    {
        "id": "252bf344e9972846",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "g": "c54beb9f06cab2cc",
        "name": "Setting Payload for creating loanTerm",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\n\nmsg.payload = {\n    bankID: msg.BANK_ID,\n    borrowerID: msg.obj.businessPartnerId,\n    enterpriseID: msg.ENTERPRISE_ID,\n    bankApplicationConfigID: msg.product_type_id\n    //rateOfInterest: Number(msg.obj.rateOfInterest)\n}\nif(msg.obj[\"rateOfInterest\"]!==undefined){\n    msg.payload[\"tenorAndRates\"] = [{ roi: msg.obj[\"rateOfInterest\"]}];\n    // msg.payload[\"rateOfInterest\"] = msg.obj[\"rateOfInterest\"]\n\n}\nmsg.url = env_var.LOAN_TERM;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 2380,
        "wires": [
            [
                "2bd681a5b3a18557",
                "8085aa350ddd5f74",
                "0fd10b5ec47e783b"
            ]
        ]
    },
    {
        "id": "78bd3c2fd28f9702",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "g": "c54beb9f06cab2cc",
        "name": "Setting Payload for udpating loanTerm",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\n\nconst data = msg.payload;\nmsg.loanTermId = data.id;\n\nif (msg.statusCode === 201 && msg.result[\"Create Loan Term\"] === \"\"){\n    msg.result[\"Create Loan Term\"] = `Loan Term Created: ${msg.loanTermId}`;\n}\n\nmsg.payload = {\n    loanTermsID : msg.loanTermId,\n    // loanTermsID: \"5b541302-db6a-4ecc-aa0e-d5d7036d3de0\",\n    approvedLimit: msg.obj.approvedLimit,\n    validTill: \"20/11/2025\",\n    loanGrantStatus: \"APPROVED\",\n    crnNumber: msg.obj.bankIdentifierByParent,\n    awaitingBalanceRefresh: false,\n    businessType: msg.obj.businessType,\n    bankProvidedLoanCodes:msg.obj.bankProvidedLoanCodes,\n}\nmsg.url = env_var.LOAN_TERM + \"/service/update\";\nmsg.method = 'patch';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 2500,
        "wires": [
            [
                "16de35257efede53",
                "17039c532174451f"
            ]
        ]
    },
    {
        "id": "2bd681a5b3a18557",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "g": "c54beb9f06cab2cc",
        "name": "Payload for creating loanTerm",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 2360,
        "wires": []
    },
    {
        "id": "16de35257efede53",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "g": "c54beb9f06cab2cc",
        "name": "Payload for updating loanTerm",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 2440,
        "wires": []
    },
    {
        "id": "8085aa350ddd5f74",
        "type": "http request",
        "z": "e10b010af9b7eb48",
        "g": "c54beb9f06cab2cc",
        "name": "Create Loan Term",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1330,
        "y": 2400,
        "wires": [
            [
                "6c590b487f09e352"
            ]
        ]
    },
    {
        "id": "17039c532174451f",
        "type": "http request",
        "z": "e10b010af9b7eb48",
        "g": "c54beb9f06cab2cc",
        "name": "Update Loan Term",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1690,
        "y": 2520,
        "wires": [
            [
                "59ded9cde23385ea",
                "be2ffd7cbe74294e"
            ]
        ]
    },
    {
        "id": "2f1ad69c77599714",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "g": "c54beb9f06cab2cc",
        "name": "Update Loan Term",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2270,
        "y": 2560,
        "wires": []
    },
    {
        "id": "d757b507d3fb4cc6",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "g": "c54beb9f06cab2cc",
        "name": "Checking If loanTerm exists",
        "func": "const actyvToken = flow.get(\"actyvToken\")\nconst env_var = global.get(\"ENV_VARIABLES\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nif (msg.statusCode === 200) {\n    if (msg.result[\"Business-Relationship with Bank\"] === \"No\") {\n        msg.result[\"Business-Relationship with Bank\"] = `Created ${msg.payload._id}`;\n    }\n    else {\n        msg.result[\"Business-Relationship with Bank\"] = `Exists`;\n    }\n}\nelse {\n    msg.result[\"Business-Relationship with Bank\"] = `${msg.statusCode} Error`\n}\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${actyvToken}`\n}\nmsg.url = `${env_var.LOAN_TERM}/service/fetchByBankID`;\nmsg.payload = {\"borrowerID\" : msg.obj.businessPartnerId,\n            \"enterpriseID\": msg.ENTERPRISE_ID,\n            \"bankID\": msg.BANK_ID};\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 2200,
        "wires": [
            [
                "a813f9cc12d6f140"
            ]
        ]
    },
    {
        "id": "a813f9cc12d6f140",
        "type": "http request",
        "z": "e10b010af9b7eb48",
        "g": "c54beb9f06cab2cc",
        "name": "Fetch Loan Term ",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1210,
        "y": 2200,
        "wires": [
            [
                "fff9bfb5e24875d2",
                "b8eceef7afbeb609"
            ]
        ]
    },
    {
        "id": "fff9bfb5e24875d2",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "g": "c54beb9f06cab2cc",
        "name": "Check If Loan Term Exists",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 2200,
        "wires": []
    },
    {
        "id": "749cb691036563fb",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "g": "c54beb9f06cab2cc",
        "name": "setting up payload for updating loadn term if it already exists",
        "func": "msg.payload = msg.payload[0];\nif(msg.statusCode === 201){\n    msg.result[\"Create Loan Term\"] = `Exists: ${msg.payload.id}`;\n}\nelse{\n    msg.result[\"Create Loan Term\"] = `${msg.statusCode} Error`;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 2500,
        "wires": [
            [
                "78bd3c2fd28f9702"
            ]
        ]
    },
    {
        "id": "f3d174bd1702744d",
        "type": "switch",
        "z": "e10b010af9b7eb48",
        "g": "c54beb9f06cab2cc",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 2400,
        "wires": [
            [
                "252bf344e9972846"
            ],
            [
                "749cb691036563fb"
            ]
        ]
    },
    {
        "id": "0fd10b5ec47e783b",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "g": "c54beb9f06cab2cc",
        "name": "Paylaod for creating loan_term",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 2460,
        "wires": []
    },
    {
        "id": "62899a6f62c39b5b",
        "type": "switch",
        "z": "e10b010af9b7eb48",
        "g": "7cfa0a2f3327f16b",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1350,
        "y": 1600,
        "wires": [
            [
                "4d291440988f74ec"
            ],
            [
                "f15eb261fa241aa1"
            ]
        ]
    },
    {
        "id": "4d291440988f74ec",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "g": "7cfa0a2f3327f16b",
        "name": "Set Role User Mapping Failed",
        "func": "\nconst failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Unable to set Role User Mapping \"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "59ded9cde23385ea",
        "type": "switch",
        "z": "e10b010af9b7eb48",
        "g": "c54beb9f06cab2cc",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1950,
        "y": 2500,
        "wires": [
            [
                "c2ca4e6a85bc7935"
            ],
            [
                "2f1ad69c77599714",
                "b038ff486f35e920"
            ]
        ]
    },
    {
        "id": "b8eceef7afbeb609",
        "type": "switch",
        "z": "e10b010af9b7eb48",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "201",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "201",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 70,
        "y": 2360,
        "wires": [
            [
                "adaf650139350595"
            ],
            [
                "f3d174bd1702744d"
            ]
        ]
    },
    {
        "id": "be2ffd7cbe74294e",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "g": "c54beb9f06cab2cc",
        "name": "debug 451",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 2440,
        "wires": []
    },
    {
        "id": "159c0ed404385998",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "g": "54609a9c7f708e09",
        "name": "Create BNPL Preference",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1590,
        "y": 2720,
        "wires": []
    },
    {
        "id": "6b7798857ae08830",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "g": "54609a9c7f708e09",
        "name": "Payload for creating BNPL preference",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 2760,
        "wires": []
    },
    {
        "id": "edd75e34366169f3",
        "type": "http request",
        "z": "e10b010af9b7eb48",
        "g": "54609a9c7f708e09",
        "name": "Create BNPL Preference",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1090,
        "y": 2800,
        "wires": [
            [
                "159c0ed404385998",
                "5a8d796db4c5857f"
            ]
        ]
    },
    {
        "id": "ef10db9bd06cfbde",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "g": "54609a9c7f708e09",
        "name": "Setting Payload for creating BNPL preference",
        "func": "// const env_var = global.get(\"ENV_VARIABLES\")\n// const flow_var = flow.get(\"FLOW_VARIABLES\")\n\n// msg.headers = {\n//     \"Authorization\": `Bearer ${flow.get(\"bp_token\")}`,\n//     \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n//     \"businesspartnerid\": flow.get(\"actyv_bp_id\"),\n//     \"bankid\": msg.BANK_ID\n// }\n\n// msg.DEFAULT_SPREAD_ID = msg.payload[0].id;\n\n// if (msg.statusCode === 201){\n//     msg.result[\"Fetch Tenor\"] = `Tenor Fetched ${msg.DEFAULT_SPREAD_ID}`\n// }\n// else{\n//     msg.result[\"Fetch Tenor\"] = `${msg.statusCode} Error`\n// }\n\n// msg.payload = {\n//     borrowerID: msg.obj.businessPartnerId,\n//     productTypeID: msg.product_type_id,\n//     defaultBankID: msg.BANK_ID,\n//     defaultSpreadID: msg.DEFAULT_SPREAD_ID,\n//     minInvoiceAmountThreshold: env_var.MIN_INVOICE_AMOUNT_THRESHOLD\n// }\n// msg.url = env_var.BNPL_PREFERENCE;\n// msg.method = 'post';\n\n// return msg;\n\nconst env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n// const actyvToken = flow.get(\"actyvToken\")\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow.get(\"actyvToken\") }`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    // \"businesspartnerid\": flow.get(\"actyv_bp_id\"),\n    \"bankid\": msg.BANK_ID,\n    \"actyventityid\": msg.actyvId\n}\n\nmsg.DEFAULT_SPREAD_ID = msg.payload[0].id;\n\nif (msg.statusCode === 201) {\n    msg.result[\"Fetch Tenor\"] = `Tenor Fetched ${msg.DEFAULT_SPREAD_ID}`\n}\nelse {\n    msg.result[\"Fetch Tenor\"] = `${msg.statusCode} Error`\n}\n\nmsg.payload = {\n    borrowerID: msg.obj.businessPartnerId,\n    bankApplicationConfigID: msg.product_type_id,\n    defaultBankID: msg.BANK_ID,\n    defaultSpreadID: msg.DEFAULT_SPREAD_ID,\n    minInvoiceAmountThreshold: env_var.MIN_INVOICE_AMOUNT_THRESHOLD\n}\nmsg.url = env_var.BNPL_PREFERENCE;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2800,
        "wires": [
            [
                "edd75e34366169f3",
                "6b7798857ae08830"
            ]
        ]
    },
    {
        "id": "b038ff486f35e920",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "g": "54609a9c7f708e09",
        "name": "Payload For fetching TenorAndRateSpread",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nconst sleep = async (milliseconds) => {\n  await new Promise(resolve => {\n    return setTimeout(resolve, milliseconds)\n  });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n  \"Authorization\": `Bearer ${actyvToken}`,\n  \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\nif (msg.statusCode === 200) {\n  msg.result[\"Update Loan Term\"] = `Updated: ${msg.loanTermId}`;\n}\nelse {\n  msg.result[\"Update Loan Term\"] = `${msg.statusCode} Error`;\n}\n\nmsg.payload = {\n  \"bankID\": msg.BANK_ID,\n  \"loanID\": msg.loanTermId,\n}\n\nmsg.url = env_var.TENOR_AND_RATE_SPREAD + \"/fetch\";\nmsg.method = 'POST';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2680,
        "wires": [
            [
                "03e08daf4c27d914"
            ]
        ]
    },
    {
        "id": "03e08daf4c27d914",
        "type": "http request",
        "z": "e10b010af9b7eb48",
        "g": "54609a9c7f708e09",
        "name": "Fetching TenorAndRateSpread",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1070,
        "y": 2680,
        "wires": [
            [
                "366b9620189f12a2",
                "8eaee83e912dc65f"
            ]
        ]
    },
    {
        "id": "366b9620189f12a2",
        "type": "switch",
        "z": "e10b010af9b7eb48",
        "g": "54609a9c7f708e09",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "201",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "201",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1350,
        "y": 2680,
        "wires": [
            [
                "1855bb3b74bc941c"
            ],
            [
                "ef10db9bd06cfbde"
            ]
        ]
    },
    {
        "id": "5a8d796db4c5857f",
        "type": "switch",
        "z": "e10b010af9b7eb48",
        "g": "54609a9c7f708e09",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "201",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "201",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1450,
        "y": 2800,
        "wires": [
            [
                "3bd583497f3e644f"
            ],
            [
                "6fe46ab7e076f653"
            ]
        ]
    },
    {
        "id": "e94a24f58805dd25",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "g": "7cfa0a2f3327f16b",
        "name": "USerID API Failed",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Unable to get the business partner user\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "adaf650139350595",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "name": "Fetch Loan term Failed",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Failed to get fetch the loan term\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 2260,
        "wires": [
            []
        ]
    },
    {
        "id": "c2ca4e6a85bc7935",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "g": "c54beb9f06cab2cc",
        "name": "Update Loan term API Failed",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Unable to update the Loan Term\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 2480,
        "wires": [
            []
        ]
    },
    {
        "id": "0aa2051031a6f0a2",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "g": "c54beb9f06cab2cc",
        "name": "debug 458",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3050,
        "y": 2460,
        "wires": []
    },
    {
        "id": "1855bb3b74bc941c",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "g": "54609a9c7f708e09",
        "name": "Fetch Tenor and Rate Spread API Failed",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Unable to fetch the Tenor and Rate spread \"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 2680,
        "wires": [
            []
        ]
    },
    {
        "id": "f217af3d720f0c7d",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "g": "54609a9c7f708e09",
        "name": "debug 459",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 2680,
        "wires": []
    },
    {
        "id": "3bd583497f3e644f",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "g": "54609a9c7f708e09",
        "name": "Create BNPL Preference API Failed",
        "func": "\n\nconst failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Unable to set the BNPL Preference\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 2780,
        "wires": [
            []
        ]
    },
    {
        "id": "118f03f5b0171db5",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "g": "54609a9c7f708e09",
        "name": "debug 460",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2510,
        "y": 2780,
        "wires": []
    },
    {
        "id": "8eaee83e912dc65f",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "name": "fetch tenor and rate spread",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 2620,
        "wires": []
    },
    {
        "id": "7a43d12bdccbdb5a",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "name": "debug 466",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "seedingData",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 500,
        "wires": []
    },
    {
        "id": "3350d54812361092",
        "type": "switch",
        "z": "e10b010af9b7eb48",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 340,
        "wires": [
            [],
            [
                "0a65496561eb3b5b"
            ]
        ]
    },
    {
        "id": "f2051a2219e6ed1e",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "name": "Files completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 340,
        "wires": []
    },
    {
        "id": "4d28b8169dd1f162",
        "type": "switch",
        "z": "e10b010af9b7eb48",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 440,
        "wires": [
            [
                "deeb0732c37da929"
            ],
            [
                "d1dc9e4c47d0f95b"
            ]
        ]
    },
    {
        "id": "deeb0732c37da929",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\nfailedRows.push({\n    applicantCRN: \"ALL\",\n    message: `File processing failed, couldn't read file`\n})\nmsg.remark = `File processing failed, couldn't read file`\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\n\nmsg.allFailed = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "1bd9611c2ddec665",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 400,
        "wires": []
    },
    {
        "id": "d30095cc60058e54",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "name": "debug 477",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1020,
        "wires": []
    },
    {
        "id": "e1c0c18b63717f48",
        "type": "switch",
        "z": "e10b010af9b7eb48",
        "name": "",
        "property": "payload._id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 870,
        "y": 1080,
        "wires": [
            [
                "08881c7b25f08b4b"
            ],
            [
                "b9d7205285b9cab1"
            ]
        ]
    },
    {
        "id": "08881c7b25f08b4b",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "name": "Failed Row Update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Unable to get the relationship type. Please contact Administrator\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1076.2532958984375,
        "y": 1049.2923583984375,
        "wires": [
            []
        ]
    },
    {
        "id": "4796f5dd3f4c63f3",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "name": "UnsuccessFul row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 1040,
        "wires": []
    },
    {
        "id": "9f1a318ffa6b7b8f",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "g": "7cfa0a2f3327f16b",
        "name": "Setting payload for roleUserMapping",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nconst userId = msg.userId;\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\n\n\n\n\nmsg.payload = {\n    userId : userId,\n    // userId: \"64521b00ce444f05fa197478\",\n    roleId: msg.roleId,\n    businessPartnerId : msg.obj.businessPartnerId,\n    // businessPartnerId: \"644788df588958bc97e5483\"\n}\nmsg.url = env_var.ROLE_USER_MAPPING;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1580,
        "wires": [
            [
                "f72e11dfe5e8a2a8",
                "8bfd6af33073ccf7"
            ]
        ]
    },
    {
        "id": "f72e11dfe5e8a2a8",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "g": "7cfa0a2f3327f16b",
        "name": "Payload for roleUserMapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 1560,
        "wires": []
    },
    {
        "id": "8bfd6af33073ccf7",
        "type": "http request",
        "z": "e10b010af9b7eb48",
        "g": "7cfa0a2f3327f16b",
        "name": "Role User Mapping",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1110,
        "y": 1600,
        "wires": [
            [
                "915c587691b0bea9",
                "62899a6f62c39b5b"
            ]
        ]
    },
    {
        "id": "915c587691b0bea9",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "g": "7cfa0a2f3327f16b",
        "name": "Result of roleUserMapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 1520,
        "wires": []
    },
    {
        "id": "51213845173363a8",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "g": "7cfa0a2f3327f16b",
        "name": "Check if RoleUserMapping exists",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\nif(msg.statusCode === 200){\n    \n\n    msg.headers = {\n        \"Authorization\": `Bearer ${actyvToken}`,\n        \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n    }\n\n    msg.url = `${env_var.CHECK_ROLE_USER_MAPPING}/${msg.obj.businessPartnerId}`;\n    msg.method = 'get';\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1420,
        "wires": [
            [
                "76a884c8b52d3d97"
            ]
        ]
    },
    {
        "id": "76a884c8b52d3d97",
        "type": "http request",
        "z": "e10b010af9b7eb48",
        "g": "7cfa0a2f3327f16b",
        "name": "Check Role User Mapping",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1070,
        "y": 1420,
        "wires": [
            [
                "4026601b0c422a67"
            ]
        ]
    },
    {
        "id": "d557a38277e215b9",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "g": "7cfa0a2f3327f16b",
        "name": "Result of Check Role User Mapping",
        "func": "const mappings = msg.payload;\nvar flag = 0;\n\nfor (const mapping of mappings) {\n    if(mapping.userId === msg.userId && mapping.roleId === msg.roleId){\n       \n        flag = 1;\n        break;\n    }\n};\n\nif(flag === 1){\n    msg.userExists = \"true\";\n    msg.result[\"Role User Mapping\"] = `Exists`\n}\nelse{\n    msg.userExists = \"false\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1500,
        "wires": [
            [
                "b35c661bb28363b0",
                "13cfd26a88981db1"
            ]
        ]
    },
    {
        "id": "b35c661bb28363b0",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "g": "7cfa0a2f3327f16b",
        "name": "Check Role User Mapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "userExists",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 1500,
        "wires": []
    },
    {
        "id": "4026601b0c422a67",
        "type": "switch",
        "z": "e10b010af9b7eb48",
        "g": "7cfa0a2f3327f16b",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1330,
        "y": 1420,
        "wires": [
            [
                "4a09aa02667bfacc"
            ],
            [
                "d557a38277e215b9"
            ]
        ]
    },
    {
        "id": "4a09aa02667bfacc",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "g": "7cfa0a2f3327f16b",
        "name": "Role User MApping API Failed",
        "func": "\n\nconst failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Unable to get the role for the business Partner\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "1584eff70e2aaec0",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "g": "7cfa0a2f3327f16b",
        "name": "UnsuccessFul row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 1360,
        "wires": []
    },
    {
        "id": "64c945c7316da60c",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "g": "7cfa0a2f3327f16b",
        "name": "UnsuccessFul row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 1560,
        "wires": []
    },
    {
        "id": "c6353b86319ca405",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "g": "7cfa0a2f3327f16b",
        "name": "Get role id",
        "func": "const data = msg.payload;\nmsg.userId = data[0].userId;\nmsg.result[\"User ID\"] = `${msg.userId}`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n   \n}\n\nmsg.method = 'POST';\nmsg.url = `${env.get(\"ADMIN_URL\")}/api/role/query`\nmsg.payload = {\n    \"query\": {\n        \"name\": \"paylater_bp_admin\"\n    }\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1340,
        "wires": [
            [
                "23449579b48821fc"
            ]
        ]
    },
    {
        "id": "23449579b48821fc",
        "type": "http request",
        "z": "e10b010af9b7eb48",
        "g": "7cfa0a2f3327f16b",
        "name": "Get role id",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1190,
        "y": 1340,
        "wires": [
            [
                "2406ba742ae51ee8",
                "c3eaef8b4bca019d"
            ]
        ]
    },
    {
        "id": "2406ba742ae51ee8",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "g": "7cfa0a2f3327f16b",
        "name": "set roleId",
        "func": "msg.roleId = msg.payload[0][\"_id\"]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 1340,
        "wires": [
            [
                "51213845173363a8"
            ]
        ]
    },
    {
        "id": "c3eaef8b4bca019d",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "g": "7cfa0a2f3327f16b",
        "name": "Get RoleID API",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 1260,
        "wires": []
    },
    {
        "id": "fcb7f294e061b538",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "g": "7cfa0a2f3327f16b",
        "name": "UnsuccessFul row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 1180,
        "wires": []
    },
    {
        "id": "7aa7a446a4279517",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "g": "c54beb9f06cab2cc",
        "name": "UnsuccessFul row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 2220,
        "wires": []
    },
    {
        "id": "6c590b487f09e352",
        "type": "switch",
        "z": "e10b010af9b7eb48",
        "name": "",
        "property": "payload.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1733.591796875,
        "y": 2355.90283203125,
        "wires": [
            [
                "d49e20ab48717f66"
            ],
            [
                "78bd3c2fd28f9702"
            ]
        ]
    },
    {
        "id": "d49e20ab48717f66",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "name": "Create Loan term API Failed",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Unable to create the Loan Term\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970.2584228515625,
        "y": 2337.5693359375,
        "wires": [
            []
        ]
    },
    {
        "id": "e334d463dd9ae70e",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "name": "debug 478",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2730.2584228515625,
        "y": 2317.5693359375,
        "wires": []
    },
    {
        "id": "ad8e82dba7527fc1",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "name": "debug 479",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 960,
        "wires": []
    },
    {
        "id": "6c120fb24d6ee767",
        "type": "switch",
        "z": "e10b010af9b7eb48",
        "name": "check number of rows",
        "property": "seedingData.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "100",
                "vt": "num"
            },
            {
                "t": "lte",
                "v": "100",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 160,
        "y": 560,
        "wires": [
            [
                "d863a9bc7262b91b"
            ],
            [
                "7bde0c48d403dd02"
            ]
        ]
    },
    {
        "id": "d863a9bc7262b91b",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "name": "Logger",
        "func": "msg.logger = \"No of rows greater than 100 not processing the file\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "9b7604ca39b12592",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "name": "File is not processed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 560,
        "wires": []
    },
    {
        "id": "a1aac800a0ec5ba1",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "name": "function 227",
        "func": "const env_var = global.get('ENV_VARIABLES');\nconst actyvToken = flow.get('actyvToken');\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\nmsg.url = env_var.GET_BP + \"/\" + msg.obj.gst;\n\nmsg.method = 'get';\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 940,
        "wires": [
            [
                "bcc9af957cdc3d1a",
                "4e412027ed70e762"
            ]
        ]
    },
    {
        "id": "f8bf30da58368f9c",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "name": "Checking if businessPartnerBankRelationship exists",
        "func": "const actyvToken = flow.get(\"actyvToken\")\nconst env_var = global.get(\"ENV_VARIABLES\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${actyvToken}`\n}\nmsg.url = `${env_var.CHECK_BP_RELATIONSHIP}/getByIdentifierByParent/${msg.obj.bankIdentifierByParent}`;\nmsg.method = 'get'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 740,
        "wires": [
            [
                "9ace1af8bcfb19ba"
            ]
        ]
    },
    {
        "id": "9ace1af8bcfb19ba",
        "type": "http request",
        "z": "e10b010af9b7eb48",
        "name": "Get Identifier By Parent - Bank",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 710,
        "y": 740,
        "wires": [
            [
                "d9d898d5d93b5171",
                "894210e4db2e8de5"
            ]
        ]
    },
    {
        "id": "d9d898d5d93b5171",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "name": "Checking if businessPartnerBankRelationship exists",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 720,
        "wires": []
    },
    {
        "id": "894210e4db2e8de5",
        "type": "switch",
        "z": "e10b010af9b7eb48",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 840,
        "wires": [
            [
                "08e7932a70f1720b",
                "bbb71d7336e4cab9"
            ],
            [
                "a1aac800a0ec5ba1"
            ]
        ]
    },
    {
        "id": "f753d797be734ea5",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "name": "Fetch Business Partner Relationship with Bank API got Failed",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Bank CRN already exists\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "3af4006ddc53acfe",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "name": "UnsuccessFul row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 760,
        "wires": []
    },
    {
        "id": "eb73b122118443d1",
        "type": "switch",
        "z": "e10b010af9b7eb48",
        "name": "primaryChecks",
        "property": "primaryChecks",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1280,
        "y": 640,
        "wires": [
            [
                "2684371e6443e843"
            ],
            [
                "f8bf30da58368f9c"
            ]
        ]
    },
    {
        "id": "2684371e6443e843",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: msg.message\n})\n\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nmsg.allFailed = false\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1549.1473388671875,
        "y": 576.8040161132812,
        "wires": [
            []
        ]
    },
    {
        "id": "a990944366498e1f",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 560,
        "wires": []
    },
    {
        "id": "3882b081c5a4f96d",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "name": "debug 480",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 400,
        "wires": []
    },
    {
        "id": "6fe46ab7e076f653",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "name": "Create BNPL Preference API Failed",
        "func": "\n\nconst failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 3160,
        "wires": [
            []
        ]
    },
    {
        "id": "10996c05536e6e0e",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "name": "debug 499",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 3160,
        "wires": []
    },
    {
        "id": "08e7932a70f1720b",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "name": "Checking which relationship exists",
        "func": "const array = msg.payload;\nmsg.move_forward = true;\nfor(let i=0; i<array.length; i++){\n    if (array[i].relationType === \"VENDOR-BANK\" || array[i].relationType === \"DISTRIBUTOR-BANK\"){\n        msg.move_forward = false;\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 860,
        "wires": [
            [
                "e769f3bba96dee98",
                "9ef7e0d8241cf8d1"
            ]
        ]
    },
    {
        "id": "e769f3bba96dee98",
        "type": "switch",
        "z": "e10b010af9b7eb48",
        "name": "",
        "property": "move_forward",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1110,
        "y": 860,
        "wires": [
            [
                "f753d797be734ea5"
            ],
            [
                "a1aac800a0ec5ba1"
            ]
        ]
    },
    {
        "id": "f15eb261fa241aa1",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "g": "cc9a2417f48cbec3",
        "name": "Setting Payload for businessPartnerBankRelationship",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`\n}\n\nmsg.result[\"Business-Relationship with Bank\"] = \"No\"\n\nmsg.payload = {\n    businessId: msg.obj.businessPartnerId,\n    parentBusinessId: msg.BANK_ID,\n    identifierByParent: msg.obj.bankIdentifierByParent,\n    bankAccountNumber: msg.obj.bankAccountNumber,\n    bankIFSC: msg.obj.bankIFSC,\n    bankName: msg.obj.bankName,\n    relationType: `${msg.obj.businessType}-BANK`,\n}\nmsg.url = env_var.BP_BANK_RELATIONSHIP;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 1940,
        "wires": [
            [
                "52f3fce79ec49b66",
                "d8e3bee5a2e466d2"
            ]
        ]
    },
    {
        "id": "52f3fce79ec49b66",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "g": "cc9a2417f48cbec3",
        "name": "Payload for businessPartnerBankRelationship",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 1880,
        "wires": []
    },
    {
        "id": "d8e3bee5a2e466d2",
        "type": "http request",
        "z": "e10b010af9b7eb48",
        "g": "cc9a2417f48cbec3",
        "name": "Business Partner Bank Relationship",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1520,
        "y": 1940,
        "wires": [
            [
                "f33b14e6efc04787"
            ]
        ]
    },
    {
        "id": "f33b14e6efc04787",
        "type": "switch",
        "z": "e10b010af9b7eb48",
        "g": "cc9a2417f48cbec3",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1790,
        "y": 1960,
        "wires": [
            [
                "2d9c2ce370ce070e"
            ],
            [
                "d757b507d3fb4cc6"
            ]
        ]
    },
    {
        "id": "2d9c2ce370ce070e",
        "type": "function",
        "z": "e10b010af9b7eb48",
        "g": "cc9a2417f48cbec3",
        "name": "API Failed",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"Bank CRN\"],\n    message: `${\"Unable to set the Business partner bank relationship type\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 1940,
        "wires": [
            []
        ]
    },
    {
        "id": "e2aef4aef8d88efb",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "g": "cc9a2417f48cbec3",
        "name": "get bp bank relation api failed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2820,
        "y": 1940,
        "wires": []
    },
    {
        "id": "9ef7e0d8241cf8d1",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "name": "debug 500",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 760,
        "wires": []
    },
    {
        "id": "bbb71d7336e4cab9",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "name": "debug 501",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 800,
        "wires": []
    },
    {
        "id": "ccd6520d0545dd2e",
        "type": "http request",
        "z": "e10b010af9b7eb48",
        "name": "Getting Actyv_id",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 920,
        "y": 60,
        "wires": [
            [
                "f3a703a81cc53f1f",
                "1d2fb10566bfe70d"
            ]
        ]
    },
    {
        "id": "5429e636e8546281",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "name": "debug 513",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 140,
        "wires": []
    },
    {
        "id": "1d2fb10566bfe70d",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "name": "debug 516",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 40,
        "wires": []
    },
    {
        "id": "cff9537e06655f34",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "name": "debug 524",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 1100,
        "wires": []
    },
    {
        "id": "602f059d51125800",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "name": "debug 525",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 1120,
        "wires": []
    },
    {
        "id": "4e412027ed70e762",
        "type": "debug",
        "z": "e10b010af9b7eb48",
        "name": "debug 526",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 900,
        "wires": []
    },
    {
        "id": "ddeff48661a2cc7c",
        "type": "inject",
        "z": "54c1df4d72a20f23",
        "name": "11 AM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 05 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 60,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "4fb03f43c3bb1776",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "getAllBankApplicationReq",
        "func": "const GO_URL = env.get('GO_URL')\n// msg.payload = {}\nconst status = \"AWAITING_CHANGE\"\n\nmsg.url = `${GO_URL}/bank-application?applicationStatus=${status}`\nmsg.method = 'GET'\n\nglobal.set(\"res\",msg.res)\n\nmsg.logger = `Get all bank-application with status #${status}`\nmsg.loggerNewLine = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 340,
        "wires": [
            [
                "62e18e9df45017d2",
                "4ed451025393dcea"
            ]
        ]
    },
    {
        "id": "53d48a465619440f",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "debug 529",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 340,
        "wires": []
    },
    {
        "id": "d0d669f58b8762b1",
        "type": "switch",
        "z": "54c1df4d72a20f23",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 110,
        "y": 460,
        "wires": [
            [
                "a37a81282f34f5d7"
            ],
            [
                "c5aa3d2658d8c241"
            ]
        ]
    },
    {
        "id": "c5aa3d2658d8c241",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "loop",
        "func": "delete msg.loggerNewLine\n\nfor (const application of msg.payload) {\n    let fieldValuePayload = {\n        key: \"date_of_effect\",\n        businessPartnerId: application.businessPartnerID,\n        bankApplicationId: application._id,\n    };\n    node.send({\n        ...msg,\n        payload: {},\n        application: application,\n        isComplete: false\n    })\n}\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 500,
        "wires": [
            [
                "caf532896799edb8"
            ]
        ]
    },
    {
        "id": "a37a81282f34f5d7",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "No bank application found",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 420,
        "wires": []
    },
    {
        "id": "8e2cb162631646c3",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "getFieldValue",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nmsg.url = `${GO_URL}/field-value/find-field-value`\nmsg.method = 'POST',\nmsg.headers = {}\nmsg.headers['x-actyv-api-config-key'] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = msg.payload\n\n\nmsg.logger = `Fetching the field value date_of_effect`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 2720,
        "wires": [
            [
                "84f5cf16a0f00ce8"
            ]
        ]
    },
    {
        "id": "82a355d9ad0b3cba",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "switch",
        "func": "delete msg.logger\n\n\nconst currentDate = moment().format(\"YYYY-MM-DD\");\n\nif (\n    !_.isEmpty(msg.payload[0].value) &&\n    msg.payload[0].value === currentDate\n) {\n    return msg\n}else{\n    throw new Error(\"Date is not matched\")\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            },
            {
                "var": "_",
                "module": "lodash"
            },
            {
                "var": "axios",
                "module": "axios"
            }
        ],
        "x": 130,
        "y": 2800,
        "wires": [
            [
                "db532dbb01a4b14c"
            ]
        ]
    },
    {
        "id": "db532dbb01a4b14c",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "getFieldValue",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nlet fieldValuePayloadLimit = {\n    key: \"new_limit\",\n    businessPartnerId: msg.application.businessPartnerID,\n    bankApplicationId: msg.application._id,\n};\n\nmsg.url = `${GO_URL}/field-value/find-field-value`\nmsg.method = 'POST',\nmsg.headers = {}\nmsg.headers['x-actyv-api-config-key'] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = fieldValuePayloadLimit\n\nmsg.logger = `get field value for #new_limit ${msg.payload}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 2800,
        "wires": [
            [
                "7f43be2a37fa1c8a"
            ]
        ]
    },
    {
        "id": "100104dafc6feb1e",
        "type": "switch",
        "z": "54c1df4d72a20f23",
        "name": "",
        "property": "payload[0].value",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 2840,
        "wires": [
            [
                "4018442cada35c98"
            ],
            [
                "3077688270d325a9"
            ]
        ]
    },
    {
        "id": "4018442cada35c98",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "Field value empty",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 2820,
        "wires": []
    },
    {
        "id": "3077688270d325a9",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "getLoanTerms",
        "func": "delete msg.logger\n\nconst PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\n\nlet roiUpdateResponse = {};\nconst fieldValueLimit = msg.payload\n\nconst loanTermPayload = {\n    borrowerID: msg.application.businessPartnerID,\n    bankID: msg.application.bankId,\n    enterpriseID: msg.application.enterpriseId,\n};\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/service/fetchByBankID`\nmsg.method = 'POST'\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = loanTermPayload\n\nmsg.fieldValueLimit = fieldValueLimit\n\nmsg.logger = `Fetching Loan term for ${loanTermPayload}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 3000,
        "wires": [
            [
                "beb91cdc81a796c1"
            ]
        ]
    },
    {
        "id": "cd4d941d372b7d2d",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "limitUpdatepayload",
        "func": "const limitUpdatepayload = {\n    loanTermsID: msg.payload[0].id,\n    approvedLimit: msg.fieldValueLimit[0].value,\n};\n\nmsg.old_approved_limit = msg.payload[0].approvedLimit\nmsg.new_approved_limit = msg.fieldValueLimit[0].value\n\n// flow.set(\"old_approved_limit\", msg.payload[0].approvedLimit)\n// flow.set(\"new_approved_limit\", msg.fieldValueLimit[0].value)\n\nmsg.payload = limitUpdatepayload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 3000,
        "wires": [
            [
                "59e01e7174969fdd",
                "86d5e4e31786ba0d"
            ]
        ]
    },
    {
        "id": "86d5e4e31786ba0d",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "updateLoanTerm",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/service/update`\nmsg.method = 'PATCH',\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = msg.payload\n\nmsg.logger = `Update the loan term`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 3120,
        "wires": [
            [
                "5d648cb39ffaa7c1"
            ]
        ]
    },
    {
        "id": "32f62b7eb82855dc",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "Limit updated:",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 3140,
        "wires": []
    },
    {
        "id": "4aa920e6d37d5e5b",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "getFieldValue",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nmsg.limitUpdateResponse = msg.payload\n\nlet fieldValuePayloadRoi = {\n    key: \"new_roi\",\n    businessPartnerId: msg.application.businessPartnerID,\n    bankApplicationId: msg.application._id,\n};\n\nmsg.url = `${GO_URL}/field-value/find-field-value`\nmsg.method = 'POST'\nmsg.headers = {}\nmsg.headers['x-actyv-api-config-key'] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = fieldValuePayloadRoi\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 3280,
        "wires": [
            [
                "45c9d99bc139c2f9"
            ]
        ]
    },
    {
        "id": "92d6cbf8e7d82be5",
        "type": "switch",
        "z": "54c1df4d72a20f23",
        "name": "",
        "property": "payload[0].value",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 552,
        "y": 3278,
        "wires": [
            [
                "bfc3ed8399bfb18e"
            ],
            [
                "6ffe482e96391e0d"
            ]
        ]
    },
    {
        "id": "bfc3ed8399bfb18e",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "Field value empty",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 772,
        "y": 3258,
        "wires": []
    },
    {
        "id": "6ffe482e96391e0d",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "ROI Update",
        "func": "const PAYLATER_URL = env.get(\"PAYLATER_URL\")\n\nconst roiUpdatePayload = {\n    bankID: msg.application.bankId,\n    borrowerID: msg.application.businessPartnerID,\n    bankSpread: parseFloat(msg.payload[0].value),\n};\n\nmsg.new_roi = parseFloat(msg.payload[0].value)\n\nmsg.url = `${PAYLATER_URL}/v1/tenor-and-rate-spread/update-roi`\nmsg.method = 'PATCH',\nmsg.payload = roiUpdatePayload\nconst token = flow.get(\"actyv_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers['actyventityid'] = msg.actyvEntityId\n\nmsg.logger = `Update ROI ${roiUpdatePayload}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 3440,
        "wires": [
            [
                "d2ac4134a9a6d60c"
            ]
        ]
    },
    {
        "id": "a4bf6828db69ddb3",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "ROI Updated",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 3440,
        "wires": []
    },
    {
        "id": "77bd2ae0e20f46fb",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "Switch 1",
        "func": "console.log({ limitUpdateResponse: msg.limitUpdateResponse,roiUpdate:msg.payload,application:msg.application})\nif (\n    !_.isEmpty(msg.limitUpdateResponse) && !_.isEmpty(msg.payload)\n) {\n    return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "_",
                "module": "lodash"
            }
        ],
        "x": 140,
        "y": 3540,
        "wires": [
            [
                "50318f8d80f440c9"
            ]
        ]
    },
    {
        "id": "50318f8d80f440c9",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "updateBPMNVariable",
        "func": "const CAMUNDA_BASE_URL = env.get(\"CAMUNDA_BASE_URL\")\n\nconst variableName =  \"awaiting_change_action\"\n\nmsg.url = `${CAMUNDA_BASE_URL}/engine-rest/process-instance/${msg.application.workflowTaskID}/variables/${variableName}`\nmsg.method = 'PUT',\nmsg.payload = { value: true }\n\nmsg.logger = `Update BPMN variable`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 3540,
        "wires": [
            [
                "2c9332d5e21eb09a"
            ]
        ]
    },
    {
        "id": "e431bdf356b0a2cb",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 4540,
        "wires": []
    },
    {
        "id": "9b60a8a0bf06cc64",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "sendEmailReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\n// const oldApprovedLimit = flow.get('old_approved_limit') || \"\"\n// const newApprovedLimit = flow.get('new_approved_limit') || \"\"\n// const oldROI = flow.get(\"old_roi\") || \"\"\n// const newROI = flow.get('new_roi') || \"\"\n\nconst oldApprovedLimit = msg.old_approved_limit\nconst newApprovedLimit = msg.new_approved_limit\nconst oldROI = msg.old_roi\nconst newROI = msg.new_roi\n\nconst oldApprovedLimitCurrencyFormat = new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(+oldApprovedLimit)\nconst newApprovedLimitCurrencyFormat = new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(+newApprovedLimit)\n\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n  \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\nconst emails = [\n  // `${msg.businessPartnerEmail}`,\n  // \"mahesh.kumar@actyv.com\",\n  // \"vijaychand@actyv.com\",\n  // \"anand.rastogi@actyv.com\",\n  // \"aniruddha@actyv.com\",\n  // \"shailvi.shukla@actyv.com\",\n  \"ramu.bugudi@actyv.com\",\n  \"saravanakumar.k.intern@actyv.com\"\n]\nmsg.payload = {\n  \"from\": \"help@actyv.com\",\n  \"to\": emails,\n  \"subject\": `actyv BNPL ROI and LIMIT update`,\n  // \"html\": `${msg.error}`,\n  \"html\": `\n<html>\n  <body>\n    <p>Dear <strong>${msg.payload.businessName}</strong></p>\n    <p>\n      Your Paylater limit from the ${msg.bankName} is changed from ${oldApprovedLimitCurrencyFormat} to\n      ${newApprovedLimitCurrencyFormat}.\n    </p>\n    <p>ROI is changed from ${oldROI}% to ${newROI}%.</p>\n    <p>These changes will be effective from ${new Date().toLocaleDateString()}.</p>\n\n    <p>For any queries please contact: ${msg.bankEmailId}.</p>\n\n    Thanks, <br />\n    ${msg.bankName}\n  </body>\n</html>\n`,\n  \"priority\": \"high\"\n}\n\n\nmsg.logger = `Send emails to ${emails} with ${{oldROI,newROI,oldApprovedLimitCurrencyFormat,newApprovedLimitCurrencyFormat}}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 4540,
        "wires": [
            [
                "afb72e3475a07ec3"
            ]
        ]
    },
    {
        "id": "9ccbc1d17af5cc24",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "debug 530",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 2740,
        "wires": []
    },
    {
        "id": "746d6a0c78bcaf34",
        "type": "http in",
        "z": "54c1df4d72a20f23",
        "name": "",
        "url": "/api/updates-roi",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 218,
        "y": 62,
        "wires": [
            [
                "7853ee583d8a3cd1"
            ]
        ]
    },
    {
        "id": "67040ea8156b3f38",
        "type": "inject",
        "z": "54c1df4d72a20f23",
        "name": "4 PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 10 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 50,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "d5465782d6410735",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "Get user",
        "func": "const ADMIN_URL = env.get(\"ADMIN_URL\")\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nmsg.url = `${ADMIN_URL}/api/business-partner-user/all/businessPartner/${msg.application.businessPartnerID}`\nmsg.method = 'GET'\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n\nmsg.logger = `Get user for business partner ID ${msg.application.businessPartnerID}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 3720,
        "wires": [
            [
                "e6a8db0a8a0bccd1"
            ]
        ]
    },
    {
        "id": "97ccc4678549542d",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "Get user email",
        "func": "const ADMIN_URL = env.get(\"ADMIN_URL\")\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nmsg.url = `${ADMIN_URL}/api/user?_id=${msg.payload[0].userId}`\nmsg.method = 'GET'\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n\nmsg.logger = `Fetch the user with id #${msg.payload[0].userId}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 3840,
        "wires": [
            [
                "2c55d5dd8502f326"
            ]
        ]
    },
    {
        "id": "a578b377a086f320",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 3720,
        "wires": []
    },
    {
        "id": "ffe5772f4bc4786a",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 552,
        "y": 3838,
        "wires": []
    },
    {
        "id": "b5bb503529928258",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "getFieldValueCurrentLimit",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nmsg.businessPartnerEmail = msg.payload.email\n\nlet fieldValuePayloadRoi = {\n    key: \"current_limit\",\n    businessPartnerId: msg.application.businessPartnerID,\n    bankApplicationId: msg.application._id,\n};\n\nmsg.url = `${GO_URL}/field-value/find-field-value`\nmsg.method = 'POST'\nmsg.headers = {}\nmsg.headers['x-actyv-api-config-key'] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = fieldValuePayloadRoi\n\nmsg.logger = `Fetch the field value for #current_limit`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 3960,
        "wires": [
            [
                "2df8230879022375"
            ]
        ]
    },
    {
        "id": "5a29f1fb46f63ccc",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "getFieldValueCurrentRoi",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nmsg.limitUpdateResponse = msg.payload\n\nlet fieldValuePayloadRoi = {\n    key: \"current_roi\",\n    businessPartnerId: msg.application.businessPartnerID,\n    bankApplicationId: msg.application._id,\n};\n\nmsg.url = `${GO_URL}/field-value/find-field-value`\nmsg.method = 'POST'\nmsg.headers = {}\nmsg.headers['x-actyv-api-config-key'] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = fieldValuePayloadRoi\n\nmsg.logger = `Fetch the field value for #current_roi`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 4100,
        "wires": [
            [
                "b64efa33568eabcf"
            ]
        ]
    },
    {
        "id": "e2e0a045c46993b4",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 3960,
        "wires": []
    },
    {
        "id": "711c7966e1353824",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 652,
        "y": 4098,
        "wires": []
    },
    {
        "id": "ba246423798a867f",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "getBank",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nmsg.old_roi = parseFloat(msg.payload[0].value)\n\nmsg.url = `${GO_URL}/bank/${msg.application.bankId}`\nmsg.method = 'GET'\n\nmsg.logger = `Fetch the bank with id #${msg.application.bankId}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 4240,
        "wires": [
            [
                "30cfc3a7a03ebc9d"
            ]
        ]
    },
    {
        "id": "41e2a6ed8c2daecb",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 4240,
        "wires": []
    },
    {
        "id": "141ba4e5597b523c",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "getBusinessPartner",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\n\nmsg.bankName = msg.payload.name\nmsg.bankEmailId = msg?.payload?.eSignTenant?.emailId\n\nmsg.url = `${GO_URL}/business-partner/get/${msg.application.businessPartnerID}`\nmsg.method = 'GET'\nmsg.headers = {}\nmsg.headers['x-actyv-api-config-key'] = X_ACTYV_API_CONFIG_KEY\n\nmsg.logger = `Get business partner with id #${msg.application.businessPartnerID}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 167.14285278320312,
        "y": 4381.428464889526,
        "wires": [
            [
                "4afec5cfcf3f0be1"
            ]
        ]
    },
    {
        "id": "d26ca99b738f817e",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "Before send email",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 660,
        "y": 4380,
        "wires": []
    },
    {
        "id": "1b1e6ccd565565cf",
        "type": "inject",
        "z": "54c1df4d72a20f23",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 100,
        "wires": [
            [
                "5a58dd8511ef279e"
            ]
        ]
    },
    {
        "id": "7853ee583d8a3cd1",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "checkTheHeaders",
        "func": "const X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nif(msg.req.headers[\"x-actyv-api-config-key\"]===X_ACTYV_API_CONFIG_KEY){\n    msg.isKeyPresent = true\n}else{\n    msg.isKeyPresent = false\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 462,
        "y": 62,
        "wires": [
            [
                "49ee069864a1f878"
            ]
        ]
    },
    {
        "id": "49ee069864a1f878",
        "type": "switch",
        "z": "54c1df4d72a20f23",
        "name": "",
        "property": "isKeyPresent",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 702,
        "y": 62,
        "wires": [
            [
                "4a5e970554629200"
            ],
            [
                "5a58dd8511ef279e"
            ]
        ]
    },
    {
        "id": "4a5e970554629200",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "",
        "func": "msg.payload = {\n    \"statusCode\": 403,\n    \"message\": \"Unauthorized\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 872,
        "y": 42,
        "wires": [
            [
                "ee718b5865c6b986"
            ]
        ]
    },
    {
        "id": "ee718b5865c6b986",
        "type": "http response",
        "z": "54c1df4d72a20f23",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1062,
        "y": 42,
        "wires": []
    },
    {
        "id": "caf532896799edb8",
        "type": "switch",
        "z": "54c1df4d72a20f23",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 392,
        "y": 498,
        "wires": [
            [
                "479abd44fef56c36"
            ],
            [
                "b555a45c5946230b"
            ]
        ]
    },
    {
        "id": "479abd44fef56c36",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "",
        "func": "msg.payload = {\n    \"statusCode\": 200,\n    \"message\": \"Success\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 582,
        "y": 478,
        "wires": [
            [
                "94287b822a72ce94"
            ]
        ]
    },
    {
        "id": "94287b822a72ce94",
        "type": "http response",
        "z": "54c1df4d72a20f23",
        "d": true,
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 752,
        "y": 478,
        "wires": []
    },
    {
        "id": "fabf5cb11e3dd220",
        "type": "inject",
        "z": "54c1df4d72a20f23",
        "name": "9 PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 15 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 50,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "427578bf3b0171f6",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "updateBPMNVariable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 862,
        "y": 3538,
        "wires": []
    },
    {
        "id": "59e01e7174969fdd",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "limitUpdatepayload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 3000,
        "wires": []
    },
    {
        "id": "5a58dd8511ef279e",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst ENTERPRISE_EMAIL = \"darkhorse@gmail.com\"\nconst PASSWORD = \"User@123\"\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": ENTERPRISE_EMAIL,\n    \"password\": PASSWORD\n};\n\nmsg.loggerNewLine = true\nmsg.logger = `Authenticate ${ENTERPRISE_EMAIL}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 200,
        "wires": [
            [
                "a44c87b25daa64d1"
            ]
        ]
    },
    {
        "id": "a44c87b25daa64d1",
        "type": "subflow:0cbd918f05921aae",
        "z": "54c1df4d72a20f23",
        "name": "Authenticate",
        "x": 470,
        "y": 200,
        "wires": [
            [
                "1138311793192a1b"
            ],
            [
                "6ce136809f0735fc"
            ]
        ]
    },
    {
        "id": "1138311793192a1b",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "set actyv Entity Token",
        "func": "flow.set('actyv_token', msg.payload.idToken);\n\n// msg.ent_token = msg.payload.idToken\n\nconsole.log(msg.payload.idToken,\"TOKEN\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 200,
        "wires": [
            [
                "b52f4b5d97476436",
                "e1056199a8eac295"
            ]
        ]
    },
    {
        "id": "e1056199a8eac295",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "actyvEntityToken",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 200,
        "wires": []
    },
    {
        "id": "b52f4b5d97476436",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "getActyvEntityUser",
        "func": "\n\nconst GO_URL = env.get('GO_URL');\n\n\nmsg.url = `${GO_URL}/actyv-entity`;\nmsg.method = \"GET\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 280,
        "wires": [
            [
                "1c19b2da76012b7d"
            ]
        ]
    },
    {
        "id": "1c19b2da76012b7d",
        "type": "subflow:0cbd918f05921aae",
        "z": "54c1df4d72a20f23",
        "name": "getCurrentUser",
        "x": 500,
        "y": 280,
        "wires": [
            [
                "fcb12f69774a4e85"
            ],
            []
        ]
    },
    {
        "id": "fcb12f69774a4e85",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "Save actyv entity ID",
        "func": "const found = msg.payload.find(entity => entity.key === \"dark_horse\") ?? undefined\n\nconsole.log(found?._id)\nif (found) {\n    msg.actyvEntityId = found?._id\n    msg.payload = found?._id\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 280,
        "wires": [
            [
                "4fb03f43c3bb1776"
            ]
        ]
    },
    {
        "id": "73a75947df12050e",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "actyvEntityID",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 280,
        "wires": []
    },
    {
        "id": "6ce136809f0735fc",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "actyvEntityToken",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 160,
        "wires": []
    },
    {
        "id": "84f5cf16a0f00ce8",
        "type": "subflow:0cbd918f05921aae",
        "z": "54c1df4d72a20f23",
        "name": "getFieldValue",
        "x": 440,
        "y": 2720,
        "wires": [
            [
                "8fa3115d0abc1ddd",
                "82a355d9ad0b3cba",
                "9ccbc1d17af5cc24"
            ],
            [
                "04348a8e196546a5"
            ]
        ]
    },
    {
        "id": "7f43be2a37fa1c8a",
        "type": "subflow:0cbd918f05921aae",
        "z": "54c1df4d72a20f23",
        "name": "getFieldValue",
        "x": 540,
        "y": 2800,
        "wires": [
            [
                "100104dafc6feb1e",
                "238512a77087660a"
            ],
            [
                "4bf2c5bee169551e"
            ]
        ]
    },
    {
        "id": "beb91cdc81a796c1",
        "type": "subflow:0cbd918f05921aae",
        "z": "54c1df4d72a20f23",
        "name": "getLoanTerms",
        "x": 398,
        "y": 3002,
        "wires": [
            [
                "cd4d941d372b7d2d",
                "4442e74a18967a6f"
            ],
            [
                "408d739d35b861f5"
            ]
        ]
    },
    {
        "id": "5d648cb39ffaa7c1",
        "type": "subflow:0cbd918f05921aae",
        "z": "54c1df4d72a20f23",
        "name": "updateLoanTerm",
        "x": 408,
        "y": 3122,
        "wires": [
            [
                "32f62b7eb82855dc",
                "dcd74cb5bdc67405",
                "4aa920e6d37d5e5b"
            ],
            [
                "5ff0ff6ef456c3cb",
                "32f62b7eb82855dc"
            ]
        ]
    },
    {
        "id": "45c9d99bc139c2f9",
        "type": "subflow:0cbd918f05921aae",
        "z": "54c1df4d72a20f23",
        "name": "getFieldValue",
        "x": 380,
        "y": 3280,
        "wires": [
            [
                "92d6cbf8e7d82be5",
                "c4d2febf147f3b82"
            ],
            [
                "77384b16edb41f61"
            ]
        ]
    },
    {
        "id": "d2ac4134a9a6d60c",
        "type": "subflow:0cbd918f05921aae",
        "z": "54c1df4d72a20f23",
        "name": "ROI update",
        "x": 350,
        "y": 3440,
        "wires": [
            [
                "a4bf6828db69ddb3",
                "77bd2ae0e20f46fb",
                "1ea6f95a595e4433"
            ],
            [
                "6aee2241e9fdd6fd",
                "a4bf6828db69ddb3"
            ]
        ]
    },
    {
        "id": "2c9332d5e21eb09a",
        "type": "subflow:0cbd918f05921aae",
        "z": "54c1df4d72a20f23",
        "name": "updateBPMNVariable",
        "x": 620,
        "y": 3540,
        "wires": [
            [
                "427578bf3b0171f6",
                "827e24efa1350e71",
                "d5465782d6410735"
            ],
            [
                "5ea7b5c7411f40e6",
                "427578bf3b0171f6"
            ]
        ]
    },
    {
        "id": "e6a8db0a8a0bccd1",
        "type": "subflow:0cbd918f05921aae",
        "z": "54c1df4d72a20f23",
        "name": "Get user",
        "x": 360,
        "y": 3720,
        "wires": [
            [
                "a578b377a086f320",
                "1ac4ab4e977779ed",
                "97ccc4678549542d"
            ],
            [
                "6e51ad892d484b9a",
                "a578b377a086f320"
            ]
        ]
    },
    {
        "id": "2c55d5dd8502f326",
        "type": "subflow:0cbd918f05921aae",
        "z": "54c1df4d72a20f23",
        "name": "Get user id",
        "x": 370,
        "y": 3840,
        "wires": [
            [
                "ffe5772f4bc4786a",
                "001a59608ace1be5",
                "b5bb503529928258"
            ],
            [
                "ffe5772f4bc4786a",
                "5960933aeb8b0e14"
            ]
        ]
    },
    {
        "id": "2df8230879022375",
        "type": "subflow:0cbd918f05921aae",
        "z": "54c1df4d72a20f23",
        "name": "getFieldValue",
        "x": 440,
        "y": 3960,
        "wires": [
            [
                "5a29f1fb46f63ccc",
                "a175e257301b3207",
                "e2e0a045c46993b4"
            ],
            [
                "e2e0a045c46993b4",
                "5748bc69c4b3fefc"
            ]
        ]
    },
    {
        "id": "b64efa33568eabcf",
        "type": "subflow:0cbd918f05921aae",
        "z": "54c1df4d72a20f23",
        "name": "getFieldValue",
        "x": 440,
        "y": 4100,
        "wires": [
            [
                "711c7966e1353824",
                "ba246423798a867f",
                "def18c6e5725d0f3"
            ],
            [
                "711c7966e1353824",
                "f7732eb84373ae4d"
            ]
        ]
    },
    {
        "id": "30cfc3a7a03ebc9d",
        "type": "subflow:0cbd918f05921aae",
        "z": "54c1df4d72a20f23",
        "name": "getBank",
        "x": 320,
        "y": 4240,
        "wires": [
            [
                "41e2a6ed8c2daecb",
                "141ba4e5597b523c",
                "1d912c8ae16ba5a2"
            ],
            [
                "41e2a6ed8c2daecb",
                "9aa52684e40f3adc"
            ]
        ]
    },
    {
        "id": "4afec5cfcf3f0be1",
        "type": "subflow:0cbd918f05921aae",
        "z": "54c1df4d72a20f23",
        "name": "getBusinessPartner",
        "x": 407.1428527832031,
        "y": 4381.428464889526,
        "wires": [
            [
                "d26ca99b738f817e",
                "9b60a8a0bf06cc64",
                "529ab2f3b5bd0c35"
            ],
            [
                "d26ca99b738f817e",
                "b442531f54e220c9"
            ]
        ]
    },
    {
        "id": "afb72e3475a07ec3",
        "type": "subflow:0cbd918f05921aae",
        "z": "54c1df4d72a20f23",
        "name": "send email",
        "x": 390,
        "y": 4540,
        "wires": [
            [
                "4b0b92cf0e695a3a"
            ],
            [
                "4b0b92cf0e695a3a"
            ]
        ]
    },
    {
        "id": "4bf2c5bee169551e",
        "type": "subflow:951a533bb3498fe6",
        "z": "54c1df4d72a20f23",
        "name": "",
        "x": 860,
        "y": 2780,
        "wires": [
            []
        ]
    },
    {
        "id": "8fa3115d0abc1ddd",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "logger",
        "func": "msg.payload = `Fetched the field value for #new_limit and length ${msg.payload.length}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 2680,
        "wires": [
            [
                "1e2b9528dcb1eefa"
            ]
        ]
    },
    {
        "id": "1e2b9528dcb1eefa",
        "type": "subflow:951a533bb3498fe6",
        "z": "54c1df4d72a20f23",
        "name": "",
        "x": 740,
        "y": 2680,
        "wires": [
            []
        ]
    },
    {
        "id": "aebc22ba66294c20",
        "type": "subflow:951a533bb3498fe6",
        "z": "54c1df4d72a20f23",
        "name": "",
        "x": 960,
        "y": 480,
        "wires": [
            [
                "4e9a986a81f519fe"
            ]
        ]
    },
    {
        "id": "4e9a986a81f519fe",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "join",
        "func": "delete msg.logger\ndelete msg.logger2\ndelete msg.loggerNewLine\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "04348a8e196546a5",
        "type": "subflow:951a533bb3498fe6",
        "z": "54c1df4d72a20f23",
        "name": "",
        "x": 640,
        "y": 2740,
        "wires": [
            [
                "9ccbc1d17af5cc24"
            ]
        ]
    },
    {
        "id": "238512a77087660a",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "logger",
        "func": "msg.payload = `Fetched the field value for #date_of_effect and length ${msg.payload.length}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 2780,
        "wires": [
            [
                "4bf2c5bee169551e"
            ]
        ]
    },
    {
        "id": "408d739d35b861f5",
        "type": "subflow:951a533bb3498fe6",
        "z": "54c1df4d72a20f23",
        "name": "",
        "x": 680,
        "y": 2940,
        "wires": [
            []
        ]
    },
    {
        "id": "4442e74a18967a6f",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "logger",
        "func": "msg.payload = `Succesfully fetched the loan term`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 2940,
        "wires": [
            [
                "408d739d35b861f5"
            ]
        ]
    },
    {
        "id": "dcd74cb5bdc67405",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "logger",
        "func": "msg.payload = `loan term updated succesfully`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 3080,
        "wires": [
            [
                "5ff0ff6ef456c3cb"
            ]
        ]
    },
    {
        "id": "5ff0ff6ef456c3cb",
        "type": "subflow:951a533bb3498fe6",
        "z": "54c1df4d72a20f23",
        "name": "",
        "x": 740,
        "y": 3080,
        "wires": [
            []
        ]
    },
    {
        "id": "c4d2febf147f3b82",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "logger",
        "func": "msg.payload = `Fetched the field value for #new_roi and length ${msg.payload.length}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 3220,
        "wires": [
            [
                "77384b16edb41f61"
            ]
        ]
    },
    {
        "id": "77384b16edb41f61",
        "type": "subflow:951a533bb3498fe6",
        "z": "54c1df4d72a20f23",
        "name": "",
        "x": 680,
        "y": 3220,
        "wires": [
            []
        ]
    },
    {
        "id": "1ea6f95a595e4433",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "logger",
        "func": "msg.payload = `ROI updated succesfully`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 3380,
        "wires": [
            [
                "6aee2241e9fdd6fd"
            ]
        ]
    },
    {
        "id": "6aee2241e9fdd6fd",
        "type": "subflow:951a533bb3498fe6",
        "z": "54c1df4d72a20f23",
        "name": "",
        "x": 640,
        "y": 3380,
        "wires": [
            []
        ]
    },
    {
        "id": "827e24efa1350e71",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "logger",
        "func": "msg.payload = `BPMN variable updated succesfully`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 3460,
        "wires": [
            [
                "5ea7b5c7411f40e6"
            ]
        ]
    },
    {
        "id": "5ea7b5c7411f40e6",
        "type": "subflow:951a533bb3498fe6",
        "z": "54c1df4d72a20f23",
        "name": "",
        "x": 920,
        "y": 3460,
        "wires": [
            []
        ]
    },
    {
        "id": "1ac4ab4e977779ed",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "logger",
        "func": "msg.payload = `Fetched the #${msg.payload.length} bp users `\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 3660,
        "wires": [
            [
                "6e51ad892d484b9a"
            ]
        ]
    },
    {
        "id": "6e51ad892d484b9a",
        "type": "subflow:951a533bb3498fe6",
        "z": "54c1df4d72a20f23",
        "name": "",
        "x": 600,
        "y": 3660,
        "wires": [
            []
        ]
    },
    {
        "id": "5960933aeb8b0e14",
        "type": "subflow:951a533bb3498fe6",
        "z": "54c1df4d72a20f23",
        "name": "",
        "x": 640,
        "y": 3800,
        "wires": [
            []
        ]
    },
    {
        "id": "001a59608ace1be5",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "logger",
        "func": "msg.payload = `Fetched the user `\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 3800,
        "wires": [
            [
                "5960933aeb8b0e14"
            ]
        ]
    },
    {
        "id": "a175e257301b3207",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "logger",
        "func": "msg.payload = `Fetched the field value for current limit ${msg.payload.length} `\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 3920,
        "wires": [
            [
                "5748bc69c4b3fefc"
            ]
        ]
    },
    {
        "id": "5748bc69c4b3fefc",
        "type": "subflow:951a533bb3498fe6",
        "z": "54c1df4d72a20f23",
        "name": "",
        "x": 720,
        "y": 3920,
        "wires": [
            []
        ]
    },
    {
        "id": "def18c6e5725d0f3",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "logger",
        "func": "msg.payload = `Fetched the field value for current_roi ${msg.payload.length} `\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 4060,
        "wires": [
            [
                "f7732eb84373ae4d"
            ]
        ]
    },
    {
        "id": "f7732eb84373ae4d",
        "type": "subflow:951a533bb3498fe6",
        "z": "54c1df4d72a20f23",
        "name": "",
        "x": 720,
        "y": 4060,
        "wires": [
            []
        ]
    },
    {
        "id": "1d912c8ae16ba5a2",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "logger",
        "func": "msg.payload = `Fetched the bank `\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 4200,
        "wires": [
            [
                "9aa52684e40f3adc"
            ]
        ]
    },
    {
        "id": "9aa52684e40f3adc",
        "type": "subflow:951a533bb3498fe6",
        "z": "54c1df4d72a20f23",
        "name": "",
        "x": 600,
        "y": 4200,
        "wires": [
            []
        ]
    },
    {
        "id": "529ab2f3b5bd0c35",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "logger",
        "func": "msg.payload = `Fetched the business partner `\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 4340,
        "wires": [
            [
                "b442531f54e220c9"
            ]
        ]
    },
    {
        "id": "b442531f54e220c9",
        "type": "subflow:951a533bb3498fe6",
        "z": "54c1df4d72a20f23",
        "name": "",
        "x": 700,
        "y": 4340,
        "wires": [
            []
        ]
    },
    {
        "id": "4b0b92cf0e695a3a",
        "type": "subflow:951a533bb3498fe6",
        "z": "54c1df4d72a20f23",
        "name": "",
        "x": 540,
        "y": 4540,
        "wires": [
            [
                "e431bdf356b0a2cb"
            ]
        ]
    },
    {
        "id": "54d5480c5a0f9878",
        "type": "subflow:951a533bb3498fe6",
        "z": "54c1df4d72a20f23",
        "name": "",
        "x": 869.9999885559082,
        "y": 392.8571367263794,
        "wires": [
            []
        ]
    },
    {
        "id": "204053f607d6f926",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "logger",
        "func": "msg.payload = `Fetched the bank applications and length ${msg.payload.length}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 739.9999885559082,
        "y": 392.8571367263794,
        "wires": [
            [
                "54d5480c5a0f9878"
            ]
        ]
    },
    {
        "id": "62e18e9df45017d2",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "debug 531",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 420,
        "wires": []
    },
    {
        "id": "b555a45c5946230b",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "get ROI req",
        "func": "\n\nconst PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\nconst bankApplicationID = msg.application._id\nmsg.url = `${PAYLATER_URL}/v1/form-field/fetch?bankApplicationID=${bankApplicationID}`\n\nmsg.headers = {\n    Authorization: `Bearer ${flow.get(\"actyv_token\")}`\n}\n\n\nmsg.logger = `Get updated ROI `\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 580,
        "wires": [
            [
                "95a3882a1a232f7c"
            ]
        ]
    },
    {
        "id": "95a3882a1a232f7c",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "54c1df4d72a20f23",
        "name": "",
        "x": 390,
        "y": 580,
        "wires": [
            [
                "6f11c201608d05a7",
                "588a1a5c617fba22"
            ],
            []
        ]
    },
    {
        "id": "6f11c201608d05a7",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "switch",
        "func": "delete msg.logger\n\nconst dateOfEffect = msg?.payload?.formData?.validFrom\n// const currentDate = moment().format(\"YYYY-MM-DD\");\nconst currentDate = moment().add(1, 'days').format(\"YYYY-MM-DD\");\nmsg.formData = msg.payload.formData\nif (\n    !_.isEmpty(dateOfEffect) &&\n    dateOfEffect === currentDate\n) {\n    return msg\n}else{\n    throw new Error(\"Date is not matched\")\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            },
            {
                "var": "_",
                "module": "lodash"
            },
            {
                "var": "axios",
                "module": "axios"
            }
        ],
        "x": 690,
        "y": 580,
        "wires": [
            [
                "e3797b83e0d047a0"
            ]
        ]
    },
    {
        "id": "e3797b83e0d047a0",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "getLoanTerms",
        "func": "\n\nconst PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\n\nlet roiUpdateResponse = {};\nconst fieldValueLimit = msg.payload\n\nconst loanTermPayload = {\n    borrowerID: msg.application.businessPartnerID,\n    bankID: msg.application.bankId,\n    enterpriseID: msg.application.enterpriseId,\n};\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/service/fetchByBankID`\nmsg.method = 'POST'\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = loanTermPayload\n\n\nmsg.logger = `Fetching Loan term for ${loanTermPayload}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 660,
        "wires": [
            [
                "0652818a639353fc"
            ]
        ]
    },
    {
        "id": "4b6056ae94babe97",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "limitUpdatepayload",
        "func": "const limitUpdatepayload = {\n    loanTermsID: msg.payload[0].id,\n    approvedLimit: msg.formData.newLimit,\n};\n\n// msg.old_approved_limit = msg.payload[0].approvedLimit\n// msg.new_approved_limit = msg.fieldValueLimit[0].value\n\n// flow.set(\"old_approved_limit\", msg.payload[0].approvedLimit)\n// flow.set(\"new_approved_limit\", msg.fieldValueLimit[0].value)\n\nmsg.payload = limitUpdatepayload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 700,
        "wires": [
            [
                "bd49c6863c23c5b5",
                "9bc72af979b77a62"
            ]
        ]
    },
    {
        "id": "9bc72af979b77a62",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "updateLoanTerm",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/service/update`\nmsg.method = 'PATCH',\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = msg.payload\n\nmsg.logger = `Update the loan term`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 780,
        "wires": [
            [
                "b61d900a5e86573d"
            ]
        ]
    },
    {
        "id": "0652818a639353fc",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "54c1df4d72a20f23",
        "name": "getLoanTerms",
        "x": 420,
        "y": 660,
        "wires": [
            [
                "418ec4e1128bb14a",
                "4b6056ae94babe97"
            ],
            []
        ]
    },
    {
        "id": "b61d900a5e86573d",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "54c1df4d72a20f23",
        "name": "updateLoanTerm",
        "x": 450,
        "y": 780,
        "wires": [
            [
                "5e274f394ca9d762",
                "ccda39b3bc06d3fb"
            ],
            [
                "ccda39b3bc06d3fb",
                "5e274f394ca9d762"
            ]
        ]
    },
    {
        "id": "5e274f394ca9d762",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "ROI Update",
        "func": "const PAYLATER_URL = env.get(\"PAYLATER_URL\")\nconst {newRoi,newTenor,newPenalRoi,oldRoi,oldTenor,oldPenalRoi} = msg.formData\nlet roiUpdatePayload = {\n    bankID: msg.application.bankId,\n    borrowerID: msg.application.businessPartnerID,\n    bankSpread: newRoi?parseFloat(newRoi): parseFloat(oldRoi),\n    tenor: newTenor? parseFloat(newTenor) : parseFloat(oldTenor),\n    penalROI: newPenalRoi? parseFloat(newPenalRoi): parseFloat(oldPenalRoi),\n};\n\nconsole.log({ newRoi, newTenor, newPenalRoi })\n\n// if(newRoi){\n// roiUpdatePayload[\"bankSpread\"] = parseFloat(newRoi)\n// }\n\n// if(newTenor){\n//     roiUpdatePayload[\"tenor\"] = parseFloat(newTenor)\n// }\n\n// if(newPenalRoi){\n//     roiUpdatePayload[\"penalROI\"] = parseFloat(newPenalRoi)\n// }\n\n\n// msg.new_roi = parseFloat(msg.payload[0].value)\nmsg.limitUpdateResponse = msg.payload\nmsg.url = `${PAYLATER_URL}/v1/tenor-and-rate-spread/update-roi`\nmsg.method = 'PATCH',\nmsg.payload = roiUpdatePayload\nconst token = flow.get(\"actyv_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers['actyventityid'] = msg.actyvEntityId\n\nmsg.logger = `Update ROI ${roiUpdatePayload}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 860,
        "wires": [
            [
                "02eacd16694c0f27",
                "4152ac95844b5097"
            ]
        ]
    },
    {
        "id": "40b87e45246d68e3",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "ROI Updated",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 860,
        "wires": []
    },
    {
        "id": "f65a6d7d7f8c5648",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "Switch 1",
        "func": "console.log({ limitUpdateResponse: msg.limitUpdateResponse,roiUpdate:msg.payload,application:msg.application})\nif (\n    !_.isEmpty(msg.limitUpdateResponse) && !_.isEmpty(msg.payload)\n) {\n    return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "_",
                "module": "lodash"
            }
        ],
        "x": 220,
        "y": 960,
        "wires": [
            [
                "a4fc6fa4efa89709"
            ]
        ]
    },
    {
        "id": "a4fc6fa4efa89709",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "updateBPMNVariable",
        "func": "const CAMUNDA_BASE_URL = env.get(\"CAMUNDA_BASE_URL\")\n\nconst variableName =  \"awaiting_change_action\"\n\nmsg.url = `${CAMUNDA_BASE_URL}/engine-rest/process-instance/${msg.application.workflowTaskID}/variables/${variableName}`\nmsg.method = 'PUT',\nmsg.payload = { value: true }\n\nmsg.logger = `Update BPMN variable`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 960,
        "wires": [
            [
                "4fd7179cd0ea0b0d",
                "c159e6d89b759145"
            ]
        ]
    },
    {
        "id": "4fd7179cd0ea0b0d",
        "type": "subflow:0cbd918f05921aae",
        "z": "54c1df4d72a20f23",
        "name": "updateBPMNVariable",
        "x": 700,
        "y": 960,
        "wires": [
            [
                "fc825a2d5d99b2f2",
                "4fbbe2607128aadc"
            ],
            [
                "fc825a2d5d99b2f2"
            ]
        ]
    },
    {
        "id": "fc825a2d5d99b2f2",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "updateBPMNVariable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 960,
        "wires": []
    },
    {
        "id": "02eacd16694c0f27",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "54c1df4d72a20f23",
        "name": "ROI update",
        "x": 430,
        "y": 860,
        "wires": [
            [
                "40b87e45246d68e3",
                "f65a6d7d7f8c5648"
            ],
            [
                "40b87e45246d68e3"
            ]
        ]
    },
    {
        "id": "4fbbe2607128aadc",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "Get user",
        "func": "const ADMIN_URL = env.get(\"ADMIN_URL\")\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nmsg.url = `${ADMIN_URL}/api/business-partner-user/all/businessPartner/${msg.application.businessPartnerID}`\nmsg.method = 'GET'\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n\nmsg.logger = `Get user for business partner ID ${msg.application.businessPartnerID}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1080,
        "wires": [
            [
                "20e0054dca341c35"
            ]
        ]
    },
    {
        "id": "83f2abf9fb6d4b61",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "get user",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 1080,
        "wires": []
    },
    {
        "id": "3078fb33c0c2cfed",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "Get user email",
        "func": "const ADMIN_URL = env.get(\"ADMIN_URL\")\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nmsg.url = `${ADMIN_URL}/api/user?_id=${msg.payload[0].userId}`\nmsg.method = 'GET'\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n\nmsg.logger = `Fetch the user with id #${msg.payload[0].userId}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1200,
        "wires": [
            [
                "ab59966848841782"
            ]
        ]
    },
    {
        "id": "f26471b6250da209",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "get user id",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 652,
        "y": 1198,
        "wires": []
    },
    {
        "id": "4aee70cab9c58954",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "getBank",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\n\n\nmsg.url = `${GO_URL}/bank/${msg.application.bankId}`\nmsg.method = 'GET'\n\nmsg.logger = `Fetch the bank with id #${msg.application.bankId}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1340,
        "wires": [
            [
                "de16ee918ad79100"
            ]
        ]
    },
    {
        "id": "058fc6fb058c8015",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "get bank",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 1340,
        "wires": []
    },
    {
        "id": "521d8ea37e1017bc",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "getBusinessPartner",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\n\nmsg.bankName = msg.payload.name\nmsg.bankEmailId = msg?.payload?.eSignTenant?.emailId\n\nmsg.url = `${GO_URL}/business-partner/get/${msg.application.businessPartnerID}`\nmsg.method = 'GET'\nmsg.headers = {}\nmsg.headers['x-actyv-api-config-key'] = X_ACTYV_API_CONFIG_KEY\n\nmsg.logger = `Get business partner with id #${msg.application.businessPartnerID}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 267.1428527832031,
        "y": 1481.4284648895264,
        "wires": [
            [
                "756dda62800eccd7"
            ]
        ]
    },
    {
        "id": "6c1094f364d6365e",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "Before send email",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 760,
        "y": 1480,
        "wires": []
    },
    {
        "id": "e8c4a015a8f14421",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "sendEmailReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\n// const oldApprovedLimit = flow.get('old_approved_limit') || \"\"\n// const newApprovedLimit = flow.get('new_approved_limit') || \"\"\n// const oldROI = flow.get(\"old_roi\") || \"\"\n// const newROI = flow.get('new_roi') || \"\"\n\n// const oldApprovedLimit = msg.old_approved_limit\nconst oldApprovedLimit = msg.formData.oldLimit\nconst newApprovedLimit = msg.formData.newLimit\nconst oldROI = msg.formData.oldRoi\nconst newROI = msg.formData.newRoi\n\nconst { newTenor, oldTenor, newPenalRoi, oldPenalRoi, validFrom} = msg.formData\n\nconst oldApprovedLimitCurrencyFormat = new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(+oldApprovedLimit)\nconst newApprovedLimitCurrencyFormat = new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(+newApprovedLimit)\n\nfunction changeDateFormat(date){\n  return date.split(\"-\").reverse().join(\"/\")\n}\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n  \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\nconst emails = [\n  // `${msg.businessPartnerEmail}`,\n  // \"mahesh.kumar@actyv.com\",\n  // \"vijaychand@actyv.com\",\n  // \"anand.rastogi@actyv.com\",\n  // \"aniruddha@actyv.com\",\n  // \"shailvi.shukla@actyv.com\",\n  // \"ramu.bugudi@actyv.com\",\n  \"saravanakumar.k@actyv.com\",\n  \"shravan.pm@actyv.com\",\n  \n]\nmsg.payload = {\n  \"from\": \"help@actyv.com\",\n  \"to\": emails,\n  \"subject\": `actyv BNPL ROI and LIMIT update`,\n  // \"html\": `${msg.error}`,\n  \"html\": `\n<html>\n  <body>\n    <p>Dear <strong>${msg.payload.businessName}</strong></p>\n    ${newApprovedLimit ?`<p>\n      Your Paylater limit from the ${msg.bankName} is changed from ${oldApprovedLimitCurrencyFormat} to\n      ${newApprovedLimitCurrencyFormat}.\n    </p>`:\"\"}\n    ${newROI ? `<p>ROI is changed from ${oldROI}% to ${newROI}%.</p>`:\"\"}\n    ${newTenor ? `<p>Tenor is changed from ${oldTenor} days to ${newTenor} days.</p>`:\"\"}\n    ${ newPenalRoi ? `<p>Penal interest is changed from ${oldPenalRoi}% to ${newPenalRoi}%.</p>`:\"\"}\n    <p>These changes will be effective from ${changeDateFormat(validFrom)}.</p>\n\n    <p>For any queries please contact: ${msg.bankEmailId}.</p>\n\n    Thanks, <br />\n    ${msg.bankName}\n  </body>\n</html>\n`,\n  \"priority\": \"high\"\n}\n\n\nmsg.logger = `Send emails to ${emails} with ${{oldROI,newROI,oldApprovedLimitCurrencyFormat,newApprovedLimitCurrencyFormat}}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1640,
        "wires": [
            [
                "1bda4db26af40098",
                "48b0466ece0c182d"
            ]
        ]
    },
    {
        "id": "82d09376240c73da",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 1640,
        "wires": []
    },
    {
        "id": "20e0054dca341c35",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "54c1df4d72a20f23",
        "name": "Get User",
        "x": 440,
        "y": 1080,
        "wires": [
            [
                "83f2abf9fb6d4b61",
                "3078fb33c0c2cfed"
            ],
            [
                "83f2abf9fb6d4b61"
            ]
        ]
    },
    {
        "id": "ab59966848841782",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "54c1df4d72a20f23",
        "name": "Get User Id",
        "x": 450,
        "y": 1200,
        "wires": [
            [
                "f26471b6250da209",
                "4aee70cab9c58954"
            ],
            [
                "f26471b6250da209"
            ]
        ]
    },
    {
        "id": "de16ee918ad79100",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "54c1df4d72a20f23",
        "name": "get Bank",
        "x": 420,
        "y": 1340,
        "wires": [
            [
                "058fc6fb058c8015",
                "521d8ea37e1017bc"
            ],
            [
                "058fc6fb058c8015"
            ]
        ]
    },
    {
        "id": "756dda62800eccd7",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "54c1df4d72a20f23",
        "name": "getBusinessPartner",
        "x": 510,
        "y": 1480,
        "wires": [
            [
                "6c1094f364d6365e",
                "e8c4a015a8f14421"
            ],
            [
                "6c1094f364d6365e"
            ]
        ]
    },
    {
        "id": "1bda4db26af40098",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "54c1df4d72a20f23",
        "name": "send Email",
        "x": 450,
        "y": 1640,
        "wires": [
            [
                "82d09376240c73da"
            ],
            [
                "82d09376240c73da"
            ]
        ]
    },
    {
        "id": "418ec4e1128bb14a",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "get Loan terms",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 660,
        "wires": []
    },
    {
        "id": "ccda39b3bc06d3fb",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "update Loan term",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 780,
        "wires": []
    },
    {
        "id": "bd49c6863c23c5b5",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "debug 532",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 700,
        "wires": []
    },
    {
        "id": "22e1224dfc242870",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst ENTERPRISE_EMAIL = \"darkhorse@gmail.com\"\nconst PASSWORD = \"User@123\"\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": ENTERPRISE_EMAIL,\n    \"password\": PASSWORD\n};\n\nmsg.loggerNewLine = true\nmsg.logger = `Authenticate ${ENTERPRISE_EMAIL}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 2340,
        "wires": [
            [
                "0e187b31b1f915d5"
            ]
        ]
    },
    {
        "id": "900fde4381c25ce0",
        "type": "function",
        "z": "54c1df4d72a20f23",
        "name": "set actyv Entity Token",
        "func": "flow.set('actyv_token', msg.payload.idToken);\n\n// msg.ent_token = msg.payload.idToken\n\nconsole.log(msg.payload.idToken,\"TOKEN\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 2340,
        "wires": [
            []
        ]
    },
    {
        "id": "0e187b31b1f915d5",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "54c1df4d72a20f23",
        "name": "",
        "x": 430,
        "y": 2340,
        "wires": [
            [
                "b81cbace6bf05fe1"
            ],
            []
        ]
    },
    {
        "id": "b81cbace6bf05fe1",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "debug 533",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 2300,
        "wires": []
    },
    {
        "id": "b5272393fdda28d5",
        "type": "inject",
        "z": "54c1df4d72a20f23",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 2340,
        "wires": [
            [
                "22e1224dfc242870"
            ]
        ]
    },
    {
        "id": "4152ac95844b5097",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "debug 534",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 840,
        "wires": []
    },
    {
        "id": "588a1a5c617fba22",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "Get ROI",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 540,
        "wires": []
    },
    {
        "id": "c159e6d89b759145",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "debug 555",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 920,
        "wires": []
    },
    {
        "id": "4ed451025393dcea",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "54c1df4d72a20f23",
        "name": "getAllBankApplication",
        "x": 620,
        "y": 340,
        "wires": [
            [
                "53d48a465619440f",
                "d0d669f58b8762b1"
            ],
            [
                "53d48a465619440f"
            ]
        ]
    },
    {
        "id": "48b0466ece0c182d",
        "type": "debug",
        "z": "54c1df4d72a20f23",
        "name": "debug 595",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 1740,
        "wires": []
    },
    {
        "id": "74c2fd689703f7df",
        "type": "inject",
        "z": "9c867e890410d7fd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 60,
        "wires": [
            [
                "bf881b205517ffac"
            ]
        ]
    },
    {
        "id": "bf881b205517ffac",
        "type": "function",
        "z": "9c867e890410d7fd",
        "name": "Setting Global Variables",
        "func": "let BP_TYPE = \"DISTRIBUTOR\";\n\n\n\n\n\nconst ENVIRONMENT = env.get(\"ENVIRONMENT\");\nconst CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\");\n\nconst ROLE_ID = env.get(\"ROLE_ID\");\nconst EMAIL = env.get(\"SEEDING_EMAIL\");\nconst PASSWORD = env.get(\"SEEDING_PASSWORD\");\n// const RATE_OF_INTEREST = env.get(\"RATE_OF_INTEREST\");\n// let XLSX_FILE_PATH = env.get(\"XLSX_FILE_PATH\");\n// let XLSX_FILE_PATH = \"C:/Users/Ruthvik/Downloads/Format_File_BNPL_Seeding.xlsx\";\n\n\nconst SLEEP_TIME = 500;\nconst MIN_INVOICE_AMOUNT_THRESHOLD = 1000;\n\nlet PRODUCT_TYPE_ID;\n\n\n\n\nconst GO_SERVICE_URL = `https://actyv-platform-go-service.${ENVIRONMENT}.actyv.com/api`;\nconst PAYLATER_SERVICE_URL = `https://actyv-platform-paylater-service-v1.${ENVIRONMENT}.actyv.com/v1`;\nconst ADMIN_SERVICE_URL = `https://actyv-platform-admin-service.${ENVIRONMENT}.actyv.com/api`;\nconst AUTH_URL = `https://actyv-platform-admin-service.${ENVIRONMENT}.actyv.com/api/user/authenticateUser`;\n\nconst date = new Date();\n\nconst ENV_VARIABLES = {\n    \"GO_SERVICE_URL\": GO_SERVICE_URL,\n    \"PAYLATER_SERVICE_URL\": PAYLATER_SERVICE_URL,\n    \"ADMIN_SERVICE_URL\": ADMIN_SERVICE_URL,\n    \"GET_BP\": `${GO_SERVICE_URL}/business-partner/service`,\n    \"BP_USER\": `${ADMIN_SERVICE_URL}/business-partner-user/get/all`,\n    \"USER\": `${ADMIN_SERVICE_URL}/user`,\n    \"ROLE_USER_MAPPING\": `${ADMIN_SERVICE_URL}/role-user-mapping`,\n    \"BP_SALES_SUMMARY\": `${GO_SERVICE_URL}/business-partner-sales-summary`,\n    \"BP_BANK_RELATIONSHIP\": `${GO_SERVICE_URL}/business-relationship`,\n    \"LOAN_TERM\": `${PAYLATER_SERVICE_URL}/loan-terms`,\n    \"BNPL_PREFERENCE\": `${PAYLATER_SERVICE_URL}/bnpl-preference`,\n    \"AUTH_URL\": `${AUTH_URL}`,\n    \"CHECK_ROLE_USER_MAPPING\": `${ADMIN_SERVICE_URL}/role-user-mapping/byBusinessPartnerId`,\n    \"GET_SALES_SUMMARY\": `${GO_SERVICE_URL}/business-partner-sales-summary`,\n    \"CHECK_BP_RELATIONSHIP\": `${GO_SERVICE_URL}/business-relationship/service`,\n    \"TENOR_AND_RATE_SPREAD\": `${PAYLATER_SERVICE_URL}/tenor-and-rate-spread`,\n    \"YEAR\": date.getFullYear(),\n    \"MONTH\": date.getMonth() + 1,\n    // \"BUSINESSTYPE\" : `${BP_TYPE}`,\n    // \"RELATION1\": `${BP_TYPE}-BANK`,\n    // \"RELATION2\": `${BP_TYPE}-ENTERPRISE`,\n    \"CONFIG_KEY\": `${CONFIG_KEY}`,\n    // \"BANK_ID\": `${BANK_ID}`,\n    // \"ENTERPRISE_ID\": `${ENTERPRISE_ID}`,\n    \"ROLE_ID\": `${ROLE_ID}`,\n    \"EMAIL\": `${EMAIL}`,\n    \"PASSWORD\": `${PASSWORD}`,\n    \"SLEEP_TIME\": `${SLEEP_TIME}`,\n    //\"RATE_OF_INTEREST\": `${RATE_OF_INTEREST}`,\n    \"MIN_INVOICE_AMOUNT_THRESHOLD\": MIN_INVOICE_AMOUNT_THRESHOLD,\n    \"PRODUCT_TYPE_ID\": `${PRODUCT_TYPE_ID}`\n}\n\nglobal.set(\"ENV_VARIABLES\", ENV_VARIABLES);\n\n// msg.payload = `${XLSX_FILE_PATH}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 60,
        "wires": [
            [
                "cf0dd7dcf6b35892"
            ]
        ]
    },
    {
        "id": "cf0dd7dcf6b35892",
        "type": "function",
        "z": "9c867e890410d7fd",
        "name": "AuthenticateActyvEntityUserReq",
        "func": "\n// const EMAIL = \"darkhorse1@gmail.com\";//env.get(\"ACTYV_ADMIN_EMAIL\");\n// const PASSWORD = \"890ioP@darkhorse\"//env.get(\"ACTYV_ADMIN_PASSWORD\")\nconst EMAIL = env.get('ACTYV_ADMIN_EMAIL')\nconst PASSWORD = env.get('ACTYV_ADMIN_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \"password\": PASSWORD,\n    \"email\": EMAIL\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 60,
        "wires": [
            [
                "9a65ea2855cf9881",
                "8204f1e7f96793e8"
            ]
        ]
    },
    {
        "id": "de25599aa2a14095",
        "type": "function",
        "z": "9c867e890410d7fd",
        "name": "saveActyvEntityUserToken",
        "func": "const env_var = global.get(\"ENV_VARIABLES\");\n\nconst token = msg.payload.idToken\nmsg.actyvToken = token;\n\nflow.set(\"actyvToken\", token);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 160,
        "wires": [
            [
                "356359bbfb1d4a2e"
            ]
        ]
    },
    {
        "id": "356359bbfb1d4a2e",
        "type": "function",
        "z": "9c867e890410d7fd",
        "name": "Getting Actyv Entity User",
        "func": "const actyvToken = flow.get(\"actyvToken\");\n\nconst ADMIN_URL = env.get('ADMIN_URL');\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`\n}\n\nconst actyvUrl = env.get(\"ACTYV_ENTITY_URL\")\n\nmsg.url = `${ADMIN_URL}/api/user/getCurrentUser?url=${actyvUrl}`;\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 160,
        "wires": [
            [
                "6c65a5ca487d840f"
            ]
        ]
    },
    {
        "id": "6c65a5ca487d840f",
        "type": "http request",
        "z": "9c867e890410d7fd",
        "name": "Getting Actyv_id",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 740,
        "y": 160,
        "wires": [
            [
                "165b1e8755d79f52"
            ]
        ]
    },
    {
        "id": "165b1e8755d79f52",
        "type": "function",
        "z": "9c867e890410d7fd",
        "name": "saveactyvId",
        "func": "flow.set(\"actyv_id\", msg.payload.actyvEntityId);\nmsg.actyvId = msg.payload.actyvEntityId\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 160,
        "wires": [
            [
                "00c202ba0f03f1db"
            ]
        ]
    },
    {
        "id": "00c202ba0f03f1db",
        "type": "function",
        "z": "9c867e890410d7fd",
        "name": "Setting Payload For Fetching INITIATED Status Files",
        "func": "// const enterpriseToken = flow.get(\"enterpriseToken\")\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/fileInfoBySeedingStatus/INITIATED`;\nconst flow_var = flow.get('FLOW_VARIABLES');\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${flow.get(\"actyvToken\")}`,\n    \"actyventityid\": `${flow.get(\"actyv_id\")}`\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'GET';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 260,
        "wires": [
            [
                "67f04b68f5bbb23d"
            ]
        ]
    },
    {
        "id": "67f04b68f5bbb23d",
        "type": "http request",
        "z": "9c867e890410d7fd",
        "name": "INITIATED Files",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 640,
        "y": 260,
        "wires": [
            [
                "eeddf4f9269f34a3",
                "43aed60db2b5ec72"
            ]
        ]
    },
    {
        "id": "43aed60db2b5ec72",
        "type": "function",
        "z": "9c867e890410d7fd",
        "name": "Looping and Segregating Files",
        "func": "const files = msg.payload.fileInfo.filter((file) => file.seedingType == \"BNPL_SEEDING\");\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\n\n\n\nfor (const file of files.slice(0,1)) {\n    console.log(\"file\", file)\n    if (file.seedingType == \"BNPL_SEEDING\") {\n        node.send({\n            ...file,\n            actyvId: msg.actyvId,\n            payload: file.fileId,\n            seedingType: file.seedingType,\n            isComplete: false,\n            logger: \"fileId for BNPL seeding\",\n            actyvToken: msg.actyvToken\n        })\n        sleep(200000)\n    }\n    \n}\nmsg.isComplete = true\nmsg.logger = \"No file found for BNPL\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 340,
        "wires": [
            [
                "e453fd7e69c31c30",
                "f71d7433ae98c46f"
            ]
        ]
    },
    {
        "id": "2c90bd54803758c3",
        "type": "function",
        "z": "9c867e890410d7fd",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\n\n\nflow.set(\"failedRows\", [])\n\nflow.set(\"failed_Create_BP\", []) \n\n// msg.fileId = msg.payload\nmsg.method = \"GET\"\nmsg.headers = {\n    fileType: \"xlsx\"\n}\nmsg.url = `${GO_URL}/file/read/${msg.fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 440,
        "wires": [
            [
                "7228ea87ebe37a23"
            ]
        ]
    },
    {
        "id": "7228ea87ebe37a23",
        "type": "http request",
        "z": "9c867e890410d7fd",
        "name": "readFile",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 340,
        "y": 440,
        "wires": [
            [
                "7f6488a06fa83b84"
            ]
        ]
    },
    {
        "id": "64c3bbd25e6399e1",
        "type": "function",
        "z": "9c867e890410d7fd",
        "name": "read xls",
        "func": "let data = xlsx.read(msg.payload, { type: \"buffer\" })\nconst wsname = data.SheetNames[0];\nconst ws = data.Sheets[wsname];\nconst payload = xlsx.utils.sheet_to_json(ws);\nmsg.seedingData = payload\nmsg.completedSeeding = [],\nmsg.failedSeeding = []\nmsg.anchored = false;\nif(msg.enterpriseId){\n    msg.anchored = true\n}\n\nmsg.numOfRows = payload.length\nmsg.logger = \"read xlsx\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "xlsx",
                "module": "xlsx"
            }
        ],
        "x": 740,
        "y": 500,
        "wires": [
            [
                "31adfb075e4bd5af",
                "42dfce16e816c6ee"
            ]
        ]
    },
    {
        "id": "b2bc27532cf6d13e",
        "type": "function",
        "z": "9c867e890410d7fd",
        "name": "Loop",
        "func": "const users = msg.seedingData;\nconst ENTERPRISE_ID = msg.enterpriseId;\nconst BANK_ID = msg.bankId;\nflow.set(\"failedRows\", []);\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\nfor (const [key,user] of users.entries()) {\n    node.send({\n        ...msg,\n        payload : user,\n        isCompleted : \"false\",\n        ENTERPRISE_ID: ENTERPRISE_ID,\n        BANK_ID: BANK_ID,\n        actyvToken: msg.actyvToken,\n        isFileProcessingCompleted: key == users.length-1? true:false\n    })\n    await sleep(10000);\n}\nawait sleep(30000);\nmsg.isCompleted = \"true\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 660,
        "wires": [
            [
                "169868dcbf3608fb"
            ]
        ]
    },
    {
        "id": "169868dcbf3608fb",
        "type": "switch",
        "z": "9c867e890410d7fd",
        "name": "",
        "property": "isCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 640,
        "wires": [
            [],
            [
                "5cbbc642cb2e16de"
            ]
        ]
    },
    {
        "id": "5cbbc642cb2e16de",
        "type": "function",
        "z": "9c867e890410d7fd",
        "name": "Creating  an Object which contains all info required in the flow",
        "func": "const document = msg.payload;\nmsg.obj = {\n    pan: document[\"Business Partner PAN\"],\n    gst: document[\"Business Partner GST\"],\n    mobileNo: document[\"Business Partner Phone\"],\n    email: document[\"Business Partner Email\"],\n    bankIdentifierByParent: document[\"Bank CRN\"],\n    bankAccountNumber: document[\"Loan Repayment Account Number\"],\n    bankIFSC: document[\"Loan Repayment Account IFSC\"],\n    bankName: document[\"Loan Repayment Account Name\"],\n    approvedLimit: document[\"Approved Limit\"],\n    bankProvidedLoanCodes: document[\"Loan Account Number\"],\n    businessPartnerId: \"\",\n    token: \"\",\n    businessType: \"\",\n    bnpl_preference: document[\"Create BNPL Preference\"]\n}\n\nconsole.log(msg.obj[\"bnpl_preference\"]);\n\nif (document[\"Rate Of Interest\"] !== undefined) {\n    msg.obj[\"rateOfInterest\"] = document[\"Rate Of Interest\"];\n}\n\nfunction checkAllMandatoryFieldsPresentOrNot(row) {\n    if (\n        validatePan(row[\"Business Partner PAN\"]) &&\n        validateGst(row[\"Business Partner GST\"]) &&\n        row[\"Loan Account Number\"] &&\n        validateApprovedLimit(row[\"Approved Limit\"]) &&\n        row[\"Loan Repayment Account Number\"] &&\n        row[\"Loan Repayment Account Name\"] &&\n        validateIFSC(row[\"Loan Repayment Account IFSC\"])\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n\n\n\n// validate IFSC\nfunction validateIFSC(ifsc) {\n    const IFSC_pattern = /^[A-Z]{4}0[A-Z0-9]{6}$/;\n\n    if (IFSC_pattern.test(ifsc)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\nfunction validateApprovedLimit(approvedLimit){\n    if (!isNaN(approvedLimit) && approvedLimit >= 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction validateInterestRate(interestRate){\n    if(!isNaN(interestRate) && interestRate >= 0){\n        return true;\n    }\n    return false;\n}\n\nfunction validatePan(pan) {\n    const panPattern = /^([A-Z]{5}[0-9]{4}[A-Z]{1})$/;\n\n    if (panPattern.test(pan)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction validateGst(gst) {\n    const gstinPattern =\n        /^([0-9]{2}[a-zA-Z]{5}[0-9]{4}[a-zA-Z]{1}[1-9A-Za-z]{1}Z[0-9A-Za-z]{1})$/;\n\n    if (gstinPattern.test(gst)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// function validateBNPLPreference(bnplpreference){\n//     if(bnplpreference === )\n// }\n\n//****************************************************************************************************************************************** */\n\n\n\nlet checkAllMandatoryFieldPresent = checkAllMandatoryFieldsPresentOrNot(document);\n\nlet a = true;\nif (document[\"Rate Of Interest\"] !== undefined) {\n    a = validateInterestRate(msg.obj[\"rateOfInterest\"]);\n}\ncheckAllMandatoryFieldPresent = checkAllMandatoryFieldPresent && a;\n\nconsole.log(checkAllMandatoryFieldPresent, \"checkALlMandatory Fields\");\nconsole.log(a, \"A\");\nlet message = checkAllMandatoryFieldPresent ? \"\" : \"All mandatory fields are not present\"\n\n\n\n\nconst isValidPan = validatePan(document[\"Business Partner PAN\"])\nif (!isValidPan) {\n    message = \"PAN number is not valid\"\n}\n\nconst isGstValid = validateGst(document[\"Business Partner GST\"])\nif (!isGstValid) {\n    message = \"GST number is not valid\"\n}\n\nconst isApprovedLimitValid = validateApprovedLimit(document[\"Approved Limit\"]);\nif(!isApprovedLimitValid){\n    message = \"Approved Limit is not valid\"\n}\n\nif (document[\"Rate Of Interest\"] !== undefined){\n    const isInterestRateValid = validateInterestRate(document[\"Rate Of Interest\"]);\n    if (!isInterestRateValid) {\n        message = \"Interest Rate is not valid\"\n    }\n}\n\nconst isIFSCValid = validateIFSC(document[\"Loan Repayment Account IFSC\"]);\nif(!isIFSCValid){\n    message = \"Invalid IFSC number\"\n}\n\n// const isBNPLPreferenceValid = validateBNPLPreference(document[\"Create BNPL Preference\"]);\n// if(!isBNPLPreferenceValid){\n//         message = \"Invalid BNPL Preference\"\n// }\n\n\nmsg.primaryChecks = false\nmsg.message = message\nif (checkAllMandatoryFieldPresent) {\n    msg.primaryChecks = true\n}\n\nconsole.log(isIFSCValid, \"IFSC\");\nconsole.log(document[\"Loan Repayment Account IFSC\"], \"IFSC Number\")\n// console.log()\n\nmsg.result = {\n    \"Business Partner ID\" : \"\",\n    \"User ID\": \"\",\n    \"Role User Mapping\": \"\",\n    \"Business Partner Sales Summary for current month\": \"\",\n    \"Business-Relationship with Bank\": \"\",\n    \"Business-Relationship with Enterprise\": \"\",\n    \"Create Loan Term\": \"\",\n    \"Update Loan Term\": \"\",\n    \"Fetch Tenor\": \"\",\n    \"Create BNPL Preference\": \"\"\n}\n\n\n\n\n\n\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 640,
        "wires": [
            [
                "2c3c9955a649c757",
                "94096fa47094402a"
            ]
        ]
    },
    {
        "id": "20c927a7ed4dc24a",
        "type": "http request",
        "z": "9c867e890410d7fd",
        "name": "Get BP_ID",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 210,
        "y": 1000,
        "wires": [
            [
                "64fc319638b4f883",
                "10fea427420320a1"
            ]
        ]
    },
    {
        "id": "64fc319638b4f883",
        "type": "switch",
        "z": "9c867e890410d7fd",
        "name": "",
        "property": "payload._id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 1000,
        "wires": [
            [
                "f35f10f0ad3a8a2d"
            ],
            [
                "7642baa0af02910b"
            ]
        ]
    },
    {
        "id": "f35f10f0ad3a8a2d",
        "type": "function",
        "z": "9c867e890410d7fd",
        "name": "Failed Row Update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Failed to get business Partner with the GST\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 960,
        "wires": [
            [
                "db6d323ee14cbac0"
            ]
        ]
    },
    {
        "id": "37d16b9d6da6e220",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "name": "UnsuccessFul row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 960,
        "wires": []
    },
    {
        "id": "7642baa0af02910b",
        "type": "function",
        "z": "9c867e890410d7fd",
        "name": "Get userId from businessPartnerId",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${actyvToken}`\n}\n\nif (msg.statusCode === 200){\n    const data = msg.payload;\n    msg.obj.businessPartnerId = data._id;\n    msg.result[\"Business Partner ID\"] = `${msg.obj.businessPartnerId}`;\n    msg.method = 'get';\n    msg.url = `${env_var.CHECK_BP_RELATIONSHIP}/${msg.obj.businessPartnerId}/${msg.ENTERPRISE_ID}`\n    // msg.url = `${env_var.CHECK_BP_RELATIONSHIP}/64521b0164c7df65fb660c22/${msg.ENTERPRISE_ID}`\n    // msg.url = `${env_var.BP_USER}/${msg.obj.businessPartnerId}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1080,
        "wires": [
            [
                "36af79bab894aec9"
            ]
        ]
    },
    {
        "id": "36af79bab894aec9",
        "type": "http request",
        "z": "9c867e890410d7fd",
        "name": "getting relationship type",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 1080,
        "wires": [
            [
                "56c39f893a6dce02",
                "f589626b118e5ebf"
            ]
        ]
    },
    {
        "id": "92e2c0fc8c95e8e7",
        "type": "function",
        "z": "9c867e890410d7fd",
        "name": "Get userId from businessPartnerId",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\n\nmsg.obj[\"businessType\"] = msg.payload.relationType.split(\"-\")[0];\n\nif (msg.obj.businessType === \"DISTRIBUTOR\") {\n    msg.product_type_id = msg.bankApplicationConfigId;\n}\nelse {\n    msg.product_type_id = msg.bankApplicationConfigId;\n}\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${actyvToken}`\n}\n\nmsg.method = 'get';\nmsg.url = `${env_var.BP_USER}/${msg.obj.businessPartnerId}`\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 1100,
        "wires": [
            [
                "c0eb3726c77466c7"
            ]
        ]
    },
    {
        "id": "c0eb3726c77466c7",
        "type": "http request",
        "z": "9c867e890410d7fd",
        "g": "e388f6b50d8947c0",
        "name": "Get User_ID",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 670,
        "y": 1180,
        "wires": [
            [
                "c3a7c056c4064d15"
            ]
        ]
    },
    {
        "id": "eeddf4f9269f34a3",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "name": "get initiated files",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 260,
        "wires": []
    },
    {
        "id": "c3a7c056c4064d15",
        "type": "switch",
        "z": "9c867e890410d7fd",
        "g": "e388f6b50d8947c0",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 1300,
        "wires": [
            [
                "3407744cade162da"
            ],
            [
                "1f52c05f53555f83"
            ]
        ]
    },
    {
        "id": "42a0cf4b6e706fe5",
        "type": "switch",
        "z": "9c867e890410d7fd",
        "name": "",
        "property": "userExists",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 1620,
        "wires": [
            [
                "ecf2c53374a1beb5"
            ],
            [
                "e82af394990ae97b"
            ]
        ]
    },
    {
        "id": "2c3c9955a649c757",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "name": "debug 447",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 580,
        "wires": []
    },
    {
        "id": "f0a62ff9bb25644a",
        "type": "function",
        "z": "9c867e890410d7fd",
        "g": "0fbcf743ca2684da",
        "name": "Setting Payload for creating loanTerm",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\n\nmsg.payload = {\n    bankID: msg.BANK_ID,\n    borrowerID: msg.obj.businessPartnerId,\n    enterpriseID: msg.ENTERPRISE_ID,\n    bankApplicationConfigID: msg.product_type_id\n    //rateOfInterest: Number(msg.obj.rateOfInterest)\n}\nif(msg.obj[\"rateOfInterest\"]!==undefined){\n    msg.payload[\"tenorAndRates\"] = [{ roi: msg.obj[\"rateOfInterest\"]}];\n\n}\nmsg.url = env_var.LOAN_TERM;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 2380,
        "wires": [
            [
                "d6e5beb21de0ff3a",
                "0995c0a440cb0cc5",
                "d69a04805e98ba02"
            ]
        ]
    },
    {
        "id": "719e46e6fa61b917",
        "type": "function",
        "z": "9c867e890410d7fd",
        "g": "0fbcf743ca2684da",
        "name": "Setting Payload for udpating loanTerm",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\n\nconst data = msg.payload;\nmsg.loanTermId = data.id;\n\nif (msg.statusCode === 201 && msg.result[\"Create Loan Term\"] === \"\"){\n    msg.result[\"Create Loan Term\"] = `Loan Term Created: ${msg.loanTermId}`;\n}\n\nmsg.payload = {\n    loanTermsID : msg.loanTermId,\n    // loanTermsID: \"5b541302-db6a-4ecc-aa0e-d5d7036d3de0\",\n    approvedLimit: msg.obj.approvedLimit,\n    validTill: \"20/11/2025\",\n    loanGrantStatus: \"APPROVED\",\n    crnNumber: msg.obj.bankIdentifierByParent,\n    awaitingBalanceRefresh: false,\n    businessType: msg.obj.businessType,\n    bankProvidedLoanCodes:msg.obj.bankProvidedLoanCodes,\n}\nmsg.url = env_var.LOAN_TERM + \"/service/update\";\nmsg.method = 'patch';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 2500,
        "wires": [
            [
                "2981235518b26eb4",
                "4f227c97b1ec3ab0"
            ]
        ]
    },
    {
        "id": "d6e5beb21de0ff3a",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "g": "0fbcf743ca2684da",
        "name": "Payload for creating loanTerm",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 2360,
        "wires": []
    },
    {
        "id": "2981235518b26eb4",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "g": "0fbcf743ca2684da",
        "name": "Payload for updating loanTerm",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 2440,
        "wires": []
    },
    {
        "id": "0995c0a440cb0cc5",
        "type": "http request",
        "z": "9c867e890410d7fd",
        "g": "0fbcf743ca2684da",
        "name": "Create Loan Term",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1330,
        "y": 2400,
        "wires": [
            [
                "7434bf3f106c6509"
            ]
        ]
    },
    {
        "id": "4f227c97b1ec3ab0",
        "type": "http request",
        "z": "9c867e890410d7fd",
        "g": "0fbcf743ca2684da",
        "name": "Update Loan Term",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1690,
        "y": 2520,
        "wires": [
            [
                "629c1cd4715c118a",
                "6ae180796c50d660"
            ]
        ]
    },
    {
        "id": "5633e843227004a0",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "g": "0fbcf743ca2684da",
        "name": "Update Loan Term",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2270,
        "y": 2560,
        "wires": []
    },
    {
        "id": "fe4ed8a8c5ed8702",
        "type": "function",
        "z": "9c867e890410d7fd",
        "g": "0fbcf743ca2684da",
        "name": "Checking If loanTerm exists",
        "func": "const actyvToken = flow.get(\"actyvToken\")\nconst env_var = global.get(\"ENV_VARIABLES\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nif (msg.statusCode === 200) {\n    if (msg.result[\"Business-Relationship with Bank\"] === \"No\") {\n        msg.result[\"Business-Relationship with Bank\"] = `Created ${msg.payload._id}`;\n    }\n    else {\n        msg.result[\"Business-Relationship with Bank\"] = `Exists`;\n    }\n}\nelse {\n    msg.result[\"Business-Relationship with Bank\"] = `${msg.statusCode} Error`\n}\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${actyvToken}`\n}\nmsg.url = `${env_var.LOAN_TERM}/service/fetchByBankID`;\nmsg.payload = {\"borrowerID\" : msg.obj.businessPartnerId,\n            \"enterpriseID\": msg.ENTERPRISE_ID,\n            \"bankID\": msg.BANK_ID};\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 2200,
        "wires": [
            [
                "8c14beadfa059ce8"
            ]
        ]
    },
    {
        "id": "8c14beadfa059ce8",
        "type": "http request",
        "z": "9c867e890410d7fd",
        "g": "0fbcf743ca2684da",
        "name": "Fetch Loan Term ",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1210,
        "y": 2200,
        "wires": [
            [
                "5ef6677a67adca57",
                "f5c8856eeae50661"
            ]
        ]
    },
    {
        "id": "5ef6677a67adca57",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "g": "0fbcf743ca2684da",
        "name": "Check If Loan Term Exists",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 2200,
        "wires": []
    },
    {
        "id": "09e9652360367364",
        "type": "function",
        "z": "9c867e890410d7fd",
        "g": "0fbcf743ca2684da",
        "name": "setting up payload for updating loadn term if it already exists",
        "func": "msg.payload = msg.payload[0];\nif(msg.statusCode === 201){\n    msg.result[\"Create Loan Term\"] = `Exists: ${msg.payload.id}`;\n}\nelse{\n    msg.result[\"Create Loan Term\"] = `${msg.statusCode} Error`;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 2500,
        "wires": [
            [
                "719e46e6fa61b917"
            ]
        ]
    },
    {
        "id": "fe3c2cdfbe30e2bd",
        "type": "switch",
        "z": "9c867e890410d7fd",
        "g": "0fbcf743ca2684da",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 2400,
        "wires": [
            [
                "f0a62ff9bb25644a"
            ],
            [
                "09e9652360367364"
            ]
        ]
    },
    {
        "id": "d69a04805e98ba02",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "g": "0fbcf743ca2684da",
        "name": "Paylaod for creating loan_term",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 2460,
        "wires": []
    },
    {
        "id": "fa3101c091e8377c",
        "type": "switch",
        "z": "9c867e890410d7fd",
        "g": "e388f6b50d8947c0",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1350,
        "y": 1600,
        "wires": [
            [
                "a281377201ce4704"
            ],
            [
                "e82af394990ae97b"
            ]
        ]
    },
    {
        "id": "a281377201ce4704",
        "type": "function",
        "z": "9c867e890410d7fd",
        "g": "e388f6b50d8947c0",
        "name": "Set Role User Mapping Failed",
        "func": "\nconst failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Unable to set Role User Mapping \"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 1560,
        "wires": [
            [
                "be6f0f022413db86"
            ]
        ]
    },
    {
        "id": "629c1cd4715c118a",
        "type": "switch",
        "z": "9c867e890410d7fd",
        "g": "0fbcf743ca2684da",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1950,
        "y": 2500,
        "wires": [
            [
                "926ac8136e9426f4"
            ],
            [
                "5633e843227004a0",
                "3b498e98b69e8d5b"
            ]
        ]
    },
    {
        "id": "f5c8856eeae50661",
        "type": "switch",
        "z": "9c867e890410d7fd",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "201",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "201",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 70,
        "y": 2360,
        "wires": [
            [
                "2de170373666c417"
            ],
            [
                "fe3c2cdfbe30e2bd"
            ]
        ]
    },
    {
        "id": "6ae180796c50d660",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "g": "0fbcf743ca2684da",
        "name": "debug 451",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 2440,
        "wires": []
    },
    {
        "id": "d5c1e6dfe4a68521",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "g": "3eee94045575f667",
        "name": "Create BNPL Preference",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1590,
        "y": 2720,
        "wires": []
    },
    {
        "id": "17d4b7fb98727bf4",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "g": "3eee94045575f667",
        "name": "Payload for creating BNPL preference",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 2760,
        "wires": []
    },
    {
        "id": "7e1f37709e127867",
        "type": "http request",
        "z": "9c867e890410d7fd",
        "g": "3eee94045575f667",
        "name": "Create BNPL Preference",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1090,
        "y": 2800,
        "wires": [
            [
                "d5c1e6dfe4a68521",
                "2c7f5b7793733846"
            ]
        ]
    },
    {
        "id": "276e89c0185672de",
        "type": "function",
        "z": "9c867e890410d7fd",
        "g": "3eee94045575f667",
        "name": "Setting Payload for creating BNPL preference",
        "func": "// const env_var = global.get(\"ENV_VARIABLES\")\n// const flow_var = flow.get(\"FLOW_VARIABLES\")\n\n// msg.headers = {\n//     \"Authorization\": `Bearer ${flow.get(\"bp_token\")}`,\n//     \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n//     \"businesspartnerid\": flow.get(\"actyv_bp_id\"),\n//     \"bankid\": msg.BANK_ID\n// }\n\n// msg.DEFAULT_SPREAD_ID = msg.payload[0].id;\n\n// if (msg.statusCode === 201){\n//     msg.result[\"Fetch Tenor\"] = `Tenor Fetched ${msg.DEFAULT_SPREAD_ID}`\n// }\n// else{\n//     msg.result[\"Fetch Tenor\"] = `${msg.statusCode} Error`\n// }\n\n// msg.payload = {\n//     borrowerID: msg.obj.businessPartnerId,\n//     productTypeID: msg.product_type_id,\n//     defaultBankID: msg.BANK_ID,\n//     defaultSpreadID: msg.DEFAULT_SPREAD_ID,\n//     minInvoiceAmountThreshold: env_var.MIN_INVOICE_AMOUNT_THRESHOLD\n// }\n// msg.url = env_var.BNPL_PREFERENCE;\n// msg.method = 'post';\n\n// return msg;\n\nconst env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n// const actyvToken = flow.get(\"actyvToken\")\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow.get(\"actyvToken\") }`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    // \"businesspartnerid\": flow.get(\"actyv_bp_id\"),\n    \"bankid\": msg.BANK_ID,\n    \"actyventityid\": msg.actyvId\n}\n\nmsg.DEFAULT_SPREAD_ID = msg.payload[0].id;\n\nif (msg.statusCode === 201) {\n    msg.result[\"Fetch Tenor\"] = `Tenor Fetched ${msg.DEFAULT_SPREAD_ID}`\n}\nelse {\n    msg.result[\"Fetch Tenor\"] = `${msg.statusCode} Error`\n}\n\nmsg.payload = {\n    borrowerID: msg.obj.businessPartnerId,\n    bankApplicationConfigID: msg.product_type_id,\n    defaultBankID: msg.BANK_ID,\n    defaultSpreadID: msg.DEFAULT_SPREAD_ID,\n    minInvoiceAmountThreshold: env_var.MIN_INVOICE_AMOUNT_THRESHOLD\n}\nmsg.url = env_var.BNPL_PREFERENCE;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2800,
        "wires": [
            [
                "7e1f37709e127867",
                "17d4b7fb98727bf4"
            ]
        ]
    },
    {
        "id": "3b498e98b69e8d5b",
        "type": "function",
        "z": "9c867e890410d7fd",
        "g": "3eee94045575f667",
        "name": "Payload For fetching TenorAndRateSpread",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nconst sleep = async (milliseconds) => {\n  await new Promise(resolve => {\n    return setTimeout(resolve, milliseconds)\n  });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n  \"Authorization\": `Bearer ${actyvToken}`,\n  \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\nif (msg.statusCode === 200) {\n  msg.result[\"Update Loan Term\"] = `Updated: ${msg.loanTermId}`;\n}\nelse {\n  msg.result[\"Update Loan Term\"] = `${msg.statusCode} Error`;\n}\n\nmsg.payload = {\n  \"bankID\": msg.BANK_ID,\n  \"loanID\": msg.loanTermId,\n}\n\nmsg.url = env_var.TENOR_AND_RATE_SPREAD + \"/fetch\";\nmsg.method = 'POST';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2680,
        "wires": [
            [
                "80ca9a7f28f861ee"
            ]
        ]
    },
    {
        "id": "80ca9a7f28f861ee",
        "type": "http request",
        "z": "9c867e890410d7fd",
        "g": "3eee94045575f667",
        "name": "Fetching TenorAndRateSpread",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1070,
        "y": 2680,
        "wires": [
            [
                "e17ab7364fa7d7f5",
                "1daf3fd275f59597"
            ]
        ]
    },
    {
        "id": "e17ab7364fa7d7f5",
        "type": "switch",
        "z": "9c867e890410d7fd",
        "g": "3eee94045575f667",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "201",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "201",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1350,
        "y": 2680,
        "wires": [
            [
                "e5d6f1d41201dfa1"
            ],
            [
                "da14300dc126f763"
            ]
        ]
    },
    {
        "id": "2c7f5b7793733846",
        "type": "switch",
        "z": "9c867e890410d7fd",
        "g": "3eee94045575f667",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "201",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "201",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1450,
        "y": 2800,
        "wires": [
            [
                "dbddb2551abe5a6b"
            ],
            [
                "e82857fee7c6ebf9"
            ]
        ]
    },
    {
        "id": "3407744cade162da",
        "type": "function",
        "z": "9c867e890410d7fd",
        "g": "e388f6b50d8947c0",
        "name": "USerID API Failed",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Unable to get the business partner user\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1200,
        "wires": [
            [
                "f7e8ba0032eb79e4"
            ]
        ]
    },
    {
        "id": "2de170373666c417",
        "type": "function",
        "z": "9c867e890410d7fd",
        "name": "Fetch Loan term Failed",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Failed to get fetch the loan term\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 2260,
        "wires": [
            [
                "82d96ff0f6250b42"
            ]
        ]
    },
    {
        "id": "926ac8136e9426f4",
        "type": "function",
        "z": "9c867e890410d7fd",
        "g": "0fbcf743ca2684da",
        "name": "Update Loan term API Failed",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Unable to update the Loan Term\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 2480,
        "wires": [
            [
                "140e68491c29376a"
            ]
        ]
    },
    {
        "id": "1c16d5be1b2efcf3",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "g": "0fbcf743ca2684da",
        "name": "debug 458",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3050,
        "y": 2460,
        "wires": []
    },
    {
        "id": "e5d6f1d41201dfa1",
        "type": "function",
        "z": "9c867e890410d7fd",
        "g": "3eee94045575f667",
        "name": "Fetch Tenor and Rate Spread API Failed",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Unable to fetch the Tenor and Rate spread \"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 2680,
        "wires": [
            [
                "59559016fdc5ab9b"
            ]
        ]
    },
    {
        "id": "c6c14d7d82928cac",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "g": "3eee94045575f667",
        "name": "debug 459",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 2680,
        "wires": []
    },
    {
        "id": "dbddb2551abe5a6b",
        "type": "function",
        "z": "9c867e890410d7fd",
        "g": "3eee94045575f667",
        "name": "Create BNPL Preference API Failed",
        "func": "\n\nconst failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Unable to set the BNPL Preference\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 2780,
        "wires": [
            [
                "ccca572ce58f5cc9"
            ]
        ]
    },
    {
        "id": "b2db31f674b64a62",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "g": "3eee94045575f667",
        "name": "debug 460",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2510,
        "y": 2780,
        "wires": []
    },
    {
        "id": "1daf3fd275f59597",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "name": "fetch tenor and rate spread",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 2620,
        "wires": []
    },
    {
        "id": "42dfce16e816c6ee",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "name": "debug 466",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "seedingData",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 500,
        "wires": []
    },
    {
        "id": "e453fd7e69c31c30",
        "type": "switch",
        "z": "9c867e890410d7fd",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 340,
        "wires": [
            [
                "d2da6c1c859578f6"
            ],
            [
                "2c90bd54803758c3"
            ]
        ]
    },
    {
        "id": "d2da6c1c859578f6",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "name": "Files completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 340,
        "wires": []
    },
    {
        "id": "7f6488a06fa83b84",
        "type": "switch",
        "z": "9c867e890410d7fd",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 440,
        "wires": [
            [
                "4e7d160d73323d70"
            ],
            [
                "64c3bbd25e6399e1"
            ]
        ]
    },
    {
        "id": "4e7d160d73323d70",
        "type": "function",
        "z": "9c867e890410d7fd",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\nfailedRows.push({\n    applicantCRN: \"ALL\",\n    message: `File processing failed, couldn't read file`\n})\nmsg.remark = `File processing failed, couldn't read file`\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\n\nmsg.allFailed = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 400,
        "wires": [
            [
                "76ee7c625152920a"
            ]
        ]
    },
    {
        "id": "76ee7c625152920a",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "9c867e890410d7fd",
        "name": "",
        "x": 1070,
        "y": 400,
        "wires": [
            [
                "0a9501b094f0c0cf"
            ]
        ]
    },
    {
        "id": "0a9501b094f0c0cf",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 400,
        "wires": []
    },
    {
        "id": "db6d323ee14cbac0",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "9c867e890410d7fd",
        "name": "",
        "x": 970,
        "y": 960,
        "wires": [
            [
                "37d16b9d6da6e220"
            ]
        ]
    },
    {
        "id": "56c39f893a6dce02",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "name": "debug 477",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1020,
        "wires": []
    },
    {
        "id": "f589626b118e5ebf",
        "type": "switch",
        "z": "9c867e890410d7fd",
        "name": "",
        "property": "payload._id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 870,
        "y": 1080,
        "wires": [
            [
                "ebaeebf9b7088434"
            ],
            [
                "92e2c0fc8c95e8e7"
            ]
        ]
    },
    {
        "id": "ebaeebf9b7088434",
        "type": "function",
        "z": "9c867e890410d7fd",
        "name": "Failed Row Update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Unable to get the relationship type. Please contact Administrator\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1076.2532958984375,
        "y": 1049.2923583984375,
        "wires": [
            [
                "3ae21fb091a34ad6"
            ]
        ]
    },
    {
        "id": "3ae21fb091a34ad6",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "9c867e890410d7fd",
        "name": "",
        "x": 1376.2532958984375,
        "y": 1049.2923583984375,
        "wires": [
            [
                "7ff5342f85f4a5a5"
            ]
        ]
    },
    {
        "id": "7ff5342f85f4a5a5",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "name": "UnsuccessFul row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 1040,
        "wires": []
    },
    {
        "id": "ecf2c53374a1beb5",
        "type": "function",
        "z": "9c867e890410d7fd",
        "g": "e388f6b50d8947c0",
        "name": "Setting payload for roleUserMapping",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nconst userId = msg.userId;\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\n\n\n\n\nmsg.payload = {\n    userId : userId,\n    // userId: \"64521b00ce444f05fa197478\",\n    roleId: msg.roleId,\n    businessPartnerId : msg.obj.businessPartnerId,\n    // businessPartnerId: \"644788df588958bc97e5483\"\n}\nmsg.url = env_var.ROLE_USER_MAPPING;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1580,
        "wires": [
            [
                "980fa47c624a073a",
                "498844db8284812e"
            ]
        ]
    },
    {
        "id": "980fa47c624a073a",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "g": "e388f6b50d8947c0",
        "name": "Payload for roleUserMapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 1560,
        "wires": []
    },
    {
        "id": "498844db8284812e",
        "type": "http request",
        "z": "9c867e890410d7fd",
        "g": "e388f6b50d8947c0",
        "name": "Role User Mapping",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1110,
        "y": 1600,
        "wires": [
            [
                "164aaf06152c4768",
                "fa3101c091e8377c"
            ]
        ]
    },
    {
        "id": "164aaf06152c4768",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "g": "e388f6b50d8947c0",
        "name": "Result of roleUserMapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 1520,
        "wires": []
    },
    {
        "id": "93bed63868ca7827",
        "type": "function",
        "z": "9c867e890410d7fd",
        "g": "e388f6b50d8947c0",
        "name": "Check if RoleUserMapping exists",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\nif(msg.statusCode === 200){\n    \n\n    msg.headers = {\n        \"Authorization\": `Bearer ${actyvToken}`,\n        \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n    }\n\n    msg.url = `${env_var.CHECK_ROLE_USER_MAPPING}/${msg.obj.businessPartnerId}`;\n    msg.method = 'get';\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1420,
        "wires": [
            [
                "d9f3fdea93f5950c"
            ]
        ]
    },
    {
        "id": "d9f3fdea93f5950c",
        "type": "http request",
        "z": "9c867e890410d7fd",
        "g": "e388f6b50d8947c0",
        "name": "Check Role User Mapping",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1070,
        "y": 1420,
        "wires": [
            [
                "f4881c5ac0a708b8"
            ]
        ]
    },
    {
        "id": "bd3549553b972afe",
        "type": "function",
        "z": "9c867e890410d7fd",
        "g": "e388f6b50d8947c0",
        "name": "Result of Check Role User Mapping",
        "func": "const mappings = msg.payload;\nvar flag = 0;\n\nfor (const mapping of mappings) {\n    if(mapping.userId === msg.userId && mapping.roleId === msg.roleId){\n       \n        flag = 1;\n        break;\n    }\n};\n\nif(flag === 1){\n    msg.userExists = \"true\";\n    msg.result[\"Role User Mapping\"] = `Exists`\n}\nelse{\n    msg.userExists = \"false\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1500,
        "wires": [
            [
                "3ca5ae3f0a4f2b78",
                "42a0cf4b6e706fe5"
            ]
        ]
    },
    {
        "id": "3ca5ae3f0a4f2b78",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "g": "e388f6b50d8947c0",
        "name": "Check Role User Mapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "userExists",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 1500,
        "wires": []
    },
    {
        "id": "f4881c5ac0a708b8",
        "type": "switch",
        "z": "9c867e890410d7fd",
        "g": "e388f6b50d8947c0",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1330,
        "y": 1420,
        "wires": [
            [
                "464d9957c6939a8f"
            ],
            [
                "bd3549553b972afe"
            ]
        ]
    },
    {
        "id": "464d9957c6939a8f",
        "type": "function",
        "z": "9c867e890410d7fd",
        "g": "e388f6b50d8947c0",
        "name": "Role User MApping API Failed",
        "func": "\n\nconst failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Unable to get the role for the business Partner\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 1400,
        "wires": [
            [
                "0b7c0095c0f8dee8"
            ]
        ]
    },
    {
        "id": "2f436d0c2de8365d",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "g": "e388f6b50d8947c0",
        "name": "UnsuccessFul row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 1360,
        "wires": []
    },
    {
        "id": "8726d3572a650feb",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "g": "e388f6b50d8947c0",
        "name": "UnsuccessFul row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 1560,
        "wires": []
    },
    {
        "id": "1f52c05f53555f83",
        "type": "function",
        "z": "9c867e890410d7fd",
        "g": "e388f6b50d8947c0",
        "name": "Get role id",
        "func": "const data = msg.payload;\nmsg.userId = data[0].userId;\nmsg.result[\"User ID\"] = `${msg.userId}`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n   \n}\n\nmsg.method = 'POST';\nmsg.url = `${env.get(\"ADMIN_URL\")}/api/role/query`\nmsg.payload = {\n    \"query\": {\n        \"name\": \"paylater_bp_admin\"\n    }\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1340,
        "wires": [
            [
                "d31a78849ecf9b54"
            ]
        ]
    },
    {
        "id": "d31a78849ecf9b54",
        "type": "http request",
        "z": "9c867e890410d7fd",
        "g": "e388f6b50d8947c0",
        "name": "Get role id",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1190,
        "y": 1340,
        "wires": [
            [
                "e65d0d83ac98c0aa",
                "7a5b944c99dbca14"
            ]
        ]
    },
    {
        "id": "e65d0d83ac98c0aa",
        "type": "function",
        "z": "9c867e890410d7fd",
        "g": "e388f6b50d8947c0",
        "name": "set roleId",
        "func": "msg.roleId = msg.payload[0][\"_id\"]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 1340,
        "wires": [
            [
                "93bed63868ca7827"
            ]
        ]
    },
    {
        "id": "7a5b944c99dbca14",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "g": "e388f6b50d8947c0",
        "name": "Get RoleID API",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 1260,
        "wires": []
    },
    {
        "id": "f7e8ba0032eb79e4",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "9c867e890410d7fd",
        "g": "e388f6b50d8947c0",
        "name": "",
        "x": 1350,
        "y": 1200,
        "wires": [
            [
                "eb96bfa19e20c21e"
            ]
        ]
    },
    {
        "id": "eb96bfa19e20c21e",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "g": "e388f6b50d8947c0",
        "name": "UnsuccessFul row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 1180,
        "wires": []
    },
    {
        "id": "0b7c0095c0f8dee8",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "9c867e890410d7fd",
        "g": "e388f6b50d8947c0",
        "name": "",
        "x": 1990,
        "y": 1340,
        "wires": [
            [
                "2f436d0c2de8365d"
            ]
        ]
    },
    {
        "id": "be6f0f022413db86",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "9c867e890410d7fd",
        "g": "e388f6b50d8947c0",
        "name": "",
        "x": 1930,
        "y": 1560,
        "wires": [
            [
                "8726d3572a650feb"
            ]
        ]
    },
    {
        "id": "82d96ff0f6250b42",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "9c867e890410d7fd",
        "name": "",
        "x": 450,
        "y": 2260,
        "wires": [
            [
                "939c92a1a3360977"
            ]
        ]
    },
    {
        "id": "939c92a1a3360977",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "name": "UnsuccessFul row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 693.7769775390625,
        "y": 2246.828857421875,
        "wires": []
    },
    {
        "id": "140e68491c29376a",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "9c867e890410d7fd",
        "g": "0fbcf743ca2684da",
        "name": "",
        "x": 2710,
        "y": 2460,
        "wires": [
            [
                "1c16d5be1b2efcf3"
            ]
        ]
    },
    {
        "id": "59559016fdc5ab9b",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "9c867e890410d7fd",
        "g": "3eee94045575f667",
        "name": "",
        "x": 2130,
        "y": 2680,
        "wires": [
            [
                "c6c14d7d82928cac"
            ]
        ]
    },
    {
        "id": "ccca572ce58f5cc9",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "9c867e890410d7fd",
        "g": "3eee94045575f667",
        "name": "",
        "x": 2250,
        "y": 2780,
        "wires": [
            [
                "b2db31f674b64a62"
            ]
        ]
    },
    {
        "id": "7434bf3f106c6509",
        "type": "switch",
        "z": "9c867e890410d7fd",
        "name": "",
        "property": "payload.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1733.591796875,
        "y": 2355.90283203125,
        "wires": [
            [
                "f95a991d2b976110"
            ],
            [
                "719e46e6fa61b917"
            ]
        ]
    },
    {
        "id": "f95a991d2b976110",
        "type": "function",
        "z": "9c867e890410d7fd",
        "name": "Create Loan term API Failed",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Unable to create the Loan Term\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970.2584228515625,
        "y": 2337.5693359375,
        "wires": [
            [
                "452ad91f0445dda8"
            ]
        ]
    },
    {
        "id": "452ad91f0445dda8",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "9c867e890410d7fd",
        "name": "",
        "x": 2410.2584228515625,
        "y": 2317.5693359375,
        "wires": [
            [
                "2da1d514ceec4705"
            ]
        ]
    },
    {
        "id": "2da1d514ceec4705",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "name": "debug 478",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2730.2584228515625,
        "y": 2317.5693359375,
        "wires": []
    },
    {
        "id": "10fea427420320a1",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "name": "debug 479",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 960,
        "wires": []
    },
    {
        "id": "31adfb075e4bd5af",
        "type": "switch",
        "z": "9c867e890410d7fd",
        "name": "check number of rows",
        "property": "seedingData.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "100",
                "vt": "num"
            },
            {
                "t": "lte",
                "v": "100",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 160,
        "y": 560,
        "wires": [
            [
                "083ea7d9b88b0e9e"
            ],
            [
                "b2bc27532cf6d13e"
            ]
        ]
    },
    {
        "id": "083ea7d9b88b0e9e",
        "type": "function",
        "z": "9c867e890410d7fd",
        "name": "Logger",
        "func": "msg.logger = \"No of rows greater than 100 not processing the file\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 560,
        "wires": [
            [
                "db35d2069258bb96"
            ]
        ]
    },
    {
        "id": "db35d2069258bb96",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "name": "File is not processed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 560,
        "wires": []
    },
    {
        "id": "e0e746b8ea6b4d56",
        "type": "function",
        "z": "9c867e890410d7fd",
        "name": "function 227",
        "func": "const env_var = global.get('ENV_VARIABLES');\nconst actyvToken = flow.get('actyvToken');\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\nmsg.url = env_var.GET_BP + \"/\" + msg.obj.gst;\n\nmsg.method = 'get';\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 940,
        "wires": [
            [
                "20c927a7ed4dc24a"
            ]
        ]
    },
    {
        "id": "f73405ca35764d47",
        "type": "function",
        "z": "9c867e890410d7fd",
        "name": "Checking if businessPartnerBankRelationship exists",
        "func": "const actyvToken = flow.get(\"actyvToken\")\nconst env_var = global.get(\"ENV_VARIABLES\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${actyvToken}`\n}\nmsg.url = `${env_var.CHECK_BP_RELATIONSHIP}/getByIdentifierByParent/${msg.obj.bankIdentifierByParent}`;\nmsg.method = 'get'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 740,
        "wires": [
            [
                "c7c7d7dcecd18653"
            ]
        ]
    },
    {
        "id": "c7c7d7dcecd18653",
        "type": "http request",
        "z": "9c867e890410d7fd",
        "name": "Get Identifier By Parent - Bank",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 710,
        "y": 740,
        "wires": [
            [
                "076554e4f48b383f",
                "0c68d4028fa178fc"
            ]
        ]
    },
    {
        "id": "076554e4f48b383f",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "name": "Checking if businessPartnerBankRelationship exists",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 720,
        "wires": []
    },
    {
        "id": "0c68d4028fa178fc",
        "type": "switch",
        "z": "9c867e890410d7fd",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 840,
        "wires": [
            [
                "df62084134650c3c",
                "49d01859ee2d26fe"
            ],
            [
                "e0e746b8ea6b4d56"
            ]
        ]
    },
    {
        "id": "315e0db97044a14f",
        "type": "function",
        "z": "9c867e890410d7fd",
        "name": "Fetch Business Partner Relationship with Bank API got Failed",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Bank CRN already exists\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 800,
        "wires": [
            [
                "3116bb9ec833544c"
            ]
        ]
    },
    {
        "id": "3116bb9ec833544c",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "9c867e890410d7fd",
        "name": "",
        "x": 2000,
        "y": 800,
        "wires": [
            [
                "c78198f7a099ece3"
            ]
        ]
    },
    {
        "id": "c78198f7a099ece3",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "name": "UnsuccessFul row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 760,
        "wires": []
    },
    {
        "id": "94096fa47094402a",
        "type": "switch",
        "z": "9c867e890410d7fd",
        "name": "primaryChecks",
        "property": "primaryChecks",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1280,
        "y": 640,
        "wires": [
            [
                "f05dbb51bf731ab8"
            ],
            [
                "f73405ca35764d47"
            ]
        ]
    },
    {
        "id": "f05dbb51bf731ab8",
        "type": "function",
        "z": "9c867e890410d7fd",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: msg.message\n})\n\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nmsg.allFailed = false\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1549.1473388671875,
        "y": 576.8040161132812,
        "wires": [
            [
                "74fb93fb47c6d055"
            ]
        ]
    },
    {
        "id": "74fb93fb47c6d055",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "9c867e890410d7fd",
        "name": "",
        "x": 1859.1473388671875,
        "y": 576.8040161132812,
        "wires": [
            [
                "978b4810df45c3ae"
            ]
        ]
    },
    {
        "id": "978b4810df45c3ae",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 560,
        "wires": []
    },
    {
        "id": "f71d7433ae98c46f",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "name": "debug 480",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 400,
        "wires": []
    },
    {
        "id": "b0b9c1a05e949987",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "9c867e890410d7fd",
        "name": "",
        "x": 1050,
        "y": 3160,
        "wires": [
            [
                "c8f2918fdb628bd2"
            ]
        ]
    },
    {
        "id": "e82857fee7c6ebf9",
        "type": "function",
        "z": "9c867e890410d7fd",
        "name": "Create BNPL Preference API Failed",
        "func": "\n\nconst failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 3160,
        "wires": [
            [
                "b0b9c1a05e949987"
            ]
        ]
    },
    {
        "id": "c8f2918fdb628bd2",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "name": "debug 499",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 3160,
        "wires": []
    },
    {
        "id": "df62084134650c3c",
        "type": "function",
        "z": "9c867e890410d7fd",
        "name": "Checking which relationship exists",
        "func": "const array = msg.payload;\nmsg.move_forward = true;\nfor(let i=0; i<array.length; i++){\n    if (array[i].relationType === \"VENDOR-BANK\" || array[i].relationType === \"DISTRIBUTOR-BANK\"){\n        msg.move_forward = false;\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 860,
        "wires": [
            [
                "75c45cb26f0f8e03",
                "af614dff55401735"
            ]
        ]
    },
    {
        "id": "75c45cb26f0f8e03",
        "type": "switch",
        "z": "9c867e890410d7fd",
        "name": "",
        "property": "move_forward",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1110,
        "y": 860,
        "wires": [
            [
                "315e0db97044a14f"
            ],
            [
                "e0e746b8ea6b4d56"
            ]
        ]
    },
    {
        "id": "e82af394990ae97b",
        "type": "function",
        "z": "9c867e890410d7fd",
        "g": "09f520fdfc75c874",
        "name": "Setting Payload for businessPartnerBankRelationship",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`\n}\n\nmsg.result[\"Business-Relationship with Bank\"] = \"No\"\n\nmsg.payload = {\n    businessId: msg.obj.businessPartnerId,\n    parentBusinessId: msg.BANK_ID,\n    identifierByParent: msg.obj.bankIdentifierByParent,\n    bankAccountNumber: msg.obj.bankAccountNumber,\n    bankIFSC: msg.obj.bankIFSC,\n    bankName: msg.obj.bankName,\n    relationType: `${msg.obj.businessType}-BANK`,\n}\nmsg.url = env_var.BP_BANK_RELATIONSHIP;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 1940,
        "wires": [
            [
                "e0c85223f59f7273",
                "25656d4a951b8b06"
            ]
        ]
    },
    {
        "id": "e0c85223f59f7273",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "g": "09f520fdfc75c874",
        "name": "Payload for businessPartnerBankRelationship",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 1880,
        "wires": []
    },
    {
        "id": "25656d4a951b8b06",
        "type": "http request",
        "z": "9c867e890410d7fd",
        "g": "09f520fdfc75c874",
        "name": "Business Partner Bank Relationship",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1520,
        "y": 1940,
        "wires": [
            [
                "fd2c088db7cb63c7"
            ]
        ]
    },
    {
        "id": "fd2c088db7cb63c7",
        "type": "switch",
        "z": "9c867e890410d7fd",
        "g": "09f520fdfc75c874",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1790,
        "y": 1960,
        "wires": [
            [
                "53d89fa0a1185398"
            ],
            [
                "fe4ed8a8c5ed8702"
            ]
        ]
    },
    {
        "id": "53d89fa0a1185398",
        "type": "function",
        "z": "9c867e890410d7fd",
        "g": "09f520fdfc75c874",
        "name": "API Failed",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"Bank CRN\"],\n    message: `${\"Unable to set the Business partner bank relationship type\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 1940,
        "wires": [
            [
                "dd16ca3509624f59"
            ]
        ]
    },
    {
        "id": "df9883299442dab5",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "g": "09f520fdfc75c874",
        "name": "get bp bank relation api failed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2820,
        "y": 1940,
        "wires": []
    },
    {
        "id": "dd16ca3509624f59",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "9c867e890410d7fd",
        "g": "09f520fdfc75c874",
        "name": "",
        "x": 2410,
        "y": 1940,
        "wires": [
            [
                "df9883299442dab5"
            ]
        ]
    },
    {
        "id": "af614dff55401735",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "name": "debug 500",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 760,
        "wires": []
    },
    {
        "id": "49d01859ee2d26fe",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "name": "debug 501",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 800,
        "wires": []
    },
    {
        "id": "9a65ea2855cf9881",
        "type": "http request",
        "z": "9c867e890410d7fd",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 910,
        "y": 60,
        "wires": [
            [
                "de25599aa2a14095",
                "282e5f4f38c7809f"
            ]
        ]
    },
    {
        "id": "da14300dc126f763",
        "type": "switch",
        "z": "9c867e890410d7fd",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 2800,
        "wires": [
            [
                "276e89c0185672de"
            ],
            [
                "d1938f3561d23951"
            ]
        ]
    },
    {
        "id": "d1938f3561d23951",
        "type": "function",
        "z": "9c867e890410d7fd",
        "name": "Fetch Tenor and Rate Spread API Failed",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Tenor and Rate spread doesn't get created\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 2980,
        "wires": [
            [
                "cdec6b4663507aed"
            ]
        ]
    },
    {
        "id": "e5ac6b1baf9e5404",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "name": "Unsucessful Row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 210,
        "y": 3060,
        "wires": []
    },
    {
        "id": "cdec6b4663507aed",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "9c867e890410d7fd",
        "name": "",
        "x": 580,
        "y": 2980,
        "wires": [
            [
                "e5ac6b1baf9e5404"
            ]
        ]
    },
    {
        "id": "282e5f4f38c7809f",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "name": "debug 556",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 40,
        "wires": []
    },
    {
        "id": "8204f1e7f96793e8",
        "type": "debug",
        "z": "9c867e890410d7fd",
        "name": "debug 557",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 20,
        "wires": []
    },
    {
        "id": "977f639c2b852a5f",
        "type": "inject",
        "z": "7233099df5fc7477",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 160,
        "wires": [
            [
                "437a41e50caf6432"
            ]
        ]
    },
    {
        "id": "437a41e50caf6432",
        "type": "function",
        "z": "7233099df5fc7477",
        "name": "Setting Global Variables",
        "func": "const ENV_VARIABLES = {\n    \"ADMIN_EMAIL\": \"darkhorse@gmail.com\",\n    \"ADMIN_PASSWORD\": \"User@123\",\n    \"ACTYV_ENTITY_URL\": \"https://actyv1-platform.uat.actyv.com\"\n}\n\nglobal.set(\"ENV_VARIABLES\", ENV_VARIABLES);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 160,
        "wires": [
            [
                "c15d2620a8eb5e89"
            ]
        ]
    },
    {
        "id": "c15d2620a8eb5e89",
        "type": "function",
        "z": "7233099df5fc7477",
        "name": "AuthenticateActyvUserReq",
        "func": "// const envVariables = global.get('envVariables')\nconst ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\nconst EMAIL = ENV_VARIABLES.ADMIN_EMAIL;\nconst PASSWORD = ENV_VARIABLES.ADMIN_PASSWORD\n\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 240,
        "wires": [
            [
                "d1d2eba2db44f737"
            ]
        ]
    },
    {
        "id": "d1d2eba2db44f737",
        "type": "subflow:0cbd918f05921aae",
        "z": "7233099df5fc7477",
        "name": "AuthenticateActyvUser",
        "x": 500,
        "y": 240,
        "wires": [
            [
                "e0be15e63a37c8c9"
            ],
            []
        ]
    },
    {
        "id": "e0be15e63a37c8c9",
        "type": "function",
        "z": "7233099df5fc7477",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\n\nconst cholaToken = `eyJ4NXQiOiJNell4TW1Ga09HWXdNV0kwWldObU5EY3hOR1l3WW1NNFpUQTNNV0kyTkRBelpHUXpOR00wWkdSbE5qSmtPREZrWkRSaU9URmtNV0ZoTXpVMlpHVmxOZyIsImtpZCI6Ik16WXhNbUZrT0dZd01XSTBaV05tTkRjeE5HWXdZbU00WlRBM01XSTJOREF6WkdRek5HTTBaR1JsTmpKa09ERmtaRFJpT1RGa01XRmhNelUyWkdWbE5nX1JTMjU2IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJhZG1pbiIsImF1dCI6IkFQUExJQ0FUSU9OIiwiYXVkIjoiNWs5TzByMWxya042MTNxRXhUSmFWWk14ZXJZYSIsIm5iZiI6MTY1MDk4ODg5OSwiYXpwIjoiNWs5TzByMWxya042MTNxRXhUSmFWWk14ZXJZYSIsInNjb3BlIjoiZGVmYXVsdCIsImlzcyI6Imh0dHBzOlwvXC9zdGdhcGkuY2hvbGEubXVydWdhcHBhLmNvbTo0NDNcL29hdXRoMlwvdG9rZW4iLCJleHAiOjE2ODY5ODg4OTksImlhdCI6MTY1MDk4ODg5OSwianRpIjoiZTA3YjFmMDItY2EyOS00MDY1LThjODUtY2JjMzdlMjUzODViIn0.st0zhO3k9k-jliG5Hj1dLXIqSRzFW2mgLL35mBaqLzMpYsC4R0lw5jUVOaZwvFy1t8THY5hDx8dwQtbVbZkx7_nKl34MgHsOyQC5Nhwpf8pv5y-_MIV0juO0pdEqzoJMYGVV3EbcB-zCTmI91jmvN3JSj9ANBdL6Fr1zYXiVa3zmw1u85gf9Mti13podTPTQ_eO2bHftSyAs4IAmPza1f1A3oITFRslRRCUw52XKYbNkR1C-TK_Ie6AlAdHJiplQybcahUp9ndBAi5q2ASM_F93sTlAMG4xVTfzqGyIvhxQ6WWg4poimLky11rZCBN-Vu-yDEd4UyYbZqNsT-8ysmg`\n\nflow.set(\"cholaToken\",cholaToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 240,
        "wires": [
            [
                "b0e763ef504fb60e"
            ]
        ]
    },
    {
        "id": "b0e763ef504fb60e",
        "type": "function",
        "z": "7233099df5fc7477",
        "name": "getActyvEntityUser",
        "func": "\n\nconst GO_URL = env.get('GO_URL');\n\n\nmsg.url = `${GO_URL}/actyv-entity`;\nmsg.method = \"GET\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 340,
        "wires": [
            [
                "546bd8195ed9b70b"
            ]
        ]
    },
    {
        "id": "546bd8195ed9b70b",
        "type": "subflow:0cbd918f05921aae",
        "z": "7233099df5fc7477",
        "name": "getCurrentUser",
        "x": 480,
        "y": 340,
        "wires": [
            [
                "c55c1f739360fb83"
            ],
            []
        ]
    },
    {
        "id": "c55c1f739360fb83",
        "type": "function",
        "z": "7233099df5fc7477",
        "name": "Save actyv entity ID",
        "func": "const found = msg.payload.find(entity => entity.key === \"dark_horse\") ?? undefined\n\nconsole.log(found?._id)\nif (found) {\n    flow.set(\"actyvEntityId\", found?._id);\n    msg.actyvEntityId = found?._id\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 340,
        "wires": [
            [
                "c462654cba6fb29d",
                "eaaaae2089a3ab62"
            ]
        ]
    },
    {
        "id": "eaaaae2089a3ab62",
        "type": "function",
        "z": "7233099df5fc7477",
        "name": "getBankProductConfigReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY_CKPL_IIFL')\n\nflow.set('businessPartnerId', msg.payload._id)\nmsg.businessPartnerId = msg.payload._id\n\nmsg.url = `${GO_URL}/bank-application-config/key/${BANK_PRODUCT_KEY}`\nmsg.method = 'GET'\n\nmsg.logger = `Get bank application config`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 420,
        "wires": [
            [
                "cf18848e12e83c7c"
            ]
        ]
    },
    {
        "id": "cf18848e12e83c7c",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "7233099df5fc7477",
        "name": "getBankProductConfigReq",
        "x": 520,
        "y": 420,
        "wires": [
            [
                "3ca754bfb8fdbe31"
            ],
            []
        ]
    },
    {
        "id": "3ca754bfb8fdbe31",
        "type": "function",
        "z": "7233099df5fc7477",
        "name": "getBankApplications",
        "func": "const GO_URL = env.get('GO_URL')\n\n\nflow.set('businessPartnerId', msg.payload._id)\nmsg.businessPartnerId = msg.payload._id\n\nconst status = `POST_SANCTION_VALIDATION`\n// const status = `AWAITING_LEAD_PUSH`\nconst bankId = msg.payload.bank\n// msg.url = `${GO_URL}/bank-application?bankID=${bankId}&applicationStatus=${status}`\nmsg.url = `${GO_URL}/bank-application?applicationStatus=${status}`\nmsg.method = 'GET'\n\nmsg.logger = `Get bank applications`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 500,
        "wires": [
            [
                "1e30aa8da8ca2962"
            ]
        ]
    },
    {
        "id": "1e30aa8da8ca2962",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "7233099df5fc7477",
        "name": "getBankApplications",
        "x": 500,
        "y": 500,
        "wires": [
            [
                "321b0fdf0617ab91",
                "85f452d779e7e400"
            ],
            [
                "321b0fdf0617ab91"
            ]
        ]
    },
    {
        "id": "321b0fdf0617ab91",
        "type": "debug",
        "z": "7233099df5fc7477",
        "name": "getBankApplications",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 500,
        "wires": []
    },
    {
        "id": "a0126d14a375ebf6",
        "type": "function",
        "z": "7233099df5fc7477",
        "name": "getFieldValue",
        "func": "const GO_URL = env.get('GO_URL')\n\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\nflow.set('businessPartnerId', msg.payload._id)\nconst bankApplication = msg.payload\n\nmsg.bankApplication = bankApplication\n\nmsg.payload = \n    {\n    \"key\": \"chola_crn_number\",\n    // \"key\": \"crn_number\",\n    \"businessPartnerId\": bankApplication?.businessPartnerID,\n    \"bankApplicationId\": bankApplication?._id,\n}\n\nmsg.headers = {\n    Authorization: `Bearer ${flow.get(\"actyvToken\")}`,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\n\n// msg.url = `${GO_URL}/bank-application?bankID=${bankId}&applicationStatus=${status}`\nmsg.url = `${GO_URL}/field-value/find-field-value`\nmsg.method = 'POST'\n\nmsg.logger = `Find crn`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 660,
        "wires": [
            [
                "77734b30b068d55e"
            ]
        ]
    },
    {
        "id": "77734b30b068d55e",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "7233099df5fc7477",
        "name": "getFieldValue",
        "x": 480,
        "y": 660,
        "wires": [
            [
                "77f4725976732fcf",
                "9c8f8bcbe70e4267"
            ],
            [
                "77f4725976732fcf",
                "7176430c52f688a2"
            ]
        ]
    },
    {
        "id": "77f4725976732fcf",
        "type": "debug",
        "z": "7233099df5fc7477",
        "name": "getCustCode",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 660,
        "wires": []
    },
    {
        "id": "85f452d779e7e400",
        "type": "loop",
        "z": "7233099df5fc7477",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "payload",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-count",
        "x": 530,
        "y": 560,
        "wires": [
            [],
            [
                "a0126d14a375ebf6",
                "b7b7d0241f15d9de"
            ]
        ]
    },
    {
        "id": "9c8f8bcbe70e4267",
        "type": "function",
        "z": "7233099df5fc7477",
        "name": "saveCustCode",
        "func": "msg.customercode = msg.payload[0].value\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 740,
        "wires": [
            [
                "29de84abe3f069c4"
            ]
        ]
    },
    {
        "id": "29de84abe3f069c4",
        "type": "function",
        "z": "7233099df5fc7477",
        "name": "CallLimitApi",
        "func": "\n\n\nmsg.method = \"POST\"\nmsg.url = `https://stgapig.chola.murugappa.com/tpscfregistration/v1/Limitex/Limitdetail`\nmsg.headers = {\n    Authorization: `Bearer ${flow.get(\"cholaToken\")}`\n}\n\nmsg.payload = {\n    \"fiid\": \"30147\",\n    \"customercode\": msg.customercode,\n    \"limitno\": \"\",\n    \"fintech\": \"AV\"\n}\n\nmsg.logger = `Call limit API`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 800,
        "wires": [
            [
                "39e0171617e3b455"
            ]
        ]
    },
    {
        "id": "39e0171617e3b455",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "7233099df5fc7477",
        "name": "CallLimitApi",
        "x": 470,
        "y": 800,
        "wires": [
            [
                "f4f8b44546fd46cc",
                "d906c4a13356cf19"
            ],
            [
                "f4f8b44546fd46cc",
                "7176430c52f688a2"
            ]
        ]
    },
    {
        "id": "f4f8b44546fd46cc",
        "type": "debug",
        "z": "7233099df5fc7477",
        "name": "callLimitApi",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 800,
        "wires": []
    },
    {
        "id": "d906c4a13356cf19",
        "type": "function",
        "z": "7233099df5fc7477",
        "name": "create LoanTerm",
        "func": "const PAYLATER_URL = env.get(\"PAYLATER_URL\")\n\nconst { customercode, payload, bankApplication} = msg;\n\nlet loanData = payload?.response[0]\nmsg.loanData = loanData\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms`\nmsg.method = \"POST\"\nmsg.payload = {\n    \"bankID\": bankApplication.bankId,\n    \"borrowerID\": bankApplication.businessPartnerID,\n    \"enterpriseID\": bankApplication.enterpriseId,\n    \"bankApplicationConfigID\": bankApplication.bankApplicationConfigId,\n    // \"tenorAndRates\": [\n    //     {\n    //         \"tenor\": \"P50D\",\n    //         \"roi\": 28.42\n    //     },\n    //     {\n    //         \"roi\": 21\n    //     }\n    // ]\n}\n\nmsg.logger = `Create loan term with ${JSON.stringify(msg.payload)}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 880,
        "wires": [
            [
                "a3f61ee7b8182fc3"
            ]
        ]
    },
    {
        "id": "a3f61ee7b8182fc3",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "7233099df5fc7477",
        "name": "create LoanTerm",
        "x": 490,
        "y": 880,
        "wires": [
            [
                "92f12c68fec256d4",
                "578cdb333b990d5d"
            ],
            [
                "92f12c68fec256d4",
                "7176430c52f688a2"
            ]
        ]
    },
    {
        "id": "92f12c68fec256d4",
        "type": "debug",
        "z": "7233099df5fc7477",
        "name": "createLoanTerm",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 880,
        "wires": []
    },
    {
        "id": "578cdb333b990d5d",
        "type": "function",
        "z": "7233099df5fc7477",
        "name": "updateLoanTerm",
        "func": "const PAYLATER_URL = env.get(\"PAYLATER_URL\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\nconst { customercode, payload, bankApplication,loanData} = msg;\n\nfunction changeDateFormat(date){\n    let res = date.split(\"T\")[0].split(\"-\").reverse().join(\"/\");\n    return res\n}\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/service/update`\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\nmsg.method = \"PATCH\"\nmsg.loanId = payload.id\nmsg.payload = {\n    \"loanTermsID\": payload.id,\n    \"approvedLimit\": +loanData.limitamt,\n    \"validTill\": changeDateFormat(loanData.limitexpirydate),//\"21/01/2022\",\n    \"bankProvidedLoanCodes\": loanData.limitcode,\n    \"loanGrantStatus\": \"APPROVED\",\n    \"crnNumber\": msg.customercode,\n    // \"bankID\": bankApplication.bankId,\n    // \"borrowerID\": bankApplication.businessPartnerID,\n    // \"enterpriseID\": bankApplication.enterpriseId,\n    // \"bankApplicationConfigID\": bankApplication.bankApplicationConfigId,\n    // \"awaitingBalanceRefresh\": true,\n    // \"businessType\": \"VENDOR\"\n}\n\nmsg.logger = `Update loan term with ${JSON.stringify(msg.payload)}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 960,
        "wires": [
            [
                "ce552a3915fd9e43"
            ]
        ]
    },
    {
        "id": "ce552a3915fd9e43",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "7233099df5fc7477",
        "name": "updateLoanTerm",
        "x": 490,
        "y": 960,
        "wires": [
            [
                "17f5972aacccfcbb",
                "cb1f5a8f4d1c4732"
            ],
            [
                "17f5972aacccfcbb",
                "7176430c52f688a2"
            ]
        ]
    },
    {
        "id": "17f5972aacccfcbb",
        "type": "debug",
        "z": "7233099df5fc7477",
        "name": "updateLoanTerm",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 960,
        "wires": []
    },
    {
        "id": "de362fffdf301876",
        "type": "function",
        "z": "7233099df5fc7477",
        "name": "updateBPMNVariable",
        "func": "const CAMUNDA_BASE_URL = env.get(\"CAMUNDA_BASE_URL\")\n\nconst variableName =  \"post_sanction_validation_action\"\n// const variableName =  \"awaiting_lead_push_action\"\n\nmsg.url = `${CAMUNDA_BASE_URL}/engine-rest/process-instance/${msg.bankApplication.workflowTaskID}/variables/${variableName}`\nmsg.method = 'PUT',\nmsg.payload = { value: true }\n\nmsg.logger = `Update BPMN variable`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1320,
        "wires": [
            [
                "ec162b3cd019ec68",
                "079222248cffd5b9"
            ]
        ]
    },
    {
        "id": "ec162b3cd019ec68",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "7233099df5fc7477",
        "name": "",
        "x": 510,
        "y": 1320,
        "wires": [
            [
                "8725859eb62243d3",
                "85f452d779e7e400"
            ],
            [
                "8725859eb62243d3",
                "7176430c52f688a2"
            ]
        ]
    },
    {
        "id": "8725859eb62243d3",
        "type": "debug",
        "z": "7233099df5fc7477",
        "name": "updateBPMN ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 1320,
        "wires": []
    },
    {
        "id": "079222248cffd5b9",
        "type": "debug",
        "z": "7233099df5fc7477",
        "name": "debug 552",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 1360,
        "wires": []
    },
    {
        "id": "c462654cba6fb29d",
        "type": "debug",
        "z": "7233099df5fc7477",
        "name": "debug 554",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 340,
        "wires": []
    },
    {
        "id": "b7b7d0241f15d9de",
        "type": "debug",
        "z": "7233099df5fc7477",
        "name": "debug 559",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 560,
        "wires": []
    },
    {
        "id": "7176430c52f688a2",
        "type": "function",
        "z": "7233099df5fc7477",
        "name": "Loop exit",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 920,
        "wires": [
            [
                "85f452d779e7e400"
            ]
        ]
    },
    {
        "id": "2b0f69715caecb5b",
        "type": "function",
        "z": "7233099df5fc7477",
        "name": "CallLimitApi",
        "func": "\n\n\nmsg.method = \"POST\"\nmsg.url = `https://stgapig.chola.murugappa.com/tpscfregistration/v1/Limitex/Limitdetail`\nmsg.headers = {\n    Authorization: `Bearer ${flow.get(\"cholaToken\")}`\n}\n\nmsg.payload = {\n    \"fiid\": \"30147\",\n    \"customercode\": \"CUS005741\",\n    \"limitno\": \"\",\n    \"fintech\": \"AV\"\n}\n\nmsg.logger = `Call limit API`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1880,
        "wires": [
            [
                "2034a841dafc9292"
            ]
        ]
    },
    {
        "id": "2034a841dafc9292",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "7233099df5fc7477",
        "name": "CallLimitApi",
        "x": 550,
        "y": 1880,
        "wires": [
            [
                "7353d48c959c6a57"
            ],
            []
        ]
    },
    {
        "id": "703c02c89e8021cf",
        "type": "function",
        "z": "7233099df5fc7477",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\n\nconst cholaToken = `eyJ4NXQiOiJNell4TW1Ga09HWXdNV0kwWldObU5EY3hOR1l3WW1NNFpUQTNNV0kyTkRBelpHUXpOR00wWkdSbE5qSmtPREZrWkRSaU9URmtNV0ZoTXpVMlpHVmxOZyIsImtpZCI6Ik16WXhNbUZrT0dZd01XSTBaV05tTkRjeE5HWXdZbU00WlRBM01XSTJOREF6WkdRek5HTTBaR1JsTmpKa09ERmtaRFJpT1RGa01XRmhNelUyWkdWbE5nX1JTMjU2IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJhZG1pbiIsImF1dCI6IkFQUExJQ0FUSU9OIiwiYXVkIjoiNWs5TzByMWxya042MTNxRXhUSmFWWk14ZXJZYSIsIm5iZiI6MTY1MDk4ODg5OSwiYXpwIjoiNWs5TzByMWxya042MTNxRXhUSmFWWk14ZXJZYSIsInNjb3BlIjoiZGVmYXVsdCIsImlzcyI6Imh0dHBzOlwvXC9zdGdhcGkuY2hvbGEubXVydWdhcHBhLmNvbTo0NDNcL29hdXRoMlwvdG9rZW4iLCJleHAiOjE2ODY5ODg4OTksImlhdCI6MTY1MDk4ODg5OSwianRpIjoiZTA3YjFmMDItY2EyOS00MDY1LThjODUtY2JjMzdlMjUzODViIn0.st0zhO3k9k-jliG5Hj1dLXIqSRzFW2mgLL35mBaqLzMpYsC4R0lw5jUVOaZwvFy1t8THY5hDx8dwQtbVbZkx7_nKl34MgHsOyQC5Nhwpf8pv5y-_MIV0juO0pdEqzoJMYGVV3EbcB-zCTmI91jmvN3JSj9ANBdL6Fr1zYXiVa3zmw1u85gf9Mti13podTPTQ_eO2bHftSyAs4IAmPza1f1A3oITFRslRRCUw52XKYbNkR1C-TK_Ie6AlAdHJiplQybcahUp9ndBAi5q2ASM_F93sTlAMG4xVTfzqGyIvhxQ6WWg4poimLky11rZCBN-Vu-yDEd4UyYbZqNsT-8ysmg`\n\nflow.set(\"cholaToken\",cholaToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1820,
        "wires": [
            [
                "2b0f69715caecb5b"
            ]
        ]
    },
    {
        "id": "7353d48c959c6a57",
        "type": "debug",
        "z": "7233099df5fc7477",
        "name": "debug 578",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 1840,
        "wires": []
    },
    {
        "id": "2e4f5d83d8afa00c",
        "type": "inject",
        "z": "7233099df5fc7477",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1820,
        "wires": [
            [
                "703c02c89e8021cf"
            ]
        ]
    },
    {
        "id": "cb1f5a8f4d1c4732",
        "type": "function",
        "z": "7233099df5fc7477",
        "name": "fetchTenor",
        "func": "const PAYLATER_URL = env.get(\"PAYLATER_URL\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\nconst { customercode, payload, bankApplication,loanData,actyvEntityId} = msg;\nconst bankId = msg.bankApplication.bankId\n\nmsg.url = `${PAYLATER_URL}/v1/tenor-and-rate-spread/service/fetch`\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n    Authorization: `Bearer ${flow.get(\"actyvToken\")}`,\n    actyventityid: actyvEntityId\n}\nmsg.method = \"POST\"\nmsg.payload = {\n        \"bankID\": bankId,\n    \"loanID\": msg.loanId,\n}\n\nmsg.logger = `Fetch tenor and rate spread for bank ${JSON.stringify(bankId)}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1040,
        "wires": [
            [
                "14672099886c4dec"
            ]
        ]
    },
    {
        "id": "14672099886c4dec",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "7233099df5fc7477",
        "name": "fetchTenor",
        "x": 470,
        "y": 1040,
        "wires": [
            [
                "202bc04049f53fdf",
                "d0cb5f52aac6cf27"
            ],
            [
                "202bc04049f53fdf",
                "7176430c52f688a2"
            ]
        ]
    },
    {
        "id": "202bc04049f53fdf",
        "type": "debug",
        "z": "7233099df5fc7477",
        "name": "fetchTenor",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1040,
        "wires": []
    },
    {
        "id": "d0cb5f52aac6cf27",
        "type": "function",
        "z": "7233099df5fc7477",
        "name": "createBnplPreference",
        "func": "const PAYLATER_URL = env.get(\"PAYLATER_URL\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\nconst { customercode, payload, bankApplication,loanData,actyvEntityId} = msg;\nconst bankId = msg.bankApplication.bankId\nconst defaultSpreadId = msg.payload[0].id\nmsg.url = `${PAYLATER_URL}/v1/bnpl-preference`\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n    Authorization: `Bearer ${flow.get(\"actyvToken\")}`,\n    actyventityid: actyvEntityId\n}\nmsg.method = \"POST\"\nmsg.payload = {\n    \"borrowerID\": bankApplication[\"businessPartnerID\"],\n    \"bankApplicationConfigID\": bankApplication[\"bankApplicationConfigId\"],\n    \"defaultBankID\": bankApplication[\"bankId\"],\n    \"defaultSpreadID\": defaultSpreadId,\n    \"minInvoiceAmountThreshold\": 10\n}\n\nmsg.logger = `Fetch tenor and rate spread for bank ${JSON.stringify(bankId)}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1120,
        "wires": [
            [
                "9beeb0cdf245e156"
            ]
        ]
    },
    {
        "id": "9beeb0cdf245e156",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "7233099df5fc7477",
        "name": "createBnplPreference",
        "x": 500,
        "y": 1120,
        "wires": [
            [
                "6bdbf4e17b1df13e",
                "94169773a96b5d6a"
            ],
            [
                "6bdbf4e17b1df13e",
                "7176430c52f688a2"
            ]
        ]
    },
    {
        "id": "6bdbf4e17b1df13e",
        "type": "debug",
        "z": "7233099df5fc7477",
        "name": "createBnplPreference",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 1120,
        "wires": []
    },
    {
        "id": "6b0f6bc11d550777",
        "type": "inject",
        "z": "7233099df5fc7477",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1700,
        "wires": [
            [
                "f3e63766e95825eb"
            ]
        ]
    },
    {
        "id": "f3e63766e95825eb",
        "type": "function",
        "z": "7233099df5fc7477",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\n\nconst cholaToken = `eyJ4NXQiOiJNell4TW1Ga09HWXdNV0kwWldObU5EY3hOR1l3WW1NNFpUQTNNV0kyTkRBelpHUXpOR00wWkdSbE5qSmtPREZrWkRSaU9URmtNV0ZoTXpVMlpHVmxOZyIsImtpZCI6Ik16WXhNbUZrT0dZd01XSTBaV05tTkRjeE5HWXdZbU00WlRBM01XSTJOREF6WkdRek5HTTBaR1JsTmpKa09ERmtaRFJpT1RGa01XRmhNelUyWkdWbE5nX1JTMjU2IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJhZG1pbiIsImF1dCI6IkFQUExJQ0FUSU9OIiwiYXVkIjoiNWs5TzByMWxya042MTNxRXhUSmFWWk14ZXJZYSIsIm5iZiI6MTY1MDk4ODg5OSwiYXpwIjoiNWs5TzByMWxya042MTNxRXhUSmFWWk14ZXJZYSIsInNjb3BlIjoiZGVmYXVsdCIsImlzcyI6Imh0dHBzOlwvXC9zdGdhcGkuY2hvbGEubXVydWdhcHBhLmNvbTo0NDNcL29hdXRoMlwvdG9rZW4iLCJleHAiOjE2ODY5ODg4OTksImlhdCI6MTY1MDk4ODg5OSwianRpIjoiZTA3YjFmMDItY2EyOS00MDY1LThjODUtY2JjMzdlMjUzODViIn0.st0zhO3k9k-jliG5Hj1dLXIqSRzFW2mgLL35mBaqLzMpYsC4R0lw5jUVOaZwvFy1t8THY5hDx8dwQtbVbZkx7_nKl34MgHsOyQC5Nhwpf8pv5y-_MIV0juO0pdEqzoJMYGVV3EbcB-zCTmI91jmvN3JSj9ANBdL6Fr1zYXiVa3zmw1u85gf9Mti13podTPTQ_eO2bHftSyAs4IAmPza1f1A3oITFRslRRCUw52XKYbNkR1C-TK_Ie6AlAdHJiplQybcahUp9ndBAi5q2ASM_F93sTlAMG4xVTfzqGyIvhxQ6WWg4poimLky11rZCBN-Vu-yDEd4UyYbZqNsT-8ysmg`\n\nflow.set(\"cholaToken\",cholaToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1700,
        "wires": [
            [
                "d4262c579f7aa368"
            ]
        ]
    },
    {
        "id": "d4262c579f7aa368",
        "type": "function",
        "z": "7233099df5fc7477",
        "name": "callAccntBal",
        "func": "\n\n\nmsg.method = \"POST\"\nmsg.url = `https://stgapig.chola.murugappa.com/tpinterface/v1/InterfaceData/AcctBalData`\nmsg.headers = {\n    Authorization: `Bearer ${flow.get(\"cholaToken\")}`\n}\n\n// msg.payload = {\n//     \"fiid\": \"30147\",\n//     \"customercode\": \"CUS005741\",\n//     \"limitno\": \"\",\n//     \"fintech\": \"AV\"\n// }\nmsg.payload = {\n    \"fiid\": 30147,\n    // \"prgno\": \"PRO000020\",\n    \"prgno\": \"PRO000678\",\n    \"custno\": \"CUS005741\",\n    \"acctno\": null,\n    \"fintech\": \"AV\",\n    // \"accountstatus\":\"L\"\n}\n\nmsg.logger = `Call limit API`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1760,
        "wires": [
            [
                "de08a81bb455090d"
            ]
        ]
    },
    {
        "id": "de08a81bb455090d",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "7233099df5fc7477",
        "name": "callAccntBal",
        "x": 550,
        "y": 1760,
        "wires": [
            [
                "fc467fd872f14377"
            ],
            []
        ]
    },
    {
        "id": "fc467fd872f14377",
        "type": "debug",
        "z": "7233099df5fc7477",
        "name": "debug 579",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 1720,
        "wires": []
    },
    {
        "id": "e3f1758850738b3d",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "7233099df5fc7477",
        "name": "",
        "x": 550,
        "y": 1200,
        "wires": [
            [
                "de362fffdf301876",
                "ef23704fac7648f7"
            ],
            [
                "7176430c52f688a2",
                "ef23704fac7648f7"
            ]
        ]
    },
    {
        "id": "94169773a96b5d6a",
        "type": "function",
        "z": "7233099df5fc7477",
        "name": "Create business relation with erpId",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nmsg.url = `${GO_URL}/business-relationship/service`;\nmsg.method = \"POST\"\nmsg.headers = {}\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n}\nconst { businessPartnerID, enterpriseId } = msg.bankApplication\nconst key = msg.customercode\n\nmsg.payload = {\n    \"businessId\": businessPartnerID,\n    \"parentBusinessId\": enterpriseId,\n    \"identifierByParent\": `${key}`,\n    \"bankAccountNumber\": `Not available`,\n    \"bankIFSC\": `Not Available`,\n    \"bankName\": `Not Available`,\n    \"relationType\": \"DISTRIBUTOR-BANK\"\n}\nmsg.logger = `Create business relation with erpId #${key}`\n\n\nfunction checkRelationType(str){\n    if(str.toLowerCase() === \"distributor\"){\n        return \"DISTRIBUTOR-ENTERPRISE\"\n    } else if (str.toLowerCase() === \"vendor\"){\n        return \"VENDOR-ENTERPRISE\"\n    }\n    return \"\"\n}\n\nreturn msg\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1200,
        "wires": [
            [
                "e3f1758850738b3d",
                "a92997c97d84916a"
            ]
        ]
    },
    {
        "id": "a92997c97d84916a",
        "type": "debug",
        "z": "7233099df5fc7477",
        "name": "debug 581",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1280,
        "wires": []
    },
    {
        "id": "ef23704fac7648f7",
        "type": "debug",
        "z": "7233099df5fc7477",
        "name": "debug 582",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1200,
        "wires": []
    },
    {
        "id": "873cf5ea771c9c78",
        "type": "SFTP-main",
        "z": "b950979261d40ce2",
        "path": "/",
        "method": "list",
        "remoteFilePath": "/sftpdir/test/ramu/drawdowns/response",
        "remoteFilePathType": "str",
        "localFilePath": "C:\\Users\\Ayush Rarg\\OneDrive - actyv.ai\\Desktop\\node-red",
        "localFilePathType": "str",
        "server": "d4942248b841ce28",
        "outputs": 1,
        "debug": false,
        "name": "lisitng the files from sftp",
        "x": 490,
        "y": 480,
        "wires": [
            [
                "568a2263aa6e0106"
            ]
        ]
    },
    {
        "id": "afb8ab53165dad71",
        "type": "switch",
        "z": "b950979261d40ce2",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 820,
        "wires": [
            [
                "c049f387a34c49fb"
            ],
            [
                "4795e7e28407e49b"
            ]
        ]
    },
    {
        "id": "4795e7e28407e49b",
        "type": "function",
        "z": "b950979261d40ce2",
        "name": "mapJsonFromXLSX",
        "func": "\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\n    for (let item of msg.payload) {\n        if (item[\"Dealer Code\"].toString().length > 0) {\n            // await sleep(500)\n            node.send({\n                ...msg,\n                payload: item,\n                isCompleted: false\n            })\n        }\n}\n\nmsg.isCompleted = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 860,
        "wires": [
            [
                "c32fc79bdf31f36a"
            ]
        ]
    },
    {
        "id": "c049f387a34c49fb",
        "type": "debug",
        "z": "b950979261d40ce2",
        "name": "Response drawdowns length",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.length",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 760,
        "wires": []
    },
    {
        "id": "50efbc1486682ce6",
        "type": "http request",
        "z": "b950979261d40ce2",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1270,
        "y": 800,
        "wires": [
            [
                "91bce6c5ac61d354"
            ]
        ]
    },
    {
        "id": "22a3f75e21e50581",
        "type": "function",
        "z": "b950979261d40ce2",
        "name": "updateDrawdownReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown`\nmsg.method = 'PATCH'\nconst token = flow.get(\"bank_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"bankid\"] = msg.bankId\n\nconst item = msg.payload;\n\nif(item.Status === 'S'){\n    msg.payload = {\n        \"drawdownStatus\": \"paid\",\n        \"bankProvidedDrawdownCodes\": item[\"UTR No\"] ?? item[\"Invoice Number\"],\n        \"disbursedAmount\": item[\"Invoice Amount\"],\n        \"requestUniqueCode\": item[\"Invoice Number\"]\n    }\n}else{\n    msg.payload = {\n        \"bankProvidedDrawdownCodes\": item[\"UTR No\"] ?? item[\"Invoice Number\"],\n        \"drawdownStatus\": \"failed\",\n        \"requestUniqueCode\": item[\"Invoice Number\"]\n    }\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 800,
        "wires": [
            [
                "50efbc1486682ce6"
            ]
        ]
    },
    {
        "id": "c32fc79bdf31f36a",
        "type": "switch",
        "z": "b950979261d40ce2",
        "name": "",
        "property": "isCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 830,
        "y": 860,
        "wires": [
            [
                "22a3f75e21e50581"
            ],
            [
                "623e6b233479e48d",
                "be79bcf76fc39d25"
            ]
        ]
    },
    {
        "id": "568a2263aa6e0106",
        "type": "function",
        "z": "b950979261d40ce2",
        "name": "getSingleFilename",
        "func": "\nconst files = msg.payload.filter(f => f.includes('_Rev'))\nconsole.log(files)\nlet file;\nif (files.length !== 0) {\n    const todaysDate = moment(new Date()).format(\"YYYY-MM-DD\");\n    node.send({ ...msg, todaysDate})\n    const todaysLastFile = files\n        .filter((file) => file.includes(`${todaysDate}`));\n    // file = files[0]\n    if (!todaysLastFile) {\n        file = []\n        return\n    }\n    file = todaysLastFile\n}\nmsg.payload = file\n// msg.payload = [\"/sftpdir/test/ramu/drawdowns/response/CPLDFACT1_2023-06-06T06-00-10_Rev.txt\"]\n// msg.filePath = file;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 770,
        "y": 480,
        "wires": [
            [
                "6dd23b0dadc8b34b",
                "748615f593d0c277"
            ]
        ]
    },
    {
        "id": "05717c551ed32efc",
        "type": "file in",
        "z": "b950979261d40ce2",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 480,
        "y": 660,
        "wires": [
            [
                "1e1aca65d23b37a3"
            ]
        ]
    },
    {
        "id": "1e1aca65d23b37a3",
        "type": "csv",
        "z": "b950979261d40ce2",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "Dealer Code,Account No,Invoice Date,Invoice Number,Invoice Amount,Email ID,Status,Status Description,UTR No",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 650,
        "y": 660,
        "wires": [
            [
                "9a2d7065c60ebfdd",
                "afb8ab53165dad71"
            ]
        ]
    },
    {
        "id": "9a2d7065c60ebfdd",
        "type": "debug",
        "z": "b950979261d40ce2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 660,
        "wires": []
    },
    {
        "id": "3204e5fcc0d49d5a",
        "type": "comment",
        "z": "b950979261d40ce2",
        "name": "Error handling",
        "info": "Send an email if any error occurs",
        "x": 390,
        "y": 1480,
        "wires": []
    },
    {
        "id": "966917a19d64a35b",
        "type": "catch",
        "z": "b950979261d40ce2",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 380,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "937f5ebe2be08261",
        "type": "debug",
        "z": "b950979261d40ce2",
        "name": "error",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 1540,
        "wires": []
    },
    {
        "id": "e2123da1a6c6ecc4",
        "type": "function",
        "z": "b950979261d40ce2",
        "name": "sendEmailReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\n\nmsg.payload = {\n    // \"from\": \"ramu.bugudi@actyv.com\",\n    \"from\": \"shravan.pm@actyv.com\",\n    \"to\": \"ramu.bugudi@actyv.com\",\n    \"subject\": `Error occured - ${msg.error.message}`,\n    // \"html\": `${msg.error}`,\n    \"html\": `\n    <html>\n        <body>\n            <p></p>\n            <p><b>FLOW NAME:</b> ${env.get(\"NR_FLOW_NAME\")} <b>FLOW ID:</b> ${env.get(\"NR_FLOW_ID\")} <b>PATH:</b> ${env.get(\"NR_NODE_PATH\")}</p>\n            <p>${msg.error.message}</p>\n            <p>Name: ${msg.error.source.name} - Type: ${msg.error.source.type}</p>\n            <p>Stacktrace: ${msg.error.stack}</p>\n        </body>\n    </html>`,\n    \"priority\": \"high\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1540,
        "wires": [
            [
                "1bd956a7833c20ba"
            ]
        ]
    },
    {
        "id": "1bd956a7833c20ba",
        "type": "http request",
        "z": "b950979261d40ce2",
        "name": "sendEmail",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 830,
        "y": 1540,
        "wires": [
            [
                "937f5ebe2be08261"
            ]
        ],
        "info": "Get bank product config id"
    },
    {
        "id": "c5221f9553994105",
        "type": "status",
        "z": "b950979261d40ce2",
        "name": "",
        "scope": null,
        "x": 380,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "744ef510da098152",
        "type": "inject",
        "z": "b950979261d40ce2",
        "name": "9:05AM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 03 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 40,
        "wires": [
            [
                "c22ad5e7861cdbf9"
            ]
        ]
    },
    {
        "id": "d8d3c2ae5d14e71a",
        "type": "inject",
        "z": "b950979261d40ce2",
        "name": "10:05AM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 04 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "c22ad5e7861cdbf9"
            ]
        ]
    },
    {
        "id": "07da21eac2b22fcd",
        "type": "inject",
        "z": "b950979261d40ce2",
        "name": "11:05AM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 05 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 120,
        "wires": [
            [
                "c22ad5e7861cdbf9"
            ]
        ]
    },
    {
        "id": "ca47fea04fb5a35c",
        "type": "inject",
        "z": "b950979261d40ce2",
        "name": "12:05AM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 06 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 160,
        "wires": [
            [
                "c22ad5e7861cdbf9"
            ]
        ]
    },
    {
        "id": "a421d26c4d22936f",
        "type": "inject",
        "z": "b950979261d40ce2",
        "name": "1:05PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 07 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 240,
        "wires": [
            [
                "c22ad5e7861cdbf9"
            ]
        ]
    },
    {
        "id": "8966afffd0735ba3",
        "type": "inject",
        "z": "b950979261d40ce2",
        "name": "2:05PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 08 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 300,
        "wires": [
            [
                "c22ad5e7861cdbf9"
            ]
        ]
    },
    {
        "id": "baf53f3a1ca6bada",
        "type": "inject",
        "z": "b950979261d40ce2",
        "name": "3:05PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 09 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 360,
        "wires": [
            [
                "c22ad5e7861cdbf9"
            ]
        ]
    },
    {
        "id": "d81e7f393d8442a7",
        "type": "inject",
        "z": "b950979261d40ce2",
        "name": "4:05PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 10 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 420,
        "wires": [
            [
                "c22ad5e7861cdbf9"
            ]
        ]
    },
    {
        "id": "055f6740c12da2e4",
        "type": "inject",
        "z": "b950979261d40ce2",
        "name": "5:05PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 11 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 480,
        "wires": [
            [
                "c22ad5e7861cdbf9"
            ]
        ]
    },
    {
        "id": "3ad6156f31a9f1a3",
        "type": "inject",
        "z": "b950979261d40ce2",
        "name": "6:05PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 12 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 540,
        "wires": [
            [
                "c22ad5e7861cdbf9"
            ]
        ]
    },
    {
        "id": "91bce6c5ac61d354",
        "type": "debug",
        "z": "b950979261d40ce2",
        "name": "Update drawdown",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 800,
        "wires": []
    },
    {
        "id": "c22ad5e7861cdbf9",
        "type": "function",
        "z": "b950979261d40ce2",
        "d": true,
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst AXIS_BANK_ADMIN_EMAIL = env.get('MSL_BANK_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": AXIS_BANK_ADMIN_EMAIL,\n    \"password\": PASSWORD\n};\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 200,
        "wires": [
            [
                "7691fb37ed7fa3d0"
            ]
        ]
    },
    {
        "id": "7691fb37ed7fa3d0",
        "type": "http request",
        "z": "b950979261d40ce2",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 850,
        "y": 200,
        "wires": [
            [
                "11ea4e6b12df29fe"
            ]
        ]
    },
    {
        "id": "11ea4e6b12df29fe",
        "type": "function",
        "z": "b950979261d40ce2",
        "name": "set Bank Token",
        "func": "flow.set('bank_token', msg.payload.idToken);\n\nmsg.bank_token = msg.payload.idToken\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 200,
        "wires": [
            [
                "5344831261ea6e68"
            ]
        ]
    },
    {
        "id": "5344831261ea6e68",
        "type": "function",
        "z": "b950979261d40ce2",
        "name": "getMSLBankReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_KEY = env.get(\"MSL_BANK_KEY\")\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank/key/${BANK_KEY}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 300,
        "wires": [
            [
                "b5bd3320bce46835"
            ]
        ]
    },
    {
        "id": "b5bd3320bce46835",
        "type": "http request",
        "z": "b950979261d40ce2",
        "name": "getMSLBankReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 870,
        "y": 300,
        "wires": [
            [
                "61ebd78dfe3d93c0"
            ]
        ]
    },
    {
        "id": "61ebd78dfe3d93c0",
        "type": "function",
        "z": "b950979261d40ce2",
        "name": "Save MSL Bank ID",
        "func": "const bankId = msg.payload?._id\n\nmsg.bankId = bankId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 300,
        "wires": [
            [
                "04459f3535f9a57e"
            ]
        ]
    },
    {
        "id": "04459f3535f9a57e",
        "type": "function",
        "z": "b950979261d40ce2",
        "name": "getAxisBankReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_KEY = env.get(\"AXIS_BANK_KEY\")\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank/key/${BANK_KEY}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 400,
        "wires": [
            [
                "e5b8c54b9b3c1e6f"
            ]
        ]
    },
    {
        "id": "e5b8c54b9b3c1e6f",
        "type": "http request",
        "z": "b950979261d40ce2",
        "name": "getAxisBankReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 830,
        "y": 400,
        "wires": [
            [
                "914dfa34746eb067"
            ]
        ]
    },
    {
        "id": "914dfa34746eb067",
        "type": "function",
        "z": "b950979261d40ce2",
        "name": "Save Axis Bank ID",
        "func": "const bankId = msg.payload?._id\n\nmsg.axisBankId = bankId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 400,
        "wires": [
            [
                "ab3736a91a9f3939",
                "873cf5ea771c9c78"
            ]
        ]
    },
    {
        "id": "1ec91e6180ab3fde",
        "type": "function",
        "z": "b950979261d40ce2",
        "name": "setRemotePath",
        "func": "\n    msg.filename = msg.payload[0].split('.')[0] // filename without extension\n\n    const folderPath = msg.payload[0].split(\"/\")\n    const fileName = folderPath[folderPath.length - 1]\n    flow.set('filename', fileName) // filename with extension\n\n    // msg.filepath = `/Users/ramu/Desktop/node-red/${fileName}`\n    msg.successPath = `${env.get(\"SFTP_SUCCESS_FOLDER\")}`\n    msg.localPath = `${env.get(\"LOCAL_PATH\")}/${fileName}`\n    msg.remotePath = `${env.get(\"REMOTE_PATH_OUT\")}/${fileName}`\n\n    msg.filename = msg.localPath\n    // msg.filename = \"/home/ec2-user/data/CPLDFACT1_2023-06-06T06-00-10_Rev.txt\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 560,
        "wires": [
            [
                "05717c551ed32efc",
                "69d399a89733426d"
            ]
        ]
    },
    {
        "id": "623e6b233479e48d",
        "type": "debug",
        "z": "b950979261d40ce2",
        "name": "Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 880,
        "wires": []
    },
    {
        "id": "be79bcf76fc39d25",
        "type": "SFTP-main",
        "z": "b950979261d40ce2",
        "path": "/",
        "method": "put",
        "remoteFilePath": "/Out",
        "remoteFilePathType": "str",
        "localFilePath": "localPath",
        "localFilePathType": "msg",
        "server": "55c08fb94e980196",
        "outputs": 1,
        "debug": false,
        "name": "move to success folder",
        "x": 1040,
        "y": 1020,
        "wires": [
            [
                "ad896620727967a3"
            ]
        ]
    },
    {
        "id": "ad896620727967a3",
        "type": "SFTP-main",
        "z": "b950979261d40ce2",
        "path": "/",
        "method": "delete",
        "remoteFilePath": "remotePath",
        "remoteFilePathType": "msg",
        "localFilePath": "filepath",
        "localFilePathType": "msg",
        "server": "55c08fb94e980196",
        "outputs": 1,
        "debug": false,
        "name": "delete from existing folder",
        "x": 1320,
        "y": 1020,
        "wires": [
            [
                "bf319e9dc07faf1c"
            ]
        ]
    },
    {
        "id": "bf319e9dc07faf1c",
        "type": "debug",
        "z": "b950979261d40ce2",
        "name": "Deleted file from SFTP existing directory",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 1020,
        "wires": []
    },
    {
        "id": "ab3736a91a9f3939",
        "type": "debug",
        "z": "b950979261d40ce2",
        "name": "All tokens and Id's",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 400,
        "wires": []
    },
    {
        "id": "31050c68e82b7b1c",
        "type": "inject",
        "z": "b950979261d40ce2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 680,
        "y": 140,
        "wires": [
            [
                "c22ad5e7861cdbf9"
            ]
        ]
    },
    {
        "id": "69d399a89733426d",
        "type": "debug",
        "z": "b950979261d40ce2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 560,
        "wires": []
    },
    {
        "id": "6dd23b0dadc8b34b",
        "type": "SFTP-main",
        "z": "b950979261d40ce2",
        "path": "/",
        "method": "get",
        "remoteFilePath": "payload",
        "remoteFilePathType": "msg",
        "localFilePath": "LOCAL_PATH",
        "localFilePathType": "env",
        "server": "8713902662c7b8a4",
        "outputs": 1,
        "debug": false,
        "name": "get a single file from sftp",
        "x": 1070,
        "y": 480,
        "wires": [
            [
                "1ec91e6180ab3fde",
                "1633b4872b265f9f"
            ]
        ]
    },
    {
        "id": "1633b4872b265f9f",
        "type": "debug",
        "z": "b950979261d40ce2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 480,
        "wires": []
    },
    {
        "id": "fef238bcd29b8c2b",
        "type": "switch",
        "z": "b950979261d40ce2",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2750,
        "y": 1120,
        "wires": [
            [
                "d3b0f5592bce1535"
            ],
            [
                "7b35133e94fab0cc"
            ]
        ]
    },
    {
        "id": "7b35133e94fab0cc",
        "type": "function",
        "z": "b950979261d40ce2",
        "name": "mapJsonFromXLSX",
        "func": "\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\n    for (let item of msg.payload) {\n        if (item[\"Dealer Code\"].toString().length > 0) {\n            // await sleep(500)\n            node.send({\n                ...msg,\n                payload: item,\n                isCompleted: false\n            })\n        }\n}\n\nmsg.isCompleted = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2980,
        "y": 1160,
        "wires": [
            [
                "e2693c1a73c7bcee"
            ]
        ]
    },
    {
        "id": "d3b0f5592bce1535",
        "type": "debug",
        "z": "b950979261d40ce2",
        "name": "Response drawdowns length",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.length",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3000,
        "y": 1060,
        "wires": []
    },
    {
        "id": "58b08753a4238c1a",
        "type": "http request",
        "z": "b950979261d40ce2",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 3610,
        "y": 1100,
        "wires": [
            [
                "341e68d1ddf35f91"
            ]
        ]
    },
    {
        "id": "8f8b24d9a9f496fd",
        "type": "function",
        "z": "b950979261d40ce2",
        "name": "updateDrawdownReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown`\nmsg.method = 'PATCH'\nconst token = flow.get(\"bank_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"bankid\"] = msg.bankId\n\nconst item = msg.payload;\n\nif(item.Status === 'S'){\n    msg.payload = {\n        \"drawdownStatus\": \"paid\",\n        \"bankProvidedDrawdownCodes\": item[\"UTR No\"] ?? item[\"Invoice Number\"],\n        \"disbursedAmount\": item[\"Invoice Amount\"],\n        \"requestUniqueCode\": item[\"Invoice Number\"]\n    }\n}else{\n    msg.payload = {\n        \"bankProvidedDrawdownCodes\": item[\"UTR No\"] ?? item[\"Invoice Number\"],\n        \"drawdownStatus\": \"failed\",\n        \"requestUniqueCode\": item[\"Invoice Number\"]\n    }\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3400,
        "y": 1100,
        "wires": [
            [
                "58b08753a4238c1a"
            ]
        ]
    },
    {
        "id": "e2693c1a73c7bcee",
        "type": "switch",
        "z": "b950979261d40ce2",
        "name": "",
        "property": "isCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3170,
        "y": 1160,
        "wires": [
            [
                "8f8b24d9a9f496fd"
            ],
            [
                "67bc86dad1263150",
                "d4726ee9ed1c452f"
            ]
        ]
    },
    {
        "id": "f4d2fc59dfbcd284",
        "type": "function",
        "z": "b950979261d40ce2",
        "name": "getSingleFilename",
        "func": "\nconst files = msg.payload.filter(f => f?.name.includes('_Rev'))\n// console.log(files)\nlet file;\nif (files.length !== 0) {\n    const todaysDate = moment(new Date()).format(\"YYYY-MM-DD\");\n    const todaysLastFile = files\n        .filter((file) => file?.name.includes(`${todaysDate}`));\n    // file = files[0]\n    if (!todaysLastFile) {\n        file = []\n        return\n    }\n    file = todaysLastFile\n}\nmsg.payload = file\n// msg.payload = [\"/Out/CPLDFACT1_2023-06-01T08-00-11_Rev.txt\"]\n// msg.filePath = file;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 3110,
        "y": 780,
        "wires": [
            [
                "6fe71aa323095979"
            ]
        ]
    },
    {
        "id": "0eeefc0b6ebd4a0b",
        "type": "file in",
        "z": "b950979261d40ce2",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 2820,
        "y": 960,
        "wires": [
            [
                "ecb4745c9156f85c"
            ]
        ]
    },
    {
        "id": "ecb4745c9156f85c",
        "type": "csv",
        "z": "b950979261d40ce2",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "Dealer Code,Account No,Invoice Date,Invoice Number,Invoice Amount,Email ID,Status,Status Description,UTR No",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 2990,
        "y": 960,
        "wires": [
            [
                "41ac8cfc606516ad"
            ]
        ]
    },
    {
        "id": "41ac8cfc606516ad",
        "type": "debug",
        "z": "b950979261d40ce2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3170,
        "y": 960,
        "wires": []
    },
    {
        "id": "2d91240836154fa3",
        "type": "comment",
        "z": "b950979261d40ce2",
        "name": "Error handling",
        "info": "Send an email if any error occurs",
        "x": 2730,
        "y": 1780,
        "wires": []
    },
    {
        "id": "ef1d6a604b077814",
        "type": "catch",
        "z": "b950979261d40ce2",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 2720,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "a1dd92f07b67a212",
        "type": "debug",
        "z": "b950979261d40ce2",
        "name": "error",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3370,
        "y": 1840,
        "wires": []
    },
    {
        "id": "e5ee21e839f0b07a",
        "type": "function",
        "z": "b950979261d40ce2",
        "name": "sendEmailReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\n\nmsg.payload = {\n    // \"from\": \"ramu.bugudi@actyv.com\",\n    \"from\": \"shravan.pm@actyv.com\",\n    \"to\": \"ramu.bugudi@actyv.com\",\n    \"subject\": `Error occured - ${msg.error.message}`,\n    // \"html\": `${msg.error}`,\n    \"html\": `\n    <html>\n        <body>\n            <p></p>\n            <p><b>FLOW NAME:</b> ${env.get(\"NR_FLOW_NAME\")} <b>FLOW ID:</b> ${env.get(\"NR_FLOW_ID\")} <b>PATH:</b> ${env.get(\"NR_NODE_PATH\")}</p>\n            <p>${msg.error.message}</p>\n            <p>Name: ${msg.error.source.name} - Type: ${msg.error.source.type}</p>\n            <p>Stacktrace: ${msg.error.stack}</p>\n        </body>\n    </html>`,\n    \"priority\": \"high\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2940,
        "y": 1840,
        "wires": [
            [
                "0a62240304e6b19a"
            ]
        ]
    },
    {
        "id": "0a62240304e6b19a",
        "type": "http request",
        "z": "b950979261d40ce2",
        "name": "sendEmail",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 3170,
        "y": 1840,
        "wires": [
            [
                "a1dd92f07b67a212"
            ]
        ],
        "info": "Get bank product config id"
    },
    {
        "id": "f1bbbb729c320ecf",
        "type": "status",
        "z": "b950979261d40ce2",
        "name": "",
        "scope": null,
        "x": 2720,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "9d3457fe9c9e6c53",
        "type": "inject",
        "z": "b950979261d40ce2",
        "name": "9:05AM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 03 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2520,
        "y": 340,
        "wires": [
            [
                "9124932ad01742bb"
            ]
        ]
    },
    {
        "id": "d9fcbb90377d8784",
        "type": "inject",
        "z": "b950979261d40ce2",
        "name": "10:05AM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 04 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2510,
        "y": 380,
        "wires": [
            [
                "9124932ad01742bb"
            ]
        ]
    },
    {
        "id": "541972d090ddd7e7",
        "type": "inject",
        "z": "b950979261d40ce2",
        "name": "11:05AM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 05 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2520,
        "y": 420,
        "wires": [
            [
                "9124932ad01742bb"
            ]
        ]
    },
    {
        "id": "9a8e6b37b3b65327",
        "type": "inject",
        "z": "b950979261d40ce2",
        "name": "12:05AM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 06 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2530,
        "y": 460,
        "wires": [
            [
                "9124932ad01742bb"
            ]
        ]
    },
    {
        "id": "16aea144324c4326",
        "type": "inject",
        "z": "b950979261d40ce2",
        "name": "1:05PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 07 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2540,
        "y": 540,
        "wires": [
            [
                "9124932ad01742bb"
            ]
        ]
    },
    {
        "id": "2563bc7a98849006",
        "type": "inject",
        "z": "b950979261d40ce2",
        "name": "2:05PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 08 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2540,
        "y": 600,
        "wires": [
            [
                "9124932ad01742bb"
            ]
        ]
    },
    {
        "id": "38f9330a582e1571",
        "type": "inject",
        "z": "b950979261d40ce2",
        "name": "3:05PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 09 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2540,
        "y": 660,
        "wires": [
            [
                "9124932ad01742bb"
            ]
        ]
    },
    {
        "id": "a598fa791513c536",
        "type": "inject",
        "z": "b950979261d40ce2",
        "name": "4:05PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 10 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2540,
        "y": 720,
        "wires": [
            [
                "9124932ad01742bb"
            ]
        ]
    },
    {
        "id": "2bb86671efef2593",
        "type": "inject",
        "z": "b950979261d40ce2",
        "name": "5:05PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 11 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2540,
        "y": 780,
        "wires": [
            [
                "9124932ad01742bb"
            ]
        ]
    },
    {
        "id": "16823854f5abb1fb",
        "type": "inject",
        "z": "b950979261d40ce2",
        "name": "6:05PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "35 12 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2540,
        "y": 840,
        "wires": [
            [
                "9124932ad01742bb"
            ]
        ]
    },
    {
        "id": "341e68d1ddf35f91",
        "type": "debug",
        "z": "b950979261d40ce2",
        "name": "Update drawdown",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3810,
        "y": 1100,
        "wires": []
    },
    {
        "id": "9124932ad01742bb",
        "type": "function",
        "z": "b950979261d40ce2",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst AXIS_BANK_ADMIN_EMAIL = env.get('MSL_BANK_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": AXIS_BANK_ADMIN_EMAIL,\n    \"password\": PASSWORD\n};\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3010,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "867cdd9e9797bdca",
        "type": "http request",
        "z": "b950979261d40ce2",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 3190,
        "y": 500,
        "wires": [
            [
                "9db6ae0b3c0e85b2"
            ]
        ]
    },
    {
        "id": "9db6ae0b3c0e85b2",
        "type": "function",
        "z": "b950979261d40ce2",
        "name": "set Bank Token",
        "func": "flow.set('bank_token', msg.payload.idToken);\n\nmsg.bank_token = msg.payload.idToken\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3380,
        "y": 500,
        "wires": [
            [
                "be26ce5355cce1b7"
            ]
        ]
    },
    {
        "id": "be26ce5355cce1b7",
        "type": "function",
        "z": "b950979261d40ce2",
        "name": "getMSLBankReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_KEY = env.get(\"MSL_BANK_KEY\")\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank/key/${BANK_KEY}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2990,
        "y": 600,
        "wires": [
            [
                "a61d6274f2622f87"
            ]
        ]
    },
    {
        "id": "a61d6274f2622f87",
        "type": "http request",
        "z": "b950979261d40ce2",
        "name": "getMSLBankReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 3210,
        "y": 600,
        "wires": [
            [
                "3a8a7067bb0d2faa"
            ]
        ]
    },
    {
        "id": "3a8a7067bb0d2faa",
        "type": "function",
        "z": "b950979261d40ce2",
        "name": "Save MSL Bank ID",
        "func": "const bankId = msg.payload?._id\n\nmsg.bankId = bankId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3430,
        "y": 600,
        "wires": [
            [
                "7914bbc4e43dd41f"
            ]
        ]
    },
    {
        "id": "7914bbc4e43dd41f",
        "type": "function",
        "z": "b950979261d40ce2",
        "name": "getAxisBankReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_KEY = env.get(\"AXIS_BANK_KEY\")\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank/key/${BANK_KEY}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2950,
        "y": 700,
        "wires": [
            [
                "9e7a0e013dee0bca"
            ]
        ]
    },
    {
        "id": "9e7a0e013dee0bca",
        "type": "http request",
        "z": "b950979261d40ce2",
        "name": "getAxisBankReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 3170,
        "y": 700,
        "wires": [
            [
                "05d76c0ea6ea2243"
            ]
        ]
    },
    {
        "id": "05d76c0ea6ea2243",
        "type": "function",
        "z": "b950979261d40ce2",
        "name": "Save Axis Bank ID",
        "func": "const bankId = msg.payload?._id\n\nmsg.axisBankId = bankId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 700,
        "wires": [
            [
                "ac25c09a18891a2e",
                "3958ff57c49de562"
            ]
        ]
    },
    {
        "id": "e40fa142e77ebb72",
        "type": "function",
        "z": "b950979261d40ce2",
        "name": "setRemotePath",
        "func": "try {\n    msg.filename = msg.filePath[0]?.name?.split('.')[0] // filename without extension\n\n    const folderPath = msg.filePath[0]?.name?.split(\"/\")\n    const fileName = folderPath[folderPath.length - 1]\n    flow.set('filename', fileName) // filename with extension\n\n    // msg.filepath = `/Users/ramu/Desktop/node-red/${fileName}`\n    msg.successPath = `${env.get(\"SFTP_SUCCESS_FOLDER\")}`\n    msg.localPath = `${env.get(\"LOCAL_PATH\")}/${fileName}`\n    msg.remotePath = `${env.get(\"REMOTE_PATH_OUT\")}/${fileName}`\n\n    msg.filename = msg.localPath\n} catch (error) {\n    node.send(error)\n};\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2800,
        "y": 860,
        "wires": [
            [
                "0eeefc0b6ebd4a0b",
                "1a42161509bb5322"
            ]
        ]
    },
    {
        "id": "67bc86dad1263150",
        "type": "debug",
        "z": "b950979261d40ce2",
        "name": "Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3370,
        "y": 1180,
        "wires": []
    },
    {
        "id": "d4726ee9ed1c452f",
        "type": "SFTP-main",
        "z": "b950979261d40ce2",
        "path": "/",
        "method": "put",
        "remoteFilePath": "/Out",
        "remoteFilePathType": "str",
        "localFilePath": "localPath",
        "localFilePathType": "msg",
        "server": "55c08fb94e980196",
        "outputs": 1,
        "debug": false,
        "name": "move to success folder",
        "x": 3380,
        "y": 1320,
        "wires": [
            [
                "1e478de6dd642ff5"
            ]
        ]
    },
    {
        "id": "1e478de6dd642ff5",
        "type": "SFTP-main",
        "z": "b950979261d40ce2",
        "path": "/",
        "method": "delete",
        "remoteFilePath": "remotePath",
        "remoteFilePathType": "msg",
        "localFilePath": "filepath",
        "localFilePathType": "msg",
        "server": "55c08fb94e980196",
        "outputs": 1,
        "debug": false,
        "name": "delete from existing folder",
        "x": 3660,
        "y": 1320,
        "wires": [
            [
                "61951a70932f4c73"
            ]
        ]
    },
    {
        "id": "61951a70932f4c73",
        "type": "debug",
        "z": "b950979261d40ce2",
        "name": "Deleted file from SFTP existing directory",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3970,
        "y": 1320,
        "wires": []
    },
    {
        "id": "ac25c09a18891a2e",
        "type": "debug",
        "z": "b950979261d40ce2",
        "name": "All tokens and Id's",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3650,
        "y": 700,
        "wires": []
    },
    {
        "id": "21e001e8436dde5f",
        "type": "inject",
        "z": "b950979261d40ce2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3020,
        "y": 440,
        "wires": [
            [
                "9124932ad01742bb"
            ]
        ]
    },
    {
        "id": "1a42161509bb5322",
        "type": "debug",
        "z": "b950979261d40ce2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2990,
        "y": 860,
        "wires": []
    },
    {
        "id": "379fe45dafdb7179",
        "type": "debug",
        "z": "b950979261d40ce2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3650,
        "y": 780,
        "wires": []
    },
    {
        "id": "3958ff57c49de562",
        "type": "function",
        "z": "b950979261d40ce2",
        "name": "List files",
        "func": "let Client = ssh2SftpClient\n\nlet sftpClient = new Client();\n\nconst options = {\n    // host: 's2fs.axisbank.com',\n    // port: 22,\n    // username: 'DBATActyv_Transaction',\n    // password: 'India@2023',\n    // readyTimeout: 120000\n\n    host: '43.204.74.60',\n    port: 22,\n    username: 'tata_uat_sftp',\n    password: 'QLYEe4B7eRCPjqm2fntn',\n};\nasync function sftpInteraction() {\n    try {\n        node.status({ fill: \"green\", shape: \"ring\", text: \"Connecting\" });\n        await sftpClient.connect(options);\n       const list = await sftpClient.list(\n            \"/sftpdir\"\n        );\n        node.status({ fill: \"green\", shape: \"ring\", text: \"Listing done\" });\n        node.send({\n            logger: `Listing files`,\n            payload: list\n        });\n        console.log(\"LIST worked...\")\n    } catch (error) {\n        node.status({ fill: \"red\", shape: \"ring\", text: \"Error occured\" });\n        node.send({\n            logger:`transfering file to sftp failed`,\n            payload: error\n        });\n        throw new Error(error);\n    } finally {\n        await sftpClient.end();\n    }\n}\n\nsftpInteraction();\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "ssh2SftpClient",
                "module": "ssh2-sftp-client"
            }
        ],
        "x": 2880,
        "y": 780,
        "wires": [
            [
                "f4d2fc59dfbcd284",
                "f73d99649ddba2dc"
            ]
        ]
    },
    {
        "id": "f73d99649ddba2dc",
        "type": "debug",
        "z": "b950979261d40ce2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3070,
        "y": 740,
        "wires": []
    },
    {
        "id": "6fe71aa323095979",
        "type": "function",
        "z": "b950979261d40ce2",
        "name": "get a single file",
        "func": "let Client = ssh2SftpClient\n\nlet sftpClient = new Client();\n\nconst options = {\n    // host: 's2fs.axisbank.com',\n    // port: 22,\n    // username: 'DBATActyv_Transaction',\n    // password: 'India@2023',\n    // readyTimeout: 120000\n\n    host: '43.204.74.60',\n    port: 22,\n    username: 'tata_uat_sftp',\n    password: 'QLYEe4B7eRCPjqm2fntn',\n};\nnode.status({ fill: \"green\", shape: \"ring\", text: \"Initiated\" });\n\nasync function sftpInteraction() {\n    const folderPath = msg.payload[0]?.name.split(\"/\")\n    const fileName = folderPath[folderPath?.length - 1]\n\n    let remotePath = `/sftpdir/${msg.payload[0]?.name}`;\n    // let localPath = `/home/ec2-user/data/${fileName}`;\n    let localPath = `/Users/shravanpm/Downloads/files/${fileName}`;\n    console.log({folderPath,fileName,remotePath,localPath})\n    try {\n        node.status({ fill: \"green\", shape: \"ring\", text: \"Connecting\" });\n        await sftpClient.connect(options);\n        await sftpClient.fastGet(\n            remotePath,\n            localPath\n        );\n        node.status({ fill: \"green\", shape: \"ring\", text: \"Listing done\" });\n        node.send({\n            logger: `Get a file`,\n            payload: localPath\n        });\n        console.log(\"GET FILE worked...\")\n    } catch (error) {\n        node.status({ fill: \"red\", shape: \"ring\", text: \"Error occured\" });\n        node.send({\n            logger:`transfering file to sftp failed`,\n            payload: error\n        });\n        throw new Error(error);\n    } finally {\n        await sftpClient.end();\n    }\n}\n\nsftpInteraction();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "ssh2SftpClient",
                "module": "ssh2-sftp-client"
            }
        ],
        "x": 3360,
        "y": 780,
        "wires": [
            [
                "e40fa142e77ebb72",
                "379fe45dafdb7179"
            ]
        ]
    },
    {
        "id": "748615f593d0c277",
        "type": "debug",
        "z": "b950979261d40ce2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 580,
        "wires": []
    },
    {
        "id": "a3808de1a6a86eda",
        "type": "inject",
        "z": "b950979261d40ce2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2760,
        "y": 800,
        "wires": [
            [
                "3958ff57c49de562"
            ]
        ]
    },
    {
        "id": "1e2e9f08a4d340ba",
        "type": "inject",
        "z": "2d360e569b9a1614",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 60,
        "wires": [
            [
                "5776d7cdb283a250"
            ]
        ]
    },
    {
        "id": "5776d7cdb283a250",
        "type": "function",
        "z": "2d360e569b9a1614",
        "name": "Setting Global Variables",
        "func": "let BP_TYPE = \"DISTRIBUTOR\";\n\n\n\n\n\nconst ENVIRONMENT = env.get(\"ENVIRONMENT\");\nconst CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\");\n\nconst ROLE_ID = env.get(\"ROLE_ID\");\nconst EMAIL = env.get(\"SEEDING_EMAIL\");\nconst PASSWORD = env.get(\"SEEDING_PASSWORD\");\n// const RATE_OF_INTEREST = env.get(\"RATE_OF_INTEREST\");\n// let XLSX_FILE_PATH = env.get(\"XLSX_FILE_PATH\");\n// let XLSX_FILE_PATH = \"C:/Users/Ruthvik/Downloads/Format_File_BNPL_Seeding.xlsx\";\n\n\nconst SLEEP_TIME = 500;\nconst MIN_INVOICE_AMOUNT_THRESHOLD = 1000;\n\nlet PRODUCT_TYPE_ID;\n\n\n\n\nconst GO_SERVICE_URL = `https://actyv-platform-go-service.${ENVIRONMENT}.actyv.com/api`;\nconst PAYLATER_SERVICE_URL = `https://actyv-platform-paylater-service-v1.${ENVIRONMENT}.actyv.com/v1`;\nconst ADMIN_SERVICE_URL = `https://actyv-platform-admin-service.${ENVIRONMENT}.actyv.com/api`;\nconst AUTH_URL = `https://actyv-platform-admin-service.${ENVIRONMENT}.actyv.com/api/user/authenticateUser`;\n\nconst date = new Date();\n\nconst ENV_VARIABLES = {\n    \"GO_SERVICE_URL\": GO_SERVICE_URL,\n    \"PAYLATER_SERVICE_URL\": PAYLATER_SERVICE_URL,\n    \"ADMIN_SERVICE_URL\": ADMIN_SERVICE_URL,\n    \"GET_BP\": `${GO_SERVICE_URL}/business-partner/service`,\n    \"BP_USER\": `${ADMIN_SERVICE_URL}/business-partner-user/get/all`,\n    \"USER\": `${ADMIN_SERVICE_URL}/user`,\n    \"ROLE_USER_MAPPING\": `${ADMIN_SERVICE_URL}/role-user-mapping`,\n    \"BP_SALES_SUMMARY\": `${GO_SERVICE_URL}/business-partner-sales-summary`,\n    \"BP_BANK_RELATIONSHIP\": `${GO_SERVICE_URL}/business-relationship`,\n    \"LOAN_TERM\": `${PAYLATER_SERVICE_URL}/loan-terms`,\n    \"BNPL_PREFERENCE\": `${PAYLATER_SERVICE_URL}/bnpl-preference`,\n    \"AUTH_URL\": `${AUTH_URL}`,\n    \"CHECK_ROLE_USER_MAPPING\": `${ADMIN_SERVICE_URL}/role-user-mapping/byBusinessPartnerId`,\n    \"GET_SALES_SUMMARY\": `${GO_SERVICE_URL}/business-partner-sales-summary`,\n    \"CHECK_BP_RELATIONSHIP\": `${GO_SERVICE_URL}/business-relationship/service`,\n    \"TENOR_AND_RATE_SPREAD\": `${PAYLATER_SERVICE_URL}/tenor-and-rate-spread`,\n    \"YEAR\": date.getFullYear(),\n    \"MONTH\": date.getMonth() + 1,\n    // \"BUSINESSTYPE\" : `${BP_TYPE}`,\n    // \"RELATION1\": `${BP_TYPE}-BANK`,\n    // \"RELATION2\": `${BP_TYPE}-ENTERPRISE`,\n    \"CONFIG_KEY\": `${CONFIG_KEY}`,\n    // \"BANK_ID\": `${BANK_ID}`,\n    // \"ENTERPRISE_ID\": `${ENTERPRISE_ID}`,\n    \"ROLE_ID\": `${ROLE_ID}`,\n    \"EMAIL\": `${EMAIL}`,\n    \"PASSWORD\": `${PASSWORD}`,\n    \"SLEEP_TIME\": `${SLEEP_TIME}`,\n    //\"RATE_OF_INTEREST\": `${RATE_OF_INTEREST}`,\n    \"MIN_INVOICE_AMOUNT_THRESHOLD\": MIN_INVOICE_AMOUNT_THRESHOLD,\n    \"PRODUCT_TYPE_ID\": `${PRODUCT_TYPE_ID}`\n}\n\nglobal.set(\"ENV_VARIABLES\", ENV_VARIABLES);\n\n// msg.payload = `${XLSX_FILE_PATH}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 60,
        "wires": [
            [
                "2c8ad2ae5961e181"
            ]
        ]
    },
    {
        "id": "2c8ad2ae5961e181",
        "type": "function",
        "z": "2d360e569b9a1614",
        "name": "AuthenticateActyvEntityUserReq",
        "func": "\n// const EMAIL = env.get(\"ACTYV_ADMIN_EMAIL\");\n// const PASSWORD = env.get(\"ACTYV_ADMIN_PASSWORD\")\n\nconst EMAIL = \"darkhorse1@gmail.com\";\nconst PASSWORD = \"890ioP@darkhorse\"\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \"password\": PASSWORD,\n    \"email\": EMAIL\n}\nmsg.logger = `Authenticating the Actyv Entity User`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 60,
        "wires": [
            [
                "b385b6494f5aac30"
            ]
        ]
    },
    {
        "id": "1cda3a072e732c59",
        "type": "function",
        "z": "2d360e569b9a1614",
        "name": "saveActyvEntityUserToken",
        "func": "const env_var = global.get(\"ENV_VARIABLES\");\n\nconst token = msg.payload.idToken\nmsg.actyvToken = token;\n\nflow.set(\"actyvToken\", token);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 160,
        "wires": [
            [
                "d535077e257c7d72"
            ]
        ]
    },
    {
        "id": "d535077e257c7d72",
        "type": "function",
        "z": "2d360e569b9a1614",
        "name": "Getting Actyv Entity User",
        "func": "const actyvToken = flow.get(\"actyvToken\");\n\nconst ADMIN_URL = env.get('ADMIN_URL');\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`\n}\n\nmsg.url = `${ADMIN_URL}/api/user/getCurrentUser?url=https://actyv1-platform.qa.actyv.com`;\nmsg.method = \"GET\"\n\nmsg.logger = `Getting Actyv ID`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 160,
        "wires": [
            [
                "5b5d8f16ca659130"
            ]
        ]
    },
    {
        "id": "aea85005aff44923",
        "type": "function",
        "z": "2d360e569b9a1614",
        "name": "saveactyvId",
        "func": "flow.set(\"actyv_id\", msg.payload.actyvEntityId);\nmsg.actyvId = msg.payload.actyvEntityId\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 160,
        "wires": [
            [
                "592deb1cc9a1c178"
            ]
        ]
    },
    {
        "id": "592deb1cc9a1c178",
        "type": "function",
        "z": "2d360e569b9a1614",
        "name": "Setting Payload For Fetching INITIATED Status Files",
        "func": "// const enterpriseToken = flow.get(\"enterpriseToken\")\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/fileInfoBySeedingStatus/INITIATED`;\nconst flow_var = flow.get('FLOW_VARIABLES');\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${flow.get(\"actyvToken\")}`,\n    \"actyventityid\": `${flow.get(\"actyv_id\")}`\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'GET';\nmsg.logger = `Fetching all the seeding files whose status is INITIATED`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 260,
        "wires": [
            [
                "e591ee36b87b3f2d"
            ]
        ]
    },
    {
        "id": "f4d9bbe997d90431",
        "type": "function",
        "z": "2d360e569b9a1614",
        "name": "Looping and Segregating Files",
        "func": "const files = msg.payload.fileInfo.filter((file) => file.seedingType == \"BNPL_SEEDING\");\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\n\n\n\nfor (const file of files) {\n    console.log(\"file\", file)\n    if (file.seedingType == \"BNPL_SEEDING\") {\n        node.send({\n            ...file,\n            actyvId: msg.actyvId,\n            payload: file.fileId,\n            seedingType: file.seedingType,\n            isComplete: false,\n            logger: \"fileId for BNPL seeding\",\n            actyvToken: msg.actyvToken\n        })\n        sleep(200000)\n    }\n    \n}\nmsg.isComplete = true\nmsg.logger = \"No file found for BNPL\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 340,
        "wires": [
            [
                "f55a5c3c96d2bfd3",
                "a1a9e673ebe13bb8"
            ]
        ]
    },
    {
        "id": "575219706a8275e2",
        "type": "function",
        "z": "2d360e569b9a1614",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\n\n\nflow.set(\"failedRows\", [])\n\nflow.set(\"failed_Create_BP\", []) \n\n// msg.fileId = msg.payload\nmsg.method = \"GET\"\nmsg.headers = {\n    fileType: \"xlsx\"\n}\nmsg.url = `${GO_URL}/file/read/${msg.fileId}`;\nmsg.logger = `Reading the File`\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 440,
        "wires": [
            [
                "46d933116854cb97"
            ]
        ]
    },
    {
        "id": "46d933116854cb97",
        "type": "http request",
        "z": "2d360e569b9a1614",
        "name": "readFile",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 340,
        "y": 440,
        "wires": [
            [
                "dd81b0e2572eadc7"
            ]
        ]
    },
    {
        "id": "4ab9cbb887b52d94",
        "type": "function",
        "z": "2d360e569b9a1614",
        "name": "read xls",
        "func": "let data = xlsx.read(msg.payload, { type: \"buffer\" })\nconst wsname = data.SheetNames[0];\nconst ws = data.Sheets[wsname];\nconst payload = xlsx.utils.sheet_to_json(ws);\nmsg.seedingData = payload\nmsg.completedSeeding = [],\nmsg.failedSeeding = []\nmsg.anchored = false;\nif(msg.enterpriseId){\n    msg.anchored = true\n}\n\nmsg.numOfRows = payload.length\nmsg.logger = \"read xlsx\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "xlsx",
                "module": "xlsx"
            }
        ],
        "x": 740,
        "y": 500,
        "wires": [
            [
                "0201c60954cc7b1a"
            ]
        ]
    },
    {
        "id": "f6cfae49d2c010aa",
        "type": "function",
        "z": "2d360e569b9a1614",
        "name": "Loop",
        "func": "const users = msg.seedingData;\nconst ENTERPRISE_ID = msg.enterpriseId;\nconst BANK_ID = msg.bankId;\nflow.set(\"failedRows\", []);\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\nfor (const [key,user] of users.entries()) {\n    node.send({\n        ...msg,\n        payload : user,\n        isCompleted : \"false\",\n        ENTERPRISE_ID: ENTERPRISE_ID,\n        BANK_ID: BANK_ID,\n        actyvToken: msg.actyvToken,\n        isFileProcessingCompleted: key == users.length-1? true:false\n    })\n    await sleep(10000);\n}\nawait sleep(30000);\nmsg.isCompleted = \"true\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 660,
        "wires": [
            [
                "39856da175789389"
            ]
        ]
    },
    {
        "id": "39856da175789389",
        "type": "switch",
        "z": "2d360e569b9a1614",
        "name": "",
        "property": "isCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 640,
        "wires": [
            [],
            [
                "2245830f90f45ffc"
            ]
        ]
    },
    {
        "id": "2245830f90f45ffc",
        "type": "function",
        "z": "2d360e569b9a1614",
        "name": "Creating  an Object which contains all info required in the flow",
        "func": "const document = msg.payload;\nmsg.obj = {\n    pan: document[\"Business Partner PAN\"],\n    gst: document[\"Business Partner GST\"],\n    mobileNo: document[\"Business Partner Phone\"],\n    email: document[\"Business Partner Email\"],\n    bankIdentifierByParent: document[\"Bank CRN\"],\n    bankAccountNumber: document[\"Loan Repayment Account Number\"],\n    bankIFSC: document[\"Loan Repayment Account IFSC\"],\n    bankName: document[\"Loan Repayment Account Name\"],\n    approvedLimit: document[\"Approved Limit\"],\n    bankProvidedLoanCodes: document[\"Loan Account Number\"],\n    businessPartnerId: \"\",\n    token: \"\",\n    businessType: \"\",\n    bnpl_preference: document[\"Create BNPL Preference\"]\n}\n\nconsole.log(msg.obj[\"bnpl_preference\"]);\n\nif (document[\"Rate Of Interest\"] !== undefined) {\n    msg.obj[\"rateOfInterest\"] = document[\"Rate Of Interest\"];\n}\n\nfunction checkAllMandatoryFieldsPresentOrNot(row) {\n    if (\n        validatePan(row[\"Business Partner PAN\"]) &&\n        validateGst(row[\"Business Partner GST\"]) &&\n        row[\"Loan Account Number\"] &&\n        validateApprovedLimit(row[\"Approved Limit\"]) &&\n        row[\"Loan Repayment Account Number\"] &&\n        row[\"Loan Repayment Account Name\"] &&\n        validateIFSC(row[\"Loan Repayment Account IFSC\"])\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n\n\n\n// validate IFSC\nfunction validateIFSC(ifsc) {\n    const IFSC_pattern = /^[A-Z]{4}0[A-Z0-9]{6}$/;\n\n    if (IFSC_pattern.test(ifsc)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\nfunction validateApprovedLimit(approvedLimit){\n    if (!isNaN(approvedLimit) && approvedLimit >= 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction validateInterestRate(interestRate){\n    if(!isNaN(interestRate) && interestRate >= 0){\n        return true;\n    }\n    return false;\n}\n\nfunction validatePan(pan) {\n    const panPattern = /^([A-Z]{5}[0-9]{4}[A-Z]{1})$/;\n\n    if (panPattern.test(pan)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction validateGst(gst) {\n    const gstinPattern =\n        /^([0-9]{2}[a-zA-Z]{5}[0-9]{4}[a-zA-Z]{1}[1-9A-Za-z]{1}Z[0-9A-Za-z]{1})$/;\n\n    if (gstinPattern.test(gst)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// function validateBNPLPreference(bnplpreference){\n//     if(bnplpreference === )\n// }\n\n//****************************************************************************************************************************************** */\n\n\n\nlet checkAllMandatoryFieldPresent = checkAllMandatoryFieldsPresentOrNot(document);\n\nlet a = true;\nif (document[\"Rate Of Interest\"] !== undefined) {\n    a = validateInterestRate(msg.obj[\"rateOfInterest\"]);\n}\ncheckAllMandatoryFieldPresent = checkAllMandatoryFieldPresent && a;\n\nconsole.log(checkAllMandatoryFieldPresent, \"checkALlMandatory Fields\");\nconsole.log(a, \"A\");\nlet message = checkAllMandatoryFieldPresent ? \"\" : \"All mandatory fields are not present\"\n\n\n\n\nconst isValidPan = validatePan(document[\"Business Partner PAN\"])\nif (!isValidPan) {\n    message = \"PAN number is not valid\"\n}\n\nconst isGstValid = validateGst(document[\"Business Partner GST\"])\nif (!isGstValid) {\n    message = \"GST number is not valid\"\n}\n\nconst isApprovedLimitValid = validateApprovedLimit(document[\"Approved Limit\"]);\nif(!isApprovedLimitValid){\n    message = \"Approved Limit is not valid\"\n}\n\nif (document[\"Rate Of Interest\"] !== undefined){\n    const isInterestRateValid = validateInterestRate(document[\"Rate Of Interest\"]);\n    if (!isInterestRateValid) {\n        message = \"Interest Rate is not valid\"\n    }\n}\n\nconst isIFSCValid = validateIFSC(document[\"Loan Repayment Account IFSC\"]);\nif(!isIFSCValid){\n    message = \"Invalid IFSC number\"\n}\n\n// const isBNPLPreferenceValid = validateBNPLPreference(document[\"Create BNPL Preference\"]);\n// if(!isBNPLPreferenceValid){\n//         message = \"Invalid BNPL Preference\"\n// }\n\n\nmsg.primaryChecks = false\nmsg.message = message\nif (checkAllMandatoryFieldPresent) {\n    msg.primaryChecks = true\n}\n\nconsole.log(isIFSCValid, \"IFSC\");\nconsole.log(document[\"Loan Repayment Account IFSC\"], \"IFSC Number\")\n// console.log()\n\nmsg.result = {\n    \"Business Partner ID\" : \"\",\n    \"User ID\": \"\",\n    \"Role User Mapping\": \"\",\n    \"Business Partner Sales Summary for current month\": \"\",\n    \"Business-Relationship with Bank\": \"\",\n    \"Business-Relationship with Enterprise\": \"\",\n    \"Create Loan Term\": \"\",\n    \"Update Loan Term\": \"\",\n    \"Fetch Tenor\": \"\",\n    \"Create BNPL Preference\": \"\"\n}\n\n\n\n\n\n\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 640,
        "wires": [
            [
                "e58c0924ba0c3acd",
                "ace7adbcce768439"
            ]
        ]
    },
    {
        "id": "eba4ad17e995d858",
        "type": "switch",
        "z": "2d360e569b9a1614",
        "name": "",
        "property": "payload._id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 1000,
        "wires": [
            [
                "79ecf1f6cec227de"
            ],
            [
                "f05ea2d054618022"
            ]
        ]
    },
    {
        "id": "79ecf1f6cec227de",
        "type": "function",
        "z": "2d360e569b9a1614",
        "name": "Failed Row Update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Failed to get business Partner with the GST\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 960,
        "wires": [
            [
                "69c4d3a6ddb9e9d3"
            ]
        ]
    },
    {
        "id": "a1654e5d1408c8cc",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "name": "UnsuccessFul row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 960,
        "wires": []
    },
    {
        "id": "f05ea2d054618022",
        "type": "function",
        "z": "2d360e569b9a1614",
        "name": "Get userId from businessPartnerId",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${actyvToken}`\n}\n\nif (msg.statusCode === 200){\n    const data = msg.payload;\n    msg.obj.businessPartnerId = data._id;\n    msg.result[\"Business Partner ID\"] = `${msg.obj.businessPartnerId}`;\n    msg.method = 'get';\n    msg.url = `${env_var.CHECK_BP_RELATIONSHIP}/${msg.obj.businessPartnerId}/${msg.ENTERPRISE_ID}`\n    // msg.url = `${env_var.CHECK_BP_RELATIONSHIP}/64521b0164c7df65fb660c22/${msg.ENTERPRISE_ID}`\n    // msg.url = `${env_var.BP_USER}/${msg.obj.businessPartnerId}`\n}\nmsg.logger = `Fetching the relationship type`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1080,
        "wires": [
            [
                "4240bd48ecd8cd61"
            ]
        ]
    },
    {
        "id": "1702c4f06e21dfee",
        "type": "function",
        "z": "2d360e569b9a1614",
        "name": "Get userId from businessPartnerId",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\n\nmsg.obj[\"businessType\"] = msg.payload.relationType.split(\"-\")[0];\n\nif (msg.obj.businessType === \"DISTRIBUTOR\") {\n    msg.product_type_id = msg.bankApplicationConfigId;\n}\nelse {\n    msg.product_type_id = msg.bankApplicationConfigId;\n}\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${actyvToken}`\n}\n\nmsg.method = 'get';\nmsg.url = `${env_var.BP_USER}/${msg.obj.businessPartnerId}`\n\nmsg.logger = `Fetching the UserId for the business partner ${msg.obj.businessPartnerId}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 1100,
        "wires": [
            [
                "95832288c7856d66"
            ]
        ]
    },
    {
        "id": "e424c43762c3e06e",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "name": "get initiated files",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 260,
        "wires": []
    },
    {
        "id": "8554bfca33b913cf",
        "type": "switch",
        "z": "2d360e569b9a1614",
        "name": "",
        "property": "userExists",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 1620,
        "wires": [
            [
                "bec35c43844c723a"
            ],
            [
                "f4554e2c9e211eb8"
            ]
        ]
    },
    {
        "id": "e58c0924ba0c3acd",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "name": "debug 447",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 580,
        "wires": []
    },
    {
        "id": "3c3bb98f1379ec63",
        "type": "function",
        "z": "2d360e569b9a1614",
        "g": "0e249ca2cc59c2ed",
        "name": "Setting Payload for creating loanTerm",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\n\nmsg.payload = {\n    bankID: msg.BANK_ID,\n    borrowerID: msg.obj.businessPartnerId,\n    enterpriseID: msg.ENTERPRISE_ID,\n    bankApplicationConfigID: msg.product_type_id\n    //rateOfInterest: Number(msg.obj.rateOfInterest)\n}\nif(msg.obj[\"rateOfInterest\"]!==undefined){\n    msg.payload[\"tenorAndRates\"] = [{ roi: msg.obj[\"rateOfInterest\"]}];\n\n}\nmsg.url = env_var.LOAN_TERM;\nmsg.method = 'post';\nmsg.logger = `Creatign the Laon term for the business partner ${msg.obj.businessPartnerId}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 2360,
        "wires": [
            [
                "260f42802b5d2f75",
                "5f35a374edc16fca",
                "65f02ff38f6f476e"
            ]
        ]
    },
    {
        "id": "64a003eda451da49",
        "type": "function",
        "z": "2d360e569b9a1614",
        "g": "0e249ca2cc59c2ed",
        "name": "Setting Payload for udpating loanTerm",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\n\nconst data = msg.payload;\nmsg.loanTermId = data.id;\n\nif (msg.statusCode === 201 && msg.result[\"Create Loan Term\"] === \"\"){\n    msg.result[\"Create Loan Term\"] = `Loan Term Created: ${msg.loanTermId}`;\n}\n\nmsg.payload = {\n    loanTermsID : msg.loanTermId,\n    // loanTermsID: \"5b541302-db6a-4ecc-aa0e-d5d7036d3de0\",\n    approvedLimit: msg.obj.approvedLimit,\n    validTill: \"20/11/2025\",\n    loanGrantStatus: \"APPROVED\",\n    crnNumber: msg.obj.bankIdentifierByParent,\n    awaitingBalanceRefresh: false,\n    businessType: msg.obj.businessType,\n    bankProvidedLoanCodes:msg.obj.bankProvidedLoanCodes,\n}\nmsg.url = env_var.LOAN_TERM + \"/service/update\";\nmsg.method = 'patch';\nmsg.logger = `Updating the Loan Term`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 2480,
        "wires": [
            [
                "fe08b2326e4a0b38",
                "955e244637f40d2c"
            ]
        ]
    },
    {
        "id": "260f42802b5d2f75",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "g": "0e249ca2cc59c2ed",
        "name": "Payload for creating loanTerm",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 2340,
        "wires": []
    },
    {
        "id": "fe08b2326e4a0b38",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "g": "0e249ca2cc59c2ed",
        "name": "Payload for updating loanTerm",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 2420,
        "wires": []
    },
    {
        "id": "c8ad4dc2a1749cdf",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "g": "0e249ca2cc59c2ed",
        "name": "Update Loan Term",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 2540,
        "wires": []
    },
    {
        "id": "f4078b55ffff1435",
        "type": "function",
        "z": "2d360e569b9a1614",
        "g": "0e249ca2cc59c2ed",
        "name": "Checking If loanTerm exists",
        "func": "const actyvToken = flow.get(\"actyvToken\")\nconst env_var = global.get(\"ENV_VARIABLES\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nif (msg.statusCode === 200) {\n    if (msg.result[\"Business-Relationship with Bank\"] === \"No\") {\n        msg.result[\"Business-Relationship with Bank\"] = `Created ${msg.payload._id}`;\n    }\n    else {\n        msg.result[\"Business-Relationship with Bank\"] = `Exists`;\n    }\n}\nelse {\n    msg.result[\"Business-Relationship with Bank\"] = `${msg.statusCode} Error`\n}\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${actyvToken}`\n}\nmsg.url = `${env_var.LOAN_TERM}/service/fetchByBankID`;\nmsg.payload = {\"borrowerID\" : msg.obj.businessPartnerId,\n            \"enterpriseID\": msg.ENTERPRISE_ID,\n            \"bankID\": msg.BANK_ID};\nmsg.method = 'post';\nmsg.logger = `Fetching the Loan terms for the borrower ${msg.obj.businessPartnerId} `\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 2180,
        "wires": [
            [
                "edb2576f7bea3bb0"
            ]
        ]
    },
    {
        "id": "ae11a0a5c3b1ae1d",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "g": "0e249ca2cc59c2ed",
        "name": "Check If Loan Term Exists",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 2180,
        "wires": []
    },
    {
        "id": "1a6241fd2059bc8d",
        "type": "function",
        "z": "2d360e569b9a1614",
        "g": "0e249ca2cc59c2ed",
        "name": "setting up payload for updating loadn term if it already exists",
        "func": "msg.payload = msg.payload[0];\nif(msg.statusCode === 201){\n    msg.result[\"Create Loan Term\"] = `Exists: ${msg.payload.id}`;\n}\nelse{\n    msg.result[\"Create Loan Term\"] = `${msg.statusCode} Error`;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2480,
        "wires": [
            [
                "64a003eda451da49"
            ]
        ]
    },
    {
        "id": "60f6868216554a9b",
        "type": "switch",
        "z": "2d360e569b9a1614",
        "g": "0e249ca2cc59c2ed",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 2380,
        "wires": [
            [
                "3c3bb98f1379ec63"
            ],
            [
                "1a6241fd2059bc8d"
            ]
        ]
    },
    {
        "id": "5f35a374edc16fca",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "g": "0e249ca2cc59c2ed",
        "name": "Paylaod for creating loan_term",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 2440,
        "wires": []
    },
    {
        "id": "98f29b4499eef061",
        "type": "switch",
        "z": "2d360e569b9a1614",
        "g": "0e249ca2cc59c2ed",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1930,
        "y": 2480,
        "wires": [
            [
                "f80690e99fc35a20"
            ],
            [
                "c8ad4dc2a1749cdf",
                "11a8bd53e38e107e"
            ]
        ]
    },
    {
        "id": "185794362d65046a",
        "type": "switch",
        "z": "2d360e569b9a1614",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "201",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "201",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 2380,
        "wires": [
            [
                "73c2f8202b295b07"
            ],
            [
                "60f6868216554a9b"
            ]
        ]
    },
    {
        "id": "b6ca988413755a4b",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "g": "0e249ca2cc59c2ed",
        "name": "debug 451",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 2420,
        "wires": []
    },
    {
        "id": "272ba9625098c6a1",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "g": "7ef0977ae5c95b40",
        "name": "Create BNPL Preference",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1590,
        "y": 2720,
        "wires": []
    },
    {
        "id": "fa9e67f8b043dc17",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "g": "7ef0977ae5c95b40",
        "name": "Payload for creating BNPL preference",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 2760,
        "wires": []
    },
    {
        "id": "4e7d7ee26ef2a303",
        "type": "function",
        "z": "2d360e569b9a1614",
        "g": "7ef0977ae5c95b40",
        "name": "Setting Payload for creating BNPL preference",
        "func": "// const env_var = global.get(\"ENV_VARIABLES\")\n// const flow_var = flow.get(\"FLOW_VARIABLES\")\n\n// msg.headers = {\n//     \"Authorization\": `Bearer ${flow.get(\"bp_token\")}`,\n//     \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n//     \"businesspartnerid\": flow.get(\"actyv_bp_id\"),\n//     \"bankid\": msg.BANK_ID\n// }\n\n// msg.DEFAULT_SPREAD_ID = msg.payload[0].id;\n\n// if (msg.statusCode === 201){\n//     msg.result[\"Fetch Tenor\"] = `Tenor Fetched ${msg.DEFAULT_SPREAD_ID}`\n// }\n// else{\n//     msg.result[\"Fetch Tenor\"] = `${msg.statusCode} Error`\n// }\n\n// msg.payload = {\n//     borrowerID: msg.obj.businessPartnerId,\n//     productTypeID: msg.product_type_id,\n//     defaultBankID: msg.BANK_ID,\n//     defaultSpreadID: msg.DEFAULT_SPREAD_ID,\n//     minInvoiceAmountThreshold: env_var.MIN_INVOICE_AMOUNT_THRESHOLD\n// }\n// msg.url = env_var.BNPL_PREFERENCE;\n// msg.method = 'post';\n\n// return msg;\n\nconst env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n// const actyvToken = flow.get(\"actyvToken\")\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow.get(\"actyvToken\") }`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    // \"businesspartnerid\": flow.get(\"actyv_bp_id\"),\n    \"bankid\": msg.BANK_ID,\n    \"actyventityid\": msg.actyvId\n}\n\nmsg.DEFAULT_SPREAD_ID = msg.payload[0].id;\n\nif (msg.statusCode === 201) {\n    msg.result[\"Fetch Tenor\"] = `Tenor Fetched ${msg.DEFAULT_SPREAD_ID}`\n}\nelse {\n    msg.result[\"Fetch Tenor\"] = `${msg.statusCode} Error`\n}\n\nmsg.payload = {\n    borrowerID: msg.obj.businessPartnerId,\n    bankApplicationConfigID: msg.product_type_id,\n    defaultBankID: msg.BANK_ID,\n    defaultSpreadID: msg.DEFAULT_SPREAD_ID,\n    minInvoiceAmountThreshold: env_var.MIN_INVOICE_AMOUNT_THRESHOLD\n}\nmsg.url = env_var.BNPL_PREFERENCE;\nmsg.method = 'post';\nmsg.logger = `Creating the BNPL Preference`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2800,
        "wires": [
            [
                "fa9e67f8b043dc17",
                "0461e16e9203a103"
            ]
        ]
    },
    {
        "id": "11a8bd53e38e107e",
        "type": "function",
        "z": "2d360e569b9a1614",
        "g": "7ef0977ae5c95b40",
        "name": "Payload For fetching TenorAndRateSpread",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nconst sleep = async (milliseconds) => {\n  await new Promise(resolve => {\n    return setTimeout(resolve, milliseconds)\n  });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n  \"Authorization\": `Bearer ${actyvToken}`,\n  \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\nif (msg.statusCode === 200) {\n  msg.result[\"Update Loan Term\"] = `Updated: ${msg.loanTermId}`;\n}\nelse {\n  msg.result[\"Update Loan Term\"] = `${msg.statusCode} Error`;\n}\n\nmsg.payload = {\n  \"bankID\": msg.BANK_ID,\n  \"loanID\": msg.loanTermId,\n}\n\nmsg.url = env_var.TENOR_AND_RATE_SPREAD + \"/fetch\";\nmsg.method = 'POST';\nmsg.logger = `Fetchign the Tennor and Rate Spread`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2680,
        "wires": [
            [
                "179f64ea2fe05af9"
            ]
        ]
    },
    {
        "id": "0884e354bfb93cbc",
        "type": "switch",
        "z": "2d360e569b9a1614",
        "g": "7ef0977ae5c95b40",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "201",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "201",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1350,
        "y": 2680,
        "wires": [
            [
                "2eddb86e7e064c86"
            ],
            [
                "e1ab365597b62b5e"
            ]
        ]
    },
    {
        "id": "434cc68d79f6d653",
        "type": "switch",
        "z": "2d360e569b9a1614",
        "g": "7ef0977ae5c95b40",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "201",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "201",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1450,
        "y": 2800,
        "wires": [
            [
                "01f438010b088b4a"
            ],
            [
                "7988136527c4594a"
            ]
        ]
    },
    {
        "id": "73c2f8202b295b07",
        "type": "function",
        "z": "2d360e569b9a1614",
        "name": "Fetch Loan term Failed",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Failed to get fetch the loan term\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 2260,
        "wires": [
            [
                "27d0b87ff5d289e6"
            ]
        ]
    },
    {
        "id": "f80690e99fc35a20",
        "type": "function",
        "z": "2d360e569b9a1614",
        "g": "0e249ca2cc59c2ed",
        "name": "Update Loan term API Failed",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Unable to update the Loan Term\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 2460,
        "wires": [
            [
                "4a92a72397a7f6b2"
            ]
        ]
    },
    {
        "id": "f5d17dca5a28b604",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "g": "0e249ca2cc59c2ed",
        "name": "debug 458",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3030,
        "y": 2440,
        "wires": []
    },
    {
        "id": "2eddb86e7e064c86",
        "type": "function",
        "z": "2d360e569b9a1614",
        "g": "7ef0977ae5c95b40",
        "name": "Fetch Tenor and Rate Spread API Failed",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Unable to fetch the Tenor and Rate spread \"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 2680,
        "wires": [
            [
                "9090b91fc3b69166"
            ]
        ]
    },
    {
        "id": "6bd3b19b830eedd4",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "g": "7ef0977ae5c95b40",
        "name": "debug 459",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 2680,
        "wires": []
    },
    {
        "id": "01f438010b088b4a",
        "type": "function",
        "z": "2d360e569b9a1614",
        "g": "7ef0977ae5c95b40",
        "name": "Create BNPL Preference API Failed",
        "func": "\n\nconst failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Unable to set the BNPL Preference\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 2780,
        "wires": [
            [
                "0820166e770cee89"
            ]
        ]
    },
    {
        "id": "1f1cb9a20096342a",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "g": "7ef0977ae5c95b40",
        "name": "debug 460",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2510,
        "y": 2780,
        "wires": []
    },
    {
        "id": "c823a777064bb0b6",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "name": "fetch tenor and rate spread",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 2620,
        "wires": []
    },
    {
        "id": "db0c852e29bf1abf",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "name": "debug 466",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "seedingData",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 500,
        "wires": []
    },
    {
        "id": "f55a5c3c96d2bfd3",
        "type": "switch",
        "z": "2d360e569b9a1614",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 340,
        "wires": [
            [
                "6a0956facd31eb1c"
            ],
            [
                "575219706a8275e2"
            ]
        ]
    },
    {
        "id": "49e04db3b6eb296b",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "name": "Files completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 340,
        "wires": []
    },
    {
        "id": "dd81b0e2572eadc7",
        "type": "switch",
        "z": "2d360e569b9a1614",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 440,
        "wires": [
            [
                "11850b808f037ab9"
            ],
            [
                "4ab9cbb887b52d94"
            ]
        ]
    },
    {
        "id": "11850b808f037ab9",
        "type": "function",
        "z": "2d360e569b9a1614",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\nfailedRows.push({\n    applicantCRN: \"ALL\",\n    message: `File processing failed, couldn't read file`\n})\nmsg.remark = `File processing failed, couldn't read file`\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\n\nmsg.allFailed = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 400,
        "wires": [
            [
                "5af2cdebe00b9cff"
            ]
        ]
    },
    {
        "id": "5af2cdebe00b9cff",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "2d360e569b9a1614",
        "name": "",
        "x": 1070,
        "y": 400,
        "wires": [
            [
                "c2f1393e107a4c32"
            ]
        ]
    },
    {
        "id": "c2f1393e107a4c32",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 400,
        "wires": []
    },
    {
        "id": "69c4d3a6ddb9e9d3",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "2d360e569b9a1614",
        "name": "",
        "x": 970,
        "y": 960,
        "wires": [
            [
                "a1654e5d1408c8cc"
            ]
        ]
    },
    {
        "id": "46aa0c5d22380e6b",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "name": "debug 477",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1020,
        "wires": []
    },
    {
        "id": "ade2498a50756c99",
        "type": "switch",
        "z": "2d360e569b9a1614",
        "name": "",
        "property": "payload._id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 870,
        "y": 1080,
        "wires": [
            [
                "65e0d0c3af7fc42b"
            ],
            [
                "1702c4f06e21dfee"
            ]
        ]
    },
    {
        "id": "65e0d0c3af7fc42b",
        "type": "function",
        "z": "2d360e569b9a1614",
        "name": "Failed Row Update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Unable to get the relationship type. Please contact Administrator\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1076.2532958984375,
        "y": 1049.2923583984375,
        "wires": [
            [
                "ab8748db92b4caf1"
            ]
        ]
    },
    {
        "id": "ab8748db92b4caf1",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "2d360e569b9a1614",
        "name": "",
        "x": 1376.2532958984375,
        "y": 1049.2923583984375,
        "wires": [
            [
                "d4cdf5fd24521256"
            ]
        ]
    },
    {
        "id": "d4cdf5fd24521256",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "name": "UnsuccessFul row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 1040,
        "wires": []
    },
    {
        "id": "27d0b87ff5d289e6",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "2d360e569b9a1614",
        "name": "",
        "x": 410,
        "y": 2220,
        "wires": [
            [
                "5c29b26e54c4cb2c"
            ]
        ]
    },
    {
        "id": "5c29b26e54c4cb2c",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "name": "UnsuccessFul row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 2280,
        "wires": []
    },
    {
        "id": "4a92a72397a7f6b2",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "2d360e569b9a1614",
        "g": "0e249ca2cc59c2ed",
        "name": "",
        "x": 2690,
        "y": 2440,
        "wires": [
            [
                "f5d17dca5a28b604"
            ]
        ]
    },
    {
        "id": "9090b91fc3b69166",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "2d360e569b9a1614",
        "g": "7ef0977ae5c95b40",
        "name": "",
        "x": 2130,
        "y": 2680,
        "wires": [
            [
                "6bd3b19b830eedd4"
            ]
        ]
    },
    {
        "id": "0820166e770cee89",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "2d360e569b9a1614",
        "g": "7ef0977ae5c95b40",
        "name": "",
        "x": 2250,
        "y": 2780,
        "wires": [
            [
                "1f1cb9a20096342a"
            ]
        ]
    },
    {
        "id": "0a5e0edd2ba77cb9",
        "type": "switch",
        "z": "2d360e569b9a1614",
        "name": "",
        "property": "payload.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1733.591796875,
        "y": 2355.90283203125,
        "wires": [
            [
                "dd3e9e5902749d4f"
            ],
            [
                "64a003eda451da49"
            ]
        ]
    },
    {
        "id": "dd3e9e5902749d4f",
        "type": "function",
        "z": "2d360e569b9a1614",
        "name": "Create Loan term API Failed",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Unable to create the Loan Term\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970.2584228515625,
        "y": 2337.5693359375,
        "wires": [
            [
                "0cb745bc263c80db"
            ]
        ]
    },
    {
        "id": "0cb745bc263c80db",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "2d360e569b9a1614",
        "name": "",
        "x": 2410.2584228515625,
        "y": 2317.5693359375,
        "wires": [
            [
                "390f76d9cee3361e"
            ]
        ]
    },
    {
        "id": "390f76d9cee3361e",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "name": "debug 478",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2730.2584228515625,
        "y": 2317.5693359375,
        "wires": []
    },
    {
        "id": "f9aedbe3e9c12fd9",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "name": "debug 479",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 960,
        "wires": []
    },
    {
        "id": "0201c60954cc7b1a",
        "type": "switch",
        "z": "2d360e569b9a1614",
        "name": "check number of rows",
        "property": "seedingData.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "100",
                "vt": "num"
            },
            {
                "t": "lte",
                "v": "100",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 160,
        "y": 560,
        "wires": [
            [
                "873aac38aaf54899"
            ],
            [
                "f6cfae49d2c010aa"
            ]
        ]
    },
    {
        "id": "873aac38aaf54899",
        "type": "function",
        "z": "2d360e569b9a1614",
        "name": "Logger",
        "func": "msg.logger = \"No of rows greater than 100 not processing the file\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 560,
        "wires": [
            [
                "f6c4d659c1eabe68"
            ]
        ]
    },
    {
        "id": "356375713580f958",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "name": "File is not processed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 560,
        "wires": []
    },
    {
        "id": "08293fe8c225e6e2",
        "type": "function",
        "z": "2d360e569b9a1614",
        "name": "function 227",
        "func": "const env_var = global.get('ENV_VARIABLES');\nconst actyvToken = flow.get('actyvToken');\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\nmsg.url = env_var.GET_BP + \"/\" + msg.obj.gst;\n\nmsg.method = 'get';\nmsg.logger = `Getting the Business partner id whose GST is ${msg.obj.gst}`\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 940,
        "wires": [
            [
                "5ac6a380dadcdf89"
            ]
        ]
    },
    {
        "id": "8827a4a292f2509c",
        "type": "function",
        "z": "2d360e569b9a1614",
        "name": "Checking if businessPartnerBankRelationship exists",
        "func": "const actyvToken = flow.get(\"actyvToken\")\nconst env_var = global.get(\"ENV_VARIABLES\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${actyvToken}`\n}\nmsg.url = `${env_var.CHECK_BP_RELATIONSHIP}/getByIdentifierByParent/${msg.obj.bankIdentifierByParent}`;\nmsg.method = 'get'\nmsg.logger = `Checking if the Business Partner bank Relationship Exists or Not`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 740,
        "wires": [
            [
                "f3818c281c3de03e"
            ]
        ]
    },
    {
        "id": "bcfdb62d652bc564",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "name": "Checking if businessPartnerBankRelationship exists",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 720,
        "wires": []
    },
    {
        "id": "087e872d6a3f9d1a",
        "type": "switch",
        "z": "2d360e569b9a1614",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 840,
        "wires": [
            [
                "fc265737b5b1351f",
                "1b1c2b391dc59bfe"
            ],
            [
                "08293fe8c225e6e2"
            ]
        ]
    },
    {
        "id": "e8d2399291657152",
        "type": "function",
        "z": "2d360e569b9a1614",
        "name": "Fetch Business Partner Relationship with Bank API got Failed",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Bank CRN already exists\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 800,
        "wires": [
            [
                "2354eac640b5d417"
            ]
        ]
    },
    {
        "id": "2354eac640b5d417",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "2d360e569b9a1614",
        "name": "",
        "x": 1910,
        "y": 800,
        "wires": [
            [
                "470d228b8ccb4f05"
            ]
        ]
    },
    {
        "id": "470d228b8ccb4f05",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "name": "UnsuccessFul row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 760,
        "wires": []
    },
    {
        "id": "ace7adbcce768439",
        "type": "switch",
        "z": "2d360e569b9a1614",
        "name": "primaryChecks",
        "property": "primaryChecks",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1280,
        "y": 640,
        "wires": [
            [
                "3ba971bdcf706edd"
            ],
            [
                "8827a4a292f2509c"
            ]
        ]
    },
    {
        "id": "3ba971bdcf706edd",
        "type": "function",
        "z": "2d360e569b9a1614",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: msg.message\n})\n\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nmsg.allFailed = false\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1549.1473388671875,
        "y": 576.8040161132812,
        "wires": [
            [
                "d053283c31678630"
            ]
        ]
    },
    {
        "id": "d053283c31678630",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "2d360e569b9a1614",
        "name": "",
        "x": 1859.1473388671875,
        "y": 576.8040161132812,
        "wires": [
            [
                "6c1e48f79b76b461"
            ]
        ]
    },
    {
        "id": "6c1e48f79b76b461",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 560,
        "wires": []
    },
    {
        "id": "a1a9e673ebe13bb8",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "name": "debug 480",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 400,
        "wires": []
    },
    {
        "id": "4bd07d4d85f3d50a",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "2d360e569b9a1614",
        "name": "",
        "x": 1050,
        "y": 3160,
        "wires": [
            [
                "3ddffbec1e240c0b"
            ]
        ]
    },
    {
        "id": "7988136527c4594a",
        "type": "function",
        "z": "2d360e569b9a1614",
        "name": "Create BNPL Preference API Failed",
        "func": "\n\nconst failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 3160,
        "wires": [
            [
                "4bd07d4d85f3d50a"
            ]
        ]
    },
    {
        "id": "3ddffbec1e240c0b",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "name": "debug 499",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 3160,
        "wires": []
    },
    {
        "id": "fc265737b5b1351f",
        "type": "function",
        "z": "2d360e569b9a1614",
        "name": "Checking which relationship exists",
        "func": "const array = msg.payload;\nmsg.move_forward = true;\nfor(let i=0; i<array.length; i++){\n    if (array[i].relationType === \"VENDOR-BANK\" || array[i].relationType === \"DISTRIBUTOR-BANK\"){\n        msg.move_forward = false;\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 860,
        "wires": [
            [
                "78a3e0d1c521f094",
                "f6d38f0931b3bbaf"
            ]
        ]
    },
    {
        "id": "78a3e0d1c521f094",
        "type": "switch",
        "z": "2d360e569b9a1614",
        "name": "",
        "property": "move_forward",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1110,
        "y": 860,
        "wires": [
            [
                "e8d2399291657152"
            ],
            [
                "08293fe8c225e6e2"
            ]
        ]
    },
    {
        "id": "f4554e2c9e211eb8",
        "type": "function",
        "z": "2d360e569b9a1614",
        "g": "392372c777d3850d",
        "name": "Setting Payload for businessPartnerBankRelationship",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`\n}\n\nmsg.result[\"Business-Relationship with Bank\"] = \"No\"\n\nmsg.payload = {\n    businessId: msg.obj.businessPartnerId,\n    parentBusinessId: msg.BANK_ID,\n    identifierByParent: msg.obj.bankIdentifierByParent,\n    bankAccountNumber: msg.obj.bankAccountNumber,\n    bankIFSC: msg.obj.bankIFSC,\n    bankName: msg.obj.bankName,\n    relationType: `${msg.obj.businessType}-BANK`,\n}\nmsg.url = env_var.BP_BANK_RELATIONSHIP;\nmsg.method = 'post';\nmsg.logger = `Creating the Busines Partner and Bank Relationship`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 1940,
        "wires": [
            [
                "1de151ed206faa28",
                "0f0405368fc970bf"
            ]
        ]
    },
    {
        "id": "1de151ed206faa28",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "g": "392372c777d3850d",
        "name": "Payload for businessPartnerBankRelationship",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 1880,
        "wires": []
    },
    {
        "id": "7f5d9aa7b30a9118",
        "type": "switch",
        "z": "2d360e569b9a1614",
        "g": "392372c777d3850d",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1790,
        "y": 1960,
        "wires": [
            [
                "aca89e20c50059b1"
            ],
            [
                "f4078b55ffff1435"
            ]
        ]
    },
    {
        "id": "aca89e20c50059b1",
        "type": "function",
        "z": "2d360e569b9a1614",
        "g": "392372c777d3850d",
        "name": "API Failed",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"Bank CRN\"],\n    message: `${\"Unable to set the Business partner bank relationship type\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 1940,
        "wires": [
            [
                "121142452a1c8def"
            ]
        ]
    },
    {
        "id": "7e1cd79be577d59f",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "g": "392372c777d3850d",
        "name": "get bp bank relation api failed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2820,
        "y": 1940,
        "wires": []
    },
    {
        "id": "121142452a1c8def",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "2d360e569b9a1614",
        "g": "392372c777d3850d",
        "name": "",
        "x": 2410,
        "y": 1940,
        "wires": [
            [
                "7e1cd79be577d59f"
            ]
        ]
    },
    {
        "id": "f6d38f0931b3bbaf",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "name": "debug 500",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 760,
        "wires": []
    },
    {
        "id": "1b1c2b391dc59bfe",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "name": "debug 501",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 800,
        "wires": []
    },
    {
        "id": "e1ab365597b62b5e",
        "type": "switch",
        "z": "2d360e569b9a1614",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 2800,
        "wires": [
            [
                "4e7d7ee26ef2a303"
            ],
            [
                "eca43b5e0f12fbd1"
            ]
        ]
    },
    {
        "id": "eca43b5e0f12fbd1",
        "type": "function",
        "z": "2d360e569b9a1614",
        "name": "Fetch Tenor and Rate Spread API Failed",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Tenor and Rate spread doesn't get created\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 2980,
        "wires": [
            [
                "cd6c6e1bc4037f76"
            ]
        ]
    },
    {
        "id": "81365b31796b9493",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "name": "Unsucessful Row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 210,
        "y": 3060,
        "wires": []
    },
    {
        "id": "6a0956facd31eb1c",
        "type": "subflow:951a533bb3498fe6",
        "z": "2d360e569b9a1614",
        "name": "",
        "x": 640,
        "y": 320,
        "wires": [
            [
                "49e04db3b6eb296b"
            ]
        ]
    },
    {
        "id": "b385b6494f5aac30",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "2d360e569b9a1614",
        "name": "AuthenticateActyvEntityUser",
        "x": 940,
        "y": 60,
        "wires": [
            [
                "1cda3a072e732c59"
            ],
            []
        ]
    },
    {
        "id": "5b5d8f16ca659130",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "2d360e569b9a1614",
        "name": "getting actyvID",
        "x": 780,
        "y": 160,
        "wires": [
            [
                "aea85005aff44923"
            ],
            []
        ]
    },
    {
        "id": "e591ee36b87b3f2d",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "2d360e569b9a1614",
        "name": "INITIATED FILES",
        "x": 630,
        "y": 260,
        "wires": [
            [
                "e424c43762c3e06e",
                "f4d9bbe997d90431"
            ],
            []
        ]
    },
    {
        "id": "f3818c281c3de03e",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "2d360e569b9a1614",
        "name": "Get Identifier By Parent-Bank",
        "x": 640,
        "y": 720,
        "wires": [
            [
                "bcfdb62d652bc564",
                "087e872d6a3f9d1a"
            ],
            []
        ]
    },
    {
        "id": "5ac6a380dadcdf89",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "2d360e569b9a1614",
        "name": "Get BP_ID",
        "x": 210,
        "y": 1000,
        "wires": [
            [
                "f9aedbe3e9c12fd9",
                "eba4ad17e995d858"
            ],
            []
        ]
    },
    {
        "id": "4240bd48ecd8cd61",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "2d360e569b9a1614",
        "name": "Getting Relationship Type",
        "x": 570,
        "y": 1080,
        "wires": [
            [
                "46aa0c5d22380e6b",
                "ade2498a50756c99"
            ],
            []
        ]
    },
    {
        "id": "bec35c43844c723a",
        "type": "function",
        "z": "2d360e569b9a1614",
        "g": "ca7746c90d3d69f9",
        "name": "Setting payload for roleUserMapping",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nconst userId = msg.userId;\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\n\n\n\n\nmsg.payload = {\n    userId : userId,\n    // userId: \"64521b00ce444f05fa197478\",\n    roleId: msg.roleId,\n    businessPartnerId : msg.obj.businessPartnerId,\n    // businessPartnerId: \"644788df588958bc97e5483\"\n}\nmsg.url = env_var.ROLE_USER_MAPPING;\nmsg.method = 'post';\nmsg.logger = `Creating the Role User Mapping`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1580,
        "wires": [
            [
                "d8efa373dede0879",
                "4dd314597bd38e12"
            ]
        ]
    },
    {
        "id": "d8efa373dede0879",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "g": "ca7746c90d3d69f9",
        "name": "Payload for roleUserMapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 1560,
        "wires": []
    },
    {
        "id": "b39485355d4d4c01",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "g": "ca7746c90d3d69f9",
        "name": "Result of roleUserMapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 1520,
        "wires": []
    },
    {
        "id": "dfbeab6dce045093",
        "type": "function",
        "z": "2d360e569b9a1614",
        "g": "ca7746c90d3d69f9",
        "name": "Check if RoleUserMapping exists",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\nif(msg.statusCode === 200){\n    \n\n    msg.headers = {\n        \"Authorization\": `Bearer ${actyvToken}`,\n        \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n    }\n\n    msg.url = `${env_var.CHECK_ROLE_USER_MAPPING}/${msg.obj.businessPartnerId}`;\n    msg.method = 'get';\n}\nmsg.logger = `Checking If Role user Mapping Already Exists or Not`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1420,
        "wires": [
            [
                "92f0c3ae42900c26"
            ]
        ]
    },
    {
        "id": "29e43acc77f16560",
        "type": "function",
        "z": "2d360e569b9a1614",
        "g": "ca7746c90d3d69f9",
        "name": "Result of Check Role User Mapping",
        "func": "const mappings = msg.payload;\nvar flag = 0;\n\nfor (const mapping of mappings) {\n    if(mapping.userId === msg.userId && mapping.roleId === msg.roleId){\n       \n        flag = 1;\n        break;\n    }\n};\n\nif(flag === 1){\n    msg.userExists = \"true\";\n    msg.result[\"Role User Mapping\"] = `Exists`\n}\nelse{\n    msg.userExists = \"false\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1500,
        "wires": [
            [
                "a57b350de59713d8",
                "8554bfca33b913cf"
            ]
        ]
    },
    {
        "id": "a57b350de59713d8",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "g": "ca7746c90d3d69f9",
        "name": "Check Role User Mapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "userExists",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 1500,
        "wires": []
    },
    {
        "id": "cf373a584349599c",
        "type": "switch",
        "z": "2d360e569b9a1614",
        "g": "ca7746c90d3d69f9",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1330,
        "y": 1420,
        "wires": [
            [
                "c6f16ea47cb41398"
            ],
            [
                "29e43acc77f16560"
            ]
        ]
    },
    {
        "id": "c6f16ea47cb41398",
        "type": "function",
        "z": "2d360e569b9a1614",
        "g": "ca7746c90d3d69f9",
        "name": "Role User MApping API Failed",
        "func": "\n\nconst failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Unable to get the role for the business Partner\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 1400,
        "wires": [
            [
                "7a252a38c05c61b1"
            ]
        ]
    },
    {
        "id": "2d525a8ec05b658a",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "g": "ca7746c90d3d69f9",
        "name": "UnsuccessFul row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 1360,
        "wires": []
    },
    {
        "id": "879e49607c59dec9",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "g": "ca7746c90d3d69f9",
        "name": "UnsuccessFul row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 1560,
        "wires": []
    },
    {
        "id": "88d8c763f0bf28ec",
        "type": "function",
        "z": "2d360e569b9a1614",
        "g": "ca7746c90d3d69f9",
        "name": "Get role id",
        "func": "const data = msg.payload;\nmsg.userId = data[0].userId;\nmsg.result[\"User ID\"] = `${msg.userId}`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n   \n}\n\nmsg.method = 'POST';\nmsg.url = `${env.get(\"ADMIN_URL\")}/api/role/query`\nmsg.payload = {\n    \"query\": {\n        \"name\": \"paylater_bp_admin\"\n    }\n\n}\nmsg.logger = `Getting the Role ID`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1340,
        "wires": [
            [
                "78cf391d25d531cf"
            ]
        ]
    },
    {
        "id": "af87ed0612b6f553",
        "type": "function",
        "z": "2d360e569b9a1614",
        "g": "ca7746c90d3d69f9",
        "name": "set roleId",
        "func": "msg.roleId = msg.payload[0][\"_id\"]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 1340,
        "wires": [
            [
                "dfbeab6dce045093"
            ]
        ]
    },
    {
        "id": "89a833f7d830ae86",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "g": "ca7746c90d3d69f9",
        "name": "Get RoleID API",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 1260,
        "wires": []
    },
    {
        "id": "f7aee8d4b30def5c",
        "type": "switch",
        "z": "2d360e569b9a1614",
        "g": "ca7746c90d3d69f9",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 1300,
        "wires": [
            [
                "eaf6fad8b6b84a78"
            ],
            [
                "88d8c763f0bf28ec"
            ]
        ]
    },
    {
        "id": "eaf6fad8b6b84a78",
        "type": "function",
        "z": "2d360e569b9a1614",
        "g": "ca7746c90d3d69f9",
        "name": "USerID API Failed",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Unable to get the business partner user\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1200,
        "wires": [
            [
                "488a1ba9284601c7"
            ]
        ]
    },
    {
        "id": "7a252a38c05c61b1",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "2d360e569b9a1614",
        "g": "ca7746c90d3d69f9",
        "name": "",
        "x": 1990,
        "y": 1340,
        "wires": [
            [
                "2d525a8ec05b658a"
            ]
        ]
    },
    {
        "id": "e85be2916e17fdcf",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "2d360e569b9a1614",
        "g": "ca7746c90d3d69f9",
        "name": "",
        "x": 1930,
        "y": 1560,
        "wires": [
            [
                "879e49607c59dec9"
            ]
        ]
    },
    {
        "id": "935b39046c99ebcd",
        "type": "function",
        "z": "2d360e569b9a1614",
        "g": "ca7746c90d3d69f9",
        "name": "Set Role User Mapping Failed",
        "func": "\nconst failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nfailedRows.push({\n    applicantCRN: msg.obj[\"bankIdentifierByParent\"],\n    message: `${\"Unable to set Role User Mapping \"}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 1560,
        "wires": [
            [
                "e85be2916e17fdcf"
            ]
        ]
    },
    {
        "id": "7ba43ded6f55b6f1",
        "type": "switch",
        "z": "2d360e569b9a1614",
        "g": "ca7746c90d3d69f9",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1350,
        "y": 1600,
        "wires": [
            [
                "935b39046c99ebcd"
            ],
            [
                "f4554e2c9e211eb8"
            ]
        ]
    },
    {
        "id": "7fa08fbcc70dc853",
        "type": "debug",
        "z": "2d360e569b9a1614",
        "g": "ca7746c90d3d69f9",
        "name": "UnsuccessFul row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 1180,
        "wires": []
    },
    {
        "id": "488a1ba9284601c7",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "2d360e569b9a1614",
        "g": "ca7746c90d3d69f9",
        "name": "",
        "x": 1350,
        "y": 1200,
        "wires": [
            [
                "7fa08fbcc70dc853"
            ]
        ]
    },
    {
        "id": "95832288c7856d66",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "2d360e569b9a1614",
        "g": "ca7746c90d3d69f9",
        "name": "get User_ID",
        "x": 690,
        "y": 1200,
        "wires": [
            [
                "f7aee8d4b30def5c"
            ],
            []
        ]
    },
    {
        "id": "78cf391d25d531cf",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "2d360e569b9a1614",
        "g": "ca7746c90d3d69f9",
        "name": "Get Role ID",
        "x": 1210,
        "y": 1320,
        "wires": [
            [
                "89a833f7d830ae86",
                "af87ed0612b6f553"
            ],
            []
        ]
    },
    {
        "id": "92f0c3ae42900c26",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "2d360e569b9a1614",
        "g": "ca7746c90d3d69f9",
        "name": "Check Role User Mapping",
        "x": 1050,
        "y": 1420,
        "wires": [
            [
                "cf373a584349599c"
            ],
            []
        ]
    },
    {
        "id": "4dd314597bd38e12",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "2d360e569b9a1614",
        "g": "ca7746c90d3d69f9",
        "name": "Role User Mapping",
        "x": 1090,
        "y": 1600,
        "wires": [
            [
                "b39485355d4d4c01",
                "7ba43ded6f55b6f1"
            ],
            []
        ]
    },
    {
        "id": "0f0405368fc970bf",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "2d360e569b9a1614",
        "g": "392372c777d3850d",
        "name": "Business partner Bank Relationship",
        "x": 1520,
        "y": 1960,
        "wires": [
            [
                "7f5d9aa7b30a9118"
            ],
            []
        ]
    },
    {
        "id": "edb2576f7bea3bb0",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "2d360e569b9a1614",
        "g": "0e249ca2cc59c2ed",
        "name": "Fetch Loan Term",
        "x": 1190,
        "y": 2180,
        "wires": [
            [
                "ae11a0a5c3b1ae1d",
                "185794362d65046a"
            ],
            []
        ]
    },
    {
        "id": "65f02ff38f6f476e",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "2d360e569b9a1614",
        "g": "0e249ca2cc59c2ed",
        "name": "Create Loan Term",
        "x": 1310,
        "y": 2380,
        "wires": [
            [
                "0a5e0edd2ba77cb9"
            ],
            []
        ]
    },
    {
        "id": "955e244637f40d2c",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "2d360e569b9a1614",
        "g": "0e249ca2cc59c2ed",
        "name": "Update Loan Term",
        "x": 1690,
        "y": 2500,
        "wires": [
            [
                "b6ca988413755a4b",
                "98f29b4499eef061"
            ],
            []
        ]
    },
    {
        "id": "179f64ea2fe05af9",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "2d360e569b9a1614",
        "g": "7ef0977ae5c95b40",
        "name": "Fetching Tenor And Rate Spread",
        "x": 1090,
        "y": 2680,
        "wires": [
            [
                "c823a777064bb0b6",
                "0884e354bfb93cbc"
            ],
            []
        ]
    },
    {
        "id": "0461e16e9203a103",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "2d360e569b9a1614",
        "g": "7ef0977ae5c95b40",
        "name": "Create BNPL Peference",
        "x": 1110,
        "y": 2820,
        "wires": [
            [
                "272ba9625098c6a1",
                "434cc68d79f6d653"
            ],
            []
        ]
    },
    {
        "id": "f6c4d659c1eabe68",
        "type": "subflow:951a533bb3498fe6",
        "z": "2d360e569b9a1614",
        "name": "",
        "x": 560,
        "y": 580,
        "wires": [
            [
                "356375713580f958"
            ]
        ]
    },
    {
        "id": "cd6c6e1bc4037f76",
        "type": "subflow:4bdfed63bfa7021d",
        "z": "2d360e569b9a1614",
        "name": "",
        "x": 650,
        "y": 2980,
        "wires": [
            [
                "81365b31796b9493"
            ]
        ]
    },
    {
        "id": "6802193360678995",
        "type": "inject",
        "z": "c28fd65bec3668c6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 260,
        "wires": [
            [
                "0fdf89fa25367a90"
            ]
        ]
    },
    {
        "id": "0fdf89fa25367a90",
        "type": "function",
        "z": "c28fd65bec3668c6",
        "name": "function 244",
        "func": "msg.url = `https://api64.ipify.org?format=json`;\nmsg.method = `GET`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 260,
        "wires": [
            [
                "db4d3fbe68a483b4"
            ]
        ]
    },
    {
        "id": "4d939ec507160a29",
        "type": "debug",
        "z": "c28fd65bec3668c6",
        "name": "debug 589",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 260,
        "wires": []
    },
    {
        "id": "db4d3fbe68a483b4",
        "type": "http request",
        "z": "c28fd65bec3668c6",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 260,
        "wires": [
            [
                "4d939ec507160a29"
            ]
        ]
    },
    {
        "id": "e96212b0944c1011",
        "type": "inject",
        "z": "e862ba184c2a0edf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "25b950e14bde2dab"
            ]
        ]
    },
    {
        "id": "25b950e14bde2dab",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "Set env variables",
        "func": "\n// let v8 = global.get(\"v8\");\n// const totalHeapSize = v8.getHeapStatistics().total_available_size;\n// let totalHeapSizeInMB = (totalHeapSize / 1024 / 1024).toFixed(2)\n// node.warn(\"V8 Total Heap Size \"+totalHeapSize+\" bytes\");\n\nconst ENV_VARIABLES = new Map();\n\nENV_VARIABLES.set('PAYLATER_URL', \"https://actyv-platform-paylater-service-v1.qa.actyv.com\")\nENV_VARIABLES.set('GO_URL', \"https://actyv-platform-go-service.qa.actyv.com\")\nENV_VARIABLES.set('ADMIN_URL', \"https://actyv-platform-admin-service.qa.actyv.com\")\n\nENV_VARIABLES.set('BUSINESS_IDENTIFIER', \"ABBCB2066P\")\nENV_VARIABLES.set('BUSINESS_TYPE', \"ENTERPRISE\")\nENV_VARIABLES.set('BANK_KEY', \"msl\")\nENV_VARIABLES.set('X_ACTYV_API_CONFIG_KEY', \"8HhkIWzVMSnSgvlhxr\")\nENV_VARIABLES.set('BANK_UNIQUE_IDENTIFIER', \"AASCA2089A\")\nENV_VARIABLES.set('BASE_URL', \"https://iifl-atlas-uat.finfluxtrial.io\")\nENV_VARIABLES.set('tenant_id', \"iifl-qa\")\nENV_VARIABLES.set('BANK_PRODUCT_KEY', \"axis-sabari-product\")\n\nENV_VARIABLES.set('BNPL_USER', \"surajkumar@aplapollo.com\")\nENV_VARIABLES.set('BNPL_USER_PASSWORD', \"890ioP@12\")\nENV_VARIABLES.set('IIFL_USER', \"demoUser2\")\nENV_VARIABLES.set('IIFL_USER_PASSWORD', \"fc895Tbr2i&w@\")\n\nglobal.set('envVariables', ENV_VARIABLES)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 60,
        "wires": [
            [
                "d65779725c792d2a"
            ]
        ]
    },
    {
        "id": "d65779725c792d2a",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst CKPL_ENTERPRISE_ADMIN_EMAIL = env.get('CKPL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": CKPL_ENTERPRISE_ADMIN_EMAIL\n\n}\nmsg.logger = `Authenticate Enterprise User`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 120,
        "wires": [
            [
                "62d6afd237ff2978"
            ]
        ]
    },
    {
        "id": "2a3129989dd8925d",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "saveEnterpriseToken",
        "func": "flow.set(\"enterpriseToken\",msg.payload.idToken)\n// console.log({enterpriseToken: msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 120,
        "wires": [
            [
                "0549fd8252f10a97"
            ]
        ]
    },
    {
        "id": "8f00a375e9ce31dc",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "AuthenticateIIFLUserReq",
        "func": "const IIFL_USER = env.get('IIFL_USER')\nconst IIFL_USER_PASSWORD = env.get('IIFL_USER_PASSWORD')\nconst IIFL_URL = env.get('IIFL_URL');\n\n\nmsg.url = `${IIFL_URL}/api/auth/login`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": IIFL_USER_PASSWORD,\n        \"userName\": IIFL_USER\n\n}\nmsg.logger = `Authenticate IIFL User`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 320,
        "wires": [
            [
                "26f094006d9353ce"
            ]
        ]
    },
    {
        "id": "53db0435b28a4004",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "saveIIFLToken",
        "func": "\nflow.set(\"iiflToken\", msg.payload.accessToken)\nconsole.log({ iifl_token: msg.payload.accessToken})\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "ce3810d4de902bb3",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "getBankProductKeyReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY_CKPL_IIFL = env.get('BANK_PRODUCT_KEY_CKPL_IIFL')\n\nmsg.url = `${GO_URL}/bank-application-config/key/${BANK_PRODUCT_KEY_CKPL_IIFL}`\nmsg.method = \"GET\"\n\nmsg.logger = `Get Bank product Key by req`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 420,
        "wires": [
            [
                "28bceee3e8423ddc"
            ]
        ]
    },
    {
        "id": "ca28f6d078b2c5d0",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "bankProductConfig",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 400,
        "wires": []
    },
    {
        "id": "fc93f406280c4c88",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "getPendingBankApplicationsReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY_CKPL_IIFL = env.get('BANK_PRODUCT_KEY_CKPL_IIFL')\nconst IIFL_BANK_APPLICATION_STATUS = env.get(\"IIFL_BANK_APPLICATION_STATUS\")\n\nmsg.bankId = msg.payload.bank\nmsg.enterpriseId = msg.payload.allowedEnterprises[0]\n\nmsg.url = `${GO_URL}/bank-application?bankApplicationConfigKey=${BANK_PRODUCT_KEY_CKPL_IIFL}&applicationStatus=${IIFL_BANK_APPLICATION_STATUS}`\nmsg.method = \"GET\"\n\nmsg.logger = `Get Pending bank Applications`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 540,
        "wires": [
            [
                "dcb5927c7ecb96cd"
            ]
        ]
    },
    {
        "id": "e58c70acdb3bd42c",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "pendingBankApplications",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 520,
        "wires": []
    },
    {
        "id": "ab5bee61c36757ac",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "mockBankApplication",
        "func": "msg.payload = [\n    {\n        \"_id\": \"63ff1b2f723b070cae7c09c0\",\n        \"createdOn\": \"Tue, 21 Feb 2023 11:32:41 GMT\",\n        \"createdBy\": \"63750a1995a6a16f696d2f7b\",\n        \"updatedOn\": \"Tue, 21 Feb 2023 11:32:42 GMT\",\n        \"isDeleted\": false,\n        \"bankApplicationDocumentConfigKey\": \"63cfbc85edee8f7eee6f3d6e\",\n        \"bankName\": \"Axis Bank Limited\",\n        \"productFamily\": \"PAYLATER\",\n        \"productType\": \"PAYLATER\",\n        \"status\": \"DOCUMENT_CAPTURE\",\n        \"businessPartnerName\": \"Shri Durga Metalex\",\n        \"businessPartnerID\": \"63750a19ca608a344ae556d6\",\n        \"productGranularity\": \"product\",\n        \"bankProductConfigId\": \"64363fc74516a3ea3c8b86d9\",\n        \"bankId\": \"642d3bc0ebc96f31f3daebe9\",\n        \"bankApplicationLabel\": \"Continue Bank Application\",\n        \"bankApplicationURL\": \"www.google.com\",\n        \"enterpriseId\": \"637670c7f8e9564da0dea656\",\n        \"approvedLimit\": null,\n        \"availableLimit\": null\n    }\n]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 620,
        "wires": [
            [
                "88a4daab961a5be3"
            ]
        ]
    },
    {
        "id": "88a4daab961a5be3",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "LoopOverBankApplication",
        "func": "\nfor(let bankApplication of msg.payload){\n    // console.log({bankApplication})\n    node.send({\n        businessPartnerId: bankApplication.businessPartnerID,\n        bankId: bankApplication.bankId,\n        enterpriseId: bankApplication.enterpriseId,\n        bankProductConfigId: bankApplication.bankProductConfigId,\n        bankApplicationId : bankApplication._id,\n        dataPartDone: \"false\"\n    })\n}\n\n// return msg;\n\n/**\n *  \"_id\": \"63f4abd94f0acc5aa73d9e46\",\n        \"createdOn\": \"Tue, 21 Feb 2023 11:32:41 GMT\",\n        \"createdBy\": \"63750a1995a6a16f696d2f7b\",\n        \"updatedOn\": \"Tue, 21 Feb 2023 11:32:42 GMT\",\n        \"isDeleted\": false,\n        \"bankApplicationDocumentConfigKey\": \"63cfbc85edee8f7eee6f3d6e\",\n        \"bankName\": \"Axis Bank Limited\",\n        \"productFamily\": \"PAYLATER\",\n        \"productType\": \"PAYLATER\",\n        \"status\": \"DOCUMENT_CAPTURE\",\n        \"businessPartnerName\": \"Shri Durga Metalex\",\n        \"businessPartnerID\": \"63750a19ca608a344ae556d6\",\n        \"productGranularity\": \"product\",\n        \"bankProductConfigId\": \"63cfbe250c729962c86ec8a7\",\n        \"bankId\": \"63c8fa075f1c5afda77bae5e\",\n        \"bankApplicationLabel\": \"Continue Bank Application\",\n        \"bankApplicationURL\": \"www.google.com\",\n        \"enterpriseId\": \"638c73f16ea52ce57470c1a9\",\n        \"approvedLimit\": null,\n        \"availableLimit\": null\n */",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 620,
        "wires": [
            [
                "23d880c0b8909e8e",
                "e5cfc64c68275d0c"
            ]
        ]
    },
    {
        "id": "23d880c0b8909e8e",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "bankApplication",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 620,
        "wires": []
    },
    {
        "id": "6f2083b3fc6e49ac",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "getBusinessPartnerDataReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.enterpriseBankAccountDetails = {\n    accountNo: msg.payload[0]?.bankAccountNumber,\n    ifsc: msg.payload[0]?.bankIFSC,\n    bankName: msg.payload[0]?.bankName\n}\n\nmsg.dealerCode = msg.payload.identifierByParent\n\n\nmsg.url = `${GO_URL}/business-partner/data/${msg.businessPartnerId}`\n\nmsg.headers = {\n    \"x-actyv-api-config-key\" : X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.method = \"GET\"\n\nmsg.logger = `Requesting the business Partner Data for the business Partner ${msg.businessPartnerId}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 780,
        "wires": [
            [
                "12ffb7b73ff547ac"
            ]
        ]
    },
    {
        "id": "3bb79acc18911471",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "businessPartnerData",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 780,
        "wires": []
    },
    {
        "id": "2b12c3d3ad3a86dc",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "createClientReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${IIFL_URL}/api/customer`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nconst aadhar = msg.data.documents.filter((document) => document.documentType ===\"AADHAAR\");\n// console.log({aadhar:aadhar[0].data})\n\nconst pan = msg.data.documents.filter((document) => document.documentType === \"PERSONAL_PAN\");\nconst name = aadhar[0].data.name.split(\" \")\n\n// console.log({ clientRefId: msg.dealerCode, mobileNo: msg.data.persons[0].phone, })\nmsg.payload = {\n    \"firstName\": name[0],\n    \"lastName\": name[name.length-1],\n    \"dateOfBirth\": aadhar[0].data.dob.split(\"T\")[0],//\"2022-12-01\",\n    \"gender\":  aadhar[0].data.gender === \"M\"?\"MALE\":\"FEMALE\",//\"MALE\",\n    \"mobileNo\": \"9573603199\",//msg.data.persons[0].phone.split(\"+91\")[1],//\"9876543210\",\n    \"email\": msg.data.persons[0].email,//\"aa@example.com\",\n    \"clientReferenceId\": \"CAVINMC005\",//msg.dealerCode,//\"1234\",\n    \"panNo\": \"BHXPS7086M\",//pan[0].data.panNumber,//\"AAAAA1111A\",\n    \"panAuthenticationRequired\": false,\n    \"productCode\": \"ACTYV_LOC\"\n}\nmsg.logger = `Creating the Client`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 1080,
        "wires": [
            [
                "11b5aef11e069507",
                "05eb1d8aa144a6b6"
            ]
        ]
    },
    {
        "id": "e5cfc64c68275d0c",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "getDealerCodeReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/business-relationship/${msg.businessPartnerId}/${msg.enterpriseId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`\n}\nmsg.logger = `getting the dealer code for the business Partner ${msg.businessPartnerId}`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 700,
        "wires": [
            [
                "b95fc8352e3c0a44"
            ]
        ]
    },
    {
        "id": "4f4663dd6cc145ce",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "storeBPdataToData",
        "func": "msg.data = msg.payload\n// let bankStatement = msg.payload.documents.filter((doc) => doc.documentType === \"BANK_STATEMENT\").sort((a, b) => b.data.statementdetails.statementAccounts[0].xnsEndDate - a.data.statementdetails.statementAccounts[0].xnsEndDate)\n// console.log({bankStatement:bankStatement})\n// let data = JSON.parse(msg.payload.documents)\nlet gstin = msg.data.documents.filter((doc)=>doc.documentType === \"GSTIN\")\nmsg.gstIn = gstin[0];\n// console.log({gstin: JSON.stringify(gstin,null,\"\\t\")})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 880,
        "wires": [
            [
                "7b6c42ce5d52aecc"
            ]
        ]
    },
    {
        "id": "480153109fb49902",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "createClient",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1060,
        "wires": []
    },
    {
        "id": "6a81b44b6aab4531",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "addClientAddressReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.payload.clientId\n\n//set clientId and leadId to msg object\nmsg.clientId = msg.payload.clientId,\nmsg.leadId = msg.payload.leadId\nconsole.log({clientId})\nmsg.url = `${IIFL_URL}/api/clients/${clientId}/addresses`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nconst aadhar = msg.data.documents.filter((document) => document.documentType ===\"AADHAAR\");\n\nconst pan = msg.data.documents.filter((document) => document.documentType === \"PERSONAL_PAN\");\nconst name = aadhar[0].data.name.split(\" \")\nmsg.payload = {\n    \"addressLine1\": aadhar[0].data.address,//\"123, Abc Street\",\n    \"addressLine2\": `${aadhar[0].data.subDistrict},${aadhar[0].data.district},${aadhar[0].data.state}`,//\"Some Locality\",\n    \"addressType\": \"PERMANENT\",\n    \"pincode\": aadhar[0].data.pinCode,//\"126778\"\n}\nmsg.log = `Adding the Client Address`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1200,
        "wires": [
            [
                "52aee9d9625cb8e5",
                "2113690271a38a7c"
            ]
        ]
    },
    {
        "id": "de92525e4557de26",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "addClientAddress",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1200,
        "wires": []
    },
    {
        "id": "7b6c42ce5d52aecc",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "mockCreateClient",
        "func": "msg.payload = {\n    clientId: 2762,\n    leadId: 1707\n}\n\nconsole.log(\"mock\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 880,
        "wires": [
            [
                "2b12c3d3ad3a86dc"
            ]
        ]
    },
    {
        "id": "995d7189aec07b92",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "Scrapping Documents of a particular Business Partner",
        "func": "let c = 0\n\nconst arr = msg.data.documents;\nconst businessPartnerId = msg.businessPartnerId;\nconst gst_regex = new RegExp(/^GST/);\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\n// const dealerCode = msg.payload.identifierByParent\nconst dealerCode = msg.dealerCode\n\n// const lp = msg.LOCAL_PATH;\n\nlet documents = [\n    'AADHAAR', 'BANK_STATEMENT',\n    'ITR', 'BUSINESS_PAN',\n    'PERSONAL_PAN', 'GST',\n    'GST', 'GSTR3B_RETSUM',\n    'GSTR2A_B2B', 'GSTR2A_RETSUM',\n    'GSTR1_EXP', 'GSTR1_B2B',\n    'GSTR1_CDNR', 'GSTR1_HSNSUM',\n    'GSTR1_CDNUR', 'GSTR1_B2CL',\n    'GSTR1_CDN', 'GSTR1_NIL',\n    'GSTR1_B2CS', 'GSTR_FILES',\n    'BANK_FORM_1'\n]\n\nfor(let document of msg.data?.documents){\n    \n    \n    switch (true) {\n        case /^AADHAAR/.test(document?.documentType):\n        \n            node.send({\n                ...msg,\n                    data:{},\n                payload: document,\n                // businessPartnerId: msg.businessPartnerId,\n                // bankId: msg.bankId,\n                // enterpriseId: msg.enterpriseId,\n                // bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                dealerCode,\n                documentType: \"KYC\",\n                documentName:\"AADHAAR\",//document.documentType,\n                isSelfie: false\n            });\n         \n            break\n        // case /^BANK_STATEMENT/.test(document?.documentType):\n        //     node.send({\n        //         ...msg,\n        //         payload: document,\n        //      data:{},\n        //         // businessPartnerId: msg.businessPartnerId,\n        //         // bankId: msg.bankId,\n        //         // enterpriseId: msg.enterpriseId,\n        //         // bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\", \n        //         dealerCode,\n        //         documentType: \"BANK_STATEMENT\",\n        //         isSelfie: false\n        //     });\n           \n        //     break;\n        // case /^ITR/.test(document?.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode,\n        //         isSelfie: false\n        //     });\n          \n        //     break\n        case /^BUSINESS_PAN/.test(document?.documentType):\n       \n            node.send({\n                ...msg,\n                payload: document,\n                // businessPartnerId: msg.businessPartnerId,\n                // bankId: msg.bankId,\n                // enterpriseId: msg.enterpriseId,\n                // bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                documentType: \"KYC\",\n                dealerCode,\n                isSelfie: false\n            });\n           \n            break\n        case /^PERSONAL_PAN/.test(document?.documentType):\n      \n            node.send({\n                ...msg,\n                payload: document,\n                \n                data:{},\n                // businessPartnerId: msg.businessPartnerId,\n                // bankId: msg.bankId,\n                // enterpriseId: msg.enterpriseId,\n                // bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                documentType: \"KYC\",\n                dealerCode,\n                isSelfie: false\n            });\n           \n            break\n        // case /^GST/.test(document?.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode,\n        //         isSelfie: false\n        //     });\n           \n        //     break\n       \n\n\n        // case /BANK_FORM_1/.test(document.documentType):\n        //     node.send({\n        //         ...msg,\n        //         payload: document,\n        //         // businessPartnerId: msg.businessPartnerId,\n        //         // bankId: msg.bankId,\n        //         // enterpriseId: msg.enterpriseId,\n        //         // bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         documentType: \"KYC\",\n        //         dealerCode\n        //     });\n            \n        //     break\n        \n        \n\n        default: {}\n        // node.send({\n        //     payload: {\n        //         files:[]\n        //     },\n        //     businessPartnerId: msg.businessPartnerId,\n        //     bankId: msg.bankId,\n        //     enterpriseId: msg.enterpriseId,\n        //     bankProductConfigId: msg.bankProductConfigId,\n        //     transferDone: \"false\",\n        //     dealerCode,\n        //     isSelfie: false\n        // });\n    }\n};\n\n\nconst reqDocsFromFieldValue = [\"iifl_live_selfie_1\"]\n\nlet documentsFromFieldValue = msg.data.fieldValues.filter((doc)=>{\n    if(reqDocsFromFieldValue.includes(doc.key)){\n        return doc\n    }\n})\n\n\n\n\nfor (let i = 0; i < documentsFromFieldValue.length;i++){\n   \n    \n        if (documentsFromFieldValue[i].key ===\"iifl_live_selfie_1\"){\n          \n            node.send({\n                ...msg,\n                payload: documentsFromFieldValue[i].value,\n                // businessPartnerId: msg.businessPartnerId,\n                // bankId: msg.bankId,\n                // enterpriseId: msg.enterpriseId,\n                // bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                documentType:\"SELFIE\",\n                dealerCode,\n                isSelfie :true\n            }); \n        }else{\n            node.send({\n                ...msg,\n                payload: documentsFromFieldValue[i].value,\n                // businessPartnerId: msg.businessPartnerId,\n                // bankId: msg.bankId,\n                // enterpriseId: msg.enterpriseId,\n                // bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                documentType: documentsFromFieldValue[i].key,\n                dealerCode,\n                isSelfie: false\n            }); \n        }\n        \n    \n}\n\n\nmsg.transferDone = \"true\";\n// msg.LOCAL_PATH = lp;\nreturn msg;\n\n/**\n    businessPartnerId: msg.businessPartnerId,\n    bankId: msg.bankId,\n    enterpriseId: msg.enterpriseId,\n    bankProductConfigId: msg.bankProductConfigId,\n */",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 306.6666717529297,
        "y": 2375.0000677108765,
        "wires": [
            [
                "62cc0ffc390d321a"
            ]
        ]
    },
    {
        "id": "62cc0ffc390d321a",
        "type": "switch",
        "z": "e862ba184c2a0edf",
        "name": "",
        "property": "transferDone",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "falseh",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 636.6666717529297,
        "y": 2375.0000677108765,
        "wires": [
            [
                "12755e52493a93a2"
            ],
            [
                "4e42473b0ed8941c"
            ]
        ]
    },
    {
        "id": "c51b6149e118f7a1",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "dealerCode",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 680,
        "wires": []
    },
    {
        "id": "b30e5326a3d9de0a",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "debug 257",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 40,
        "wires": []
    },
    {
        "id": "6478168a45222c54",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "addThirdPartyAccountReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\n\n\nconst           {\n    accountNo,\n    ifsc,\n    bankName\n                } = msg.enterpriseBankAccountDetails\n\n\nmsg.url = `${IIFL_URL}/api/clients/${clientId}/third-party-bank-account-details`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nmsg.payload = {\n    \"accountTypeId\": 1,\n    \"name\": \"enterpriseName\",\n    \"accountNumber\": accountNo,//\"67896745532734\",\n    \"ifscCode\": ifsc,//\"SBIN0001632\",\n    \"bankName\": bankName,//\"SBI\",\n    \"accountType\": \"CURRENTACCOUNT\"\n    // \"branchName\": \"Bellandur\",\n    // \"bankCity\": \"Bangalore\",\n    // \"bankCode\": \"98978\"\n}\nmsg.logger = `Addign the third Party Account for the clientId ${clientId}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 186.6666717529297,
        "y": 1415.0000677108765,
        "wires": [
            [
                "324c2d77c29f89d6"
            ]
        ]
    },
    {
        "id": "31df13da7dd91818",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "addThirdPartyAccount",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 766.6666717529297,
        "y": 1415.0000677108765,
        "wires": []
    },
    {
        "id": "608ce5f1eebd411f",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "activateThirdPartyAccountReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\n\n\nconst clientThirdPartyBankAccountDetailAssociationId = msg.payload.clientThirdPartyBankAccountDetailAssociationId\nmsg.url = `${IIFL_URL}/api/client-third-party-bank-account-details/${clientThirdPartyBankAccountDetailAssociationId}/activate`\nmsg.method = \"PUT\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nmsg.payload = {\n}\nmsg.logger = `activating the third Party Account`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 196.6666717529297,
        "y": 1515.0000677108765,
        "wires": [
            [
                "0fe92381336f2586"
            ]
        ]
    },
    {
        "id": "6b0c284699a1702e",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "activateThirdPartyAccount",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 786.6666717529297,
        "y": 1515.0000677108765,
        "wires": []
    },
    {
        "id": "7f0030d0fc5e5713",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "initiateBankStatementAnalysisReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\nconsole.log(\"test\")\n\nconst clientThirdPartyBankAccountDetailAssociationId = msg.payload.clientThirdPartyBankAccountDetailAssociationId\nmsg.url = `${IIFL_URL}/api/client-third-party-bank-account-details/${clientThirdPartyBankAccountDetailAssociationId}/activate`\nmsg.method = \"PUT\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nmsg.payload = {\n}\nmsg.logger = `Initiating the Bank Statement Analysis`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 186.6666717529297,
        "y": 1615.0000677108765,
        "wires": [
            [
                "3256d18bea3d6210",
                "a67a1dd7f3aceb37"
            ]
        ]
    },
    {
        "id": "3ed5d1e583cc395a",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "initiateBankStatementAnalysis",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 776.6666717529297,
        "y": 1615.0000677108765,
        "wires": []
    },
    {
        "id": "3256d18bea3d6210",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "saveClientIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/service`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    enterpriseid: msg.enterpriseId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflClientId\",\n    \"value\": msg.clientId,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId,\n    \"enterpriseId\": msg.enterpriseId\n}\nmsg.logger = `Saving the clientId`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 146.6666717529297,
        "y": 1735.0000677108765,
        "wires": [
            [
                "999f048842f7dbf7"
            ]
        ]
    },
    {
        "id": "3a2c84a9fdf0489e",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "saveClientId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 776.6666717529297,
        "y": 1735.0000677108765,
        "wires": []
    },
    {
        "id": "75a635fe73c056ba",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "saveLeadIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${env.get(\"GO_URL\")}/field-value/service`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n    enterpriseid: msg.enterpriseId\n}\n\nmsg.payload = {\n    \"key\": \"iiflLeadId\",\n    \"value\": msg.leadId,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId,\n    \"enterpriseId\": msg.enterpriseId\n}\nmsg.logger = `Saving the LeadId`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1900,
        "wires": [
            [
                "a47549adb942769f"
            ]
        ]
    },
    {
        "id": "cce5f29a30aa312c",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "saveLeadId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1920,
        "wires": []
    },
    {
        "id": "48599ff2f4e761b3",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "pNach/eNach?",
        "func": "\n\nlet natch = msg.data.fieldValues.filter((fieldValue) => {\n    return fieldValue.key == \"nach\"\n})\n\nmsg.nach = \"pnach\"//natch[0].value\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 1400,
        "wires": [
            [
                "a0f933cf74712520"
            ]
        ]
    },
    {
        "id": "a0f933cf74712520",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "initiateNachReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${IIFL_URL}/api/leads/${msg.leadId}/nach/init`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload =\n{\n    \"amount\": \"50000\",\n    \"bankAccountDetailId\": \"214\",\n    \"debitFrequency\": \"MONTHLY\",\n    \"debitType\": \"FIXED_AMOUNT\",\n    \"fromDate\": new Date().toISOString().split(\"T\")[0],//\"2023-04-08\",\n    \"registrationMode\": \"physical\",//msg.nach==\"enach\"?\"API\":\"physical\",\n    \"toDate\": \"2023-10-20\"\n}\nmsg.logger = `Initiating the Nach Req`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2120,
        "y": 1400,
        "wires": [
            [
                "cfc986dbd378f0d6"
            ]
        ]
    },
    {
        "id": "e27b526b4ba68ea5",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "initiateNach",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2690,
        "y": 1400,
        "wires": []
    },
    {
        "id": "9723a6d1abfa52b0",
        "type": "comment",
        "z": "e862ba184c2a0edf",
        "name": "hardCodedNatchReq",
        "info": "",
        "x": 1974.3333282470703,
        "y": 1660.9999322891235,
        "wires": []
    },
    {
        "id": "6a900b52d0d5232a",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "saveNachIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/service`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst nachId = 1620//msg.payload.resourceId\n\nmsg.nachId = nachId\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    enterpriseid: msg.enterpriseId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflNachId\",\n    \"value\": nachId,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"enterpriseId\": msg.enterpriseId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\nmsg.logger = `Saving the NachId`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 1480,
        "wires": [
            [
                "08d9af9a06f5fb1e"
            ]
        ]
    },
    {
        "id": "04d02a9810d6ac11",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "saveNachId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2490,
        "y": 1480,
        "wires": []
    },
    {
        "id": "e86fa6654ddd8af0",
        "type": "switch",
        "z": "e862ba184c2a0edf",
        "name": "",
        "property": "nach",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "pnach",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "enach",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1891,
        "y": 1596,
        "wires": [
            [
                "b10a85b15a1ae571"
            ],
            []
        ]
    },
    {
        "id": "b10a85b15a1ae571",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "generateP-nachDocReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${IIFL_URL}/api/leads/${msg.leadId}/nach/${msg.nachId}/generate-file`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {\n   \n}\nmsg.logger = `Generating the P-Nach Doc`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2090,
        "y": 1580,
        "wires": [
            [
                "22de1d0b3d5db4cd"
            ]
        ]
    },
    {
        "id": "54f5cf9bc7a4aa64",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "generateP-nachDoc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2721,
        "y": 1596,
        "wires": []
    },
    {
        "id": "c7258c91c1de1b3c",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "downloadP-NathDoc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2561,
        "y": 1696,
        "wires": []
    },
    {
        "id": "3bc3b7c2fb005ade",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "downloadP-NathDocReq",
        "func": "console.log({ node:\"downloadP-NatchDocReq\"})\n\nconst IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nmsg.docId = msg.payload.resourceId\nconst nachDoc = msg.payload.id\nmsg.url = `${IIFL_URL}/api/document/download/${nachDoc}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {\n   \n}\nmsg.logger = `Downloading the P-NathDoc`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 1680,
        "wires": [
            [
                "44698a743940d456"
            ]
        ]
    },
    {
        "id": "12755e52493a93a2",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "initiateVclReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${IIFL_URL}/api/leads/${msg.leadId}/update-limit`\nmsg.method = \"PUT\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload =\n{\n    \"loanAmountRequested\": 100000\n}\nmsg.logger = `initiate VCL Req`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1906.6666717529297,
        "y": 1155.0000677108765,
        "wires": [
            [
                "db5acb95df831f83"
            ]
        ]
    },
    {
        "id": "99d74ffb269dfd44",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "initiateVcl",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2526.6666717529297,
        "y": 1155.0000677108765,
        "wires": []
    },
    {
        "id": "0ead3f0d4fadbb20",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "saveVclIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/service`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\n// msg.natchId = msg.payload.resourceId\nmsg.vclAccountNumber = msg.payload.vclAccountNumber\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n    enterpriseid: msg.enterpriseId,\n}\n\nmsg.payload = {\n    \"key\": \"iiflVclId\",\n    \"value\": msg.payload.vclAccountNumber,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"enterpriseId\": msg.enterpriseId,\n    \"bankApplicationId\": msg.bankApplicationId,\n\n\n}\nmsg.logger = `Saving the VCL Id`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1906.6666717529297,
        "y": 1235.0000677108765,
        "wires": [
            [
                "71ea9f9662ea5f60"
            ]
        ]
    },
    {
        "id": "c8b5e6a2348998a9",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "saveVclId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2526.6666717529297,
        "y": 1235.0000677108765,
        "wires": []
    },
    {
        "id": "6a6db5e4b28754b4",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "uploadFileReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\n\nconst token = flow.get(\"enterpriseToken\")\n\nmsg.headers = {\n    \"content-type\": 'multipart/form-data',\n    Authorization: `Bearer ${token}`\n};\n\nmsg.url = `${ADMIN_URL}/api/file/upload`\nmsg.method = \"POST\"\nmsg.payload = {\n    \"file\": {\n        \"value\": msg.payload,\n        \"options\": {\n            \"filename\": 'IIFL Loan document'\n        }\n    },\n    \"filename\": 'IIFL Nach agreement'\n}\nmsg.logger = `Uploading the File Req`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1901,
        "y": 1756,
        "wires": [
            [
                "1b95ba6148a302f4"
            ]
        ]
    },
    {
        "id": "dd65e47e4dbc2b5c",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "uploadFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2411,
        "y": 1756,
        "wires": []
    },
    {
        "id": "85c0851b6a3d8635",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "saveP-NatchAgreementReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    enterpriseid: msg.enterpriseId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflNachAgreement\",\n    \"value\": msg.payload.key,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"enterpriseId\": msg.enterpriseId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\nmsg.logger = `saving the P-Natch Aggrement`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1941,
        "y": 1836,
        "wires": [
            [
                "e849726396d0223a"
            ]
        ]
    },
    {
        "id": "20ca18c921137e2c",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "saveLoanAgreement",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2660,
        "y": 1840,
        "wires": []
    },
    {
        "id": "bcfb72de21404a51",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "function 166",
        "func": "// console.log({file:msg.file})\nif(msg.file){\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 2800,
        "wires": [
            [
                "dfbc6425a7e4bb1f",
                "6acb8f12df15ba09"
            ]
        ]
    },
    {
        "id": "4e42473b0ed8941c",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "sendFilesToReaderReq",
        "func": "// msg.payload.documentType = \"BUSINESS_PAN\"\nconsole.log({payload: msg.payload})\n\nif(msg.documentType !== \"SELFIE\"){\n    for (let file of msg?.payload?.files) {\n        // console.log({file})\n        switch (msg?.payload?.documentType) {\n\n\n\n            case \"PERSONAL_PAN\": {\n\n                node.send({\n                    ...msg,\n                    tag: \"pan-front\",\n                    file: file,\n                    payload: {}\n                })\n                break\n            }\n\n            case \"BUSINESS_PAN\": {\n\n                node.send({\n                    ...msg,\n                    tag: \"pan-front\",\n                    file: file,\n                    payload: {}\n                })\n                break\n            }\n\n            case \"AADHAAR\": {\n\n                if (file.type === \"AADHAAR_FRONT\") {\n\n                    node.send({\n                        ...msg,\n                        tag: \"aadhaar-front\",\n                        file: file,\n                        payload: {}\n                    })\n                } else if (file.type === \"AADHAAR_BACK\") {\n                    console.log(\"aadhaar back\")\n                    node.send({\n                        ...msg,\n                        tag: \"aadhaar-back\",\n                        file: file,\n                        payload: {}\n                    })\n                }\n                break\n            }\n\n\n\n\n            default: {\n                // node.send({\n                //     ...msg,\n                //     file: \"\",\n                //     payload:{}\n                // })\n            }\n        }\n}\n// node.send({\n//     ...msg,\n//     file: file,\n//     // payload:{}\n//     // businessPartnerId: msg.businessPartnerId,\n//     // bankId: msg.bankId,\n//     // enterpriseId: msg.enterpriseId,\n//     // bankProductConfigId: msg.bankProductConfigId,\n//     // dealerCode : msg.dealerCode\n// })\n} else {\n    node.send({\n        ...msg,\n        tag: \"SELFIE\",\n        file: msg.payload[0],\n        payload: {}\n    })\n}\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 2800,
        "wires": [
            [
                "bcfb72de21404a51"
            ]
        ]
    },
    {
        "id": "dfbc6425a7e4bb1f",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "file",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2390,
        "y": 2800,
        "wires": []
    },
    {
        "id": "6acb8f12df15ba09",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "Setting fileID of a particular file",
        "func": "msg.fid = msg.file.fileId;\n\nmsg.method = \"GET\"\nmsg.url = `${env.get(\"GO_URL\")}/file/read/${msg.file.fileId}`;\nmsg.fileUrl = `${env.get(\"GO_URL\")}/file/read/${msg.file.fileId}`\nmsg.logger = `Reading the file whose fileId is ${msg.file.fileId}`;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 2900,
        "wires": [
            [
                "1a333eba2584e84e"
            ]
        ]
    },
    {
        "id": "c88fbd12b5063a29",
        "type": "base64",
        "z": "e862ba184c2a0edf",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 2300,
        "y": 2900,
        "wires": [
            [
                "a817291e74ce47da"
            ]
        ]
    },
    {
        "id": "a817291e74ce47da",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "detectMimeType",
        "func": "const signatures = {\n    JVBERi0: \"application/pdf\",\n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"application/vnd.openxmlformats-officedocument.\",\n    PK: \"application/zip\",\n};\n\n// console.log({signature:msg.file.fileType})\n\n\nlet fileName = msg.fid.split(\"-\");\nlet extension = msg.file.fileType.split(\"/\")[1];\n// let filePath = `${msg.LOCAL_PATH}/${fileName}.${extension}`;\n// const base64String = msg.payload;\n\n// for (let ext in signatures) {\n//     const base64Sig = base64String.slice(0, ext.length)\n//     if (base64Sig === ext) {\n//         fileName = msg.fid\n//         extension = getExtension(ext)\n//         filePath = `${msg.LOCAL_PATH}/${fileName}${msg.ind}.${extension}`\n//     }\n// }\n\nmsg.filename = `${fileName[fileName.length-1]}.${extension}`\n\n// console.log({fun:msg.filename})\n\n// msg.filePath = filePath\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 2980,
        "wires": [
            [
                "887c164b5f109a55",
                "820aa1a807543a25"
            ]
        ]
    },
    {
        "id": "887c164b5f109a55",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "document type",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "documentType",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2060,
        "y": 2960,
        "wires": []
    },
    {
        "id": "820aa1a807543a25",
        "type": "switch",
        "z": "e862ba184c2a0edf",
        "name": "switch by documentType",
        "property": "documentType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "KYC",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BANK_STATEMENT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SELFIE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 2090,
        "y": 3060,
        "wires": [
            [
                "96810d61d0205c7e"
            ],
            [],
            [
                "b12d63e003d57218"
            ]
        ]
    },
    {
        "id": "96810d61d0205c7e",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "uploadKycDocReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\n\n//set clientId and leadId to msg object\n// msg.clientId = clientId,\n// msg.leadId = msg.payload.leadId\n\nmsg.url = `${IIFL_URL}/api/clients/${clientId}/upload-document`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nconsole.log({file:msg.file,filename:msg.filename,tag:msg.tag})\nmsg.payload = {\n    \"tag\": msg.tag,//\"aadhaar-front\",\n    \"document\": {\n        \"fileName\": msg.filename,//\"sample.jpeg\",\n        \"base64\": `data:${msg.file.fileType};base64,${msg.payload}`\n    },\n    // \"isFaceMatchRequired\": false,\n    // \"isImageQualityRequired\": false,\n    // \"isMaskRequired\": false,\n    // \"isOCRNameMatchRequired\": false\n}\nmsg.logger = `uploading the KYC Doc`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 2980,
        "wires": [
            [
                "eb8782213c3e1fe2"
            ]
        ]
    },
    {
        "id": "2e81d79629b830a7",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "uploadKycDoc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2760,
        "y": 2980,
        "wires": []
    },
    {
        "id": "b12d63e003d57218",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "uploadSelfieReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\n\n//set clientId and leadId to msg object\n// msg.clientId = clientId,\n// msg.leadId = msg.payload.leadId\n\nmsg.url = `${IIFL_URL}/api/clients/${clientId}/selfie`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\n// console.log({file:msg.file,filename:msg.filename,tag:msg.tag})\nmsg.payload = {\n    \"doLiveliness\": true,\n    \"image\": {\n        \"fileName\": \"abc\",\n        \"filePath\": msg.payload,\n        \"fileType\": \".jpeg\",\n        \"storageType\": \"base64\"\n    }\n}\nmsg.logger = `Requesting to upload the Selfie `\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2340,
        "y": 3140,
        "wires": [
            [
                "acc4b8c250721c0a"
            ]
        ]
    },
    {
        "id": "0683ffa09f47c345",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "uploadSelfie",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2790,
        "y": 3120,
        "wires": []
    },
    {
        "id": "0549fd8252f10a97",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "AuthenticateBankUserReq",
        "func": "\nconst IIFL_BANK_ADMIN_EMAIL = env.get('IIFL_BANK_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": PASSWORD,\n    \"email\": IIFL_BANK_ADMIN_EMAIL\n\n}\nmsg.logger = `Authenticate Bank User`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 200,
        "wires": [
            [
                "d836656b6e6ac710"
            ]
        ]
    },
    {
        "id": "1f2be3c5985f6af6",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "saveBankToken",
        "func": "flow.set(\"bankToken\",msg.payload.idToken)\n// console.log({bankToken: msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 200,
        "wires": [
            [
                "8f00a375e9ce31dc"
            ]
        ]
    },
    {
        "id": "e7a51cb01c07fd78",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "initiateBureau",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst leadId = msg.leadId\n\n\nconst clientThirdPartyBankAccountDetailAssociationId = msg.payload.clientThirdPartyBankAccountDetailAssociationId\nmsg.url = `${IIFL_URL}/api/leads/${leadId}/bureaus`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nmsg.payload = {\n}\nmsg.logger = `Initiating the Bureau for the leadId ${leadId}`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 1800,
        "wires": [
            [
                "7b0f049fadadc6ec"
            ]
        ]
    },
    {
        "id": "67c907045b17adb5",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "initiateBankStatementAnalysis",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 1840,
        "wires": []
    },
    {
        "id": "c687ec77f5f09d2a",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "initiateBureauPush",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\n\nmsg.cibil = msg.payload\n\nmsg.url = `${IIFL_URL}/api/leads/${clientId}/bureaus`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nmsg.payload = {\n    \"source_name\": \"CIBIL_HARD_PULL\",\n    \"user_id\": \"63462343847\",\n    \"payload\": msg.cibil\n}\nmsg.logger = `Initiating the Bureau Push`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 136.6666717529297,
        "y": 2015.0000677108765,
        "wires": [
            [
                "628ce1a94fb34711"
            ]
        ]
    },
    {
        "id": "245c9e6dd211489a",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "initiateBankStatementAnalysis",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 2000,
        "wires": []
    },
    {
        "id": "31accac343cd672f",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "runningDecision",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\n\nmsg.cibil = msg.payload\n\n\nmsg.url = `${IIFL_URL}/v1/sentinel/decideCompound`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nmsg.payload = {\n    \"reference_id\": \"a219d937-ef0e-4dff-996c-56f86e159140\",//msg.payload.data.reference_id,\n    \"policy_version\": \"iifl_bl_compound_policy_v1.2\",\n    \"user_id\": \"2664\"\n}\nmsg.logger = `Running Decision`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 126.66667175292969,
        "y": 2095.0000677108765,
        "wires": [
            [
                "88c677f237a75a17"
            ]
        ]
    },
    {
        "id": "1f8a49f80aecc9a9",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "runningDecision",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 726.6666717529297,
        "y": 2095.0000677108765,
        "wires": []
    },
    {
        "id": "11b5aef11e069507",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "debug 313",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 1020,
        "wires": []
    },
    {
        "id": "52aee9d9625cb8e5",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "addBusinessDetails",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst leadId = msg.payload.leadId\n\n//set clientId and leadId to msg object\nmsg.clientId = msg.payload.clientId,\nmsg.leadId = msg.payload.leadId\n\nmsg.url = `${IIFL_URL}/api/leads/${leadId}/add-business`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\nlet registrationDateTemp = msg.gstIn.data.rgdt.split(\"/\")\nlet registrationDate = `${registrationDateTemp[2]}-${registrationDateTemp[1]}-${registrationDateTemp[0]}`\nconst aadhar = msg.data.documents.filter((document) => document.documentType ===\"AADHAAR\");\n\nconst pan = msg.data.documents.filter((document) => document.documentType === \"PERSONAL_PAN\");\nconst name = aadhar[0].data.name.split(\" \")\nmsg.payload = {\n    \"businessType\": \"Private\",//msg.gstIn.data.ctb,//\n    \"dateOfEstablishment\": \"2022-12-01\",//new Date(registrationDate).toISOString().split(\"T\")[0],//\n    \"name\": msg.data.businessPartner.name,//\"Ram Enterprises\"\n}\nmsg.logger = `Adding the business Details for the leadId ${leadId}`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1280,
        "wires": [
            [
                "7d04bfbb1040993c",
                "74390f42e895949c"
            ]
        ]
    },
    {
        "id": "b8a664a0567fe070",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "addBusinessDetails",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1280,
        "wires": []
    },
    {
        "id": "8bd9af308bf4b13b",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "approveVclReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${BASE_URL}/api/virtual-credit-line/${msg.vclAccountNumber}/approve`\nmsg.method = \"PUT\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {}\nmsg.logger = `Approving the VCL Req`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1906.6666717529297,
        "y": 1315.0000677108765,
        "wires": [
            [
                "e72faaa83aa76b12"
            ]
        ]
    },
    {
        "id": "a7cd6861c8805d6a",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "approveVcl",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2536.6666717529297,
        "y": 1315.0000677108765,
        "wires": []
    },
    {
        "id": "c7c0929ca471418c",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "mockCreateClient",
        "func": "msg.payload = {\n    clientId: 2762,\n    leadId: 1707\n}\n\nconsole.log(\"mock\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1140,
        "wires": [
            [
                "6a81b44b6aab4531"
            ]
        ]
    },
    {
        "id": "7d04bfbb1040993c",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "debug 339",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 1320,
        "wires": []
    },
    {
        "id": "30b1b19549cfd900",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "generateLeadDocReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${IIFL_URL}/api/leads/${msg.leadId}/document/generate/IIFL%20Loan%20Agreement`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {\n   \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 4500,
        "wires": [
            [
                "2e969ac71f415e88"
            ]
        ]
    },
    {
        "id": "2e969ac71f415e88",
        "type": "http request",
        "z": "e862ba184c2a0edf",
        "name": "generateLeadDoc",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1930,
        "y": 4500,
        "wires": [
            [
                "3359b5da2ce34ecc",
                "fc07e6400374fb0e"
            ]
        ]
    },
    {
        "id": "3359b5da2ce34ecc",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "generateLeadDoc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 4500,
        "wires": []
    },
    {
        "id": "fc07e6400374fb0e",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "downloadLeadDocReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nmsg.docId = msg.payload.id \n// msg.docId = 3049\nmsg.url = `${IIFL_URL}/api/document/download/${msg.docId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {\n   \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 4580,
        "wires": [
            [
                "9b893574bcd22641"
            ]
        ]
    },
    {
        "id": "9b893574bcd22641",
        "type": "http request",
        "z": "e862ba184c2a0edf",
        "name": "downloadLeadDoc",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1930,
        "y": 4580,
        "wires": [
            [
                "c138449a2ebe26c2",
                "687c14f4042cafe9"
            ]
        ]
    },
    {
        "id": "c138449a2ebe26c2",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "downloadLeadDoc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2250,
        "y": 4580,
        "wires": []
    },
    {
        "id": "687c14f4042cafe9",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "uploadFileReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\n\nconst token = flow.get(\"enterpriseToken\")\n\nmsg.headers = {\n    \"content-type\": 'multipart/form-data',\n    Authorization: `Bearer ${token}`\n};\n\nmsg.url = `${ADMIN_URL}/api/file/upload`\nmsg.method = \"POST\"\nmsg.payload = {\n    \"file\": {\n        \"value\": msg.payload,\n        \"options\": {\n            \"filename\": 'IIFL Loan document'\n        }\n    },\n    \"filename\": 'IIFL Loan document'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 4680,
        "wires": [
            [
                "10114578dca5e05e"
            ]
        ]
    },
    {
        "id": "10114578dca5e05e",
        "type": "http request",
        "z": "e862ba184c2a0edf",
        "name": "uploadFile",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1870,
        "y": 4680,
        "wires": [
            [
                "4f573f2487c8db4e",
                "91aef316201f5a55"
            ]
        ]
    },
    {
        "id": "4f573f2487c8db4e",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "uploadFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2110,
        "y": 4680,
        "wires": []
    },
    {
        "id": "91aef316201f5a55",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "saveLoanAgreementReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/service`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    enterpriseid: msg.enterpriseId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflLoanAgreement\",\n    \"value\": msg.payload.key,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"enterpriseId\": msg.enterpriseId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 4760,
        "wires": [
            [
                "5cb66a5765855e61"
            ]
        ]
    },
    {
        "id": "5cb66a5765855e61",
        "type": "http request",
        "z": "e862ba184c2a0edf",
        "name": "saveLoanAgreement",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1980,
        "y": 4760,
        "wires": [
            [
                "a976639416f9951e"
            ]
        ]
    },
    {
        "id": "a976639416f9951e",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "saveLoanAgreement",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2240,
        "y": 4760,
        "wires": []
    },
    {
        "id": "59a3bec5e01f7350",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "initiateEsignReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${IIFL_URL}/api/leads/${msg.leadId}/esign/init`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload =\n{\n    \"clientId\": msg.clientId,\n    \"esignKey\": \"bl-esign\",\n    \"signingType\": \"ELECTRONIC\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 4840,
        "wires": [
            [
                "eac8e5ae24b0a18d"
            ]
        ]
    },
    {
        "id": "eac8e5ae24b0a18d",
        "type": "http request",
        "z": "e862ba184c2a0edf",
        "name": "initiateEsign",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1950,
        "y": 4840,
        "wires": [
            [
                "93d0bf2c7fb514ac",
                "fd0b46c9b89daba5"
            ]
        ]
    },
    {
        "id": "93d0bf2c7fb514ac",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "initiateEsign",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2270,
        "y": 4840,
        "wires": []
    },
    {
        "id": "fd0b46c9b89daba5",
        "type": "function",
        "z": "e862ba184c2a0edf",
        "name": "saveEsignIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/service`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    enterpriseid: msg.enterpriseId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflEsignId\",\n    \"value\": msg.payload.esignId,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"enterpriseId\": msg.enterpriseId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 4900,
        "wires": [
            [
                "70bd574002b1c552"
            ]
        ]
    },
    {
        "id": "70bd574002b1c552",
        "type": "http request",
        "z": "e862ba184c2a0edf",
        "name": "saveEsignId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2010,
        "y": 4900,
        "wires": [
            [
                "3a62e70219d905c7"
            ]
        ]
    },
    {
        "id": "3a62e70219d905c7",
        "type": "debug",
        "z": "e862ba184c2a0edf",
        "name": "saveEsignId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2270,
        "y": 4900,
        "wires": []
    },
    {
        "id": "62d6afd237ff2978",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "name": "Authenticate Enterprise User",
        "x": 500,
        "y": 120,
        "wires": [
            [
                "b30e5326a3d9de0a",
                "2a3129989dd8925d"
            ],
            []
        ]
    },
    {
        "id": "d836656b6e6ac710",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "name": "Authenticate Bank User",
        "x": 470,
        "y": 200,
        "wires": [
            [
                "1f2be3c5985f6af6"
            ],
            []
        ]
    },
    {
        "id": "26f094006d9353ce",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "name": "Authenticate IIFL User",
        "x": 460,
        "y": 320,
        "wires": [
            [
                "53db0435b28a4004",
                "ce3810d4de902bb3"
            ],
            []
        ]
    },
    {
        "id": "28bceee3e8423ddc",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "name": "getBankProductKeyByReq",
        "x": 480,
        "y": 420,
        "wires": [
            [
                "ca28f6d078b2c5d0",
                "fc93f406280c4c88"
            ],
            []
        ]
    },
    {
        "id": "dcb5927c7ecb96cd",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "name": "getPendingBankApplications",
        "x": 500,
        "y": 540,
        "wires": [
            [
                "e58c70acdb3bd42c",
                "88a4daab961a5be3"
            ],
            []
        ]
    },
    {
        "id": "b95fc8352e3c0a44",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "name": "getDealerCode",
        "x": 460,
        "y": 700,
        "wires": [
            [
                "c51b6149e118f7a1",
                "6f2083b3fc6e49ac"
            ],
            []
        ]
    },
    {
        "id": "12ffb7b73ff547ac",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "name": "getBusinessPartnerData",
        "x": 510,
        "y": 780,
        "wires": [
            [
                "3bb79acc18911471"
            ],
            []
        ]
    },
    {
        "id": "05eb1d8aa144a6b6",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "name": "createClient",
        "x": 450,
        "y": 1080,
        "wires": [
            [
                "480153109fb49902",
                "c7c0929ca471418c"
            ],
            []
        ]
    },
    {
        "id": "2113690271a38a7c",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "name": "addClientAddress",
        "x": 470,
        "y": 1200,
        "wires": [
            [
                "de92525e4557de26"
            ],
            []
        ]
    },
    {
        "id": "74390f42e895949c",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "name": "AddBusinessDetails",
        "x": 460,
        "y": 1260,
        "wires": [
            [
                "b8a664a0567fe070"
            ],
            []
        ]
    },
    {
        "id": "324c2d77c29f89d6",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "name": "addthirdPartyAccount ",
        "x": 460,
        "y": 1420,
        "wires": [
            [
                "31df13da7dd91818",
                "608ce5f1eebd411f"
            ],
            []
        ]
    },
    {
        "id": "0fe92381336f2586",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "name": "activateThirdPartyAccount",
        "x": 490,
        "y": 1480,
        "wires": [
            [
                "6b0c284699a1702e",
                "7f0030d0fc5e5713"
            ],
            []
        ]
    },
    {
        "id": "a67a1dd7f3aceb37",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "d": true,
        "name": "InitiateBankStatementAnalysis",
        "x": 490,
        "y": 1600,
        "wires": [
            [
                "3ed5d1e583cc395a",
                "3256d18bea3d6210"
            ],
            []
        ]
    },
    {
        "id": "999f048842f7dbf7",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "name": "saveClientId",
        "x": 470,
        "y": 1720,
        "wires": [
            [
                "3a2c84a9fdf0489e",
                "75a635fe73c056ba"
            ],
            []
        ]
    },
    {
        "id": "7b0f049fadadc6ec",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "name": "InitiateBankStatementAnalysis",
        "x": 510,
        "y": 1820,
        "wires": [
            [
                "67c907045b17adb5"
            ],
            []
        ]
    },
    {
        "id": "a47549adb942769f",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "d": true,
        "name": "saveLeadId",
        "x": 490,
        "y": 1900,
        "wires": [
            [
                "cce5f29a30aa312c",
                "995d7189aec07b92"
            ],
            []
        ]
    },
    {
        "id": "628ce1a94fb34711",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "d": true,
        "name": "InitiateBankStatementAnalysis",
        "x": 510,
        "y": 2000,
        "wires": [
            [
                "245c9e6dd211489a",
                "31accac343cd672f"
            ],
            []
        ]
    },
    {
        "id": "88c677f237a75a17",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "d": true,
        "name": "runningDecision",
        "x": 480,
        "y": 2100,
        "wires": [
            [
                "1f8a49f80aecc9a9",
                "995d7189aec07b92"
            ],
            []
        ]
    },
    {
        "id": "db5acb95df831f83",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "name": "initiateVCL",
        "x": 2190,
        "y": 1160,
        "wires": [
            [
                "99d74ffb269dfd44",
                "0ead3f0d4fadbb20"
            ],
            []
        ]
    },
    {
        "id": "71ea9f9662ea5f60",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "name": "saveVCLId",
        "x": 2210,
        "y": 1220,
        "wires": [
            [
                "c8b5e6a2348998a9",
                "8bd9af308bf4b13b"
            ],
            []
        ]
    },
    {
        "id": "e72faaa83aa76b12",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "name": "approveVCL",
        "x": 2210,
        "y": 1300,
        "wires": [
            [
                "a7cd6861c8805d6a",
                "48599ff2f4e761b3"
            ],
            []
        ]
    },
    {
        "id": "cfc986dbd378f0d6",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "name": "initiateNACH",
        "x": 2390,
        "y": 1400,
        "wires": [
            [
                "e27b526b4ba68ea5",
                "6a900b52d0d5232a"
            ],
            []
        ]
    },
    {
        "id": "08d9af9a06f5fb1e",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "name": "saveNACHId",
        "x": 2170,
        "y": 1480,
        "wires": [
            [
                "04d02a9810d6ac11",
                "e86fa6654ddd8af0"
            ],
            []
        ]
    },
    {
        "id": "22de1d0b3d5db4cd",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "name": "generateP-NachDoc",
        "x": 2380,
        "y": 1560,
        "wires": [
            [
                "54f5cf9bc7a4aa64",
                "3bc3b7c2fb005ade"
            ],
            []
        ]
    },
    {
        "id": "44698a743940d456",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "name": "downloadP-NathDoc",
        "x": 2240,
        "y": 1680,
        "wires": [
            [
                "c7258c91c1de1b3c",
                "6a6db5e4b28754b4"
            ],
            []
        ]
    },
    {
        "id": "1b95ba6148a302f4",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "name": "uploadFile",
        "x": 2170,
        "y": 1760,
        "wires": [
            [
                "dd65e47e4dbc2b5c",
                "85c0851b6a3d8635"
            ],
            []
        ]
    },
    {
        "id": "e849726396d0223a",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "name": "saveP-NatchAggrement",
        "x": 2290,
        "y": 1840,
        "wires": [
            [
                "20ca18c921137e2c"
            ],
            []
        ]
    },
    {
        "id": "1a333eba2584e84e",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "name": "readFile",
        "x": 2120,
        "y": 2880,
        "wires": [
            [
                "c88fbd12b5063a29"
            ],
            []
        ]
    },
    {
        "id": "eb8782213c3e1fe2",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "name": "uploadKYCDoc",
        "x": 2560,
        "y": 2980,
        "wires": [
            [
                "2e81d79629b830a7"
            ],
            []
        ]
    },
    {
        "id": "acc4b8c250721c0a",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "e862ba184c2a0edf",
        "name": "uploadSelfie",
        "x": 2550,
        "y": 3140,
        "wires": [
            [
                "0683ffa09f47c345"
            ],
            []
        ]
    },
    {
        "id": "1a802ed82bfdfbf0",
        "type": "inject",
        "z": "86c36504f6c40918",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 40,
        "wires": [
            [
                "f818bd061a98b69f"
            ]
        ]
    },
    {
        "id": "f818bd061a98b69f",
        "type": "function",
        "z": "86c36504f6c40918",
        "name": "Set env variables",
        "func": "\n// let v8 = global.get(\"v8\");\n// const totalHeapSize = v8.getHeapStatistics().total_available_size;\n// let totalHeapSizeInMB = (totalHeapSize / 1024 / 1024).toFixed(2)\n// node.warn(\"V8 Total Heap Size \"+totalHeapSize+\" bytes\");\n\nconst ENV_VARIABLES = new Map();\n\nENV_VARIABLES.set('PAYLATER_URL', \"https://actyv-platform-paylater-service-v1.qa.actyv.com\")\nENV_VARIABLES.set('GO_URL', \"https://actyv-platform-go-service.qa.actyv.com\")\nENV_VARIABLES.set('ADMIN_URL', \"https://actyv-platform-admin-service.qa.actyv.com\")\n\nENV_VARIABLES.set('BUSINESS_IDENTIFIER', \"ABBCB2066P\")\nENV_VARIABLES.set('BUSINESS_TYPE', \"ENTERPRISE\")\nENV_VARIABLES.set('BANK_KEY', \"msl\")\nENV_VARIABLES.set('X_ACTYV_API_CONFIG_KEY', \"8HhkIWzVMSnSgvlhxr\")\nENV_VARIABLES.set('BANK_UNIQUE_IDENTIFIER', \"AASCA2089A\")\nENV_VARIABLES.set('BASE_URL', \"https://iifl-atlas-uat.finfluxtrial.io\")\nENV_VARIABLES.set('tenant_id', \"iifl-qa\")\nENV_VARIABLES.set('BANK_PRODUCT_KEY', \"axis-sabari-product\")\n\nENV_VARIABLES.set('BNPL_USER', \"surajkumar@aplapollo.com\")\nENV_VARIABLES.set('BNPL_USER_PASSWORD', \"890ioP@12\")\nENV_VARIABLES.set('IIFL_USER', \"demoUser2\")\nENV_VARIABLES.set('IIFL_USER_PASSWORD', \"fc895Tbr2i&w@\")\n\nglobal.set('envVariables', ENV_VARIABLES)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 40,
        "wires": [
            [
                "67865d4336e8638e"
            ]
        ]
    },
    {
        "id": "67865d4336e8638e",
        "type": "function",
        "z": "86c36504f6c40918",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst CKPL_ENTERPRISE_ADMIN_EMAIL = env.get('CKPL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": CKPL_ENTERPRISE_ADMIN_EMAIL\n\n}\nmsg.logger = `Authenticate Enterprise User`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 100,
        "wires": [
            [
                "d0048f207ab4ca71"
            ]
        ]
    },
    {
        "id": "d0048f207ab4ca71",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "86c36504f6c40918",
        "name": "Authenticate Enterprise User",
        "x": 480,
        "y": 100,
        "wires": [
            [
                "11280310ba90f8bc"
            ],
            []
        ]
    },
    {
        "id": "11280310ba90f8bc",
        "type": "function",
        "z": "86c36504f6c40918",
        "name": "saveEnterpriseToken",
        "func": "flow.set(\"enterpriseToken\",msg.payload.idToken)\n// console.log({enterpriseToken: msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 100,
        "wires": [
            [
                "38c47f635edc75db"
            ]
        ]
    },
    {
        "id": "38c47f635edc75db",
        "type": "function",
        "z": "86c36504f6c40918",
        "name": "AuthenticateBankUserReq",
        "func": "\nconst IIFL_BANK_ADMIN_EMAIL = env.get('IIFL_BANK_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": PASSWORD,\n    \"email\": IIFL_BANK_ADMIN_EMAIL\n\n}\nmsg.logger = `Authenticate Bank User`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 180,
        "wires": [
            [
                "7e4db61ff4378c53"
            ]
        ]
    },
    {
        "id": "7e4db61ff4378c53",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "86c36504f6c40918",
        "name": "Authenticate Bank User",
        "x": 450,
        "y": 180,
        "wires": [
            [
                "abd03f7ca0c4c169"
            ],
            []
        ]
    },
    {
        "id": "abd03f7ca0c4c169",
        "type": "function",
        "z": "86c36504f6c40918",
        "name": "saveBankToken",
        "func": "flow.set(\"bankToken\",msg.payload.idToken)\n// console.log({bankToken: msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 180,
        "wires": [
            [
                "44efd26d2d7787ee"
            ]
        ]
    },
    {
        "id": "44efd26d2d7787ee",
        "type": "function",
        "z": "86c36504f6c40918",
        "name": "getBankProductKeyReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY_CKPL_IIFL = env.get('BANK_PRODUCT_KEY_CKPL_IIFL')\n\nmsg.url = `${GO_URL}/bank-application-config/key/${BANK_PRODUCT_KEY_CKPL_IIFL}`\nmsg.method = \"GET\"\n\nmsg.logger = `Get Bank product Key by req`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 280,
        "wires": [
            [
                "914656a05af97505"
            ]
        ]
    },
    {
        "id": "914656a05af97505",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "86c36504f6c40918",
        "name": "getBankProductKeyByReq",
        "x": 460,
        "y": 280,
        "wires": [
            [
                "5967062bd3057d4d",
                "101adcca1845f7e3"
            ],
            [
                "5967062bd3057d4d"
            ]
        ]
    },
    {
        "id": "101adcca1845f7e3",
        "type": "function",
        "z": "86c36504f6c40918",
        "name": "getPendingBankApplicationsReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY_CKPL_IIFL = env.get('BANK_PRODUCT_KEY_CKPL_IIFL')\nconst IIFL_BANK_APPLICATION_STATUS = env.get(\"IIFL_BANK_APPLICATION_STATUS\")\n\nmsg.bankId = msg.payload.bank\nmsg.enterpriseId = msg.payload.allowedEnterprises[0]\n\nmsg.url = `${GO_URL}/bank-application?bankApplicationConfigKey=${BANK_PRODUCT_KEY_CKPL_IIFL}&applicationStatus=${IIFL_BANK_APPLICATION_STATUS}`\nmsg.method = \"GET\"\n\nmsg.logger = `Get Pending bank Applications`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 400,
        "wires": [
            [
                "945597ebc4385802"
            ]
        ]
    },
    {
        "id": "945597ebc4385802",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "86c36504f6c40918",
        "name": "getPendingBankApplications",
        "x": 480,
        "y": 400,
        "wires": [
            [
                "477f3f9a7acf5abf",
                "aa7e38622233440e"
            ],
            [
                "477f3f9a7acf5abf"
            ]
        ]
    },
    {
        "id": "ef12a13270843fe5",
        "type": "function",
        "z": "86c36504f6c40918",
        "name": "mockBankApplication",
        "func": "msg.payload = [\n    {\n        \"_id\": \"63ff1b2f723b070cae7c09c0\",\n        \"createdOn\": \"Tue, 21 Feb 2023 11:32:41 GMT\",\n        \"createdBy\": \"63750a1995a6a16f696d2f7b\",\n        \"updatedOn\": \"Tue, 21 Feb 2023 11:32:42 GMT\",\n        \"isDeleted\": false,\n        \"bankApplicationDocumentConfigKey\": \"63cfbc85edee8f7eee6f3d6e\",\n        \"bankName\": \"Axis Bank Limited\",\n        \"productFamily\": \"PAYLATER\",\n        \"productType\": \"PAYLATER\",\n        \"status\": \"DOCUMENT_CAPTURE\",\n        \"businessPartnerName\": \"Shri Durga Metalex\",\n        \"businessPartnerID\": \"63750a19ca608a344ae556d6\",\n        \"productGranularity\": \"product\",\n        \"bankProductConfigId\": \"64363fc74516a3ea3c8b86d9\",\n        \"bankId\": \"642d3bc0ebc96f31f3daebe9\",\n        \"bankApplicationLabel\": \"Continue Bank Application\",\n        \"bankApplicationURL\": \"www.google.com\",\n        \"enterpriseId\": \"637670c7f8e9564da0dea656\",\n        \"approvedLimit\": null,\n        \"availableLimit\": null\n    }\n]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 480,
        "wires": [
            [
                "aa7e38622233440e"
            ]
        ]
    },
    {
        "id": "aa7e38622233440e",
        "type": "function",
        "z": "86c36504f6c40918",
        "name": "LoopOverBankApplication",
        "func": "\nfor(let bankApplication of msg.payload){\n    // console.log({bankApplication})\n    node.send({\n        businessPartnerId: bankApplication.businessPartnerID,\n        bankId: bankApplication.bankId,\n        enterpriseId: bankApplication.enterpriseId,\n        bankProductConfigId: bankApplication.bankProductConfigId,\n        bankApplicationId : bankApplication._id,\n        dataPartDone: \"false\",\n        bankApplication\n    })\n}\n\n// return msg;\n\n/**\n *  \"_id\": \"63f4abd94f0acc5aa73d9e46\",\n        \"createdOn\": \"Tue, 21 Feb 2023 11:32:41 GMT\",\n        \"createdBy\": \"63750a1995a6a16f696d2f7b\",\n        \"updatedOn\": \"Tue, 21 Feb 2023 11:32:42 GMT\",\n        \"isDeleted\": false,\n        \"bankApplicationDocumentConfigKey\": \"63cfbc85edee8f7eee6f3d6e\",\n        \"bankName\": \"Axis Bank Limited\",\n        \"productFamily\": \"PAYLATER\",\n        \"productType\": \"PAYLATER\",\n        \"status\": \"DOCUMENT_CAPTURE\",\n        \"businessPartnerName\": \"Shri Durga Metalex\",\n        \"businessPartnerID\": \"63750a19ca608a344ae556d6\",\n        \"productGranularity\": \"product\",\n        \"bankProductConfigId\": \"63cfbe250c729962c86ec8a7\",\n        \"bankId\": \"63c8fa075f1c5afda77bae5e\",\n        \"bankApplicationLabel\": \"Continue Bank Application\",\n        \"bankApplicationURL\": \"www.google.com\",\n        \"enterpriseId\": \"638c73f16ea52ce57470c1a9\",\n        \"approvedLimit\": null,\n        \"availableLimit\": null\n */",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 480,
        "wires": [
            [
                "c7d183b50e4b382d",
                "a73a7156bbe66c62"
            ]
        ]
    },
    {
        "id": "5967062bd3057d4d",
        "type": "debug",
        "z": "86c36504f6c40918",
        "name": "bankProductConfig",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 280,
        "wires": []
    },
    {
        "id": "477f3f9a7acf5abf",
        "type": "debug",
        "z": "86c36504f6c40918",
        "name": "pendingBankApplications",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 400,
        "wires": []
    },
    {
        "id": "c7d183b50e4b382d",
        "type": "debug",
        "z": "86c36504f6c40918",
        "name": "bankApplication",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 480,
        "wires": []
    },
    {
        "id": "a5ee59f7e985da77",
        "type": "debug",
        "z": "86c36504f6c40918",
        "name": "dealerCode",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 540,
        "wires": []
    },
    {
        "id": "842b6e230e6daa5a",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "86c36504f6c40918",
        "name": "getDealerCode",
        "x": 440,
        "y": 560,
        "wires": [
            [
                "a5ee59f7e985da77",
                "7911a2d858e58ead"
            ],
            [
                "a5ee59f7e985da77"
            ]
        ]
    },
    {
        "id": "a73a7156bbe66c62",
        "type": "function",
        "z": "86c36504f6c40918",
        "name": "getDealerCodeReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/business-relationship/${msg.businessPartnerId}/${msg.enterpriseId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`\n}\nmsg.logger = `getting the dealer code for the business Partner ${msg.businessPartnerId}`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 560,
        "wires": [
            [
                "842b6e230e6daa5a"
            ]
        ]
    },
    {
        "id": "7911a2d858e58ead",
        "type": "function",
        "z": "86c36504f6c40918",
        "name": "getBusinessPartnerDataReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.enterpriseBankAccountDetails = {\n    accountNo: msg.payload[0]?.bankAccountNumber,\n    ifsc: msg.payload[0]?.bankIFSC,\n    bankName: msg.payload[0]?.bankName\n}\n\nmsg.dealerCode = msg.payload.identifierByParent\n\n\nmsg.url = `${GO_URL}/business-partner/data/${msg.businessPartnerId}`\n\nmsg.headers = {\n    \"x-actyv-api-config-key\" : X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.method = \"GET\"\n\nmsg.logger = `Requesting the business Partner Data for the business Partner ${msg.businessPartnerId}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 640,
        "wires": [
            [
                "1b59aacba394a864"
            ]
        ]
    },
    {
        "id": "1b59aacba394a864",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "86c36504f6c40918",
        "name": "getBusinessPartnerData",
        "x": 490,
        "y": 640,
        "wires": [
            [
                "b50a3b32208f376c",
                "4c97fc27f60ee04d"
            ],
            [
                "b50a3b32208f376c"
            ]
        ]
    },
    {
        "id": "b50a3b32208f376c",
        "type": "debug",
        "z": "86c36504f6c40918",
        "name": "businessPartnerData",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 640,
        "wires": []
    },
    {
        "id": "4c97fc27f60ee04d",
        "type": "function",
        "z": "86c36504f6c40918",
        "name": "storeBPdataToData",
        "func": "msg.data = msg.payload\n// let bankStatement = msg.payload.documents.filter((doc) => doc.documentType === \"BANK_STATEMENT\").sort((a, b) => b.data.statementdetails.statementAccounts[0].xnsEndDate - a.data.statementdetails.statementAccounts[0].xnsEndDate)\n// console.log({bankStatement:bankStatement})\n// let data = JSON.parse(msg.payload.documents)\nlet gstin = msg.data.documents.filter((doc)=>doc.documentType === \"GSTIN\")\nmsg.gstIn = gstin[0];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 740,
        "wires": [
            [
                "698858e734c6bd07"
            ]
        ]
    },
    {
        "id": "698858e734c6bd07",
        "type": "function",
        "z": "86c36504f6c40918",
        "name": "getUniqueIdentifier",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/find-field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"hdfc_deviceId\",\n\n    \"bankId\": msg.bankId\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "a218d0f67b940ac8",
        "type": "function",
        "z": "86c36504f6c40918",
        "name": "getVCLIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/find-field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"hdfc_deviceId\",\n   \n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "fb80bc675b0be3c1",
        "type": "inject",
        "z": "43b58765f1bba507",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 320,
        "wires": [
            [
                "dc0ca47691b80e23"
            ]
        ]
    },
    {
        "id": "dc0ca47691b80e23",
        "type": "function",
        "z": "43b58765f1bba507",
        "name": "function 245",
        "func": "msg.data = {\n    \"Salutation\": \"\",\n    \"First_Name\": \"Sreejith\",\n    \"Last_Name\": \"Krishnadas\",\n    \"First_Name_Edit\": \"Sreejith\",\n    \"Last_Name_Edit\": \"Krishnadas\",\n    \"Applicant_Type\": \"P\",\n    \"Gender\": \"F\",\n    \"Gender_Edit\": \"F\",\n    \"Date_Of_Birth\": \"2021-06-23\",\n    \"Date_Of_Birth_Edit\": \"2021-06-23\",\n    \"Age\": \"\",\n    \"Constitution\": \"16\",\n    \"Product\": \"P\",\n    \"asset_type\": \"\",\n    \"Asset_Category\": \"\",\n    \"Asset_Make\": \"\",\n    \"Asset_Model\": \"\",\n    \"Asset_Cost\": \"\",\n    \"Asset_Manufacturer\": \"\",\n    \"Margin_Money\": \"\",\n    \"Loan_Amount\": \"UcKQu/3K1nLRzm2WZSev5gUpygvj9VDWKP3cm9nCDwI3jsUgYJ6glwmYLfmmWzgq\",\n    \"Tenure_in_Months\": \"UcKQu/3K1nLRzm2WZSev5p0wrQrz9SQhIFb206B45h63iJ9doohKBtEQpHI3Xi0H\",\n    \"EMI\": \"\",\n    \"DSA\": \"25652\",\n    \"CONSENT_TO_CALL\": \"NA\",\n    \"Educational_Qualification\": \"GRAD\",\n    \"No_of_Dependent\": \"2\",\n    \"PAN_AC_No\": \"AAIPM3854E\",\n    \"Driving_License_Number\": \"\",\n    \"Sales_Promotion\": \"PL-SAL-NRI\",\n    \"Scheme\": \"4\",\n    \"Priority\": \"CCPA\",\n    \"Address_Type_Resi\": \"CURRES\",\n    \"Address1_Resi\": \"ASCRA TECHNOLOGIES\",\n    \"Address2_Resi\": \"515 RUPA SOLITAIRE MILLENNIUM\",\n    \"Address3_Resi\": \"HAPE\",\n    \"Landmark_Resi\": \"\",\n    \"City_Resi\": \"474\",\n    \"Pin_Code_Resi\": \"400094\",\n    \"State_Resi\": \"1\",\n    \"Country_Resi\": \"1\",\n    \"STD_Code_Resi\": \"\",\n    \"Phone1_Resi\": \"\",\n    \"Mobile1_Resi\": \"9969359366\",\n    \"Email_Resi\": \"uksreejith1992@gmail.com\",\n    \"Address_Type_Resi_Edit\": \"CURRES\",\n    \"Address1_Resi_Edit\": \"ASCRA TECHNOLOGIES\",\n    \"Address2_Resi_Edit\": \"515 RUPA SOLITAIRE MILLENNIUM\",\n    \"Address3_Resi_Edit\": \"HAPE\",\n    \"Landmark_Resi_Edit\": \"\",\n    \"City_Resi_Edit\": \"474\",\n    \"Pin_Code_Resi_Edit\": \"400096\",\n    \"State_Resi_Edit\": \"1\",\n    \"Country_Resi_Edit\": \"1\",\n    \"STD_Code_Resi_Edit\": \"\",\n    \"Phone1_Resi_Edit\": \"\",\n    \"Mobile1_Resi_Edit\": \"9969359366\",\n    \"Mobile2_Resi_Edit\": \"\",\n    \"Email_Resi_Edit\": \"uksreejith1992@gmail.com\",\n    \"Year_at_Current_Address\": \"1973\",\n    \"Mailing_Address_Resi\": \"Y\",\n    \"Year_at_City\": \"1973\",\n    \"Employer_Name\": \"142890\",\n    \"Employer_Name_other\": \"\",\n    \"Address_Type_Work\": \"OFFICE\",\n    \"Address1_Work\": \"rKycniJhYf\",\n    \"Address2_Work\": \"8Vld0w4H7i\",\n    \"Landmark_Work\": \"9wQ2UlMkFh\",\n    \"City_Work\": \"474\",\n    \"Pin_Code_Work\": \"777726\",\n    \"State_Work\": \"1\",\n    \"Country_Work\": \"1\",\n    \"STD_Code_Work\": \"\",\n    \"Phone1_Work\": \"0225643278\",\n    \"Mobile1_Work\": \"9815596214\",\n    \"Mailing_Address_Work\": \"N\",\n    \"indv_corp\": \"I\",\n    \"product_category\": \"PERSONAL\",\n    \"Sales_Executive_code\": \"\",\n    \"Start_Date_and_Time\": \"\",\n    \"Final_Submit_Date_and_Time\": \"\",\n    \"Aadhar\": \"\",\n    \"Voter_iD\": \"\",\n    \"Driving_License\": \"\",\n    \"Passport_no\": \"E2345678\",\n    \"Preapproved_Amount\": \"\",\n    \"Monthly_take_home_Salary\": \"50000\",\n    \"Proposed_EMI\": \"UcKQu/3K1nLRzm2WZSev5kUTGEh8/JfRyZz1CyINORrBsrAGWkuuNJxQY3jh29qH\",\n    \"Profession\": \"\",\n    \"CustomerID\": \"\",\n    \"Account_No\": \"\",\n    \"cibil_chk_done\": \"N\",\n    \"existing_customer\": \"N\",\n    \"Los_AgreementID\": \"\",\n    \"Ref_No\": \"\",\n    \"request_time\": \"2022/01/19 10:29:26 AM\",\n    \"deviceId\": \"FinTech_Decimal190122101038\",\n    \"UniqueKey\": \"HDFCMOBAPPU9Z60M5RMX\",\n    \"Branch\": \"214\",\n    \"Bank_Name\": \"\",\n    \"Bank_Branch\": \"\",\n    \"Account_Type\": \"\",\n    \"Years_held\": \"\",\n    \"Filler1\": \"Android\",\n    \"Filler2\": \"\",\n    \"Filler3\": \"\",\n    \"Filler4\": \"\",\n    \"Filler5\": \"\",\n    \"residence_type_dap\": \"\",\n    \"total_work_experience_dap\": \"\",\n    \"applicant_description_dap\": \"\",\n    \"previous_year_profit_dap\": \"\",\n    \"latest_year_profit_dap\": \"\",\n    \"latest_year_depreciation_dap\": \"\",\n    \"latest_itr_audited_dap\": \"\",\n    \"afn_no\": \"\",\n    \"RM_code\": \"\",\n    \"SE_code\": \"\",\n    \"Branch_code\": \"474\",\n    \"year_at_city_c\": \"\",\n    \"Address3_Work\": \"\",\n    \"LGCode\": \"\",\n    \"employment_type\": \"E\",\n    \"Authorize\": \"Yes\",\n    \"PF\": \"UcKQu/3K1nLRzm2WZSev5kUTGEh8/JfRyZz1CyINORrBsrAGWkuuNJxQY3jh29qH\",\n    \"Promocode\": \"\",\n    \"IRR\": \"UcKQu/3K1nLRzm2WZSev5kUTGEh8/JfRyZz1CyINORrBsrAGWkuuNJxQY3jh29qH\",\n    \"BTFlag\": \"N\",\n    \"campaign_name\": \"\",\n    \"kyc\": \"\",\n    \"WinId_EmpId\": \"\",\n    \"Type\": \"\",\n    \"Lead_Id\": \"\",\n    \"offer_details\": \"\",\n    \"SalAcc\": \"Yes\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 320,
        "wires": [
            [
                "35d3a718cfbe8082"
            ]
        ]
    },
    {
        "id": "35d3a718cfbe8082",
        "type": "function",
        "z": "43b58765f1bba507",
        "name": "create csv",
        "func": "let str = \"\"\n\nconst data = msg.data\n\nfor(let key in data){\n    console.log({key,data:data[key]})\n    str = str + key + \",\" + data[key] +\"\\n\"\n}\nconsole.log({str})\nmsg.payload = str\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 320,
        "wires": [
            [
                "6ff423263b55ecd8"
            ]
        ]
    },
    {
        "id": "6ff423263b55ecd8",
        "type": "file",
        "z": "43b58765f1bba507",
        "name": "write file",
        "filename": "/Users/shravanpm/Downloads/txtfiles/validate partner.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 820,
        "y": 320,
        "wires": [
            [
                "9e85944963ccadf6"
            ]
        ]
    },
    {
        "id": "9e85944963ccadf6",
        "type": "debug",
        "z": "43b58765f1bba507",
        "name": "debug 590",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 420,
        "wires": []
    },
    {
        "id": "3e4da9511914fb92",
        "type": "function",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "AuthenticateBankUser",
        "func": "const DISTRIBUTOR = 'DISTRIBUTOR';\nmsg.discountType = msg?.req?.query.discountType || DISTRIBUTOR;\n\nconst BNPL_USER = env.get('BNPL_BANK_USER')\nconst BNPL_USER_PASSWORD = env.get('BNPL_BANK_PASSWORD')\n\nmsg.url = `${env.get('ACTYV_ADMIN_URL')}/api/user/authenticateUser`\nmsg.payload = {\n    email: BNPL_USER,\n    password: BNPL_USER_PASSWORD\n}\nmsg.method = \"post\"\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 100,
        "wires": [
            [
                "5373271070f828ff"
            ]
        ]
    },
    {
        "id": "5373271070f828ff",
        "type": "http request",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "AuthenticateBNPLUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 410,
        "y": 180,
        "wires": [
            [
                "1eb1b589339f8863"
            ]
        ]
    },
    {
        "id": "1eb1b589339f8863",
        "type": "function",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "saveBankToken",
        "func": "flow.set(\"bankToken\",msg.payload.idToken)\n\nconst GO_URL = env.get('GO_URL');\nconst BANK_KEY = env.get(\"BANK_KEY\")\n\nmsg.url = `${GO_URL}/api/bank/key/${BANK_KEY}`;\nmsg.method = \"GET\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 180,
        "wires": [
            [
                "2745f9631105ab9a"
            ]
        ]
    },
    {
        "id": "2745f9631105ab9a",
        "type": "http request",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "getBankByKey",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 960,
        "y": 180,
        "wires": [
            [
                "926eaa55746cc2b5",
                "64c6a188b790acef"
            ]
        ]
    },
    {
        "id": "926eaa55746cc2b5",
        "type": "function",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "GetDrawDownDetails",
        "func": "msg.bankId = msg.payload._id\n\nmsg.url = `${env.get('ACTYV_PAYLATER_URL')}/v1/loan-drawdown/send-drawdowns-to-bank/${env.get('MOONGIPA_BANK_UNIQUE_IDENTIFIER')}`;\n\nmsg.method = 'put'\nmsg.headers = {\n    \"bankid\": msg.bankId,\n    \"Authorization\": `Bearer ${flow.get('bankToken')}`,\n    \n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 260,
        "wires": [
            [
                "aaea886823d6a95d"
            ]
        ]
    },
    {
        "id": "aaea886823d6a95d",
        "type": "http request",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "Fetch Pending Drawdowns",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 680,
        "y": 260,
        "wires": [
            [
                "3bf85d931005366b",
                "fc0c5e78299fef6a"
            ]
        ]
    },
    {
        "id": "3427916ec4f9342b",
        "type": "inject",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 60,
        "wires": [
            [
                "3e4da9511914fb92"
            ]
        ]
    },
    {
        "id": "3bf85d931005366b",
        "type": "debug",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "debug 247",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 260,
        "wires": []
    },
    {
        "id": "fdd5885e5a3273ce",
        "type": "function",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "filterDrawdownDetailsByDiscountType",
        "func": "let data = msg.payload;\n\nconst DISTRIBUTOR = 'DISTRIBUTOR';\nconst VENDOR = 'VENDOR';\n\nconst discountType = msg.discountType;\n\nif (discountType === DISTRIBUTOR){\n    data = data.filter((element) => element.loanTerm.businessType === DISTRIBUTOR);\n} else if (discountType === VENDOR){\n    data = data.filter((element) => element.loanTerm.businessType === VENDOR)\n}else {\n    data = [];\n}\n\nmsg.payload = {\n    data\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 360,
        "wires": [
            [
                "1870eba97b449b5b",
                "a6e6a7d4a265a2ad"
            ]
        ]
    },
    {
        "id": "4d653b7c0497a0a8",
        "type": "switch",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "",
        "property": "discountType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "DISTRIBUTOR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "VENDOR",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 520,
        "wires": [
            [
                "0738eebe3a855b62"
            ],
            [
                "88a8afaa8892aeda"
            ]
        ]
    },
    {
        "id": "0738eebe3a855b62",
        "type": "function",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "convertToMoongipaFormat",
        "func": "const drawdowns = msg.payload.data;\nconsole.log('convertToMoongipaFormat', drawdowns)\n function getDate(theDate) {\n    return (\n        theDate.getFullYear() +\n        \"/\" +\n        (theDate.getMonth() + 1) +\n        \"/\" +\n        theDate.getDate()\n    );\n}\n\n function getTodaysDate() {\n    let today = new Date();\n    let dd = String(today.getDate()).padStart(2, \"0\");\n    let mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\n    let yyyy = today.getFullYear();\n\n    const date = dd + \"/\" + mm + \"/\" + yyyy;\n\n    return date;\n}\n\nfunction getDisbursementPeriod(firstDate, secondDate) {\n    const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\n\n    const interestDays = Math.round(\n        Math.abs((secondDate.getTime() - firstDate.getTime()) / oneDay),\n    );\n    return interestDays;\n}\n\n\n  function getBenificiaryNameForERPID(erpID) {\n    if (erpID && erpID.includes(\"AMPL\")) {\n        return \"Apollo Metalex Pvt Limited\";\n    } else if (erpID && erpID.includes(\"AATL\")) {\n        return \"APL apollo Tubes Ltd\";\n    } else if (erpID && erpID.includes(\"ABPL\")) {\n        return \"APL apollo Building products Pvt Ltd\";\n    } else {\n        return \"Apollo\";\n    }\n}\n\n\nlet moongipaFormat = [];\n\ndrawdowns.forEach((drawdown) => {\n    let dueDate = moment(drawdown.invoice.documentDate, \"YYYY-MM-DD\").add(\n        30,\n        \"days\",\n    );\n\n    const item = {\n        \"Request Unique Reference\": drawdown.loanDrawdown.requestUniqueCode,\n        \"CRN(distributor NBFC customer id)\": drawdown.loanTerm.crnNumber,\n        \"Client/Dealer Name\": drawdown.distributor.name,\n        \"Invoice date\": moment(\n            getDate(new Date(drawdown.invoice.documentDate)),\n        ).format(\"DD/MM/YYYY\"),\n        \"Invoice number\": drawdown.invoice.finalInvoiceNo,\n        \"Disbursement amount\": drawdown.loanDrawdown.requestAmount,\n        \"Disbursement  Period      (30 days from date of invoice or any approved period )\": `${getDisbursementPeriod(\n            new Date(dueDate.toLocaleString()),\n            new Date(),\n        )} days`,\n        \"Repayment due date \": moment(\n            getDate(new Date(dueDate.toLocaleString())),\n        ).format(\"DD/MM/YYYY\"),\n        \"Disbursement date\": getTodaysDate(),\n        \"Value Date\": getTodaysDate(),\n        \"Beneficiary Name\": getBenificiaryNameForERPID(\n            drawdown.invoice.erpID,\n        ), // drawdown.enterprise.name,\n        \"Beneficiary Account no\":\n            drawdown.businessRelationShip.bankAccountNumber || '',\n        \"IFSC Code\": drawdown.businessRelationShip.bankIFSC || '',\n        \"Beneficiary Bank City\": \"\",\n        \"Disbursement status(Success/Failure)\": \"\",\n        \"Disb Ref no/UTR no\": \"\",\n        \"Failure Reason\": \"\",\n    };\n\n    moongipaFormat.push(item);\n});\n\nmsg.payload = {\n    moongipaFormat\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 660,
        "y": 440,
        "wires": [
            [
                "88a02dbd73a8f99a"
            ]
        ]
    },
    {
        "id": "88a8afaa8892aeda",
        "type": "function",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "convertToVendorFormat",
        "func": "const drawdowns = msg.payload.data;\nconsole.log('convertToVendorFormat', drawdowns)\nfunction getDate(theDate) {\n    return (\n        theDate.getFullYear() +\n        \"/\" +\n        (theDate.getMonth() + 1) +\n        \"/\" +\n        theDate.getDate()\n    );\n}\n\nfunction getTodaysDate() {\n    let today = new Date();\n    let dd = String(today.getDate()).padStart(2, \"0\");\n    let mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\n    let yyyy = today.getFullYear();\n\n    const date = dd + \"/\" + mm + \"/\" + yyyy;\n\n    return date;\n}\n\nfunction getDisbursementPeriod(firstDate, secondDate) {\n    const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds\n\n    const interestDays = Math.round(\n        Math.abs((secondDate.getTime() - firstDate.getTime()) / oneDay),\n    );\n    return interestDays;\n}\n\nlet moongipaFormat = [];\n\ndrawdowns.forEach((drawdown) => {\n    let dueDate = moment(drawdown.invoice.documentDate, \"YYYY-MM-DD\").add(\n        45,\n        \"days\",\n    );\n\n    const item = {\n        \"Request Unique Reference\": drawdown.loanDrawdown.requestUniqueCode,\n        \"Plant Code\": \"\",\n        \"Vendor ID\": drawdown.invoice.erpID,\n        \"Anchor Name\": \"Apl Apollo Tubes Limited\",\n        \"Provision date\": moment(\n            getDate(new Date(drawdown.invoice.documentDate)),\n        ).format(\"DD/MM/YYYY\"),\n        \"Provision number\": drawdown.invoice.finalInvoiceNo || '',\n        \"Disbursement amount\": `${(\n            Number(drawdown.loanDrawdown.requestAmount) * 0.97\n        ).toFixed(2)}`,\n        \"Disbursement  Period      (45 days from date of provision or any approved period )\": `${getDisbursementPeriod(\n            new Date(dueDate.toLocaleString()),\n            new Date(),\n        )} days`,\n        \"Repayment due date \": moment(\n            getDate(new Date(dueDate.toLocaleString())),\n        ).format(\"DD/MM/YYYY\"),\n        \"Disbursement date\": getTodaysDate(),\n        \"Value Date\": getTodaysDate(),\n        \"Vendor Name\": drawdown.distributor.name || '',\n        \"Vendor Account no\": drawdown.businessRelationShip.bankAccountNumber || '',\n        \"IFSC Code\": drawdown.businessRelationShip.bankIFSC,\n        \"Vendor Bank City\": \"\",\n        \"Disbursement status(Success/Failure)\": \"\",\n        \"Disb Ref no/UTR no\": \"\",\n        \"Failure Reason\": \"\",\n    };\n\n    moongipaFormat.push(item);\n});\n\nmsg.payload = {\n    moongipaFormat\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 650,
        "y": 520,
        "wires": [
            [
                "88a02dbd73a8f99a"
            ]
        ]
    },
    {
        "id": "1870eba97b449b5b",
        "type": "switch",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "",
        "property": "payload.data",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 440,
        "wires": [
            [
                "c87dcfc3caa73ff0"
            ],
            [
                "4d653b7c0497a0a8",
                "75f112545f379cc7"
            ]
        ]
    },
    {
        "id": "c87dcfc3caa73ff0",
        "type": "debug",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "debug 248",
        "active": true,
        "tosidebar": false,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 380,
        "wires": []
    },
    {
        "id": "88a02dbd73a8f99a",
        "type": "function",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "moongipaFormat",
        "func": "const moongipaFormat = msg.payload.moongipaFormat;\nmsg.payload = moongipaFormat;\nmsg.moongipaFormat = moongipaFormat;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "*",
                "module": "json-2-csv"
            }
        ],
        "x": 950,
        "y": 480,
        "wires": [
            [
                "775a8d7d04f9e88e",
                "49945d6beb93ab4c"
            ]
        ]
    },
    {
        "id": "775a8d7d04f9e88e",
        "type": "debug",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "debug 249",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 640,
        "wires": []
    },
    {
        "id": "49945d6beb93ab4c",
        "type": "json-2-csv",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "",
        "x": 1200,
        "y": 420,
        "wires": [
            [
                "31f0cc0a4636cdb3"
            ]
        ]
    },
    {
        "id": "31f0cc0a4636cdb3",
        "type": "function",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "moongipaSftpEmailFlag",
        "func": "msg.moongipaSftpEmailFlag = +env.get(\"MOONGIPA_SFTP_EMAIL_FLAG\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 580,
        "wires": [
            [
                "6c3c6f86fc1e2ecf",
                "c9597606e29ba799"
            ]
        ]
    },
    {
        "id": "6c3c6f86fc1e2ecf",
        "type": "debug",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "debug 251",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 580,
        "wires": []
    },
    {
        "id": "c9597606e29ba799",
        "type": "switch",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "",
        "property": "moongipaSftpEmailFlag",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1190,
        "y": 680,
        "wires": [
            [
                "bc9a50f1ca8b86d1"
            ],
            [
                "f34371563231bcc2"
            ]
        ]
    },
    {
        "id": "f34371563231bcc2",
        "type": "debug",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "debug 252",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 740,
        "wires": []
    },
    {
        "id": "bc9a50f1ca8b86d1",
        "type": "function",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "mailToMoongipa",
        "func": "const csv = msg.payload;\nconst fileName = `MSL_DRAWDOWNS_${moment().format(\n    `YYYY-MM-DDTHH-mm-ss-SSS`,\n)}.csv`;\n\nconst moongipaFormat = msg.moongipaFormat;\nconst subject =\n  \"Plant Code\" in moongipaFormat[0]\n    ? `Vendor Drawdown File in ${env.get(\"NODE_ENV\")} Environment`\n    : `Distributor Drawdown File in ${env.get(\"NODE_ENV\")} Environment`;\n\n\nconst sum =  function(prev, next) {\n  return Number(prev) + Number(next);\n}\n\nmsg.url = `${env.get(\"ACTYV_ADMIN_URL\")}/api/user/sendemail`;\nmsg.headers = {\n  \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\")\n};\nmsg.method = \"POST\";\n\nmsg.payload = {\n    from: env.get(\"EMAIL_FROM\"),\n    to: env.get(\"MOONGIPA_EMAIL_DRAWDOWN_RECEPIENT_TO\"),\n    cc: env.get(\"MOONGIPA_EMAIL_DRAWDOWN_RECEPIENT_CC\").toString().split(\";\"),\n    bcc: [],\n    subject: subject,\n    html: `\n    <style>\n      table, th, td {\n        border:1px solid black;\n      }\n    </style>\n    <body>\n\n    Hi All, <br><br>\n\n    Please find drawdown details for the day: <br><br>\n    \n    <table style=\"width:100%\">\n      <tr>\n        <th>Drawdown Date</th>\n        <th># of Invoices</th>\n        <th>Drawdown Amount</th>\n      </tr>\n      <tr>\n        <td>${new Date().toISOString().slice(0, 10)}</td>\n        <td>${moongipaFormat.length}</td>\n        <td>${parseFloat(moongipaFormat\n          .map((x) => x[\"Disbursement amount\"])\n          .reduceRight(sum)).toFixed(2)}</td>\n      </tr>\n    </table>\n    \n    <br><br>\n    Thanks,\n    actyv.ai\n    </body>\n    `,\n    attachments: [\n        {\n            filename: `${fileName}_${new Date().toISOString().slice(0, 10)}.csv`,\n            content: csv,\n        },\n    ],\n    priority: \"high\",\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1460,
        "y": 660,
        "wires": [
            [
                "4440c7ad9ca87b88",
                "6c9a18ae3c7c3857",
                "70414ffd7cab28c8"
            ]
        ]
    },
    {
        "id": "f0dc71b056ec0171",
        "type": "debug",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "debug 253",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 660,
        "wires": []
    },
    {
        "id": "70414ffd7cab28c8",
        "type": "function",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "moongipaFormatLoop",
        "func": "const moongipaFormat = msg.moongipaFormat;\n\nconst sleep = function(ms){\n    return new Promise((resolve)=>{\n        setTimeout(resolve, ms);\n    })\n}\nfor (let moongipaFormatRow of moongipaFormat) {\n    msg.payload = moongipaFormatRow;\n    node.send(msg);\n    await sleep(100);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 660,
        "wires": [
            [
                "f0dc71b056ec0171",
                "ddcafb40c0cb3839"
            ]
        ]
    },
    {
        "id": "4440c7ad9ca87b88",
        "type": "debug",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "debug 254",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 620,
        "wires": []
    },
    {
        "id": "9e655792c14adece",
        "type": "function",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "updateDrawdownStatus",
        "func": "const moongipaFormatRow = msg.payload;\n\nconst kramanCase = moongipaFormatRow[\"Request Unique Reference\"];\n\nconst IN_PROGRESS = \"inProgress\";\n\nmsg.url = `${env.get('BACKEND_API')}/v1/loan-drawdown`\nmsg.payload = {\n    requestUniqueCode: kramanCase,\n    drawdownStatus: IN_PROGRESS,\n}\nmsg.method = 'patch';\nmsg.headers = {\n    bankid: msg.bankId,\n    Authorization: `Bearer ${flow.get('bankToken')}`,\n    'x-actyv-api-config-key': env.get('X_ACTYV_API_CONFIG_KEY')\n\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 920,
        "wires": [
            [
                "43e4febea073e25d"
            ]
        ]
    },
    {
        "id": "43e4febea073e25d",
        "type": "http request",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "UpdateDrawdownDetails",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2250,
        "y": 940,
        "wires": [
            [
                "4e9b9b78cc991f97"
            ]
        ]
    },
    {
        "id": "4e9b9b78cc991f97",
        "type": "debug",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "debug 256",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2470,
        "y": 1020,
        "wires": []
    },
    {
        "id": "ddcafb40c0cb3839",
        "type": "switch",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1810,
        "y": 740,
        "wires": [
            [
                "9e655792c14adece"
            ]
        ]
    },
    {
        "id": "fc0c5e78299fef6a",
        "type": "switch",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 300,
        "wires": [
            [
                "fdd5885e5a3273ce"
            ]
        ]
    },
    {
        "id": "3d5afee743f7e9d7",
        "type": "http in",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "",
        "url": "v1/moongipa/sftp-drawdowns",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 310,
        "y": 20,
        "wires": [
            [
                "3e4da9511914fb92",
                "1eb957ba4d7bea96",
                "dd964d0a2d49310e"
            ]
        ]
    },
    {
        "id": "1eb957ba4d7bea96",
        "type": "debug",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "debug 259",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 20,
        "wires": []
    },
    {
        "id": "dd964d0a2d49310e",
        "type": "http response",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 610,
        "y": 80,
        "wires": []
    },
    {
        "id": "75f112545f379cc7",
        "type": "debug",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "debug 329",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 640,
        "wires": []
    },
    {
        "id": "a6e6a7d4a265a2ad",
        "type": "debug",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "debug 330",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 320,
        "wires": []
    },
    {
        "id": "6c9a18ae3c7c3857",
        "type": "http request",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1750,
        "y": 540,
        "wires": [
            [
                "406f66d005ffa006"
            ]
        ]
    },
    {
        "id": "406f66d005ffa006",
        "type": "debug",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "debug 331",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 540,
        "wires": []
    },
    {
        "id": "64c6a188b790acef",
        "type": "debug",
        "z": "bfa4ea3fa6f6c3e9",
        "name": "debug 332",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 160,
        "wires": []
    },
    {
        "id": "20b858a5cc9a76ab",
        "type": "inject",
        "z": "d5c235f958bb950d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 220,
        "wires": [
            [
                "27c64ebba3811f9b"
            ]
        ]
    },
    {
        "id": "cb3f68ee348650a5",
        "type": "debug",
        "z": "d5c235f958bb950d",
        "name": "debug 257",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 240,
        "wires": []
    },
    {
        "id": "070b4c672d9e97a0",
        "type": "function",
        "z": "d5c235f958bb950d",
        "name": "loopingListSftps",
        "func": "const sleep = function (ms){\n    return new Promise(resolve=>{\n         setTimeout(resolve, ms);\n    })\n}\nfor (let i=0; i<msg.payload.length; i++){\n    const data = msg.payload[i];\n    console.log('data=============', data);\n    node.send({ payload: [msg.payload[i]], fileName: msg.payload[i] })\n    await sleep(1000);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 240,
        "wires": [
            [
                "cb3f68ee348650a5",
                "5fcfb638714d9049"
            ]
        ]
    },
    {
        "id": "81caad014369a331",
        "type": "debug",
        "z": "d5c235f958bb950d",
        "name": "debug 260",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 380,
        "wires": []
    },
    {
        "id": "5fcfb638714d9049",
        "type": "SFTP-main",
        "z": "d5c235f958bb950d",
        "path": "/",
        "method": "get",
        "remoteFilePath": "payload",
        "remoteFilePathType": "msg",
        "localFilePath": "/Users/dilshadahmad/dilshad",
        "localFilePathType": "str",
        "server": "51d2cbf3952b1285",
        "outputs": 1,
        "debug": false,
        "name": "getAFileFromServer",
        "x": 280,
        "y": 340,
        "wires": [
            [
                "81caad014369a331",
                "e638d85fa03e07d2"
            ]
        ]
    },
    {
        "id": "68679cab6385527a",
        "type": "SFTP-main",
        "z": "d5c235f958bb950d",
        "path": "/",
        "method": "list",
        "remoteFilePath": "/sftpdir/test/dilshad",
        "remoteFilePathType": "str",
        "localFilePath": "/Users/dilshadahmad/actyv.ai/actyv-bankconnect-moongipa/dilshad",
        "localFilePathType": "str",
        "server": "51d2cbf3952b1285",
        "outputs": 1,
        "debug": false,
        "name": "listDocumentsOnServer",
        "x": 450,
        "y": 240,
        "wires": [
            [
                "070b4c672d9e97a0",
                "fc34e1aa19c87dd8"
            ]
        ]
    },
    {
        "id": "e638d85fa03e07d2",
        "type": "function",
        "z": "d5c235f958bb950d",
        "name": "moveFile",
        "func": "msg.filename = msg.payload[0].split('.')[0] // filename without extension\n\nconst folderPath = msg.payload[0].split(\"/\")\nconst fileName = folderPath[folderPath.length - 1]\nflow.set('filename', fileName) // filename with extension\n\nmsg.successPath = `/sftpdir/test/dilshad`\nmsg.localPath = `/Users/dilshadahmad/dilshad/${fileName}`\nmsg.remotePath = `/sftpdir/test/dilshad/${fileName}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 460,
        "wires": [
            [
                "3f749a460d487b64"
            ]
        ]
    },
    {
        "id": "42247de3e84230fc",
        "type": "function",
        "z": "d5c235f958bb950d",
        "name": "moongipaReportResponse",
        "func": "const moongipaReportResponse = msg.payload;\n\nfor (let i = 0; i < moongipaReportResponse.length; i++){\n    const drawdownData = moongipaReportResponse[i];\n    node.send({payload: drawdownData});\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 480,
        "wires": [
            [
                "940f1c3057750702",
                "fb47b61ea24871e1"
            ]
        ]
    },
    {
        "id": "940f1c3057750702",
        "type": "debug",
        "z": "d5c235f958bb950d",
        "name": "debug 301",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 480,
        "wires": []
    },
    {
        "id": "fc34e1aa19c87dd8",
        "type": "debug",
        "z": "d5c235f958bb950d",
        "name": "debug 302",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 180,
        "wires": []
    },
    {
        "id": "fb47b61ea24871e1",
        "type": "function",
        "z": "d5c235f958bb950d",
        "name": "uploadDataFormat",
        "func": "const data = msg.payload;\nconsole.log('uploadDataFormat=====', data)\nconst ELoanDrawdownStatus =  {\n    CLEARED : \"cleared\",\n    PAID : \"paid\", // Drawdown successfully completed and money sent to enterprise\n    PENDING : \"pending\", // Drawdown request sent to bank, awaiting response\n    IN_PROGRESS : \"inProgress\", // Drawdown request sent to bank, interim status reported by bank. Disbursement not yet completed\n    TECH_FAILURE : \"technicalFailure\", // Disbursement failed because bot issue at bank side, these are eligible to be re-approved by enterprise\n    FAILED : \"failed\", // Disbursement failed because of limit or non tech issues, wont be retried.\n    CLOSED : \"closed\", //Drawdown repaid by distributor, end of drawdown life cycle\n}\n\nlet drawdownData = {}\n\nfunction drawdownSwitch(drawdownData) {\n    switch (drawdownData) {\n        case \"SUCCESS\":\n            return ELoanDrawdownStatus.PAID;\n        case \"REJECTED\":\n            return ELoanDrawdownStatus.FAILED;\n        case \"FAILURE\":\n            return ELoanDrawdownStatus.FAILED;\n        case \"PENDING\":\n            return ELoanDrawdownStatus.PENDING;\n    }\n}\n\ndrawdownData = {\n    requestUniqueCode: \n        data[\"Request Unique Reference\"] === undefined\n            ? \"\"\n            : data[\"Request Unique Reference\"],\n    drawdownStatus:\n        data[\"Disbursement status(Success/Failure)\"] === undefined\n            ? \"\"\n            : drawdownSwitch(\n                data[\"Disbursement status(Success/Failure)\"].toUpperCase(),\n            ),\n    bankProvidedDrawdownCodes:\n        data[\"Beneficiary Account no\"] === undefined\n            ? \"\"\n            : data['Beneficiary Account no'],\n    disbursedAmount: +data[\"Disbursement amount\"],\n};\nmsg.payload = drawdownData;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 560,
        "wires": [
            [
                "ba2f85288105c874",
                "03be03ecbd12d305"
            ]
        ]
    },
    {
        "id": "ba2f85288105c874",
        "type": "debug",
        "z": "d5c235f958bb950d",
        "name": "debug 303",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 560,
        "wires": []
    },
    {
        "id": "03be03ecbd12d305",
        "type": "function",
        "z": "d5c235f958bb950d",
        "name": "updateStatusInPaylater",
        "func": "const drawdownData = msg.payload;\nconsole.log('drawdownData========', drawdownData)\nconsole.log('token======', flow.get('token'));\nconst ACTYV_PAYLATER_URL = env.get('ACTYV_PAYLATER_URL');\nmsg.url = `${ACTYV_PAYLATER_URL}/v1/loan-drawdown`;\n\nmsg.headers = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": `Bearer ${flow.get('token')}`,\n    'x-actyv-api-config-key': env.get('X_ACTYV_API_CONFIG_KEY'),\n    \"bankid\": flow.get('bankId')\n}\n\nmsg.payload = {\n    ...drawdownData\n}\nmsg.method = 'patch';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 620,
        "wires": [
            [
                "28b64dc4560a029e",
                "21795fa11379369c"
            ]
        ]
    },
    {
        "id": "3d1d26f0aa1abb20",
        "type": "debug",
        "z": "d5c235f958bb950d",
        "name": "debug 304",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 620,
        "wires": []
    },
    {
        "id": "28b64dc4560a029e",
        "type": "http request",
        "z": "d5c235f958bb950d",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 620,
        "wires": [
            [
                "3d1d26f0aa1abb20"
            ]
        ]
    },
    {
        "id": "27c64ebba3811f9b",
        "type": "function",
        "z": "d5c235f958bb950d",
        "name": "AuthenticateBankUser",
        "func": "const BNPL_USER = env.get('BNPL_BANK_USER')\nconst BNPL_USER_PASSWORD = env.get('BNPL_BANK_PASSWORD')\n\nmsg.url = `${env.get('ACTYV_ADMIN_URL')}/api/user/authenticateUser`\nmsg.payload = {\n    email: BNPL_USER,\n    password: BNPL_USER_PASSWORD\n}\nmsg.method = \"post\"\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 120,
        "wires": [
            [
                "ebf27799ce4146d8"
            ]
        ]
    },
    {
        "id": "ebf27799ce4146d8",
        "type": "http request",
        "z": "d5c235f958bb950d",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 410,
        "y": 60,
        "wires": [
            [
                "e55fa7ed33c8ce7a"
            ]
        ]
    },
    {
        "id": "e55fa7ed33c8ce7a",
        "type": "function",
        "z": "d5c235f958bb950d",
        "name": "setToken",
        "func": "flow.set(\"token\", msg.payload.idToken)\n\nconst GO_URL = env.get('GO_URL');\nconst BANK_KEY = env.get(\"BANK_KEY\")\n\nmsg.url = `${GO_URL}/api/bank/key/${BANK_KEY}`;\nmsg.method = \"GET\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 120,
        "wires": [
            [
                "e9824261913d8489"
            ]
        ]
    },
    {
        "id": "a790c5afd45ff9c3",
        "type": "debug",
        "z": "d5c235f958bb950d",
        "name": "debug 305",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 120,
        "wires": []
    },
    {
        "id": "1f023beef00e6c64",
        "type": "function",
        "z": "d5c235f958bb950d",
        "name": "getBankId",
        "func": "const bankId = msg.payload._id;\n\nflow.set('bankId', bankId);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 40,
        "wires": [
            [
                "68679cab6385527a",
                "a790c5afd45ff9c3"
            ]
        ]
    },
    {
        "id": "e9824261913d8489",
        "type": "http request",
        "z": "d5c235f958bb950d",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 80,
        "wires": [
            [
                "1f023beef00e6c64"
            ]
        ]
    },
    {
        "id": "3f749a460d487b64",
        "type": "switch",
        "z": "d5c235f958bb950d",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 270,
        "y": 420,
        "wires": [
            [
                "2539e3deb6a2fe80"
            ],
            [
                "2563f7a391306427"
            ]
        ]
    },
    {
        "id": "2539e3deb6a2fe80",
        "type": "debug",
        "z": "d5c235f958bb950d",
        "name": "debug 306",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 420,
        "wires": []
    },
    {
        "id": "21795fa11379369c",
        "type": "debug",
        "z": "d5c235f958bb950d",
        "name": "debug 307",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 560,
        "wires": []
    },
    {
        "id": "8f3afb25c7001731",
        "type": "debug",
        "z": "d5c235f958bb950d",
        "name": "debug 333",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 420,
        "wires": []
    },
    {
        "id": "2563f7a391306427",
        "type": "alafile in",
        "z": "d5c235f958bb950d",
        "name": "",
        "filename": "",
        "format": "xlsx",
        "columns": "*",
        "headers": true,
        "x": 350,
        "y": 480,
        "wires": [
            [
                "42247de3e84230fc",
                "8f3afb25c7001731"
            ]
        ]
    },
    {
        "id": "e3fb4db34c489508",
        "type": "inject",
        "z": "d18bf023c4d8c839",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 180,
        "wires": [
            [
                "246ac649d94b953f"
            ]
        ]
    },
    {
        "id": "fbfb42f7036d1a31",
        "type": "debug",
        "z": "d18bf023c4d8c839",
        "name": "debug 309",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 160,
        "wires": []
    },
    {
        "id": "246ac649d94b953f",
        "type": "function",
        "z": "d18bf023c4d8c839",
        "name": "AuthenticateBankUser",
        "func": "const BNPL_USER = env.get('BNPL_BANK_USER')\nconst BNPL_USER_PASSWORD = env.get('BNPL_BANK_PASSWORD')\n\nmsg.url = `${env.get('ACTYV_ADMIN_URL')}/api/user/authenticateUser`\nmsg.payload = {\n    email: BNPL_USER,\n    password: BNPL_USER_PASSWORD\n}\nmsg.method = \"post\"\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 160,
        "wires": [
            [
                "a3b98d62313247ed"
            ]
        ]
    },
    {
        "id": "a3b98d62313247ed",
        "type": "http request",
        "z": "d18bf023c4d8c839",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 160,
        "wires": [
            [
                "60c91b32fb83ed06",
                "6797fc62ab6c068f"
            ]
        ]
    },
    {
        "id": "60c91b32fb83ed06",
        "type": "function",
        "z": "d18bf023c4d8c839",
        "name": "setToken",
        "func": "flow.set(\"token\", msg.payload.idToken)\n\nconsole.log(\"token\", flow.get('token'));\nconst GO_URL = env.get('GO_URL');\nconst BANK_KEY = env.get(\"BANK_KEY\")\n\nmsg.url = `${GO_URL}/api/bank/key/${BANK_KEY}`;\nmsg.method = \"GET\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 160,
        "wires": [
            [
                "627e71c8a2dd6782"
            ]
        ]
    },
    {
        "id": "5b343b9a1746d3e0",
        "type": "function",
        "z": "d18bf023c4d8c839",
        "name": "getBankId",
        "func": "const bankId = msg.payload._id;\n\nflow.set('bankId', bankId);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 240,
        "wires": [
            [
                "de1224eea7e0ee1b"
            ]
        ]
    },
    {
        "id": "627e71c8a2dd6782",
        "type": "http request",
        "z": "d18bf023c4d8c839",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1070,
        "y": 160,
        "wires": [
            [
                "5b343b9a1746d3e0",
                "fbfb42f7036d1a31"
            ]
        ]
    },
    {
        "id": "0561d25ed94ebc4d",
        "type": "function",
        "z": "d18bf023c4d8c839",
        "name": "loopingListSftps",
        "func": "\nconst sleep = function (ms){\n    return new Promise(resolve=>{\n         setTimeout(resolve, ms);\n    })\n}\nfor (let i=0; i<msg.payload.length; i++){\n    node.send({ payload: [msg.payload[i]], fileName: msg.payload[i] })\n    await sleep(1000);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 260,
        "wires": [
            [
                "66bde1aca42d829a"
            ]
        ]
    },
    {
        "id": "66bde1aca42d829a",
        "type": "SFTP-main",
        "z": "d18bf023c4d8c839",
        "path": "/",
        "method": "get",
        "remoteFilePath": "payload",
        "remoteFilePathType": "msg",
        "localFilePath": "/Users/dilshadahmad/dilshad",
        "localFilePathType": "str",
        "server": "51d2cbf3952b1285",
        "outputs": 1,
        "debug": false,
        "name": "getAFileFromServer",
        "x": 480,
        "y": 360,
        "wires": [
            [
                "417ff3d2b48e81f1",
                "6b210a55ee75f622"
            ]
        ]
    },
    {
        "id": "de1224eea7e0ee1b",
        "type": "SFTP-main",
        "z": "d18bf023c4d8c839",
        "path": "/",
        "method": "list",
        "remoteFilePath": "/sftpdir/test/dilshad/repayment",
        "remoteFilePathType": "str",
        "localFilePath": "/Users/dilshadahmad/actyv.ai/actyv-bankconnect-moongipa/dilshad",
        "localFilePathType": "str",
        "server": "51d2cbf3952b1285",
        "outputs": 1,
        "debug": false,
        "name": "listDocumentsOnServer",
        "x": 550,
        "y": 260,
        "wires": [
            [
                "0561d25ed94ebc4d",
                "f79022b4e06dc40c"
            ]
        ]
    },
    {
        "id": "6797fc62ab6c068f",
        "type": "debug",
        "z": "d18bf023c4d8c839",
        "name": "debug 310",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 100,
        "wires": []
    },
    {
        "id": "417ff3d2b48e81f1",
        "type": "function",
        "z": "d18bf023c4d8c839",
        "name": "moveFile",
        "func": "console.log('payload', msg.payload);\n\nmsg.filename = msg.payload[0].split('.')[0] // filename without extension\n\nconst folderPath = msg.payload[0].split(\"/\")\nconst fileName = folderPath[folderPath.length - 1]\nflow.set('filename', fileName) // filename with extension\n\n\nmsg.successPath = `/sftpdir/test/dilshad/success`\nmsg.localPath = `/Users/dilshadahmad/dilshad/${fileName}`\nmsg.remotePath = `/sftpdir/test/dilshad/repayment/${fileName}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 400,
        "wires": [
            [
                "78c7de111202674e",
                "9e844d01755145db"
            ]
        ]
    },
    {
        "id": "6b210a55ee75f622",
        "type": "debug",
        "z": "d18bf023c4d8c839",
        "name": "debug 311",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 340,
        "wires": []
    },
    {
        "id": "78c7de111202674e",
        "type": "debug",
        "z": "d18bf023c4d8c839",
        "name": "debug 312",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 340,
        "wires": []
    },
    {
        "id": "3aa377ecb6ccf7f3",
        "type": "alafile in",
        "z": "d18bf023c4d8c839",
        "name": "",
        "filename": "",
        "format": "xlsx",
        "columns": "*",
        "headers": true,
        "x": 1070,
        "y": 440,
        "wires": [
            [
                "d7211db095912a2a"
            ]
        ]
    },
    {
        "id": "9e844d01755145db",
        "type": "switch",
        "z": "d18bf023c4d8c839",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 890,
        "y": 420,
        "wires": [
            [
                "d7eb5e1107854f53"
            ],
            [
                "3aa377ecb6ccf7f3"
            ]
        ]
    },
    {
        "id": "d7eb5e1107854f53",
        "type": "debug",
        "z": "d18bf023c4d8c839",
        "name": "debug 314",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 360,
        "wires": []
    },
    {
        "id": "d7211db095912a2a",
        "type": "function",
        "z": "d18bf023c4d8c839",
        "name": "moongipaReportResponse",
        "func": "\nconst moongipaReportResponse = msg.payload;\nflow.set('mappedData', []);\n\nfor (let i = 0; i < moongipaReportResponse.length; i++){\n    const drawdownData = moongipaReportResponse[i];\n    node.send({payload: drawdownData});\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 440,
        "wires": [
            [
                "98b95a61b392d1d7",
                "6f6374d5081f3376"
            ]
        ]
    },
    {
        "id": "98b95a61b392d1d7",
        "type": "debug",
        "z": "d18bf023c4d8c839",
        "name": "debug 315",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 440,
        "wires": []
    },
    {
        "id": "6f6374d5081f3376",
        "type": "function",
        "z": "d18bf023c4d8c839",
        "name": "dataFormatting",
        "func": "const row = msg.payload;\n\nconst mappedData = flow.get('mappedData');\nflow.set('mappedData', mappedData);\n\nconst  EPaymentMethod  = {\n    principal : \"PRINCIPAL\",\n    interest : \"INTEREST\",\n}\n\n\nmappedData.push({\n    crnNumber: row[\"CRN Number\"] || '',\n    amount: Number(row[\"Amount of Repayment\"] || '0'),\n    date: new Date(row[\"Date of Repayment\"] || '').toISOString(),\n    modeOfRepayment: row[\"Mode of Repayment\"] || \"\",\n    paymentMethod:\n        row[\"Principal/Interest\"] === 'P'\n            ? EPaymentMethod.principal\n            : EPaymentMethod.interest,\n    distributorName: row[\"Dealer Distributor Name\"] || '',\n    referenceKey3: row[\"referenceKey3\"] || '',\n});\n\nmsg.payload = mappedData;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 500,
        "wires": [
            [
                "b349bbbf957dd221"
            ]
        ]
    },
    {
        "id": "f79022b4e06dc40c",
        "type": "debug",
        "z": "d18bf023c4d8c839",
        "name": "debug 318",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 220,
        "wires": []
    },
    {
        "id": "796ba868921f5b1b",
        "type": "debug",
        "z": "d18bf023c4d8c839",
        "name": "debug 322",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 500,
        "wires": []
    },
    {
        "id": "b349bbbf957dd221",
        "type": "function",
        "z": "d18bf023c4d8c839",
        "name": "loopingData",
        "func": "const data = msg.payload;\n\nlet len = data.length;\n\nfor(let i=0; i<len; i++){\n    node.send({\n        payload: data[i],\n        isComplete: false\n    });\n}\nmsg.isComplete = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 500,
        "wires": [
            [
                "d7b6209b82ba95ba"
            ]
        ]
    },
    {
        "id": "d7b6209b82ba95ba",
        "type": "switch",
        "z": "d18bf023c4d8c839",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 560,
        "wires": [
            [
                "796ba868921f5b1b",
                "b88a45205a0d943b"
            ],
            [
                "2ac9b1bfb02bfb07"
            ]
        ]
    },
    {
        "id": "b88a45205a0d943b",
        "type": "function",
        "z": "d18bf023c4d8c839",
        "name": "getLoanTermIdByCRN",
        "func": "const crnNumber = msg.payload.crnNumber\nmsg.repaymentPayload = msg.payload;\n\nconst bankid = flow.get('bankId');\nconst token = flow.get('token');\n\nmsg.url = `${env.get('BACKEND_API')}/v1/loan-terms/fetchByCrnNumber`,\nmsg.method = 'post';\nmsg.payload = {\n    crnNumber: crnNumber.toString(),\n}\nmsg.headers = {\n    'Content-Type': 'application/json' ,\n    bankid,\n    Authorization: `Bearer ${token}`,\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 580,
        "wires": [
            [
                "ecef62c407024f2c"
            ]
        ]
    },
    {
        "id": "ecef62c407024f2c",
        "type": "http request",
        "z": "d18bf023c4d8c839",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 930,
        "y": 580,
        "wires": [
            [
                "3287f35277b4f2f7",
                "597e3e5ea2b8cc7a"
            ]
        ]
    },
    {
        "id": "3287f35277b4f2f7",
        "type": "debug",
        "z": "d18bf023c4d8c839",
        "name": "debug 323",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 580,
        "wires": []
    },
    {
        "id": "0bcca0f8f9f275f2",
        "type": "debug",
        "z": "d18bf023c4d8c839",
        "name": "debug 324",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 720,
        "wires": []
    },
    {
        "id": "2ac9b1bfb02bfb07",
        "type": "function",
        "z": "d18bf023c4d8c839",
        "name": "Cash-app",
        "func": "const ACTYV_PAYLATER_URL = env.get('ACTYV_PAYLATER_URL');\nmsg.url = `${ACTYV_PAYLATER_URL}/v1/cash-application/sp`;\nmsg.payload = {\n    transactionDate: new Date().toLocaleDateString()\n}\nmsg.method = 'POST';\n\nmsg.headers = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": `Bearer ${flow.get('token')}`,\n    'x-actyv-api-config-key': env.get('X_ACTYV_API_CONFIG_KEY'),\n    \"bankid\": flow.get('bankId')\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 680,
        "wires": [
            [
                "2e7801e316f249e9"
            ]
        ]
    },
    {
        "id": "597e3e5ea2b8cc7a",
        "type": "function",
        "z": "d18bf023c4d8c839",
        "name": "RepaymentEntry",
        "func": "const id = msg.payload.id;\n\nconst data = msg.repaymentPayload;\n\nconst BACKEND_API = env.get('BACKEND_API');\nmsg.url = `${BACKEND_API}/v1/loan-payment`;\n\nmsg.payload = {\n    loanID: id,\n    amount: data.amount,\n    date: data.date,\n    paymentMethod: data.paymentMethod,\n    fromAccount: data.fromAccount || \" \",\n    principal: data.amount || 0,\n    interest: data.interest || 0,\n    balance: data.balance || 0\n};\n\nmsg.headers = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": `Bearer ${flow.get('token')}`,\n    'x-actyv-api-config-key': env.get('X_ACTYV_API_CONFIG_KEY'),\n    \"bankid\": flow.get('bankId')\n}\n\nmsg.method = 'post';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 680,
        "wires": [
            [
                "0d2b962f4fa8a95a"
            ]
        ]
    },
    {
        "id": "fc322c3ba9e8c006",
        "type": "debug",
        "z": "d18bf023c4d8c839",
        "name": "debug 325",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 660,
        "wires": []
    },
    {
        "id": "0d2b962f4fa8a95a",
        "type": "http request",
        "z": "d18bf023c4d8c839",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1250,
        "y": 680,
        "wires": [
            [
                "fc322c3ba9e8c006",
                "0b12eb8d2d90fd36"
            ]
        ]
    },
    {
        "id": "0b12eb8d2d90fd36",
        "type": "function",
        "z": "d18bf023c4d8c839",
        "name": "loanPaymentResponse",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 760,
        "wires": [
            [
                "ee9e9f475e248c83"
            ]
        ]
    },
    {
        "id": "ee9e9f475e248c83",
        "type": "debug",
        "z": "d18bf023c4d8c839",
        "name": "debug 326",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 760,
        "wires": []
    },
    {
        "id": "2e7801e316f249e9",
        "type": "http request",
        "z": "d18bf023c4d8c839",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 650,
        "y": 700,
        "wires": [
            [
                "0bcca0f8f9f275f2"
            ]
        ]
    },
    {
        "id": "ba36ec8d0a028eb5",
        "type": "function",
        "z": "25a5e0c8d9afa6e3",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\nflow.set(\"succeededRows\", [])\nflow.set(\"failedRows\", []) \n\nflow.set(\"succeeded_Create_BP\", [])\nflow.set(\"failed_Create_BP\", []) \nconsole.log({payload:msg.payload.fileId})\nmsg.fileId = msg.payload.fileId;\nmsg.enterpriseId = msg.payload.enterpriseId;\nconsole.log(msg.fileId);\n\nmsg.method = \"GET\"\nmsg.headers = {\n    fileType: \"xlsx\"\n}\nmsg.url = `${GO_URL}/file/read/${msg.fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 320,
        "wires": [
            [
                "f780fff367e683b8"
            ]
        ]
    },
    {
        "id": "f780fff367e683b8",
        "type": "http request",
        "z": "25a5e0c8d9afa6e3",
        "name": "read file",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 580,
        "y": 320,
        "wires": [
            [
                "a7f44e38b46bbc42"
            ]
        ]
    },
    {
        "id": "a7f44e38b46bbc42",
        "type": "switch",
        "z": "25a5e0c8d9afa6e3",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 752,
        "y": 358,
        "wires": [
            [],
            [
                "d7d4ee7566c6cc4b"
            ]
        ]
    },
    {
        "id": "d7d4ee7566c6cc4b",
        "type": "function",
        "z": "25a5e0c8d9afa6e3",
        "name": "read xls",
        "func": "let data = xlsx.read(msg.payload, { type: \"buffer\" })\nconst wsname = data.SheetNames[0];\nconst ws = data.Sheets[wsname];\nconst payload = xlsx.utils.sheet_to_json(ws);\nmsg.seedingData = payload.filter((d) => d[\"Business Partner GST\"] !== undefined)\nmsg.completedSeeding = [],\nmsg.failedSeeding = []\n\nmsg.payload = payload\n\nmsg.logger = \"read xlsx\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "xlsx",
                "module": "xlsx"
            }
        ],
        "x": 280,
        "y": 400,
        "wires": [
            [
                "c852ca011f7cfb82",
                "ad250992a169b44f"
            ]
        ]
    },
    {
        "id": "d296b347380dada1",
        "type": "http in",
        "z": "25a5e0c8d9afa6e3",
        "name": "Entry point",
        "url": "/seedsalessummary",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 320,
        "wires": [
            [
                "ba36ec8d0a028eb5",
                "de07202f99fe2f78"
            ]
        ]
    },
    {
        "id": "de07202f99fe2f78",
        "type": "debug",
        "z": "25a5e0c8d9afa6e3",
        "name": "debug 598",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 260,
        "wires": []
    },
    {
        "id": "7d727607c6a62880",
        "type": "function",
        "z": "25a5e0c8d9afa6e3",
        "name": "Format sales summary",
        "func": "\n\nconst salesSummary = []\nconst {enterpriseId} = msg\nconst businessPartnerId = msg.payload._id\n\nfor (let key in msg.salesData){\n    if (key.includes(\"Transaction History\")){\n        let monthSplit = key.split(\"M\")\n        \n        let month = monthSplit[monthSplit.length-1]\n        if (msg.salesData[key]){\n            salesSummary.push(\n                {\n                    \"businessPartner\": businessPartnerId,\n                    \"enterprise\": enterpriseId,\n                    \"year\": +getMonthAndYear(month).split(\"-\")[0],\n                    \"month\": +getMonthAndYear(month).split(\"-\")[1],\n                    \"totalSalesAmount\": msg.salesData[key],\n                    \"totalSalesProjected\": msg.salesData[key]\n                }\n            )\n        }\n        \n    }\n}\n// msg.payload = salesSummary\n\nfunction getMonthAndYear(month){\n    let date = moment().subtract(Number(month), 'months').format()\n    date = date.split(\"T\")[0]\n   \n    return date\n}\nfor (let [key, req] of salesSummary.entries()){\n    node.send({\n        ...msg,\n        req,\n        isComplete : false,\n        salesSummaryLoopCompleted: key == salesSummary.length - 1 ? true : false\n    })\n   \n}\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 280,
        "y": 600,
        "wires": [
            [
                "ce4c474a80d75029"
            ]
        ]
    },
    {
        "id": "ce4c474a80d75029",
        "type": "switch",
        "z": "25a5e0c8d9afa6e3",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 472,
        "y": 598,
        "wires": [
            [],
            [
                "6d22c1707ae32d09",
                "c891da22dcc505f2"
            ]
        ]
    },
    {
        "id": "6d22c1707ae32d09",
        "type": "function",
        "z": "25a5e0c8d9afa6e3",
        "name": "post business-partner-sales-summary",
        "func": "const GO_URL = env.get(\"GO_URL\")\n\nmsg.url = `${GO_URL}/business-partner-sales-summary`,\nmsg.method = \"POST\"\nmsg.payload = msg.req\nmsg.logger = `post business-partner-sales-summary with ${JSON.stringify(msg.payload)}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 325,
        "y": 678,
        "wires": [
            [
                "880de5283e8c771a"
            ]
        ]
    },
    {
        "id": "5167cae62a673ebc",
        "type": "switch",
        "z": "25a5e0c8d9afa6e3",
        "name": "salesSummaryLoopCompleted?",
        "property": "salesSummaryLoopCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 350,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "95c26864cab9025a",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "25a5e0c8d9afa6e3",
        "name": "post business-partner-sales-summary",
        "x": 670,
        "y": 680,
        "wires": [
            [
                "5167cae62a673ebc",
                "f8c4bd403ffa0692"
            ],
            [
                "f8c4bd403ffa0692"
            ]
        ]
    },
    {
        "id": "aa1e15473ab4b47e",
        "type": "function",
        "z": "25a5e0c8d9afa6e3",
        "name": "Get business partner",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nmsg.url = `${GO_URL}/business-partner/service/${msg.salesData[\"Business Partner GST\"]}`;\nmsg.method = \"GET\"\nmsg.headers = {}\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n}\n\nmsg.logger = `Get business partner by gst #${msg.salesData[\"Business Partner GST\"]}`\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 540,
        "wires": [
            [
                "1e5f1678bb8009e8",
                "36c2a344a975a189"
            ]
        ]
    },
    {
        "id": "c852ca011f7cfb82",
        "type": "function",
        "z": "25a5e0c8d9afa6e3",
        "name": "Loop and Sleep",
        "func": "\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\n// msg.salesData = msg.seedingData\n// console.log(msg.seedingData,'kjdfls')\nlet seedingData = msg.seedingData\nfor (let i = 0; i < seedingData.length; i++) {\n    await sleep(500)\n    if (Object.keys(seedingData[i]).length) {\n        node.send({ ...msg, payload: seedingData[i], salesData: seedingData[i], businessPartnerLoopCompleted: i == seedingData.length - 1 ? true : false });\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 480,
        "wires": [
            [
                "aa1e15473ab4b47e",
                "249683c2c2618f23"
            ]
        ]
    },
    {
        "id": "1e5f1678bb8009e8",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "25a5e0c8d9afa6e3",
        "name": "Get business partner",
        "x": 560,
        "y": 540,
        "wires": [
            [
                "7d727607c6a62880",
                "451c5205a9f47409"
            ],
            []
        ]
    },
    {
        "id": "c891da22dcc505f2",
        "type": "debug",
        "z": "25a5e0c8d9afa6e3",
        "name": "debug 599",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 620,
        "wires": []
    },
    {
        "id": "451c5205a9f47409",
        "type": "debug",
        "z": "25a5e0c8d9afa6e3",
        "name": "debug 600",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 520,
        "wires": []
    },
    {
        "id": "f8c4bd403ffa0692",
        "type": "debug",
        "z": "25a5e0c8d9afa6e3",
        "name": "debug 601",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 680,
        "wires": []
    },
    {
        "id": "880de5283e8c771a",
        "type": "debug",
        "z": "25a5e0c8d9afa6e3",
        "name": "debug 602",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 760,
        "wires": []
    },
    {
        "id": "36c2a344a975a189",
        "type": "debug",
        "z": "25a5e0c8d9afa6e3",
        "name": "debug 603",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 480,
        "wires": []
    },
    {
        "id": "249683c2c2618f23",
        "type": "debug",
        "z": "25a5e0c8d9afa6e3",
        "name": "debug 604",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "salesData",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 440,
        "wires": []
    },
    {
        "id": "ad250992a169b44f",
        "type": "http response",
        "z": "25a5e0c8d9afa6e3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 670,
        "y": 400,
        "wires": []
    },
    {
        "id": "0fee5352c34e4169",
        "type": "inject",
        "z": "2f7f09616aee1b2d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 231,
        "y": 76,
        "wires": [
            [
                "db90947478060f31"
            ]
        ]
    },
    {
        "id": "db90947478060f31",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Init Global Vars",
        "func": "// const ENV = \"prod\";  // PROD\nconst ENV = \"uat\";\n\nconst ADMIN_SERVICE_URL = `https://actyv-platform-admin-service.${ENV}.actyv.com/api`;\nconst GO_SERVICE_URL = `https://actyv-platform-go-service.${ENV}.actyv.com/api`;\nconst PAYLATER_SERVICE_URL = `https://actyv-platform-paylater-service-v1.${ENV}.actyv.com/v1`;\n\nconst API_URLS = {\n    go: {\n        bankApplications: `${GO_SERVICE_URL}/bank-application`,\n        bank: `${GO_SERVICE_URL}/bank`,\n        enterprise: `${GO_SERVICE_URL}/enterprise`,\n        businessPartner: `${GO_SERVICE_URL}/business-partner`,\n        businessPartnerApplication: `${GO_SERVICE_URL}/business-partner-application`,\n        file: `${GO_SERVICE_URL}/file`,\n    },\n\n    admin: {\n        user: `${ADMIN_SERVICE_URL}/user`,\n    },\n\n    paylater: {\n        business: `${PAYLATER_SERVICE_URL}/business`,\n    },\n\n    // kotak: \"https://apigw.kotak.com:8446\",  // PROD\n    kotak: \"https://apigwuat.kotak.com:8443\",\n};\n\nconst BUSINESS_CONSTANTS = {\n    bankKey: \"kotak\",\n    enterpriseKey: \"cavinkare\",\n\n    // applicationStatus: \"AWAITING_LEAD_PUSH\",\n    applicationStatus: \"DOCUMENT_CAPTURE\",\n    // applicationStatus: \"CREDIT_MANAGER_REVIEW\",\n\n    bankIdentifier: \"IIFL123\",\n    enterpriseIdentifier: \"AAACB3754B\",\n};\n\nconst USER_CONSTANTS = {\n    bank: {\n        email: \"anand.rastogi@actyv.com\",\n        password: \"890ioP@12\",\n    },\n\n    enterprise: {\n        email: \"anand.rastogi@actyv.com\",\n        password: \"890ioP@12\",\n    },\n};\n\nconst KOTAK_CONFIG = {\n    algorithm: \"aes-256-cbc\",\n    ivLength: 16,\n\n    // PROD\n    // leadPush: {\n    //     clientID: \"l70a3247a3bf6a41bebb8dbc41745e53bd\",\n    //     clientSecret: \"15b4084e4a0c43f1a8f018df8feb50b5\",\n    // },\n\n    leadPush: {\n        clientID: \"l7xx4a0eb303bda24dc393af68924f3bb009\",\n        clientSecret: \"fd8fe23dce7b440eb976eeb7c0351ebd\",\n    },\n};\n\nflow.set(\"API_URLS\", API_URLS);\nflow.set(\"BUSINESS_CONSTANTS\", BUSINESS_CONSTANTS);\nflow.set(\"USER_CONSTANTS\", USER_CONSTANTS);\nflow.set(\"KOTAK_CONFIG\", KOTAK_CONFIG);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "lodash",
                "module": "lodash"
            }
        ],
        "x": 551,
        "y": 76,
        "wires": [
            [
                "a777074708c04714"
            ]
        ]
    },
    {
        "id": "a777074708c04714",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Setting Enterprise Token",
        "func": "const apiUrls = flow.get(\"API_URLS\");\nconst users = flow.get(\"USER_CONSTANTS\");\n\nconst enterpriseUserEmail = env.get(\"CKPL_ENTERPRISE_ADMIN_EMAIL\")//users.enterprise.email;\nconst enterpriseUserPassword = users.enterprise.password;\n\nmsg.payload = {\n    email: enterpriseUserEmail,\n    password: enterpriseUserPassword,\n};\n\nmsg.url = `${apiUrls.admin.user}/authenticateUser`;\nmsg.method = \"post\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 160,
        "wires": [
            [
                "aba92b412c3dca01"
            ]
        ]
    },
    {
        "id": "aba92b412c3dca01",
        "type": "http request",
        "z": "2f7f09616aee1b2d",
        "name": "Generate Token",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "bearer",
        "senderr": false,
        "x": 420,
        "y": 160,
        "wires": [
            [
                "4758c3ffee1a45f7"
            ]
        ]
    },
    {
        "id": "4758c3ffee1a45f7",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Setting enterprise token",
        "func": "const idToken = msg.payload.idToken\n\nflow.set(\"enterpriseToken\", idToken)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 160,
        "wires": [
            [
                "16ecec3d12ba595b"
            ]
        ]
    },
    {
        "id": "16ecec3d12ba595b",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Setting bank token Request",
        "func": "const apiUrls = flow.get(\"API_URLS\");\nconst users = flow.get(\"USER_CONSTANTS\");\n\nconst bankUserEmail = env.get(\"IIFL_BANK_ADMIN_EMAIL\") //users.bank.email;\nconst bankUserPassword = users.bank.password;\n\nmsg.payload = {\n    email: bankUserEmail,\n    password: bankUserPassword,\n};\n\nmsg.url = `${apiUrls.admin.user}/authenticateUser`;\nmsg.method = \"post\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 220,
        "wires": [
            [
                "66b2c11c98c2f12b"
            ]
        ]
    },
    {
        "id": "66b2c11c98c2f12b",
        "type": "http request",
        "z": "2f7f09616aee1b2d",
        "name": "Generate Token",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "bearer",
        "senderr": false,
        "x": 420,
        "y": 220,
        "wires": [
            [
                "8de9c08e4b683ed8"
            ]
        ]
    },
    {
        "id": "8de9c08e4b683ed8",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Setting bank token",
        "func": "const idToken = msg.payload.idToken\n\nflow.set(\"bankToken\", idToken)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 220,
        "wires": [
            [
                "3f38314bc4808ffb"
            ]
        ]
    },
    {
        "id": "3f38314bc4808ffb",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Getting Bank ID",
        "func": "const apiUrls = flow.get(\"API_URLS\");\nconst businessConstants = flow.get(\"BUSINESS_CONSTANTS\");\n\nmsg.url = `${apiUrls.paylater.business}/getByIdentifier/${businessConstants.bankIdentifier}/BANK`;\n\nmsg.method = \"get\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 300,
        "wires": [
            [
                "16bb987ed62942ae"
            ]
        ]
    },
    {
        "id": "16bb987ed62942ae",
        "type": "http request",
        "z": "2f7f09616aee1b2d",
        "name": "Fetch Bank ID",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 420,
        "y": 300,
        "wires": [
            [
                "c8158618e311422f"
            ]
        ]
    },
    {
        "id": "c8158618e311422f",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Set Bank details",
        "func": "const bank = msg.payload;\n\nflow.set(\"BANK_DETAILS\", bank);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 300,
        "wires": [
            [
                "4d686b266e9ee666"
            ]
        ]
    },
    {
        "id": "4d686b266e9ee666",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Getting Enterprise ID",
        "func": "const apiUrls = flow.get(\"API_URLS\");\nconst businessConstants = flow.get(\"BUSINESS_CONSTANTS\");\n\nmsg.url = `${apiUrls.paylater.business}/getByIdentifier/${businessConstants.enterpriseIdentifier}/ENTERPRISE`;\n\nmsg.method = \"get\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 380,
        "wires": [
            [
                "ef0e87a0abd0bd5f"
            ]
        ]
    },
    {
        "id": "ef0e87a0abd0bd5f",
        "type": "http request",
        "z": "2f7f09616aee1b2d",
        "name": "Fetch Enterprise ID",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 410,
        "y": 380,
        "wires": [
            [
                "937d9efd0f367e25"
            ]
        ]
    },
    {
        "id": "937d9efd0f367e25",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Set Enterprise details",
        "func": "const enterprise = msg.payload;\n\nflow.set(\"ENTERPRISE_DETAILS\", enterprise);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 380,
        "wires": [
            [
                "82d55419c63610de"
            ]
        ]
    },
    {
        "id": "82d55419c63610de",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Get Bank Applications Request",
        "func": "const apiUrls = flow.get(\"API_URLS\");\nconst businessConstants = flow.get(\"BUSINESS_CONSTANTS\");\n\nconst bankID = flow.get(\"BANK_DETAILS\").id;\nconst enterpriseID = flow.get(\"ENTERPRISE_DETAILS\").id;\n\n// const queryString = `applicationStatus=${businessConstants.applicationStatus}&bankID=${\"63db43b9a6c0a40a89981a38\"}&enterpriseID=${\"639ad10556684b825577d96d\"}`;\nconst queryString = `applicationStatus=${businessConstants.applicationStatus}&bankID=${\"642d3bc0ebc96f31f3daebe9\"}&enterpriseID=${\"637670c7f8e9564da0dea656\"}`;\n\nmsg.url = `${apiUrls.go.bankApplications}?${queryString}`;\n\nmsg.method = \"get\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 460,
        "wires": [
            [
                "e23bc0ffbee0c489"
            ]
        ]
    },
    {
        "id": "e23bc0ffbee0c489",
        "type": "http request",
        "z": "2f7f09616aee1b2d",
        "name": "GET BANK APPLICATIONS",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 560,
        "y": 460,
        "wires": [
            [
                "7bc25cb5dcbfa104",
                "853e73fb82076262"
            ]
        ]
    },
    {
        "id": "7bc25cb5dcbfa104",
        "type": "debug",
        "z": "2f7f09616aee1b2d",
        "name": "BANK APPLICATIONS",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1011,
        "y": 376,
        "wires": []
    },
    {
        "id": "7af20c34dd73eda0",
        "type": "loop",
        "z": "2f7f09616aee1b2d",
        "name": "Bank Application Loop",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "payload",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-count",
        "x": 380,
        "y": 520,
        "wires": [
            [],
            [
                "cbdd21598e9cd7fc",
                "69ad73ce72223be8"
            ]
        ]
    },
    {
        "id": "e871e969b45cbee2",
        "type": "switch",
        "z": "2f7f09616aee1b2d",
        "name": "Lead Gen Check",
        "property": "leadID",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1439,
        "y": 784,
        "wires": [
            [
                "7af20c34dd73eda0"
            ],
            [
                "d46d4be16e5b225a",
                "05caa38f3dd5a51a",
                "7b38416ad63fb55b"
            ]
        ]
    },
    {
        "id": "9640e6e75389513c",
        "type": "http request",
        "z": "2f7f09616aee1b2d",
        "name": "Update Application State",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1890,
        "y": 1560,
        "wires": [
            [
                "f6273cdd4667e56c",
                "7af20c34dd73eda0"
            ]
        ]
    },
    {
        "id": "cbdd21598e9cd7fc",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Fetch Business Partner Details",
        "func": "const apiUrls = flow.get(\"API_URLS\");\n\nmsg.businessPartnerID = msg.payload.businessPartnerID;\nmsg.taskID = msg.payload.workflowTaskID;\nmsg.productType = msg.payload.productType;\nmsg.bankApplicationId = msg.payload._id\nmsg.enterpriseId = msg.payload.enterpriseId\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    businesspartnerid: msg.businessPartnerID,\n};\n\nmsg.url = `${apiUrls.go.businessPartner}/data/${msg.businessPartnerID}`;\n\nmsg.method = \"get\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 253,
        "y": 680,
        "wires": [
            [
                "8522249f568cf0f4",
                "c84d84ff3707e45c"
            ]
        ]
    },
    {
        "id": "1104321525e9635d",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Set Lead ID",
        "func": "const _ = lodash\n\nmsg.leadID = _.get(msg.payload, \"CreateLeadRes.CreateLead.CRMLeadNum\", \"FAILED\");\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "lodash",
                "module": "lodash"
            }
        ],
        "x": 1239,
        "y": 784,
        "wires": [
            [
                "e871e969b45cbee2"
            ]
        ]
    },
    {
        "id": "9c44d8f43fd1692b",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Fetch Required Documents",
        "func": "const _ = lodash;\n\nconst bpDetails = flow.get(\"BP_DETAILS\");\n\nconst files = [];\n\nconst documents = _.get(bpDetails, \"documents\", []);\nconst fieldValues = _.get(bpDetails, \"fieldValues\", []);\n\nconst requiredDocuments = [\n    {\n        key: \"AADHAAR\",\n        type: \"documents\",\n        documentName: \"aadhaar\",\n        documentDescription: \"Aadhar Card\",\n    },\n    {\n        key: \"UDYAM\",\n        type: \"documents\",\n        documentName: \"udyam\",\n        documentDescription: \"Udyam certificate\",\n    },\n    {\n        key: \"BUSINESS_PAN\",\n        type: \"documents\",\n        documentName: \"business_pan\",\n        documentDescription: \"Business PAN\",\n    },\n    {\n        key: \"PERSONAL_PAN\",\n        type: \"documents\",\n        documentName: \"personal_pan\",\n        documentDescription: \"Personal PAN\",\n    },\n    {\n        key: \"GST\",\n        type: \"documents\",\n        documentName: \"gst_certificate\",\n        documentDescription: \"GST Certificate for distributor\",\n    },\n    {\n        key: \"GSTR3B_RETSUM\",\n        type: \"documents\",\n        documentName: \"gstr_3b\",\n        documentDescription: \"GSTR 3B Raw file\",\n    },\n    {\n        key: \"BANK_STATEMENT\",\n        type: \"documents\",\n        documentName: \"bank_statement\",\n        documentDescription: \"Bank Statement Raw file\",\n    },\n    {\n        key: \"ITR\",\n        type: \"documents\",\n        documentName: \"itr\",\n        documentDescription: \"ITR Raw file\",\n    },\n\n    {\n        key: \"kotak_shop_and_establishment\",\n        type: \"fieldValue\",\n        documentName: \"shop_establishment\",\n        documentDescription: \"Shop Establishment Certificate\",\n    },\n    {\n        key: \"kotak_partnership_deed_1\",\n        type: \"fieldValue\",\n        documentName: \"partnership_deed\",\n        documentDescription: \"Kotak Partnership Deed\",\n    },\n    {\n        key: \"kotak_electricity_bill_1\",\n        type: \"fieldValue\",\n        documentName: \"electricity_bill\",\n        documentDescription: \"Distributor Electricity bill\",\n    },\n    {\n        key: \"kotak_passport_photo\",\n        type: \"fieldValue\",\n        documentName: \"passport_photo\",\n        documentDescription: \"BP Passport size photo\",\n    },\n];\n\nfor (const requiredDocument of requiredDocuments) {\n    if (requiredDocument.type === \"documents\") {\n        const filteredDocuments = documents.filter(\n            (document) => document.documentType === requiredDocument.key\n        );\n\n        let index = 0;\n\n        for (const filteredDocument of filteredDocuments) {\n            if (filteredDocument.files.length <= 0) {\n                continue;\n            }\n\n            files.push(\n                ...filteredDocument.files.map((documentFile) => ({\n                    fileID: documentFile.fileId,\n                    documentName: `${requiredDocument.documentName}_${++index}.${fileType(\n                        documentFile.fileType\n                    )}`,\n                    documentDescription: `${requiredDocument.documentDescription}`,\n                }))\n            );\n        }\n    }\n\n    if (requiredDocument.type === \"fieldValue\") {\n        const filteredFieldValues = fieldValues.filter(\n            (fieldValue) => fieldValue.key === requiredDocument.key\n        );\n\n        let index = 0;\n\n        for (const filteredFieldValue of filteredFieldValues) {\n            const fieldValue = filteredFieldValue.value;\n\n            if (_.isArray(fieldValue)) {\n                for (const value of fieldValue) {\n                    if (!_.isEmpty(value.fileId)) {\n                        files.push({\n                            fileID: value.fileId,\n                            documentName: `${requiredDocument.documentName\n                                }_${++index}.${fileType(value.fileType)}`,\n                            documentDescription: `${requiredDocument.documentDescription}`,\n                        });\n                    }\n                }\n            }\n\n            if (!_.isEmpty(fieldValue.filedId)) {\n                files.push({\n                    fileID: fieldValue.fileId,\n                    documentName: `${requiredDocument.documentName}_${++index}.${fileType(\n                        fieldValue.fileType\n                    )}`,\n                    documentDescription: `${requiredDocument.documentDescription}`,\n                });\n            }\n        }\n    }\n}\n\nfunction fileType(type) {\n    switch (type) {\n        case \"application/pdf\":\n            return \"pdf\";\n\n        case \"application/xlsx\":\n            return \"xlsx\";\n\n        case \"image/png\":\n            return \"png\";\n\n        case \"image/jpeg\":\n            return \"jpeg\";\n\n        case \"image/jpg\":\n            return \"jpg\";\n    }\n}\n\nmsg.files = files;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "lodash",
                "module": "lodash"
            }
        ],
        "x": 1420,
        "y": 1500,
        "wires": [
            [
                "65c0b823422b6f39",
                "23a1d190daf69ea0"
            ]
        ]
    },
    {
        "id": "f0646fd2deb64a2e",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Update Applicaiton State",
        "func": "const apiUrls = flow.get(\"API_URLS\");\n\nmsg.url = `${apiUrls.go.businessPartnerApplication}/update-external-variable`;\n\nmsg.method = \"post\";\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    businesspartnerid: msg.businessPartnerID,\n};\n\nmsg.payload = {\n    taskId: msg.taskID,\n    variableName: \"awaiting_lead_push_action\",\n    value: \"completed\",\n    type: \"string\",\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 1560,
        "wires": [
            [
                "9640e6e75389513c"
            ]
        ]
    },
    {
        "id": "f6273cdd4667e56c",
        "type": "debug",
        "z": "2f7f09616aee1b2d",
        "name": "State Updated",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 1620,
        "wires": []
    },
    {
        "id": "8522249f568cf0f4",
        "type": "http request",
        "z": "2f7f09616aee1b2d",
        "d": true,
        "name": "Fetch business partner details",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 570,
        "y": 680,
        "wires": [
            [
                "68582fb55917c728",
                "c84d84ff3707e45c"
            ]
        ]
    },
    {
        "id": "e8bddb7856b4de65",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Convert to JSON",
        "func": "const { XMLParser } = fastXmlParser\n\nconst xmlParser = new XMLParser({\n  ignoreAttributes: false,\n});\n\nconst payload = xmlParser.parse(msg.payload);\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fastXmlParser",
                "module": "fast-xml-parser"
            }
        ],
        "x": 979,
        "y": 884,
        "wires": [
            [
                "1104321525e9635d",
                "7ddb2c540fd2a9a3"
            ]
        ]
    },
    {
        "id": "65c0b823422b6f39",
        "type": "loop",
        "z": "2f7f09616aee1b2d",
        "name": "Bank file Loop",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "files",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-last",
        "x": 1369,
        "y": 1564,
        "wires": [
            [
                "f0646fd2deb64a2e"
            ],
            [
                "de15bbcb730d874f"
            ]
        ]
    },
    {
        "id": "23a1d190daf69ea0",
        "type": "debug",
        "z": "2f7f09616aee1b2d",
        "name": "Files to be pushed",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "files",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1900,
        "y": 1440,
        "wires": []
    },
    {
        "id": "68582fb55917c728",
        "type": "debug",
        "z": "2f7f09616aee1b2d",
        "name": "Business Partner Details",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1044,
        "y": 556,
        "wires": []
    },
    {
        "id": "616204f445470488",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Generate Base Payload",
        "func": "const _ = lodash;\nconst { v4 } = uuid;\nconst moment = momentImport;\n\nconst businessPartnerDetails = msg.payload;\n\nflow.set(\"BP_DETAILS\", businessPartnerDetails);\n\nconst Documents = businessPartnerDetails.documents\nconst userDetails = _.get(businessPartnerDetails, \"persons[0]\", {});\nconst address = _.get(businessPartnerDetails, \"address\", {});\nconst documents = msg.persons[0][\"documents\"] //_.get(businessPartnerDetails, \"documents\", []);\nconst fieldValues = _.get(businessPartnerDetails, \"fieldValues\", []);\n\nconst leadAmount = fieldValues.find((fields) => fields.key === \"leadAmount\");\n\nconst aadharDocument = documents.find(\n    (document) => document.documentType === \"AADHAAR\"\n);\nconst panDocument = Documents.find(\n    (document) => document.documentType === \"BUSINESS_PAN\"\n);\n\n// const productKey =\n//     msg.productType === \"ENTERPRISE BASED PRODUCT\"\n//         ? \"1000106\"\n//         : msg.productType === \"GST BASED PRODUCT\"\n//             ? \"1000059\"\n//             : msg.productType === \"BANK BASED PRODUCT\"\n//                 ? \"1000061\"\n//                 : \"1000061\"\nconst productKey = \"5497\"\n\nconst applicantTypes = {\n    P: \"SP\",\n    C: \"PVT\",\n    H: \"HUF\",\n    A: \"\",\n    B: \"\",\n    G: \"\",\n    J: \"\",\n    L: \"\",\n    F: \"LLP\",\n    T: \"T\",\n};\n\n// const testData = `${_.get(aadharDocument, \"data.name\", \"\")}`\n//     .split(\" \").shift().join(\" \")\n//     .trim();\nconst removeFirstName = `${_.get(aadharDocument, \"data.name\", \"\")}`\n    .split(\" \")\nremoveFirstName.shift()\n\n\nconst lastName = removeFirstName.join(\" \").trim()\nconst reqId = v4()\nmsg.reqId = reqId\n\nconst payload = {\n    CreateLeadReq: {\n        Header: {\n            SrcAppCd: \"CRMNext\",\n            RequestID: reqId,\n        },\n        CreateLead: {\n            // AssigntoCode: \"135229\",\n            AssigntoCode: \"207214\",\n            DateofBirth: moment(\n                _.get(aadharDocument, \"data.dob\", new Date()),\n                \"YYYY-MM-DDTHH:mm:ss\"\n            ).format(\"YYYY-MM-DDT00:00:00\"),\n            GenderID: _.get(aadharDocument, \"data.gender\", \"M\") === \"M\" ? 1 : 2,\n            PanNumber: _.get(panDocument, \"data.panNumber\", \"\"),\n            City: _.get(address, \"city\", \"\"),\n            Country: `${_.get(aadharDocument, \"data.country\", \"\")}`\n                .replace(/[^,a-zA-Z0-9 ]/g, \"\")\n                .trim(),\n            Custom: {\n                Address_Line_1_Le: `${_.get(aadharDocument, \"data.address\", \"\")}`\n                    .replace(/[^,a-zA-Z0-9 ]/g, \"\")\n                    .trim(),\n                Address_Line_P1_Le: `${_.get(aadharDocument, \"data.district\", \"\")}`\n                    .replace(/[^,a-zA-Z0-9 ]/g, \"\")\n                    .trim(),\n                CRN: \"\",\n                CampaignCode: \"\",\n                CampaignName: \"\",\n                Remarks_Le: \"\",\n                Address_Type_Le: \"Residence Address\",\n                OutStndngLoanTnurInMnth: \"\",\n                LoanTnurInMnth: \"\",\n                StrtmMnthYrOfCurntLoan: \"\",\n                Landmark_LE: \"\",\n                Source_SystemID: \"102\",\n                Process_Type: \"N\",\n                Existing_Customer: \"N\",\n                Resident_Type: \"R\",\n                Applicant_Type:\n                    applicantTypes[\n                    _.get(panDocument, \"data.panNumber\", \"\").charAt(3) || \"\"\n                    ],\n                RsiednceOrOfcPrmiseSelfOwnd: \"Y\",\n                // Sub_Source: \"Dsa Aggregator\",\n                Sub_Source: \"Online Aggregator\",\n                Sub_Sub_Source: \"Autolytics\",\n                Perfios_Fetch_Applicable: \"\",\n                CurntBankLoanName: \"\",\n                Work_Experience: \"\",\n                Propert_Identified: \"\",\n                RateOfInterest_LE: \"\",\n                CoApplicant_Required: \"Y\",\n                PermntAddSamAsCurnt: \"2\",\n                Country1_LE: `${_.get(aadharDocument, \"data.country\", \"\")}`\n                    .replace(/[^,a-zA-Z0-9 ]/g, \"\")\n                    .trim(),\n                TypeOfProperty_LE: \"\",\n                State1_LE: \"\",\n                District1_LE: \"\",\n                City1_LE: \"\",\n                Pincode1_LE: \"\",\n                Landmark1_LE: \"\",\n                PermntAddLine_2: \"\",\n                NetMonthlyIncome_LE: \"\",\n                Outstanding_Loan_Amnt: \"\",\n                CorrespondenceAddLine_2: \"\",\n                Cmpny_Emp_Name: \"\",\n                TenureInMonths_LE: \"\",\n                Individual: \"I\",\n                Finfort_Fetch_Applicable: \"No\",\n                EMI_Le: \"\",\n                Business_Le: \"\",\n                Vintage_Le: \"\",\n                Turnover_Le: \"\",\n                property_Le: \"Residential\",\n                LEA_Prospect: \"Lead\",\n            },\n            FirstName: `${_.get(aadharDocument, \"data.name\", \"\")}`\n                .split(\" \")[0]\n                .trim(),\n            Email: _.get(userDetails, \"email\", \"\"),\n            LastName: lastName,\n            LayoutKey: \"111206\",\n            LeadAmount: 600000,\n            LeadSourceKey: \"49\",\n            MiddleName: \"\",\n            MobilePhone: _.get(userDetails, \"phone\", \"\").replace(\"+91\", \"\"),\n            ProductKey: productKey,\n            RatingKey: \"2\",\n            SalutationKey: \"\",\n            State: `${_.get(aadharDocument, \"data.state\", \"\")}`\n                .replace(/[^,a-zA-Z0-9 ]/g, \"\")\n                .trim(),\n            StatusCodeKey: \"100012\",\n            ZipCode: `${_.get(aadharDocument, \"data.pinCode\", \"\")}`\n                .replace(/[^,a-zA-Z0-9 ]/g, \"\")\n                .trim(),\n            LeadID: \"\",\n        },\n        \"@_xmlns\": \"http://www.kotak.com/schemas/AggregatorLeadCRM/CreateLeadReq\",\n    },\n};\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "lodash",
                "module": "lodash"
            },
            {
                "var": "uuid",
                "module": "uuid"
            },
            {
                "var": "momentImport",
                "module": "moment"
            }
        ],
        "x": 219,
        "y": 864,
        "wires": [
            [
                "fb24257d69a8473e",
                "e3dd908b5a1eac41"
            ]
        ]
    },
    {
        "id": "7b302b43519269da",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Decryption",
        "func": "const kotakConfig = flow.get(\"KOTAK_CONFIG\");\n\nconst crypto = cryptoImport\n\nconst payload = msg.payload;\n\nconsole.log(\"KOTAK RESPONSE\", payload);\n\nfunction decrypt(encryptedText) {\n    const buffer = Buffer.from(encryptedText, \"base64\");\n\n    const iv = buffer.slice(0, kotakConfig.ivLength);\n    const encrypted = buffer.slice(kotakConfig.ivLength);\n\n    const decipher = crypto.createDecipheriv(\n        kotakConfig.algorithm,\n        kotakConfig.leadPush.clientSecret,\n        iv\n    );\n\n    const decrypted = decipher.update(encrypted);\n    const final = Buffer.concat([decrypted, decipher.final()]);\n\n    return final.toString();\n}\n\nmsg.payload = decrypt(msg.payload);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "cryptoImport",
                "module": "crypto"
            }
        ],
        "x": 699,
        "y": 984,
        "wires": [
            [
                "e8bddb7856b4de65"
            ]
        ]
    },
    {
        "id": "7ddb2c540fd2a9a3",
        "type": "debug",
        "z": "2f7f09616aee1b2d",
        "name": "Kotak Lead push JSON response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 940,
        "wires": []
    },
    {
        "id": "d136aab2c0677068",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Update Document Status",
        "func": "const _ = lodash\n\nmsg.uploadStatus = _.get(\n    msg.payload,\n    \"CreateLeadRes.CreateLead.Status\",\n    \"FAILED\"\n);\n\nconsole.log(\"UPLOAD STATUS\", msg.uploadStatus);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "lodash",
                "module": "lodash"
            }
        ],
        "x": 1719,
        "y": 1864,
        "wires": [
            [
                "65c0b823422b6f39"
            ]
        ]
    },
    {
        "id": "de15bbcb730d874f",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Fetch File",
        "func": "const apiUrls = flow.get(\"API_URLS\");\n\nmsg.file = msg.payload;\n\nconst fileID = msg.file.fileID;\n\nmsg.method = \"get\";\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\")\n};\n\nmsg.url = `${apiUrls.go.file}/read/${fileID}`;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1209,
        "y": 1644,
        "wires": [
            [
                "752fe0e1b3be81a0"
            ]
        ]
    },
    {
        "id": "fb24257d69a8473e",
        "type": "debug",
        "z": "2f7f09616aee1b2d",
        "name": "Business Partner payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 361,
        "y": 1076,
        "wires": []
    },
    {
        "id": "e3dd908b5a1eac41",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Convert to XML",
        "func": "const { XMLBuilder } = fastXmlParser;\n\nconst xmlBuilder = new XMLBuilder({\n  ignoreAttributes: false,\n});\n\nconst payload = xmlBuilder.build(msg.payload);\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fastXmlParser",
                "module": "fast-xml-parser"
            }
        ],
        "x": 469,
        "y": 864,
        "wires": [
            [
                "2e1c87b58eee4dbb"
            ]
        ]
    },
    {
        "id": "2f9192826d2a9941",
        "type": "http request",
        "z": "2f7f09616aee1b2d",
        "name": "Generate Lead ID",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 479,
        "y": 984,
        "wires": [
            [
                "7b302b43519269da",
                "b720054db612783a"
            ]
        ]
    },
    {
        "id": "ed890c459003381d",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Convert to JSON",
        "func": "const { XMLParser } = fastXmlParser\n\nconst xmlParser = new XMLParser({\n  ignoreAttributes: false,\n});\n\nconst payload = xmlParser.parse(msg.payload);\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fastXmlParser",
                "module": "fast-xml-parser"
            }
        ],
        "x": 1479,
        "y": 1864,
        "wires": [
            [
                "d136aab2c0677068",
                "c17fb84074509a2a"
            ]
        ]
    },
    {
        "id": "752fe0e1b3be81a0",
        "type": "http request",
        "z": "2f7f09616aee1b2d",
        "name": "Read Files from fileID",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1429,
        "y": 1644,
        "wires": [
            [
                "1de036e0bbc91dc6"
            ]
        ]
    },
    {
        "id": "2e1c87b58eee4dbb",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Encryption",
        "func": "const kotakConfig = flow.get(\"KOTAK_CONFIG\");\n\nconst crypto = cryptoImport\n\nconst payload = msg.payload;\n\nfunction encrypt(plainText) {\n    const iv = crypto.randomBytes(kotakConfig.ivLength);\n    const ivBuffer = Buffer.from(iv);\n\n    const cipher = crypto.createCipheriv(\n        kotakConfig.algorithm,\n        kotakConfig.leadPush.clientSecret,\n        iv\n    );\n\n    const encryptedBuffer = cipher.update(plainText);\n    const lastBuffer = cipher.final();\n\n    return Buffer.concat([ivBuffer, encryptedBuffer, lastBuffer]).toString(\n        \"base64\"\n    );\n}\n\nmsg.encryptedPayload = encrypt(payload);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "cryptoImport",
                "module": "crypto"
            }
        ],
        "x": 679,
        "y": 864,
        "wires": [
            [
                "65c9cf34a88f6a0d"
            ]
        ]
    },
    {
        "id": "60d2021aeb3a5f46",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Generate Lead ID request",
        "func": "const apiUrls = flow.get(\"API_URLS\");\n\nmsg.url = `${apiUrls.kotak}/CRM_LeadCreation`;\n\nmsg.method = \"post\";\n\nmsg.headers = {\n    Authorization: `Bearer ${msg.payload.access_token}`,\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n};\n\nmsg.payload = msg.encryptedPayload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 239,
        "y": 984,
        "wires": [
            [
                "2f9192826d2a9941"
            ]
        ]
    },
    {
        "id": "b720054db612783a",
        "type": "debug",
        "z": "2f7f09616aee1b2d",
        "name": "Kotak Lead push raw response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 761,
        "y": 1076,
        "wires": []
    },
    {
        "id": "e97419a421bb7f6a",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Decryption",
        "func": "const kotakConfig = flow.get(\"KOTAK_CONFIG\");\n\nconsole.log(\"KOTAK DOCUMENT PUSH RESPONSE\", msg.payload);\n\nconst crypto = cryptoImport\n\nconst payload = msg.payload;\n\nfunction decrypt(encryptedText) {\n    const buffer = Buffer.from(encryptedText, \"base64\");\n\n    const iv = buffer.slice(0, kotakConfig.ivLength);\n    const encrypted = buffer.slice(kotakConfig.ivLength);\n\n    const decipher = crypto.createDecipheriv(\n        kotakConfig.algorithm,\n        kotakConfig.leadPush.clientSecret,\n        iv\n    );\n\n    const decrypted = decipher.update(encrypted);\n    const final = Buffer.concat([decrypted, decipher.final()]);\n\n    return final.toString();\n}\n\nmsg.payload = decrypt(msg.payload);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "cryptoImport",
                "module": "crypto"
            }
        ],
        "x": 1279,
        "y": 1864,
        "wires": [
            [
                "ed890c459003381d"
            ]
        ]
    },
    {
        "id": "c17fb84074509a2a",
        "type": "debug",
        "z": "2f7f09616aee1b2d",
        "name": "Kotak document push JSON response",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1900,
        "y": 1960,
        "wires": []
    },
    {
        "id": "1de036e0bbc91dc6",
        "type": "base64",
        "z": "2f7f09616aee1b2d",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 1669,
        "y": 1644,
        "wires": [
            [
                "a70960d9417e0b32"
            ]
        ]
    },
    {
        "id": "65c9cf34a88f6a0d",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Genereate Kotak Token Request",
        "func": "const apiUrls = flow.get(\"API_URLS\");\nconst kotakConfig = flow.get(\"KOTAK_CONFIG\");\n\nconst queryString = `?grant_type=client_credentials&client_id=${kotakConfig.leadPush.clientID}&client_secret=${kotakConfig.leadPush.clientSecret}`;\n\nmsg.url = `${apiUrls.kotak}/auth/oauth/v2/token${queryString}`;\n\nmsg.method = \"post\";\n\nmsg.headers = {\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 259,
        "y": 924,
        "wires": [
            [
                "a162fa5c132fe70f"
            ]
        ]
    },
    {
        "id": "a162fa5c132fe70f",
        "type": "http request",
        "z": "2f7f09616aee1b2d",
        "name": "Generate Kotak Token",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 649,
        "y": 924,
        "wires": [
            [
                "60d2021aeb3a5f46"
            ]
        ]
    },
    {
        "id": "7dd85ce682ae1330",
        "type": "http request",
        "z": "2f7f09616aee1b2d",
        "name": "Push document",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1649,
        "y": 1804,
        "wires": [
            [
                "e97419a421bb7f6a",
                "1d4e12fca66573aa"
            ]
        ]
    },
    {
        "id": "a70960d9417e0b32",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Generate Base Payload for File push",
        "func": "const { v4 } = uuid\nconst _ = lodash\n\nconst file = msg.file;\n\nconst basePayload = {\n    CreateLeadReq: {\n        Header: {\n            SrcAppCd: \"CRMNext\",\n            RequestID: v4(),\n        },\n        CreateLead: {\n            Custom: {\n                Sub_Source: \"Online Aggregator\",\n                Sub_Sub_Source: \"\",\n            },\n            DocumentDetails: {\n                DocumentName: _.get(file, \"documentName\", \"\"),\n                FileBase64String: `${msg.payload}`,\n                Description: _.get(file, \"documentDescription\", \"\"),\n            },\n            LeadID: msg.leadID,\n        },\n        \"@_xmlns\": \"http://www.kotak.com/schemas/AggregatorLeadCRM/CreateLeadReq\",\n    },\n};\n\nmsg.payload = basePayload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "lodash",
                "module": "lodash"
            },
            {
                "var": "uuid",
                "module": "uuid"
            }
        ],
        "x": 1219,
        "y": 1704,
        "wires": [
            [
                "6e99af6cbd8db93e"
            ]
        ]
    },
    {
        "id": "0bd1fc0b4835b23a",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Generate file push request",
        "func": "const apiUrls = flow.get(\"API_URLS\");\n\nmsg.url = `${apiUrls.kotak}/CRM_LeadCreation`;\n\nmsg.method = \"post\";\n\nmsg.headers = {\n    Authorization: `Bearer ${msg.payload.access_token}`,\n    'Content-Type': 'text/plain',\n};\n\nmsg.payload = msg.encryptedPayload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1389,
        "y": 1804,
        "wires": [
            [
                "7dd85ce682ae1330"
            ]
        ]
    },
    {
        "id": "1d4e12fca66573aa",
        "type": "debug",
        "z": "2f7f09616aee1b2d",
        "name": "Kotak document push raw response",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 1740,
        "wires": []
    },
    {
        "id": "6e99af6cbd8db93e",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Convert to XML",
        "func": "const { XMLBuilder } = fastXmlParser\n\nconst xmlBuilder = new XMLBuilder({\n  ignoreAttributes: false,\n});\n\nconst payload = xmlBuilder.build(msg.payload);\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fastXmlParser",
                "module": "fast-xml-parser"
            }
        ],
        "x": 1509,
        "y": 1704,
        "wires": [
            [
                "0e3027ab5b208b8c"
            ]
        ]
    },
    {
        "id": "127549099d37be5b",
        "type": "http request",
        "z": "2f7f09616aee1b2d",
        "name": "Generate Kotak Token",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1652,
        "y": 1756,
        "wires": [
            [
                "0bd1fc0b4835b23a"
            ]
        ]
    },
    {
        "id": "0e3027ab5b208b8c",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Encryption",
        "func": "const kotakConfig = flow.get(\"KOTAK_CONFIG\");\n\nconst crypto = cryptoImport\n\nconst payload = msg.payload;\n\nfunction encrypt(plainText) {\n    const iv = crypto.randomBytes(kotakConfig.ivLength);\n    const ivBuffer = Buffer.from(iv);\n\n    const cipher = crypto.createCipheriv(\n        kotakConfig.algorithm,\n        kotakConfig.leadPush.clientSecret,\n        iv\n    );\n\n    const encryptedBuffer = cipher.update(plainText);\n    const lastBuffer = cipher.final();\n\n    return Buffer.concat([ivBuffer, encryptedBuffer, lastBuffer]).toString(\n        \"base64\"\n    );\n}\n\nmsg.encryptedPayload = encrypt(payload);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "cryptoImport",
                "module": "crypto"
            }
        ],
        "x": 1699,
        "y": 1704,
        "wires": [
            [
                "63f818cc9760acae"
            ]
        ]
    },
    {
        "id": "63f818cc9760acae",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Genereate Kotak Token Request",
        "func": "const apiUrls = flow.get(\"API_URLS\");\nconst kotakConfig = flow.get(\"KOTAK_CONFIG\");\n\nconst queryString = `?grant_type=client_credentials&client_id=${kotakConfig.leadPush.clientID}&client_secret=${kotakConfig.leadPush.clientSecret}`;\n\nmsg.url = `${apiUrls.kotak}/auth/oauth/v2/token${queryString}`;\n\nmsg.method = \"post\";\n\nmsg.headers = {\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1362,
        "y": 1755,
        "wires": [
            [
                "127549099d37be5b"
            ]
        ]
    },
    {
        "id": "6dfa7705091bf5dd",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "function 231",
        "func": "let persons = [];\nconst doc = msg.payload\nfor (let i = 0; i < doc.persons.length; i++) {\n    let obj = {};\n    let personalDocuments = doc.documents.filter((el) => el.personId === doc.persons[i].id);\n\n    obj[\"documents\"] = personalDocuments\n    obj[\"person\"] = doc.persons[i]\n    persons.push(obj);\n}\nconsole.log({persons})\nmsg.persons = persons\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 740,
        "wires": [
            [
                "616204f445470488"
            ]
        ]
    },
    {
        "id": "c84d84ff3707e45c",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "mockBusinessPartnerData",
        "func": "msg.payload = {\n    businessPartner: {\n        name: \"MC ENTERPRISES\",\n        businessVintage: \"7\",\n        ownershipOfProperty: \"RENTED\",\n        successionPlan: \"YES\",\n        natureOfBusiness: [],\n    },\n    address: [],\n    documents: [\n        {\n            documentType: \"GSTIN\",\n            documentNo: \"33ABAFM3383M1Z4\",\n            data: {\n                stjCd: \"TN009\",\n                dty: \"Regular\",\n                stj: \"ANNA SALAI\",\n                lgnm: \"MC ENTERPRISES\",\n                adadr: [\n                    {\n                        addr: {\n                            bnm: \"Sakthi Tower H 6th Floor\",\n                            st: \"ANNASALAI\",\n                            loc: \"ANNASALAI CHENNAI\",\n                            bno: \"766\",\n                            stcd: \"Tamil Nadu\",\n                            dst: \"Chennai\",\n                            city: \"\",\n                            flno: \"\",\n                            lt: \"\",\n                            pncd: \"600002\",\n                            lg: \"\",\n                        },\n                        ntr: \"Wholesale Business, Retail Business, Input Service Distributor (ISD)\",\n                    },\n                    {\n                        addr: {\n                            bnm: \"\",\n                            st: \"No.105 Arcot Road, Virugambakkam\",\n                            loc: \"Chennai\",\n                            bno: \"Godown No.XI-A\",\n                            stcd: \"Tamil Nadu\",\n                            dst: \"Chennai\",\n                            city: \"\",\n                            flno: \"Central Warehouse\",\n                            lt: \"\",\n                            pncd: \"600092\",\n                            lg: \"\",\n                        },\n                        ntr: \"Warehouse / Depot\",\n                    },\n                ],\n                cxdt: \"\",\n                nba: [\n                    \"Wholesale Business\",\n                    \"Retail Business\",\n                    \"Input Service Distributor (ISD)\",\n                    \"Warehouse / Depot\",\n                ],\n                gstin: \"33ABAFM3383M1Z4\",\n                lstupdt: \"08/12/2020\",\n                ctb: \"Partnership\",\n                rgdt: \"01/07/2017\",\n                pradr: {\n                    addr: {\n                        bnm: \"Sakthi Tower  I  4th Floor\",\n                        st: \"ANNASALAI\",\n                        loc: \"ANNA SALAICHENNAI\",\n                        bno: \"766\",\n                        stcd: \"Tamil Nadu\",\n                        dst: \"Chennai\",\n                        city: \"\",\n                        flno: \"\",\n                        lt: \"\",\n                        pncd: \"600002\",\n                        lg: \"\",\n                    },\n                    ntr: \"Wholesale Business, Retail Business, Input Service Distributor (ISD)\",\n                },\n                ctjCd: \"TK1004\",\n                tradeNam: \"M C ENTERPRISES\",\n                sts: \"Active\",\n                ctj: \"RANGE IV\",\n                einvoiceStatus: \"No\",\n            },\n            files: [],\n            status: [\n                {\n                    name: \"UPLOAD\",\n                    value: \"COMPLETED\",\n                    description: \"\",\n                    title: \"\",\n                    ts: \"2022-12-09T10:31:50.041Z\",\n                    userId: \"NA\",\n                },\n            ],\n        },\n        {\n            documentType: \"GST\",\n            documentNo: \"33ABAFM3383M1Z4\",\n            data: {\n                status: true,\n                gstNumber: \"33ABAFM3383M1Z4\",\n                primaryAddress:\n                    \"766, Sakthi Tower  I  4th Floor, ANNASALAI, ANNA SALAICHENNAI, Chennai, Tamil Nadu, 600002\",\n                additionalAddressCount: 2,\n                addressInfo: [\n                    \"766, Sakthi Tower H 6th Floor, ANNASALAI, ANNASALAI CHENNAI, Chennai, Tamil Nadu, 600002\",\n                    \"Godown No.XI-A, Central Warehouse, No.105 Arcot Road, Virugambakkam, Chennai, Chennai, Tamil Nadu, 600092\",\n                ],\n                message: \"GST Certificate is valid\",\n            },\n            files: [\n                {\n                    type: \"SELF\",\n                    fileId: \"d7480579-4e7a-4bee-995c-0a65d28c8016-GST_CERTIFICATE\",\n                    fileType: \"application/pdf\",\n                },\n            ],\n            status: [\n                {\n                    description: \"\",\n                    name: \"UPLOAD\",\n                    title: \"\",\n                    ts: \"2023-02-22T07:11:19.777Z\",\n                    userId: \"63930e951ab619b3fdaa5035\",\n                    value: \"COMPLETED\",\n                },\n                {\n                    name: \"E_VERIFY\",\n                    value: \"COMPLETED\",\n                    description: \"GST Certificate is valid\",\n                    title: \"\",\n                    ts: \"2023-02-22T07:11:22.044Z\",\n                    userId: \"63930e951ab619b3fdaa5035\",\n                },\n            ],\n        },\n        {\n            documentType: \"BUSINESS_PAN\",\n            documentNo: \"ABAFM3383M\",\n            data: {\n                panNumber: \"ABAFM3383M\",\n                name: \"MC Enterprises\",\n                dob: \"2022-12-09T10:36:56.360Z\",\n            },\n            files: [\n                {\n                    type: \"SELF\",\n                    fileId: \"671003cd-843e-420d-9c9d-8980201f8b55-BUSINESS_PAN\",\n                    fileType: \"application/pdf\",\n                },\n            ],\n            status: [\n                {\n                    description: \"\",\n                    name: \"UPLOAD\",\n                    title: \"\",\n                    ts: \"2023-02-21T11:42:10.854Z\",\n                    userId: \"63930e951ab619b3fdaa5035\",\n                    value: \"COMPLETED\",\n                },\n                {\n                    name: \"E_VERIFY\",\n                    value: \"COMPLETED\",\n                    description: \"\",\n                    title: \"\",\n                    ts: \"2022-12-09T10:37:23.196Z\",\n                    userId: \"NA\",\n                },\n            ],\n        },\n        {\n            documentType: \"ITR\",\n            documentNo: \"ABAFM3383M\",\n            data: {},\n            files: [\n                {\n                    type: \"SELF\",\n                    fileId: \"a5375670-3733-4c89-a649-af0b4b1ea6f1-ITR\",\n                    fileType: \"application/pdf\",\n                },\n            ],\n            status: [\n                {\n                    description: \"\",\n                    name: \"UPLOAD\",\n                    title: \"\",\n                    ts: \"2023-03-03T07:16:29.480Z\",\n                    userId: \"63930e951ab619b3fdaa5035\",\n                    value: \"COMPLETED\",\n                },\n                {\n                    name: \"E_VERIFY\",\n                    value: \"COMPLETED\",\n                    description: \"ITR processed successfully\",\n                    title: \"\",\n                    ts: \"2023-03-03T07:16:48.061Z\",\n                    userId: \"63930e951ab619b3fdaa5035\",\n                },\n            ],\n        },\n        {\n            documentType: \"BANK_STATEMENT\",\n            documentNo: \"\",\n            data: {},\n            files: [\n                {\n                    type: \"SELF\",\n                    fileId: \"1424e888-708f-45d9-a42f-9a5f1d1d2f34-BANK_STATEMENT\",\n                    fileType: \"application/pdf\",\n                },\n            ],\n            status: [\n                {\n                    description: \"\",\n                    name: \"UPLOAD\",\n                    title: \"\",\n                    ts: \"2022-12-12T16:31:43.572Z\",\n                    userId: \"63930e951ab619b3fdaa5035\",\n                    value: \"COMPLETED\",\n                },\n                {\n                    name: \"E_VERIFY\",\n                    value: \"COMPLETED\",\n                    description: \"\",\n                    title: \"\",\n                    ts: \"2022-12-12T10:50:08.137Z\",\n                    userId: \"NA\",\n                },\n            ],\n        },\n\n        {\n            documentType: \"GSTR1_B2B\",\n            documentNo: \"33ABAFM3383M1Z4\",\n            data: {},\n            files: [],\n            status: [\n                {\n                    name: \"UPLOAD\",\n                    value: \"COMPLETED\",\n                    description: \"\",\n                    ts: \"2022-12-09T11:09:36.570Z\",\n                    userId: \"63930e951ab619b3fdaa5035\",\n                },\n            ],\n        },\n\n        {\n            documentType: \"GSTR1_CDNR\",\n            documentNo: \"33ABAFM3383M1Z4\",\n            data: {},\n            files: [],\n            status: [\n                {\n                    name: \"UPLOAD\",\n                    value: \"COMPLETED\",\n                    description: \"\",\n                    ts: \"2022-12-09T11:10:37.649Z\",\n                    userId: \"63930e951ab619b3fdaa5035\",\n                },\n            ],\n        },\n\n        {\n            documentType: \"GSTR1_HSNSUM\",\n            documentNo: \"33ABAFM3383M1Z4\",\n            data: {},\n            files: [],\n            status: [\n                {\n                    name: \"UPLOAD\",\n                    value: \"ERROR\",\n                    description:\n                        \"No document found in selected financial year. Either this document exists in a different financial year or the document number is incorrect.\",\n                    ts: \"2022-12-09T11:11:07.860Z\",\n                    userId: \"63930e951ab619b3fdaa5035\",\n                },\n            ],\n        },\n\n        {\n            documentType: \"GSTR1_NIL\",\n            documentNo: \"33ABAFM3383M1Z4\",\n            data: {\n                nil: {\n                    inv: [\n                        {\n                            expt_amt: 0,\n                            nil_amt: 79064,\n                            ngsup_amt: 0,\n                            sply_ty: \"INTRAB2B\",\n                        },\n                        {\n                            expt_amt: 0,\n                            nil_amt: 0,\n                            ngsup_amt: 0,\n                            sply_ty: \"INTRAB2C\",\n                        },\n                        {\n                            expt_amt: 0,\n                            nil_amt: 21274,\n                            ngsup_amt: 0,\n                            sply_ty: \"INTRB2B\",\n                        },\n                        {\n                            expt_amt: 0,\n                            nil_amt: 293,\n                            ngsup_amt: 0,\n                            sply_ty: \"INTRB2C\",\n                        },\n                    ],\n                    flag: \"N\",\n                    chksum:\n                        \"86b401f4f6f10e811653e97f7dc0d3442b97e3a575c50612e007b8219495c17d\",\n                },\n            },\n            files: [],\n            status: [\n                {\n                    name: \"UPLOAD\",\n                    value: \"COMPLETED\",\n                    description: \"\",\n                    ts: \"2022-12-09T11:11:21.987Z\",\n                    userId: \"63930e951ab619b3fdaa5035\",\n                },\n            ],\n        },\n\n        {\n            documentType: \"GSTR1_B2CS\",\n            documentNo: \"33ABAFM3383M1Z4\",\n            data: {\n                b2cs: [\n                    {\n                        csamt: 0,\n                        samt: 7770.22,\n                        rt: 12,\n                        flag: \"N\",\n                        pos: \"33\",\n                        txval: 129503.69,\n                        typ: \"OE\",\n                        camt: 7770.22,\n                        chksum:\n                            \"a7dcee5da2537cbd312611e66631ea206b65486ac4fefed0af245d2a1f3b29a7\",\n                        sply_ty: \"INTRA\",\n                    },\n                    {\n                        samt: 8163.54,\n                        rt: 18,\n                        flag: \"N\",\n                        pos: \"33\",\n                        txval: 90706,\n                        typ: \"OE\",\n                        camt: 8163.54,\n                        chksum:\n                            \"8296f5b8320ff1791961a77776692ae852c5f13cc2442a69b12ef8eff94a096a\",\n                        sply_ty: \"INTRA\",\n                    },\n                    {\n                        csamt: 0,\n                        samt: 4575.43,\n                        rt: 5,\n                        flag: \"N\",\n                        pos: \"33\",\n                        txval: 183017.12,\n                        typ: \"OE\",\n                        camt: 4575.43,\n                        chksum:\n                            \"77fb7522374ee366f0bad12444aca1918753f91a44487b20d44ecd675a546cb1\",\n                        sply_ty: \"INTRA\",\n                    },\n                ],\n            },\n            files: [],\n            status: [\n                {\n                    name: \"UPLOAD\",\n                    value: \"COMPLETED\",\n                    description: \"\",\n                    ts: \"2022-12-09T11:11:25.219Z\",\n                    userId: \"63930e951ab619b3fdaa5035\",\n                },\n            ],\n        },\n\n        {\n            documentType: \"GSTR2A_B2B\",\n            documentNo: \"33ABAFM3383M1Z4\",\n            data: {},\n            files: [],\n            status: [\n                {\n                    name: \"UPLOAD\",\n                    value: \"COMPLETED\",\n                    description: \"\",\n                    ts: \"2022-12-09T11:11:28.991Z\",\n                    userId: \"63930e951ab619b3fdaa5035\",\n                },\n            ],\n        },\n\n        {\n            documentType: \"GSTR3B_RETSUM\",\n            documentNo: \"33ABAFM3383M1Z4\",\n            data: {},\n            files: [],\n            status: [\n                {\n                    name: \"UPLOAD\",\n                    value: \"COMPLETED\",\n                    description: \"\",\n                    ts: \"2022-12-09T11:11:36.720Z\",\n                    userId: \"63930e951ab619b3fdaa5035\",\n                },\n            ],\n        },\n\n        {\n            documentType: \"AADHAAR\",\n            documentNo: \"901631567403\",\n            personId: \"shankar\",\n            data: {\n                name: \"Shankar Radhakrishnan\",\n                careOf: \"S/O: Radhakrishnan\",\n                district: \"Kancheepuram\",\n                state: \"Tamil Nadu\",\n                country: \"India\",\n                subDistrict: \"Chennai\",\n                dob: \"1967-07-13T18:30:00.000Z\",\n                gender: \"M\",\n                pinCode: \"600043\",\n                address: \"DHARGA ROAD\",\n                aadhaarNumber: \"901631567403\",\n            },\n            files: [\n                {\n                    type: \"AADHAAR_BACK\",\n                    fileId: \"33263063-65d1-44c8-9328-2f72dbebd84c-AADHAR_BACK\",\n                    fileType: \"application/pdf\",\n                },\n                {\n                    type: \"AADHAAR_FRONT\",\n                    fileId: \"6ca2c4c5-5e09-4b82-81e4-309d8cb283de-AADHAR_FRONT\",\n                    fileType: \"application/pdf\",\n                },\n            ],\n            status: [\n                {\n                    name: \"UPLOAD\",\n                    value: \"COMPLETED\",\n                    description: \"\",\n                    title: \"\",\n                    ts: \"2022-12-09T10:33:21.643Z\",\n                    userId: \"63930e951ab619b3fdaa5035\",\n                },\n                {\n                    name: \"E_VERIFY\",\n                    value: \"COMPLETED\",\n                    description: \"\",\n                    title: \"\",\n                    ts: \"2022-12-09T11:28:47.237Z\",\n                    userId: \"63930e951ab619b3fdaa5035\",\n                },\n            ],\n        },\n\n        {\n            documentType: \"PERSONAL_PAN\",\n            documentNo: \"BHXPS7083N\",\n            personId: \"shankar\",\n            data: {\n                panNumber: \"BHXPS7083N\",\n                name: \"AJIT KUMAR SINGH\",\n                dob: \"1986-07-09T18:30:00.000Z\",\n            },\n            files: [\n                {\n                    type: \"SELF\",\n                    fileId: \"4f30496a-3a19-4a74-a608-5fc06e010cda-PERSONAL_PAN\",\n                    fileType: \"image/jpeg\",\n                },\n            ],\n            status: [\n                {\n                    name: \"UPLOAD\",\n                    value: \"COMPLETED\",\n                    description: \"\",\n                    title: \"\",\n                    ts: \"2023-04-13T04:19:51.858Z\",\n                    userId: \"63930e951ab619b3fdaa5035\",\n                    comment: \"\",\n                },\n                {\n                    name: \"E_VERIFY\",\n                    value: \"ERROR\",\n                    description: \"Aadhaar and PAN details do not match.\",\n                    title: \"\",\n                    ts: \"2023-04-13T04:19:54.060Z\",\n                    userId: \"NA\",\n                },\n            ],\n        },\n\n        {\n            documentType: \"AADHAAR\",\n            documentNo: \"647820174966\",\n            personId: \"ANUPAM TRIWEDI\",\n            data: {\n                name: \"ANUPAM TRIWEDI\",\n                careOf: \"S/O: Radhakrishnan\",\n                district: \"Kancheepuram\",\n                state: \"Tamil Nadu\",\n                country: \"India\",\n                subDistrict: \"Chennai\",\n                dob: \"1967-07-13T18:30:00.000Z\",\n                gender: \"M\",\n                pinCode: \"600043\",\n                address: \"DHARGA ROAD\",\n                aadhaarNumber: \"647820174966\",\n            },\n            files: [\n                {\n                    type: \"AADHAAR_BACK\",\n                    fileId: \"14cf95e2-2cf7-4fc8-917f-15e1024b3adf-AADHAR_BACK\",\n                    fileType: \"application/pdf\",\n                },\n                {\n                    type: \"AADHAAR_FRONT\",\n                    fileId: \"64770f56-2da2-47ca-bf03-d032f19c3f23-AADHAR_FRONT\",\n                    fileType: \"application/pdf\",\n                },\n            ],\n            status: [\n                {\n                    name: \"UPLOAD\",\n                    value: \"COMPLETED\",\n                    description: \"\",\n                    title: \"\",\n                    ts: \"2022-12-09T10:33:21.643Z\",\n                    userId: \"63930e951ab619b3fdaa5035\",\n                },\n                {\n                    name: \"E_VERIFY\",\n                    value: \"COMPLETED\",\n                    description: \"\",\n                    title: \"\",\n                    ts: \"2022-12-09T11:28:47.237Z\",\n                    userId: \"63930e951ab619b3fdaa5035\",\n                },\n            ],\n        },\n\n        {\n            documentType: \"PERSONAL_PAN\",\n            documentNo: \"AFQPT3371Q\",\n            personId: \"ANUPAM TRIWEDI\",\n            data: {\n                panNumber: \"AFQPT3371Q\",\n                name: \"AFQPT3371Q\",\n                dob: \"1986-07-09T18:30:00.000Z\",\n            },\n            files: [\n                {\n                    type: \"SELF\",\n                    fileId: \"01933e96-4d11-4cc7-b21c-a933f9a6e866-PERSONAL_PAN\",\n                    fileType: \"image/jpeg\",\n                },\n            ],\n            status: [\n                {\n                    name: \"UPLOAD\",\n                    value: \"COMPLETED\",\n                    description: \"\",\n                    title: \"\",\n                    ts: \"2023-04-13T04:19:51.858Z\",\n                    userId: \"63930e951ab619b3fdaa5035\",\n                    comment: \"\",\n                },\n                {\n                    name: \"E_VERIFY\",\n                    value: \"ERROR\",\n                    description: \"Aadhaar and PAN details do not match.\",\n                    title: \"\",\n                    ts: \"2023-04-13T04:19:54.060Z\",\n                    userId: \"NA\",\n                },\n            ],\n        },\n    ],\n    persons: [\n        {\n            name: \"R Shankar\",\n            phone: \"+919886452210\",\n            relation: \"\",\n            email: \"febigaj536@cosaxu.com\",\n            dob: \"Fri Dec 09 2022\",\n            id: \"shankar\",\n        },\n        {\n            name: \"ANUPAM TRIWEDI\",\n            phone: \"+919747442344\",\n            relation: \"PARTNER\",\n            email: \"mailsofshravan@gmail.com\",\n            dob: \"Sat Feb 04 1995\",\n            id: \"ANUPAM TRIWEDI\",\n        }\n    ],\n    fieldValues: [\n        {\n            key: \"iifl_live_selfie_copy_1\",\n            value: [\n                {\n                    fileId: \"af59d4e2-3d4d-45a6-9414-9f798d4d3a0c-undefined\",\n                    fileType: \"image/jpeg\",\n                },\n            ],\n        },\n    ],\n    bankAccounts: [\n        {\n            _id: \"63c7c53e634d0b57166818c5\",\n            accountNumber: \"920020009226839\",\n            ifscCode: \"Not available\",\n            accountType: \"OVERDRAFT_OR_CC\",\n            odCCLimit: \"0\",\n            businessPartnerId: \"63930e95390a05e1ee21d58e\",\n            createdOn: \"Wed, 18 Jan 2023 10:09:02 GMT\",\n            createdBy: \"NA\",\n            isDeleted: false,\n            updatedOn: \"Wed, 18 Jan 2023 10:09:02 GMT\",\n            updatedBy: \"NA\",\n            __v: 0,\n        },\n    ],\n    bureauData: null,\n    enterpriseId: [\"637670c7f8e9564da0dea656\"],\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 700,
        "wires": [
            [
                "6dfa7705091bf5dd",
                "68582fb55917c728"
            ]
        ]
    },
    {
        "id": "02f3292fe58ca185",
        "type": "switch",
        "z": "2f7f09616aee1b2d",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 740,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "8fd0f55a648d53da",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Generate Base Payload",
        "func": "const _ = lodash;\nconst { v4 } = uuid;\nconst moment = momentImport;\n\nconst businessPartnerDetails = flow.get(\"BP_DETAILS\");\nconst { index } = msg;\n\nlet personData = msg.payload;\n\nconst userDetails = personData[\"person\"];\nconst address = _.get(businessPartnerDetails, \"address\", {});\nconst documents = personData[\"documents\"]; //_.get(businessPartnerDetails, \"documents\", []);\nconst fieldValues = _.get(businessPartnerDetails, \"fieldValues\", []);\n\nconst leadAmount = fieldValues.find((fields) => fields.key === \"leadAmount\");\n\nconst aadharDocument = documents.find(\n    (document) => document.documentType === \"AADHAAR\"\n);\nconst panDocument = documents.find(\n    (document) => document.documentType === \"PERSONAL_PAN\"\n);\n\n// const productKey =\n//     msg.productType === \"ENTERPRISE BASED PRODUCT\"\n//         ? \"1000106\"\n//         : msg.productType === \"GST BASED PRODUCT\"\n//             ? \"1000059\"\n//             : msg.productType === \"BANK BASED PRODUCT\"\n//                 ? \"1000061\"\n//                 : \"1000061\"\nconst productKey = \"5497\";\n\nconst removeFirstName = `${_.get(aadharDocument, \"data.name\", \"\")}`.split(\" \");\nremoveFirstName.shift();\n\nconst lastName = removeFirstName.join(\" \").trim();\n\nconst applicantTypes = {\n    P: \"SP\",\n    C: \"PVT\",\n    H: \"HUF\",\n    A: \"\",\n    B: \"\",\n    G: \"\",\n    J: \"\",\n    L: \"\",\n    F: \"LLP\",\n    T: \"T\",\n};\n\nconst {reqId,leadID} = msg\n\n\nconst country = `${_.get(aadharDocument, \"data.country\", \"\")}`\n                         .replace(/[^,a-zA-Z0-9 ]/g, \"\")\n                         .trim()\n\nconst state = `${_.get(aadharDocument, \"data.state\", \"\")}`\n                         .replace(/[^,a-zA-Z0-9 ]/g, \"\")\n                         .trim()\n\nconst city = _.get(address, \"city\", \"\")\n\nconst firstName = `${_.get(aadharDocument, \"data.name\", \"\")}`\n                         .split(\" \")[0]\n                         .trim()\n\nconst mobile = _.get(userDetails, \"phone\", \"\").replace(\"+91\", \"\")\n\nconst email = _.get(userDetails, \"email\", \"\")\n\nconst zipCode = `${_.get(aadharDocument, \"data.pinCode\", \"\")}`\n                         .replace(/[^,a-zA-Z0-9 ]/g, \"\")\n                         .trim()\n\nconst pan = _.get(panDocument, \"data.panNumber\", \"\")\n\nconst dob = aadharDocument?.data?.dob.split(\"T\")[0]\n\nconst newPayload = `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\n<CreateLeadReq xmlns=\"http://www.kotak.com/schemas/AggregatorLeadCRM/CreateLeadReq\" xsi:schemaLocation=\"http://www.kotak.com/schemas/AggregatorLeadCRM/CreateLeadReq schema.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\n              <Header>\n\n                             <SrcAppCd>CRMNext</SrcAppCd>\n\n                             <RequestID>${reqId}</RequestID>\n\n              </Header>\n\n              <CreateLead>\n\n                             <LeadID>${leadID}</LeadID>\n\n                             <co-applicantDetails>\n\n                                           <ObjectData>\n\n                                                          <LeadID>${leadID}</LeadID>\n\n                                                          <LayoutID>111212</LayoutID>\n\n                                                          <Country>${country}</Country>\n\n                                                          <State>${state}</State>\n\n                                                          <City>${city}</City>\n\n                                                          <Existing_Customer>N</Existing_Customer>\n\n                                                          <Product>5497</Product>\n\n                                                          <OTP_Trigger>No</OTP_Trigger>\n\n                                                          <FirstName>${firstName}</FirstName>\n\n                                                          <MiddleName></MiddleName>\n\n                                                          <LastName>${lastName}</LastName>\n\n                                                          <Mobile>${mobile}</Mobile>\n\n                                                          <Email>${email}</Email>\n\n                                                          <Co-Applicant_Proffesion_Type></Co-Applicant_Proffesion_Type>\n\n                                                          <Address_Type>Residence Address</Address_Type>\n\n                                                          <Zipcode>${zipCode}</Zipcode>\n\n                                                          <PAN>${pan}</PAN>\n\n                                                         <IndividualORNon_Indi></IndividualORNon_Indi>\n\n                                                          <AddressLine1></AddressLine1>\n\n                                                          <AddressLine2></AddressLine2>\n\n                                                          <Co-Applicant_Type>COBORROWER</Co-Applicant_Type>\n\n                                                          <Landmark1></Landmark1>\n\n                                                         <Same_Address_Co_App>2</Same_Address_Co_App>\n\n                                                          <Address1></Address1>\n\n                                                          <Address2></Address2>\n\n                                                          <Landmark2></Landmark2>\n\n                                                          <Pincode1></Pincode1>\n\n                                                          <City1></City1>\n\n                                                          <State1></State1>\n\n                                                          <Country1></Country1>\n\n                                                         <coapp_Occupation_Type></coapp_Occupation_Type>\n\n                                                         <coapp_Maiden_Name></coapp_Maiden_Name>\n\n                                                          <coapp_Education></coapp_Education>\n\n                                                          <coapp_Income></coapp_Income>\n\n                                                         <Coapp_Mother_Maiden_Name></Coapp_Mother_Maiden_Name>\n\n                                                         <coapp_Marital_Status></coapp_Marital_Status>\n\n                                                         <coapp_Citizenship>Indian</coapp_Citizenship>\n\n                                           <Percentage_Share_of_PartnerORDirector>60</Percentage_Share_of_PartnerORDirector>\n\n                                                          <Gender>1</Gender>\n\n                                                         <Applicant_Lead_ID>${leadID}</Applicant_Lead_ID>\n\n                                                          <Consent></Consent>\n\n                                           <Co_applicants_income_to_be_considered>N</Co_applicants_income_to_be_considered>\n\n                                                         <Income_Verification_status>Verified</Income_Verification_status>\n\n                                           <Official_EmailID_verification_status_>Verified</Official_EmailID_verification_status_>\n\n                                           <Employment_verification_status_of_salaried_financial_co_app>Verified</Employment_verification_status_of_salaried_financial_co_app>\n\n                                                         <Co_applicant_VKYC_Status></Co_applicant_VKYC_Status>\n\n                                                          <DOBorDOI>${dob}</DOBorDOI>\n\n                                                          <Applicant_type3></Applicant_type3>\n\n                                                          <CRN_Number></CRN_Number>\n\n                                                          <Resident_type>R</Resident_type>\n\n                                                         <Relation_with_Applicant></Relation_with_Applicant>\n\n                                                         <CompanyOREmployer_Name></CompanyOREmployer_Name>\n\n                                           </ObjectData>\n\n                             </co-applicantDetails>\n\n              </CreateLead>\n\n              </CreateLeadReq>`;\n\nmsg.payload = newPayload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "lodash",
                "module": "lodash"
            },
            {
                "var": "uuid",
                "module": "uuid"
            },
            {
                "var": "momentImport",
                "module": "moment"
            }
        ],
        "x": 2110,
        "y": 1020,
        "wires": [
            [
                "78d61a0d2a177f36",
                "12e041c4851e5cd4",
                "996283df0ea4c26e"
            ]
        ]
    },
    {
        "id": "78d61a0d2a177f36",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "d": true,
        "name": "Convert to XML",
        "func": "const { XMLBuilder } = fastXmlParser;\n\nconst xmlBuilder = new XMLBuilder({\n  ignoreAttributes: false,\n});\n\nconst payload = xmlBuilder.build(msg.payload);\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fastXmlParser",
                "module": "fast-xml-parser"
            }
        ],
        "x": 1860,
        "y": 1160,
        "wires": [
            [
                "996283df0ea4c26e",
                "b5fa36a37fdbd6e9"
            ]
        ]
    },
    {
        "id": "996283df0ea4c26e",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Encryption",
        "func": "const kotakConfig = flow.get(\"KOTAK_CONFIG\");\n\nconst crypto = cryptoImport\n\nconst payload = msg.payload;\n\nfunction encrypt(plainText) {\n    const iv = crypto.randomBytes(kotakConfig.ivLength);\n    const ivBuffer = Buffer.from(iv);\n\n    const cipher = crypto.createCipheriv(\n        kotakConfig.algorithm,\n        kotakConfig.leadPush.clientSecret,\n        iv\n    );\n\n    const encryptedBuffer = cipher.update(plainText);\n    const lastBuffer = cipher.final();\n\n    return Buffer.concat([ivBuffer, encryptedBuffer, lastBuffer]).toString(\n        \"base64\"\n    );\n}\n\nmsg.encryptedPayload = encrypt(payload);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "cryptoImport",
                "module": "crypto"
            }
        ],
        "x": 2030,
        "y": 1160,
        "wires": [
            [
                "811e5e9d65925ddc"
            ]
        ]
    },
    {
        "id": "811e5e9d65925ddc",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Genereate Kotak Token Request",
        "func": "const apiUrls = flow.get(\"API_URLS\");\nconst kotakConfig = flow.get(\"KOTAK_CONFIG\");\n\nconst queryString = `?grant_type=client_credentials&client_id=${kotakConfig.leadPush.clientID}&client_secret=${kotakConfig.leadPush.clientSecret}`;\n\nmsg.url = `${apiUrls.kotak}/auth/oauth/v2/token${queryString}`;\n\nmsg.method = \"post\";\n\nmsg.headers = {\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 1160,
        "wires": [
            [
                "6e7d646c3e4633a9"
            ]
        ]
    },
    {
        "id": "6e7d646c3e4633a9",
        "type": "http request",
        "z": "2f7f09616aee1b2d",
        "name": "Generate Kotak Token",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1840,
        "y": 1240,
        "wires": [
            [
                "60abd6654369ab4c"
            ]
        ]
    },
    {
        "id": "60abd6654369ab4c",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Generate Lead ID request",
        "func": "const apiUrls = flow.get(\"API_URLS\");\n\nmsg.url = `${apiUrls.kotak}/CRM_LeadCreation`;\n\nmsg.method = \"post\";\n\nmsg.headers = {\n    Authorization: `Bearer ${msg.payload.access_token}`,\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n};\n\nmsg.payload = msg.encryptedPayload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2070,
        "y": 1240,
        "wires": [
            [
                "efbc4fc535fe8dd4"
            ]
        ]
    },
    {
        "id": "efbc4fc535fe8dd4",
        "type": "http request",
        "z": "2f7f09616aee1b2d",
        "name": "Generate Lead ID",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2310,
        "y": 1240,
        "wires": [
            [
                "05dfe9fa127e1a0f",
                "9c283c806c3177b7",
                "384750e5d45136fa"
            ]
        ]
    },
    {
        "id": "d46d4be16e5b225a",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "d": true,
        "name": "function 232",
        "func": "const businessPartnerDetails = flow.get(\"BP_DETAILS\");\n\nlet { persons, payload } = msg\n\n\npersons.shift()\n\nconsole.log({persons})\n\nmsg.persons = persons\n\n// msg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1020,
        "wires": [
            [
                "05dfe9fa127e1a0f"
            ]
        ]
    },
    {
        "id": "05dfe9fa127e1a0f",
        "type": "loop",
        "z": "2f7f09616aee1b2d",
        "name": "persons loop",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "persons",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-last",
        "x": 1830,
        "y": 1020,
        "wires": [
            [
                "9c44d8f43fd1692b"
            ],
            [
                "3bf3074a7ef7cb2a",
                "8fd0f55a648d53da"
            ]
        ]
    },
    {
        "id": "12e041c4851e5cd4",
        "type": "debug",
        "z": "2f7f09616aee1b2d",
        "name": "debug 517",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2330,
        "y": 1000,
        "wires": []
    },
    {
        "id": "05caa38f3dd5a51a",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "d": true,
        "name": "function 233",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 1280,
        "wires": [
            [
                "9c44d8f43fd1692b"
            ]
        ]
    },
    {
        "id": "9c283c806c3177b7",
        "type": "debug",
        "z": "2f7f09616aee1b2d",
        "name": "co-applicant",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2350,
        "y": 1360,
        "wires": []
    },
    {
        "id": "3bf3074a7ef7cb2a",
        "type": "debug",
        "z": "2f7f09616aee1b2d",
        "name": "debug 518",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 960,
        "wires": []
    },
    {
        "id": "384750e5d45136fa",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Decryption",
        "func": "const kotakConfig = flow.get(\"KOTAK_CONFIG\");\n\nconsole.log(\"KOTAK DOCUMENT PUSH RESPONSE\", msg.payload);\n\nconst crypto = cryptoImport\n\nconst payload = msg.payload;\n\nfunction decrypt(encryptedText) {\n    const buffer = Buffer.from(encryptedText, \"base64\");\n\n    const iv = buffer.slice(0, kotakConfig.ivLength);\n    const encrypted = buffer.slice(kotakConfig.ivLength);\n\n    const decipher = crypto.createDecipheriv(\n        kotakConfig.algorithm,\n        kotakConfig.leadPush.clientSecret,\n        iv\n    );\n\n    const decrypted = decipher.update(encrypted);\n    const final = Buffer.concat([decrypted, decipher.final()]);\n\n    return final.toString();\n}\n\nmsg.payload = decrypt(msg.payload);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "cryptoImport",
                "module": "crypto"
            }
        ],
        "x": 2270,
        "y": 1460,
        "wires": [
            [
                "5f0d6a6e0aead880"
            ]
        ]
    },
    {
        "id": "5f0d6a6e0aead880",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Convert to JSON",
        "func": "const { XMLParser } = fastXmlParser\n\nconst xmlParser = new XMLParser({\n  ignoreAttributes: false,\n});\n\nconst payload = xmlParser.parse(msg.payload);\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fastXmlParser",
                "module": "fast-xml-parser"
            }
        ],
        "x": 2470,
        "y": 1460,
        "wires": [
            [
                "cd4b6c0db1092fee"
            ]
        ]
    },
    {
        "id": "cd4b6c0db1092fee",
        "type": "debug",
        "z": "2f7f09616aee1b2d",
        "name": "Kotak co applicant details",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2720,
        "y": 1460,
        "wires": []
    },
    {
        "id": "2757fdb5ec1db7b5",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Generate Base Payload",
        "func": "const _ = lodash;\nconst { v4 } = uuid;\nconst moment = momentImport;\n\n\n\n// const productKey =\n//     msg.productType === \"ENTERPRISE BASED PRODUCT\"\n//         ? \"1000106\"\n//         : msg.productType === \"GST BASED PRODUCT\"\n//             ? \"1000059\"\n//             : msg.productType === \"BANK BASED PRODUCT\"\n//                 ? \"1000061\"\n//                 : \"1000061\"\nconst productKey = \"5497\"\n\nconst applicantTypes = {\n    P: \"SP\",\n    C: \"PVT\",\n    H: \"HUF\",\n    A: \"\",\n    B: \"\",\n    G: \"\",\n    J: \"\",\n    L: \"\",\n    F: \"LLP\",\n    T: \"T\",\n};\n\n// const testData = `${_.get(aadharDocument, \"data.name\", \"\")}`\n//     .split(\" \").shift().join(\" \")\n//     .trim();\n\n\n\n\n\n\nconst payload = `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LeadStatusReq xmlns=\"http://www.kotak.com/schemas/AggregatorLeadCRM/LeadStatusReq\">\n  <Header>\n    <SrcAppCd>CRMNext</SrcAppCd>\n    <RequestID>ddac3124-39f0-4bd3-af92-43c0c6ec3551</RequestID>\n  </Header>\n  <LeadStatus>\n    <LeadID>1339982</LeadID>\n  </LeadStatus>\n</LeadStatusReq>`\nmsg.payload = payload;\n\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "lodash",
                "module": "lodash"
            },
            {
                "var": "uuid",
                "module": "uuid"
            },
            {
                "var": "momentImport",
                "module": "moment"
            }
        ],
        "x": 190,
        "y": 2040,
        "wires": [
            [
                "68c97f15bbc3aaa1",
                "6477507c35b169d4"
            ]
        ]
    },
    {
        "id": "41f22aded1398c20",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Convert to XML",
        "func": "const { XMLBuilder } = fastXmlParser;\n\nconst xmlBuilder = new XMLBuilder({\n  ignoreAttributes: false,\n});\n\nconst payload = xmlBuilder.build(msg.payload);\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fastXmlParser",
                "module": "fast-xml-parser"
            }
        ],
        "x": 600,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "68c97f15bbc3aaa1",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Encryption",
        "func": "const kotakConfig = flow.get(\"KOTAK_CONFIG\");\nconst clientSecret = `a8bb453cab0f442e936ed347acb0844d`\nconst crypto = cryptoImport\n\nconst payload = msg.payload;\n\nfunction encrypt(plainText) {\n    const iv = crypto.randomBytes(kotakConfig.ivLength);\n    const ivBuffer = Buffer.from(iv);\n    \n    const cipher = crypto.createCipheriv(\n        kotakConfig.algorithm,\n        // kotakConfig.leadPush.clientSecret,\n        clientSecret,\n        iv\n    );\n    const encryptedBuffer = cipher.update(plainText);\n    const lastBuffer = cipher.final();\n    return Buffer.concat([ivBuffer, encryptedBuffer, lastBuffer]).toString(\n        \"base64\"\n    );\n}\n\nmsg.encryptedPayload = encrypt(payload);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "cryptoImport",
                "module": "crypto"
            }
        ],
        "x": 650,
        "y": 2040,
        "wires": [
            [
                "faef099af8f20d40"
            ]
        ]
    },
    {
        "id": "faef099af8f20d40",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Genereate Kotak Token Request",
        "func": "const apiUrls = flow.get(\"API_URLS\");\nconst kotakConfig = flow.get(\"KOTAK_CONFIG\");\nconst auth = {\n    // clientID: \"l7xx70253b8824e64a6c9aa46fab30f3d54f\",\n    clientID: \"l77e5166090d444514a3dae03a992b2787\",\n// clientSecret: \"847c668113844f4682533bfccff17146\"}\n    clientSecret: \"a8bb453cab0f442e936ed347acb0844d\"}\nconst queryString = `?grant_type=client_credentials&client_id=${auth.clientID}&client_secret=${auth.clientSecret}`;\n\nmsg.url = `${apiUrls.kotak}/auth/oauth/v2/token${queryString}`;\n\nmsg.method = \"post\";\n\nmsg.headers = {\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n};\n\nmsg.payload = {\n    Username: \"CRM_Reverse\",\nPassword: \"CRM_Reverse@123#\"\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 2100,
        "wires": [
            [
                "3bbcc998a8e6f4fe",
                "ccdcff4a39371a7d"
            ]
        ]
    },
    {
        "id": "3bbcc998a8e6f4fe",
        "type": "http request",
        "z": "2f7f09616aee1b2d",
        "name": "Generate Kotak Token",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 660,
        "y": 2100,
        "wires": [
            [
                "c587bd7ada94f8f4",
                "932da30c851da3d1"
            ]
        ]
    },
    {
        "id": "c587bd7ada94f8f4",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "get Lead status request",
        "func": "const apiUrls = flow.get(\"API_URLS\");\n\n// msg.url = `https://apigwuat.kotak.com:8443/Aggregator_RevStatus`;\nmsg.url = `https://apigwuat.kotak.com:8443/V1/Aggregator_RevStatus`;\n\nmsg.method = \"post\";\n\nmsg.headers = {\n    Authorization: `Bearer ${msg.payload.access_token}`,\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n};\n\nmsg.payload = msg.encryptedPayload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 2160,
        "wires": [
            [
                "45a08146c1a7e2fd",
                "c93365ec072de9f1"
            ]
        ]
    },
    {
        "id": "e20b024221d7baa2",
        "type": "inject",
        "z": "2f7f09616aee1b2d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1960,
        "wires": [
            [
                "4c8213fa0728a963"
            ]
        ]
    },
    {
        "id": "4c8213fa0728a963",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Init Global Vars",
        "func": "// const ENV = \"prod\";  // PROD\nconst ENV = \"uat\";      // UAT\n\nconst ADMIN_SERVICE_URL = `https://actyv-platform-admin-service.${ENV}.actyv.com/api`;\nconst GO_SERVICE_URL = `https://actyv-platform-go-service.${ENV}.actyv.com/api`;\nconst PAYLATER_SERVICE_URL = `https://actyv-platform-paylater-service-v1.${ENV}.actyv.com/v1`;\n\nconst API_URLS = {\n    go: {\n        bankApplications: `${GO_SERVICE_URL}/bank-application`,\n        bank: `${GO_SERVICE_URL}/bank`,\n        enterprise: `${GO_SERVICE_URL}/enterprise`,\n        businessPartner: `${GO_SERVICE_URL}/business-partner`,\n        businessPartnerApplication: `${GO_SERVICE_URL}/business-partner-application`,\n        file: `${GO_SERVICE_URL}/file`,\n    },\n\n    admin: {\n        user: `${ADMIN_SERVICE_URL}/user`,\n    },\n\n    paylater: {\n        business: `${PAYLATER_SERVICE_URL}/business`,\n    },\n\n    // kotak: \"https://apigw.kotak.com:8446\",  // PROD\n    // kotak: \"https://apigwuat.kotak.com:8443\", //UAT\n    kotak: \"https://apigwuat.kotak.com:8443\",\n};\n\nconst BUSINESS_CONSTANTS = {\n    bankKey: \"kotak\",\n    enterpriseKey: \"cavinkare\",\n\n    // applicationStatus: \"AWAITING_LEAD_PUSH\",\n    applicationStatus: \"DOCUMENT_CAPTURE\",\n    // applicationStatus: \"CREDIT_MANAGER_REVIEW\",\n\n    bankIdentifier: \"IIFL123\",\n    enterpriseIdentifier: \"AAACB3754B\",\n};\n\nconst USER_CONSTANTS = {\n    bank: {\n        email: \"anand.rastogi@actyv.com\",\n        password: \"890ioP@12\",\n    },\n\n    enterprise: {\n        email: \"anand.rastogi@actyv.com\",\n        password: \"890ioP@12\",\n    },\n};\n\nconst KOTAK_CONFIG = {\n    algorithm: \"aes-256-cbc\",\n    ivLength: 16,\n\n    // PROD\n    // leadPush: {\n    //     clientID: \"l70a3247a3bf6a41bebb8dbc41745e53bd\",\n    //     clientSecret: \"15b4084e4a0c43f1a8f018df8feb50b5\",\n    // },\n\n    leadPush: {\n        clientID: \"l7xx4a0eb303bda24dc393af68924f3bb009\",\n        clientSecret: \"fd8fe23dce7b440eb976eeb7c0351ebd\",\n    },\n};\n\nflow.set(\"API_URLS\", API_URLS);\nflow.set(\"BUSINESS_CONSTANTS\", BUSINESS_CONSTANTS);\nflow.set(\"USER_CONSTANTS\", USER_CONSTANTS);\nflow.set(\"KOTAK_CONFIG\", KOTAK_CONFIG);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "lodash",
                "module": "lodash"
            }
        ],
        "x": 460,
        "y": 1960,
        "wires": [
            [
                "2757fdb5ec1db7b5"
            ]
        ]
    },
    {
        "id": "b5fa36a37fdbd6e9",
        "type": "debug",
        "z": "2f7f09616aee1b2d",
        "name": "debug 519",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2170,
        "y": 1100,
        "wires": []
    },
    {
        "id": "c93365ec072de9f1",
        "type": "http request",
        "z": "2f7f09616aee1b2d",
        "name": "Get Lead status",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 180,
        "y": 2300,
        "wires": [
            [
                "f5c44d25f65ddc6b",
                "0f6a58329fa7796f"
            ]
        ]
    },
    {
        "id": "f5c44d25f65ddc6b",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Decryption",
        "func": "const kotakConfig = flow.get(\"KOTAK_CONFIG\");\n\nconst clientSecret = `a8bb453cab0f442e936ed347acb0844d`\nconst crypto = cryptoImport\n\nconst payload = msg.payload;\n\nconsole.log(\"KOTAK RESPONSE\", payload);\n\nfunction decrypt(encryptedText) {\n    const buffer = Buffer.from(encryptedText, \"base64\");\n\n    const iv = buffer.slice(0, kotakConfig.ivLength);\n    const encrypted = buffer.slice(kotakConfig.ivLength);\n\n    const decipher = crypto.createDecipheriv(\n        kotakConfig.algorithm,\n        // kotakConfig.leadPush.clientSecret,\n        clientSecret,\n        iv\n    );\n\n    const decrypted = decipher.update(encrypted);\n    const final = Buffer.concat([decrypted, decipher.final()]);\n\n    return final.toString();\n}\n\nmsg.payload = decrypt(msg.payload);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "cryptoImport",
                "module": "crypto"
            }
        ],
        "x": 410,
        "y": 2300,
        "wires": [
            [
                "1f6d28a7fafd1a3c"
            ]
        ]
    },
    {
        "id": "1f6d28a7fafd1a3c",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Convert to JSON",
        "func": "const { XMLParser } = fastXmlParser\n\nconst xmlParser = new XMLParser({\n  ignoreAttributes: false,\n});\n\nconst payload = xmlParser.parse(msg.payload);\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fastXmlParser",
                "module": "fast-xml-parser"
            }
        ],
        "x": 590,
        "y": 2300,
        "wires": [
            [
                "ae94d128b5c718c8"
            ]
        ]
    },
    {
        "id": "ae94d128b5c718c8",
        "type": "debug",
        "z": "2f7f09616aee1b2d",
        "name": "Kotak Lead push JSON response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 2360,
        "wires": []
    },
    {
        "id": "0f6a58329fa7796f",
        "type": "debug",
        "z": "2f7f09616aee1b2d",
        "name": "Kotak Lead push raw response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 472,
        "y": 2392,
        "wires": []
    },
    {
        "id": "122048678b637536",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Decryption",
        "func": "const kotakConfig = flow.get(\"KOTAK_CONFIG\");\n\nconst clientSecret = `a8bb453cab0f442e936ed347acb0844d`\nconst crypto = cryptoImport\n\nconst payload = msg.payload;\n\nconsole.log(\"KOTAK RESPONSE\", payload);\n\nfunction decrypt(encryptedText) {\n    const buffer = Buffer.from(encryptedText, \"base64\");\n\n    const iv = buffer.slice(0, kotakConfig.ivLength);\n    const encrypted = buffer.slice(kotakConfig.ivLength);\n\n    const decipher = crypto.createDecipheriv(\n        kotakConfig.algorithm,\n        // kotakConfig.leadPush.clientSecret,\n        clientSecret,\n        iv\n    );\n\n    const decrypted = decipher.update(encrypted);\n    const final = Buffer.concat([decrypted, decipher.final()]);\n\n    return final.toString();\n}\n\nmsg.payload = decrypt(msg.payload);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "cryptoImport",
                "module": "crypto"
            }
        ],
        "x": 470,
        "y": 2540,
        "wires": [
            [
                "eadf1b71eb6aa1eb"
            ]
        ]
    },
    {
        "id": "6180adddc156af98",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "function 239",
        "func": "msg.payload = \"7p4LhRQcPyAaj/dRe3xc7BNrsPCk6rbHGoeDRrvZiCZ4IORxDAa5AZrtGUsWY8839o9q9oKgJY+5/geBHLV9/Q0cyPS4p274abb/IayJSdh4C7j5S11rqBgcCHAbrC9dVF1r2bjw5QjX/KXwo5zMbsqybE2JdjjP+fSaPXQGXXfWl/eyAxi7b/T6PynUKYE2A0BlGA3b+fynUy8ZF2mVMsPhFBtxhgJ9lB9q3zM0wDPgRMpHV/bqxRtO2eOrvwcpvhDYREL7CCvvmBsDqkGRNL76UWoFjOCLEGM0VntukX49acquSd4Phax/3X5a45RG4dpE03wsZnK1iLp0XREyfRRMNIiYILCFRlQTo4uY3/JwKDx8j/ELgSk71kD6aQg7ofFJ34SRbyFB8k9OB8e4kgo93spyJLSACTxqkFYl/jX77qWMeueDCK5iA36gEN8IVrzHIUnMWTCgdnlwZ2RyOQ==\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 2540,
        "wires": [
            [
                "122048678b637536"
            ]
        ]
    },
    {
        "id": "aebfec8cbca0de1f",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Init Global Vars",
        "func": "// const ENV = \"prod\";  // PROD\nconst ENV = \"uat\";\n\nconst ADMIN_SERVICE_URL = `https://actyv-platform-admin-service.${ENV}.actyv.com/api`;\nconst GO_SERVICE_URL = `https://actyv-platform-go-service.${ENV}.actyv.com/api`;\nconst PAYLATER_SERVICE_URL = `https://actyv-platform-paylater-service-v1.${ENV}.actyv.com/v1`;\n\nconst API_URLS = {\n    go: {\n        bankApplications: `${GO_SERVICE_URL}/bank-application`,\n        bank: `${GO_SERVICE_URL}/bank`,\n        enterprise: `${GO_SERVICE_URL}/enterprise`,\n        businessPartner: `${GO_SERVICE_URL}/business-partner`,\n        businessPartnerApplication: `${GO_SERVICE_URL}/business-partner-application`,\n        file: `${GO_SERVICE_URL}/file`,\n    },\n\n    admin: {\n        user: `${ADMIN_SERVICE_URL}/user`,\n    },\n\n    paylater: {\n        business: `${PAYLATER_SERVICE_URL}/business`,\n    },\n\n    // kotak: \"https://apigw.kotak.com:8446\",  // PROD\n    // kotak: \"https://apigwuat.kotak.com:8443\", //UAT\n    kotak: \"https://apigwuat.kotak.com/v1:8443\",\n};\n\nconst BUSINESS_CONSTANTS = {\n    bankKey: \"kotak\",\n    enterpriseKey: \"cavinkare\",\n\n    // applicationStatus: \"AWAITING_LEAD_PUSH\",\n    applicationStatus: \"DOCUMENT_CAPTURE\",\n    // applicationStatus: \"CREDIT_MANAGER_REVIEW\",\n\n    bankIdentifier: \"IIFL123\",\n    enterpriseIdentifier: \"AAACB3754B\",\n};\n\nconst USER_CONSTANTS = {\n    bank: {\n        email: \"anand.rastogi@actyv.com\",\n        password: \"890ioP@12\",\n    },\n\n    enterprise: {\n        email: \"anand.rastogi@actyv.com\",\n        password: \"890ioP@12\",\n    },\n};\n\nconst KOTAK_CONFIG = {\n    algorithm: \"aes-256-cbc\",\n    ivLength: 16,\n\n    // PROD\n    // leadPush: {\n    //     clientID: \"l70a3247a3bf6a41bebb8dbc41745e53bd\",\n    //     clientSecret: \"15b4084e4a0c43f1a8f018df8feb50b5\",\n    // },\n\n    leadPush: {\n        clientID: \"l7xx4a0eb303bda24dc393af68924f3bb009\",\n        clientSecret: \"fd8fe23dce7b440eb976eeb7c0351ebd\",\n    },\n};\n\nflow.set(\"API_URLS\", API_URLS);\nflow.set(\"BUSINESS_CONSTANTS\", BUSINESS_CONSTANTS);\nflow.set(\"USER_CONSTANTS\", USER_CONSTANTS);\nflow.set(\"KOTAK_CONFIG\", KOTAK_CONFIG);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "lodash",
                "module": "lodash"
            }
        ],
        "x": 520,
        "y": 2460,
        "wires": [
            [
                "6180adddc156af98"
            ]
        ]
    },
    {
        "id": "454da964733aa4e8",
        "type": "inject",
        "z": "2f7f09616aee1b2d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 2460,
        "wires": [
            [
                "aebfec8cbca0de1f"
            ]
        ]
    },
    {
        "id": "eadf1b71eb6aa1eb",
        "type": "debug",
        "z": "2f7f09616aee1b2d",
        "name": "debug 549",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 2540,
        "wires": []
    },
    {
        "id": "e46026aa4bd6c9be",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Genereate Kotak Token Request",
        "func": "const apiUrls = flow.get(\"API_URLS\");\nconst kotakConfig = flow.get(\"KOTAK_CONFIG\");\n\nconst queryString = `?grant_type=client_credentials&client_id=${kotakConfig.leadPush.clientID}&client_secret=${kotakConfig.leadPush.clientSecret}`;\n\nmsg.url = `${apiUrls.kotak}/auth/oauth/v2/token${queryString}`;\n\nmsg.method = \"post\";\n\nmsg.headers = {\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1440,
        "wires": [
            [
                "eead8a9d25b25ffe"
            ]
        ]
    },
    {
        "id": "eead8a9d25b25ffe",
        "type": "http request",
        "z": "2f7f09616aee1b2d",
        "name": "Generate Kotak Token",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 720,
        "y": 1440,
        "wires": [
            [
                "1d0d1152e6eb4251"
            ]
        ]
    },
    {
        "id": "1263a290e557d543",
        "type": "inject",
        "z": "2f7f09616aee1b2d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 1340,
        "wires": [
            [
                "622d6b94504bf106"
            ]
        ]
    },
    {
        "id": "622d6b94504bf106",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Init Global Vars",
        "func": "// const ENV = \"prod\";  // PROD\nconst ENV = \"uat\";\n\nconst ADMIN_SERVICE_URL = `https://actyv-platform-admin-service.${ENV}.actyv.com/api`;\nconst GO_SERVICE_URL = `https://actyv-platform-go-service.${ENV}.actyv.com/api`;\nconst PAYLATER_SERVICE_URL = `https://actyv-platform-paylater-service-v1.${ENV}.actyv.com/v1`;\n\nconst API_URLS = {\n    go: {\n        bankApplications: `${GO_SERVICE_URL}/bank-application`,\n        bank: `${GO_SERVICE_URL}/bank`,\n        enterprise: `${GO_SERVICE_URL}/enterprise`,\n        businessPartner: `${GO_SERVICE_URL}/business-partner`,\n        businessPartnerApplication: `${GO_SERVICE_URL}/business-partner-application`,\n        file: `${GO_SERVICE_URL}/file`,\n    },\n\n    admin: {\n        user: `${ADMIN_SERVICE_URL}/user`,\n    },\n\n    paylater: {\n        business: `${PAYLATER_SERVICE_URL}/business`,\n    },\n\n    // kotak: \"https://apigw.kotak.com:8446\",  // PROD\n    kotak: \"https://apigwuat.kotak.com:8443\",\n};\n\nconst BUSINESS_CONSTANTS = {\n    bankKey: \"kotak\",\n    enterpriseKey: \"cavinkare\",\n\n    // applicationStatus: \"AWAITING_LEAD_PUSH\",\n    applicationStatus: \"DOCUMENT_CAPTURE\",\n    // applicationStatus: \"CREDIT_MANAGER_REVIEW\",\n\n    bankIdentifier: \"IIFL123\",\n    enterpriseIdentifier: \"AAACB3754B\",\n};\n\nconst USER_CONSTANTS = {\n    bank: {\n        email: \"anand.rastogi@actyv.com\",\n        password: \"890ioP@12\",\n    },\n\n    enterprise: {\n        email: \"anand.rastogi@actyv.com\",\n        password: \"890ioP@12\",\n    },\n};\n\nconst KOTAK_CONFIG = {\n    algorithm: \"aes-256-cbc\",\n    ivLength: 16,\n\n    // PROD\n    // leadPush: {\n    //     clientID: \"l70a3247a3bf6a41bebb8dbc41745e53bd\",\n    //     clientSecret: \"15b4084e4a0c43f1a8f018df8feb50b5\",\n    // },\n\n    leadPush: {\n        clientID: \"l7xx4a0eb303bda24dc393af68924f3bb009\",\n        clientSecret: \"fd8fe23dce7b440eb976eeb7c0351ebd\",\n    },\n};\n\nflow.set(\"API_URLS\", API_URLS);\nflow.set(\"BUSINESS_CONSTANTS\", BUSINESS_CONSTANTS);\nflow.set(\"USER_CONSTANTS\", USER_CONSTANTS);\nflow.set(\"KOTAK_CONFIG\", KOTAK_CONFIG);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "lodash",
                "module": "lodash"
            }
        ],
        "x": 620,
        "y": 1340,
        "wires": [
            [
                "d1fc787047270e6e"
            ]
        ]
    },
    {
        "id": "1d0d1152e6eb4251",
        "type": "debug",
        "z": "2f7f09616aee1b2d",
        "name": "debug 550",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 1520,
        "wires": []
    },
    {
        "id": "d1fc787047270e6e",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "Genereate Kotak Token Request",
        "func": "const apiUrls = flow.get(\"API_URLS\");\nconst kotakConfig = flow.get(\"KOTAK_CONFIG\");\nconst auth = {\n    // clientID: \"l7xx70253b8824e64a6c9aa46fab30f3d54f\",\n    clientID: \"l77e5166090d444514a3dae03a992b2787\",\n// clientSecret: \"847c668113844f4682533bfccff17146\"}\n    clientSecret: \"a8bb453cab0f442e936ed347acb0844d\"}\nconst queryString = `?grant_type=client_credentials&client_id=${auth.clientID}&client_secret=${auth.clientSecret}`;\n\nmsg.url = `${apiUrls.kotak}/auth/oauth/v2/token${queryString}`;\n\nmsg.method = \"post\";\n\nmsg.headers = {\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n};\n\nmsg.payload = {\n    Username: \"CRM_Reverse\",\nPassword: \"CRM_Reverse@123#\"\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1400,
        "wires": [
            [
                "eead8a9d25b25ffe",
                "7c1edf5ae85573d2"
            ]
        ]
    },
    {
        "id": "7c1edf5ae85573d2",
        "type": "debug",
        "z": "2f7f09616aee1b2d",
        "name": "debug 551",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 1340,
        "wires": []
    },
    {
        "id": "932da30c851da3d1",
        "type": "debug",
        "z": "2f7f09616aee1b2d",
        "name": "debug 592",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 2200,
        "wires": []
    },
    {
        "id": "853e73fb82076262",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "function 246",
        "func": "msg.payload = msg.payload.slice(0,1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 520,
        "wires": [
            [
                "7af20c34dd73eda0"
            ]
        ]
    },
    {
        "id": "ccdcff4a39371a7d",
        "type": "debug",
        "z": "2f7f09616aee1b2d",
        "name": "debug 593",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 2160,
        "wires": []
    },
    {
        "id": "45a08146c1a7e2fd",
        "type": "debug",
        "z": "2f7f09616aee1b2d",
        "name": "debug 594",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 2240,
        "wires": []
    },
    {
        "id": "6477507c35b169d4",
        "type": "debug",
        "z": "2f7f09616aee1b2d",
        "name": "debug 596",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 2000,
        "wires": []
    },
    {
        "id": "7b38416ad63fb55b",
        "type": "function",
        "z": "2f7f09616aee1b2d",
        "name": "saveClientIdReq",
        "func": "\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/service`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${actyvToken}`,\n    businesspartnerid: msg.businessPartnerID,\n    enterpriseid: msg.enterpriseId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"kotak_leadId\",\n    \"value\": {\n        leadId: msg.leadID,\n        reqId: msg.reqId\n        \n    },\n    \"businessPartnerId\": msg.businessPartnerID,\n    \"bankApplicationId\": msg.bankApplicationId,\n    \"enterpriseId\": msg.enterpriseId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 840,
        "wires": [
            [
                "5522687f3b3b9ac0"
            ]
        ]
    },
    {
        "id": "9a8e5602608cfcf9",
        "type": "debug",
        "z": "2f7f09616aee1b2d",
        "name": "saveClientId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2150,
        "y": 840,
        "wires": []
    },
    {
        "id": "5522687f3b3b9ac0",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "2f7f09616aee1b2d",
        "name": "saveClientId",
        "x": 1890,
        "y": 840,
        "wires": [
            [
                "9a8e5602608cfcf9"
            ],
            [
                "9a8e5602608cfcf9"
            ]
        ]
    },
    {
        "id": "69ad73ce72223be8",
        "type": "debug",
        "z": "2f7f09616aee1b2d",
        "name": "debug 614",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 540,
        "wires": []
    },
    {
        "id": "812b92a6a6e4be2f",
        "type": "inject",
        "z": "8190ed7d744371a3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 100,
        "wires": [
            [
                "77517d0d5ac040d9"
            ]
        ]
    },
    {
        "id": "77517d0d5ac040d9",
        "type": "function",
        "z": "8190ed7d744371a3",
        "name": "Init Global Vars",
        "func": "// const ENV = \"prod\";  // PROD\nconst ENV = \"uat\";\n\nconst ADMIN_SERVICE_URL = `https://actyv-platform-admin-service.${ENV}.actyv.com/api`;\nconst GO_SERVICE_URL = `https://actyv-platform-go-service.${ENV}.actyv.com/api`;\nconst PAYLATER_SERVICE_URL = `https://actyv-platform-paylater-service-v1.${ENV}.actyv.com/v1`;\n\nconst API_URLS = {\n    go: {\n        bankApplications: `${GO_SERVICE_URL}/bank-application`,\n        bank: `${GO_SERVICE_URL}/bank`,\n        enterprise: `${GO_SERVICE_URL}/enterprise`,\n        businessPartner: `${GO_SERVICE_URL}/business-partner`,\n        businessPartnerApplication: `${GO_SERVICE_URL}/business-partner-application`,\n        file: `${GO_SERVICE_URL}/file`,\n    },\n\n    admin: {\n        user: `${ADMIN_SERVICE_URL}/user`,\n    },\n\n    paylater: {\n        business: `${PAYLATER_SERVICE_URL}/business`,\n    },\n\n    // kotak: \"https://apigw.kotak.com:8446\",  // PROD\n    kotak: \"https://apigwuat.kotak.com:8443\",\n};\n\nconst BUSINESS_CONSTANTS = {\n    bankKey: \"kotak\",\n    enterpriseKey: \"cavinkare\",\n\n    // applicationStatus: \"AWAITING_LEAD_PUSH\",\n    applicationStatus: \"DOCUMENT_CAPTURE\",\n    // applicationStatus: \"CREDIT_MANAGER_REVIEW\",\n\n    bankIdentifier: \"IIFL123\",\n    enterpriseIdentifier: \"AAACB3754B\",\n};\n\nconst USER_CONSTANTS = {\n    bank: {\n        email: \"anand.rastogi@actyv.com\",\n        password: \"890ioP@12\",\n    },\n\n    enterprise: {\n        email: \"anand.rastogi@actyv.com\",\n        password: \"890ioP@12\",\n    },\n};\n\nconst KOTAK_CONFIG = {\n    algorithm: \"aes-256-cbc\",\n    ivLength: 16,\n\n    // PROD\n    // leadPush: {\n    //     clientID: \"l70a3247a3bf6a41bebb8dbc41745e53bd\",\n    //     clientSecret: \"15b4084e4a0c43f1a8f018df8feb50b5\",\n    // },\n\n    leadPush: {\n        clientID: \"l7xx4a0eb303bda24dc393af68924f3bb009\",\n        clientSecret: \"fd8fe23dce7b440eb976eeb7c0351ebd\",\n    },\n};\n\nflow.set(\"API_URLS\", API_URLS);\nflow.set(\"BUSINESS_CONSTANTS\", BUSINESS_CONSTANTS);\nflow.set(\"USER_CONSTANTS\", USER_CONSTANTS);\nflow.set(\"KOTAK_CONFIG\", KOTAK_CONFIG);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "lodash",
                "module": "lodash"
            }
        ],
        "x": 560,
        "y": 100,
        "wires": [
            [
                "97caef5556afbb1c"
            ]
        ]
    },
    {
        "id": "97caef5556afbb1c",
        "type": "function",
        "z": "8190ed7d744371a3",
        "name": "Setting Enterprise Token",
        "func": "const apiUrls = flow.get(\"API_URLS\");\nconst users = flow.get(\"USER_CONSTANTS\");\n\nconst enterpriseUserEmail = env.get(\"CKPL_ENTERPRISE_ADMIN_EMAIL\")//users.enterprise.email;\nconst enterpriseUserPassword = users.enterprise.password;\n\nmsg.payload = {\n    email: enterpriseUserEmail,\n    password: enterpriseUserPassword,\n};\n\nmsg.url = `${apiUrls.admin.user}/authenticateUser`;\nmsg.method = \"post\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 159,
        "y": 184,
        "wires": [
            [
                "6423f82a9e440763"
            ]
        ]
    },
    {
        "id": "6423f82a9e440763",
        "type": "http request",
        "z": "8190ed7d744371a3",
        "name": "Generate Token",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "bearer",
        "senderr": false,
        "x": 429,
        "y": 184,
        "wires": [
            [
                "9423aff6d7d4688d"
            ]
        ]
    },
    {
        "id": "9423aff6d7d4688d",
        "type": "function",
        "z": "8190ed7d744371a3",
        "name": "Setting enterprise token",
        "func": "const idToken = msg.payload.idToken\n\nflow.set(\"enterpriseToken\", idToken)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 699,
        "y": 184,
        "wires": [
            [
                "cbbec108abf2ef82"
            ]
        ]
    },
    {
        "id": "cbbec108abf2ef82",
        "type": "function",
        "z": "8190ed7d744371a3",
        "name": "Setting bank token Request",
        "func": "const apiUrls = flow.get(\"API_URLS\");\nconst users = flow.get(\"USER_CONSTANTS\");\n\nconst bankUserEmail = env.get(\"IIFL_BANK_ADMIN_EMAIL\") //users.bank.email;\nconst bankUserPassword = users.bank.password;\n\nmsg.payload = {\n    email: bankUserEmail,\n    password: bankUserPassword,\n};\n\nmsg.url = `${apiUrls.admin.user}/authenticateUser`;\nmsg.method = \"post\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 149,
        "y": 244,
        "wires": [
            [
                "1e1e6ce5ec11bb51"
            ]
        ]
    },
    {
        "id": "1e1e6ce5ec11bb51",
        "type": "http request",
        "z": "8190ed7d744371a3",
        "name": "Generate Token",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "bearer",
        "senderr": false,
        "x": 429,
        "y": 244,
        "wires": [
            [
                "1dbff4332c18572b"
            ]
        ]
    },
    {
        "id": "1dbff4332c18572b",
        "type": "function",
        "z": "8190ed7d744371a3",
        "name": "Setting bank token",
        "func": "const idToken = msg.payload.idToken\n\nflow.set(\"bankToken\", idToken)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 679,
        "y": 244,
        "wires": [
            [
                "37403cf19ce1563f"
            ]
        ]
    },
    {
        "id": "37403cf19ce1563f",
        "type": "function",
        "z": "8190ed7d744371a3",
        "name": "Getting Bank ID",
        "func": "const apiUrls = flow.get(\"API_URLS\");\nconst businessConstants = flow.get(\"BUSINESS_CONSTANTS\");\n\nmsg.url = `${apiUrls.paylater.business}/getByIdentifier/${businessConstants.bankIdentifier}/BANK`;\n\nmsg.method = \"get\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 189,
        "y": 324,
        "wires": [
            [
                "a5c5811e5600ef21"
            ]
        ]
    },
    {
        "id": "a5c5811e5600ef21",
        "type": "http request",
        "z": "8190ed7d744371a3",
        "name": "Fetch Bank ID",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 429,
        "y": 324,
        "wires": [
            [
                "39f85e071780e73b"
            ]
        ]
    },
    {
        "id": "39f85e071780e73b",
        "type": "function",
        "z": "8190ed7d744371a3",
        "name": "Set Bank details",
        "func": "const bank = msg.payload;\n\nflow.set(\"BANK_DETAILS\", bank);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 669,
        "y": 324,
        "wires": [
            [
                "d520c3662c3360be"
            ]
        ]
    },
    {
        "id": "d520c3662c3360be",
        "type": "function",
        "z": "8190ed7d744371a3",
        "name": "Getting Enterprise ID",
        "func": "const apiUrls = flow.get(\"API_URLS\");\nconst businessConstants = flow.get(\"BUSINESS_CONSTANTS\");\n\nmsg.url = `${apiUrls.paylater.business}/getByIdentifier/${businessConstants.enterpriseIdentifier}/ENTERPRISE`;\n\nmsg.method = \"get\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 169,
        "y": 404,
        "wires": [
            [
                "93d29a2f0dc54b70"
            ]
        ]
    },
    {
        "id": "93d29a2f0dc54b70",
        "type": "http request",
        "z": "8190ed7d744371a3",
        "name": "Fetch Enterprise ID",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 419,
        "y": 404,
        "wires": [
            [
                "1a18c0463bc6618b"
            ]
        ]
    },
    {
        "id": "1a18c0463bc6618b",
        "type": "function",
        "z": "8190ed7d744371a3",
        "name": "Set Enterprise details",
        "func": "const enterprise = msg.payload;\n\nflow.set(\"ENTERPRISE_DETAILS\", enterprise);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 689,
        "y": 404,
        "wires": [
            [
                "611574e622f263a9"
            ]
        ]
    },
    {
        "id": "611574e622f263a9",
        "type": "function",
        "z": "8190ed7d744371a3",
        "name": "Get Bank Applications Request",
        "func": "const apiUrls = flow.get(\"API_URLS\");\nconst businessConstants = flow.get(\"BUSINESS_CONSTANTS\");\n\nconst bankID = flow.get(\"BANK_DETAILS\").id;\nconst enterpriseID = flow.get(\"ENTERPRISE_DETAILS\").id;\n\n// const queryString = `applicationStatus=${businessConstants.applicationStatus}&bankID=${\"63db43b9a6c0a40a89981a38\"}&enterpriseID=${\"639ad10556684b825577d96d\"}`;\nconst queryString = `applicationStatus=${businessConstants.applicationStatus}&bankID=${\"642d3bc0ebc96f31f3daebe9\"}&enterpriseID=${\"637670c7f8e9564da0dea656\"}`;\n\nmsg.url = `${apiUrls.go.bankApplications}?${queryString}`;\n\nmsg.method = \"get\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 199,
        "y": 484,
        "wires": [
            [
                "6e50daad41e17192"
            ]
        ]
    },
    {
        "id": "6e50daad41e17192",
        "type": "http request",
        "z": "8190ed7d744371a3",
        "name": "GET BANK APPLICATIONS",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 569,
        "y": 484,
        "wires": [
            [
                "1d9ebc108cca6bf0"
            ]
        ]
    },
    {
        "id": "1d9ebc108cca6bf0",
        "type": "function",
        "z": "8190ed7d744371a3",
        "name": "function 247",
        "func": "msg.payload = msg.payload.slice(0,1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 159,
        "y": 544,
        "wires": [
            [
                "83be8425eb9073cc"
            ]
        ]
    },
    {
        "id": "83be8425eb9073cc",
        "type": "loop",
        "z": "8190ed7d744371a3",
        "name": "Bank Application Loop",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "payload",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-count",
        "x": 389,
        "y": 544,
        "wires": [
            [],
            [
                "e98607cdfd7b8aba",
                "f8e89c0098844d47"
            ]
        ]
    },
    {
        "id": "acac19c13ff7cc4f",
        "type": "function",
        "z": "8190ed7d744371a3",
        "name": "Generate Base Payload",
        "func": "const _ = lodash;\nconst { v4 } = uuid;\nconst moment = momentImport;\n\n\n\n// const productKey =\n//     msg.productType === \"ENTERPRISE BASED PRODUCT\"\n//         ? \"1000106\"\n//         : msg.productType === \"GST BASED PRODUCT\"\n//             ? \"1000059\"\n//             : msg.productType === \"BANK BASED PRODUCT\"\n//                 ? \"1000061\"\n//                 : \"1000061\"\nconst productKey = \"5497\"\n\nconst applicantTypes = {\n    P: \"SP\",\n    C: \"PVT\",\n    H: \"HUF\",\n    A: \"\",\n    B: \"\",\n    G: \"\",\n    J: \"\",\n    L: \"\",\n    F: \"LLP\",\n    T: \"T\",\n};\n\n// const testData = `${_.get(aadharDocument, \"data.name\", \"\")}`\n//     .split(\" \").shift().join(\" \")\n//     .trim();\n\n\nconst {leadId,reqId} = msg;\n\n\n\nconst payload = `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LeadStatusReq xmlns=\"http://www.kotak.com/schemas/AggregatorLeadCRM/LeadStatusReq\">\n  <Header>\n    <SrcAppCd>CRMNext</SrcAppCd>\n    \n    <RequestID>${reqId}</RequestID>\n  </Header>\n  <LeadStatus>\n    <LeadID>${leadId}</LeadID>\n  </LeadStatus>\n</LeadStatusReq>`\nmsg.payload = payload;\n\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "lodash",
                "module": "lodash"
            },
            {
                "var": "uuid",
                "module": "uuid"
            },
            {
                "var": "momentImport",
                "module": "moment"
            }
        ],
        "x": 190,
        "y": 840,
        "wires": [
            [
                "42e8c87241270ccd",
                "b6b295208aeb82bf"
            ]
        ]
    },
    {
        "id": "42e8c87241270ccd",
        "type": "function",
        "z": "8190ed7d744371a3",
        "name": "Encryption",
        "func": "const kotakConfig = flow.get(\"KOTAK_CONFIG\");\nconst clientSecret = `a8bb453cab0f442e936ed347acb0844d`\nconst crypto = cryptoImport\n\nconst payload = msg.payload;\n\nfunction encrypt(plainText) {\n    const iv = crypto.randomBytes(kotakConfig.ivLength);\n    const ivBuffer = Buffer.from(iv);\n    \n    const cipher = crypto.createCipheriv(\n        kotakConfig.algorithm,\n        // kotakConfig.leadPush.clientSecret,\n        clientSecret,\n        iv\n    );\n    const encryptedBuffer = cipher.update(plainText);\n    const lastBuffer = cipher.final();\n    return Buffer.concat([ivBuffer, encryptedBuffer, lastBuffer]).toString(\n        \"base64\"\n    );\n}\n\nmsg.encryptedPayload = encrypt(payload);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "cryptoImport",
                "module": "crypto"
            }
        ],
        "x": 650,
        "y": 840,
        "wires": [
            [
                "f7c8e656ea4436ad"
            ]
        ]
    },
    {
        "id": "b6b295208aeb82bf",
        "type": "debug",
        "z": "8190ed7d744371a3",
        "name": "debug 615",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 800,
        "wires": []
    },
    {
        "id": "f7c8e656ea4436ad",
        "type": "function",
        "z": "8190ed7d744371a3",
        "name": "Genereate Kotak Token Request",
        "func": "const apiUrls = flow.get(\"API_URLS\");\nconst kotakConfig = flow.get(\"KOTAK_CONFIG\");\nconst auth = {\n    // clientID: \"l7xx70253b8824e64a6c9aa46fab30f3d54f\",\n    clientID: \"l77e5166090d444514a3dae03a992b2787\",\n// clientSecret: \"847c668113844f4682533bfccff17146\"}\n    clientSecret: \"a8bb453cab0f442e936ed347acb0844d\"}\nconst queryString = `?grant_type=client_credentials&client_id=${auth.clientID}&client_secret=${auth.clientSecret}`;\n\nmsg.url = `${apiUrls.kotak}/auth/oauth/v2/token${queryString}`;\n\nmsg.method = \"post\";\n\nmsg.headers = {\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n};\n\nmsg.payload = {\n    Username: \"CRM_Reverse\",\nPassword: \"CRM_Reverse@123#\"\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 900,
        "wires": [
            [
                "5ba3d0c5f355476e",
                "adc2323583c3c009"
            ]
        ]
    },
    {
        "id": "5ba3d0c5f355476e",
        "type": "http request",
        "z": "8190ed7d744371a3",
        "name": "Generate Kotak Token",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 660,
        "y": 900,
        "wires": [
            [
                "74b9d6f110e0adc9",
                "b7af911dea9db774"
            ]
        ]
    },
    {
        "id": "adc2323583c3c009",
        "type": "debug",
        "z": "8190ed7d744371a3",
        "name": "debug 616",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 960,
        "wires": []
    },
    {
        "id": "74b9d6f110e0adc9",
        "type": "function",
        "z": "8190ed7d744371a3",
        "name": "get Lead status request",
        "func": "const apiUrls = flow.get(\"API_URLS\");\n\n// msg.url = `https://apigwuat.kotak.com:8443/Aggregator_RevStatus`;\nmsg.url = `https://apigwuat.kotak.com:8443/V1/Aggregator_RevStatus`;\n\nmsg.method = \"post\";\n\nmsg.headers = {\n    Authorization: `Bearer ${msg.payload.access_token}`,\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n};\n\nmsg.payload = msg.encryptedPayload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 960,
        "wires": [
            [
                "408fb6a0ea4c758b",
                "e45a1c1568b482ef"
            ]
        ]
    },
    {
        "id": "b7af911dea9db774",
        "type": "debug",
        "z": "8190ed7d744371a3",
        "name": "debug 617",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 1000,
        "wires": []
    },
    {
        "id": "408fb6a0ea4c758b",
        "type": "debug",
        "z": "8190ed7d744371a3",
        "name": "debug 618",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 1040,
        "wires": []
    },
    {
        "id": "e45a1c1568b482ef",
        "type": "http request",
        "z": "8190ed7d744371a3",
        "name": "Get Lead status",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 180,
        "y": 1100,
        "wires": [
            [
                "b28e052dc10656c3",
                "627e7337b297be49"
            ]
        ]
    },
    {
        "id": "b28e052dc10656c3",
        "type": "function",
        "z": "8190ed7d744371a3",
        "name": "Decryption",
        "func": "const kotakConfig = flow.get(\"KOTAK_CONFIG\");\n\nconst clientSecret = `a8bb453cab0f442e936ed347acb0844d`\nconst crypto = cryptoImport\n\nconst payload = msg.payload;\n\nconsole.log(\"KOTAK RESPONSE\", payload);\n\nfunction decrypt(encryptedText) {\n    const buffer = Buffer.from(encryptedText, \"base64\");\n\n    const iv = buffer.slice(0, kotakConfig.ivLength);\n    const encrypted = buffer.slice(kotakConfig.ivLength);\n\n    const decipher = crypto.createDecipheriv(\n        kotakConfig.algorithm,\n        // kotakConfig.leadPush.clientSecret,\n        clientSecret,\n        iv\n    );\n\n    const decrypted = decipher.update(encrypted);\n    const final = Buffer.concat([decrypted, decipher.final()]);\n\n    return final.toString();\n}\n\nmsg.payload = decrypt(msg.payload);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "cryptoImport",
                "module": "crypto"
            }
        ],
        "x": 410,
        "y": 1100,
        "wires": [
            [
                "8c6d9e4ebcd6fa24"
            ]
        ]
    },
    {
        "id": "627e7337b297be49",
        "type": "debug",
        "z": "8190ed7d744371a3",
        "name": "Kotak Lead push raw response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 472,
        "y": 1192,
        "wires": []
    },
    {
        "id": "8c6d9e4ebcd6fa24",
        "type": "function",
        "z": "8190ed7d744371a3",
        "name": "Convert to JSON",
        "func": "const { XMLParser } = fastXmlParser\n\nconst xmlParser = new XMLParser({\n  ignoreAttributes: false,\n});\n\nconst payload = xmlParser.parse(msg.payload);\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fastXmlParser",
                "module": "fast-xml-parser"
            }
        ],
        "x": 590,
        "y": 1100,
        "wires": [
            [
                "9b8d2d20899dbe26",
                "fd0cb2d1ec30e5a4",
                "a40d463d23342d14"
            ]
        ]
    },
    {
        "id": "9b8d2d20899dbe26",
        "type": "debug",
        "z": "8190ed7d744371a3",
        "name": "Kotak Lead push JSON response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 1160,
        "wires": []
    },
    {
        "id": "f8e89c0098844d47",
        "type": "debug",
        "z": "8190ed7d744371a3",
        "name": "debug 619",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 560,
        "wires": []
    },
    {
        "id": "e98607cdfd7b8aba",
        "type": "function",
        "z": "8190ed7d744371a3",
        "name": "get kotak_leadId",
        "func": "msg.bankApplication = msg.payload;\nconst bankApplication = msg.payload\n\nconsole.log({bankApplication})\n\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/find-field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: bankApplication.businessPartnerID,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"kotak_leadId\",\n   \n    \"businessPartnerId\": bankApplication.businessPartnerID,\n    \"bankApplicationId\": bankApplication._id\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 640,
        "wires": [
            [
                "feae143dbb3c87f5"
            ]
        ]
    },
    {
        "id": "feae143dbb3c87f5",
        "type": "http request",
        "z": "8190ed7d744371a3",
        "name": "get kotak_leadId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 490,
        "y": 640,
        "wires": [
            [
                "8305722d15828711",
                "0e5c797aafb0666a"
            ]
        ]
    },
    {
        "id": "8305722d15828711",
        "type": "debug",
        "z": "8190ed7d744371a3",
        "name": "get kotak_leadId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 640,
        "wires": []
    },
    {
        "id": "0e5c797aafb0666a",
        "type": "function",
        "z": "8190ed7d744371a3",
        "name": "function 248",
        "func": "const {leadId,reqId} = msg.payload[0].value;\n// const reqId = msg.payload[0].reqId;\nmsg.payload = {leadId,reqId}\nmsg.leadId = leadId;\nmsg.reqId = reqId\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 700,
        "wires": [
            [
                "704bce4c8d14a99f",
                "acac19c13ff7cc4f"
            ]
        ]
    },
    {
        "id": "704bce4c8d14a99f",
        "type": "debug",
        "z": "8190ed7d744371a3",
        "name": "debug 620",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 700,
        "wires": []
    },
    {
        "id": "fd0cb2d1ec30e5a4",
        "type": "switch",
        "z": "8190ed7d744371a3",
        "name": "",
        "property": "payload[\"ns0:LeadStatusRes\"][\"ns0:LeadStatus\"][\"ns0:STATUSCODE\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Not Eligible",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Disbursed",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 170,
        "y": 1300,
        "wires": [
            [],
            [
                "a40d463d23342d14"
            ]
        ]
    },
    {
        "id": "a40d463d23342d14",
        "type": "function",
        "z": "8190ed7d744371a3",
        "name": "createLoanTermReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\nconst bankToken = flow.get(\"bankToken\")\n\nmsg.loanResponse = msg.payload\n\nconst bankAccount = flow.get(\"bankAccount\") || {}\nconst {bankApplication} = msg\nconst bankDetails = flow.get('bankDetails') || {}\n// const businessPartnerId = flow.get('businessPartnerId')\n\n\nconst { businessPartnerID, bankId, enterpriseId, bankApplicationConfigId} = bankApplication\n\n\nconst row = msg.row\n\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.headers = {\n        Authorization: `Bearer ${actyvToken}`,\n        bankid: msg.bankid\n}\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms`\nmsg.method = 'POST'\n\nmsg.payload = {\n        bankID: bankId,\n        borrowerID: businessPartnerID,\n        enterpriseID: enterpriseId,\n        bankApplicationConfigID: bankApplicationConfigId,\n        approvedLimit: msg.payload[\"ns0:LeadStatusRes\"][\"ns0:LeadStatus\"][\"ns0:SanctionedAmount_LE\"],\n        // loanAmount: row[\"Loan Accepted Amount\"]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1360,
        "wires": [
            [
                "4c534c02b4f0d059"
            ]
        ]
    },
    {
        "id": "4c534c02b4f0d059",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "8190ed7d744371a3",
        "name": "createLoanTerm",
        "x": 500,
        "y": 1360,
        "wires": [
            [
                "a041426199282ded",
                "2c99817b6f950650"
            ],
            [
                "2c99817b6f950650"
            ]
        ]
    },
    {
        "id": "a041426199282ded",
        "type": "function",
        "z": "8190ed7d744371a3",
        "name": "updateLoanTermReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst row = msg.row\n\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.headers = {\n        Authorization: `Bearer ${actyvToken}`,\n        \"x-actyv-api-config-key\":X_ACTYV_API_CONFIG_KEY,\n}\n\nmsg.loanId = msg.payload.id\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/service/update`\nmsg.method = 'PATCH',\n\nmsg.payload = {\n        loanTermsID: msg.payload.id,\n        approvedLimit: msg.loanResponse[\"ns0:LeadStatusRes\"][\"ns0:LeadStatus\"][\"ns0:SanctionedAmount_LE\"],\n        // loanAmount: row[\"Loan Accepted Amount\"],\n        loanAmount: msg.loanResponse[\"ns0:LeadStatusRes\"][\"ns0:LeadStatus\"][\"ns0:DisbursedAmount1_LE\"],\n        // crnNumber: row[\"DEALER ACCOUNT NO.\"],\n        // validTill: msg.row[\"LIMIT EXPIRY DATE\"] ,\n        loanGrantStatus: \"APPROVED\",\n       \n}\n\nfunction calculateValidTill(inputDate){\n        let date = inputDate\n        let split = date.split(\"/\")\n        let addOneYear = Number(split[split.length - 1]) + 1\n        split[split.length - 1] = addOneYear\n        let joined = split.join('-')\n        return joined\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1440,
        "wires": [
            [
                "bf53cf0fd8971281"
            ]
        ]
    },
    {
        "id": "bf53cf0fd8971281",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "8190ed7d744371a3",
        "name": "updateLoanTerm",
        "x": 510,
        "y": 1440,
        "wires": [
            [
                "4067ab4c751f115b"
            ],
            [
                "4067ab4c751f115b"
            ]
        ]
    },
    {
        "id": "4067ab4c751f115b",
        "type": "debug",
        "z": "8190ed7d744371a3",
        "name": "debug 621",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1440,
        "wires": []
    },
    {
        "id": "2c99817b6f950650",
        "type": "debug",
        "z": "8190ed7d744371a3",
        "name": "debug 622",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 1360,
        "wires": []
    },
    {
        "id": "10c3d8c78fc69415",
        "type": "inject",
        "z": "8190ed7d744371a3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 2060,
        "wires": [
            [
                "07c1bf58215d8e94"
            ]
        ]
    },
    {
        "id": "07c1bf58215d8e94",
        "type": "function",
        "z": "8190ed7d744371a3",
        "name": "function 249",
        "func": "console.log('%c hello world ', 'background: #222; color: #FF0000');\nconsole.log(\"\\x1b[33m%s\\x1b[0m\", \"I am in yellow color\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2060,
        "wires": [
            []
        ]
    },
    {
        "id": "d6290c0c729cecc4",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "getBusinsessPartnerReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\n// console.log({ X_ACTYV_API_CONFIG_KEY, GO_URL })\nconst row = msg.payload\n\nmsg.url = `${GO_URL}/business-partner/service/XX${row[\"Pan Card\"]}XXX`\nmsg.method = 'GET'\nmsg.headers = {};\nmsg.headers['x-actyv-api-config-key'] = X_ACTYV_API_CONFIG_KEY;\n\nmsg.row = row\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1180,
        "wires": [
            [
                "dade8dfdc3218b11"
            ]
        ]
    },
    {
        "id": "708e52d4c7f49c1d",
        "type": "debug",
        "z": "c7bf343fb21bd983",
        "name": "getBusinessPartner",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 1140,
        "wires": []
    },
    {
        "id": "637e9c6c460777d4",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "getAllBankApplicationReq",
        "func": "const GO_URL = env.get('GO_URL')\nmsg.businessPartnerId = msg.payload._id\nflow.set('businessPartnerId', msg.payload._id)\nconst businessPartnerId = flow.get('businessPartnerId') || \"\"\n\nconst bank_key = env.get(\"BANK_PRODUCT_KEY_NIVEA_TATA_CAPITAL\")\n\nmsg.enterpriseId = \"\";\n\nmsg.url = `${GO_URL}/bank-application?businessPartner=${businessPartnerId}&bankApplicationConfigKey=${bank_key}`\nconsole.log(\"URL\",msg.url)\nmsg.method = 'GET'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 1360,
        "wires": [
            [
                "f6e973d156580fec",
                "97f6277690acd77e"
            ]
        ]
    },
    {
        "id": "9284c0c134a0db15",
        "type": "debug",
        "z": "c7bf343fb21bd983",
        "name": "getBankProduct",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 1000,
        "wires": []
    },
    {
        "id": "cbc3f20e51adcfb3",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "updateBankApplicationStatusReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst token = flow.get(\"token\")\nmsg.url = `${GO_URL}/bank-application/decision/update`\nmsg.method = 'POST'\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.payload = {\n    remarks: msg.row[\"Reason For rejection\"], // actual message\n    decision: {\n        label: msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? \"Approve\" : \"Reject\",\n        value: msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? \"APPROVE\" : \"REJECT\",\n        variableName: \"bankapprover_action\",\n        actionType: \"DECISION\",\n    },\n    bankApplicationId: msg.payload[0]._id ,\n    correctionItems: {\n        documentIds: [],\n    },\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1680,
        "wires": [
            [
                "f5d5ad213ccc6363",
                "b7fe21cf9c006c95"
            ]
        ]
    },
    {
        "id": "e8d4d35d5d94531f",
        "type": "debug",
        "z": "c7bf343fb21bd983",
        "name": "getAllBankApplications API Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 1480,
        "wires": []
    },
    {
        "id": "16c29fdc79b9332c",
        "type": "debug",
        "z": "c7bf343fb21bd983",
        "name": "Update Bank APplication Status API Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 1560,
        "wires": []
    },
    {
        "id": "9e8ca8be643b46e3",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "createLoanTermReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\n// const bankAccount = flow.get(\"bankAccount\") || {}\n\n// const bankDetails = flow.get('bankDetails') || {}\nconst businessPartnerId = msg.businessPartnerId\n// const businessPartnerId = \"63930e95390a05e1ee21d58e\";\n\nconst enterpriseID = flow.get(\"enterpriseId\");\n// const enterpriseID = \"637670c7f8e9564da0dea656\"\n// const bankId = msg.bankId //Sharavan\n// const bankId = msg.paylaod     //Me\nconst bankId = flow.get(\"bankId\");\nconst row = msg.row\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.headers = {\n       \"Authorization\": `Bearer ${actyvToken}`,\n        \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n        \"actyventityid\": flow.get(\"actyvEntityId\")\n}\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms`\nmsg.method = 'POST'\n\nmsg.payload = {\n        bankID: bankId,\n        borrowerID: businessPartnerId,\n        enterpriseID,\n        bankApplicationConfigID: flow.get(\"bankApplicationConfigId\"),\n        // rateOfInterest: msg.row[\"ROI\"]\n        \"tenorAndRates\": [\n                {\n                        \"roi\": msg.row[\"ROI\"]\n                }\n        ]\n}\nmsg.logger = `Creating loan term`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 1860,
        "wires": [
            [
                "76d786213cc6c16f",
                "00f79fcf3e720d44"
            ]
        ]
    },
    {
        "id": "7a31d1b4c79a9d8c",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "updateLoanTermReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst row = msg.row\n\n\nmsg.headers = {\n        \n        \"x-actyv-api-config-key\":X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/service/update`\nmsg.method = 'PATCH',\nmsg.loanId = msg.payload?.id\nmsg.payload = {\n        loanTermsID: msg.payload.id,\n        approvedLimit: msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? row[\"Sanction amount\"] : 0,\n        // loanAmount: row[\"Loan Accepted Amount\"],\n        \n        loanAmount: 0,\n        crnNumber: row[\"CRN\"],\n        // validTill: msg.row[\"Loan Approved (Y/N)\"] === 'Y' ?row[\"Updated Date\"] : \"\",\n        validTill: msg.row[\"Loan Approved (Y/N)\"] === 'Y' ?\"21/06/2024\" : \"\",\n        loanGrantStatus: msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? \"APPROVED\" : \"REJECTED\",\n        bankProvidedLoanCodes: msg.row[\"Loan Account No\"]\n}\n\nfunction calculateValidTill(inputDate){\n        let date = inputDate\n        let split = date.split(\"/\")\n        let addOneYear = Number(split[split.length - 1]) + 1\n        split[split.length - 1] = addOneYear\n        let joined = split.join('-')\n        return joined\n}\nmsg.logger = `Updating Loan Term whose loan terms Id is ${msg.payload.id}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1880,
        "wires": [
            [
                "ad465f5b1ec3e00a",
                "b1b00af1cc29760d"
            ]
        ]
    },
    {
        "id": "df2505cca687d484",
        "type": "switch",
        "z": "c7bf343fb21bd983",
        "name": "",
        "property": "row[\"Loan Approved (Y/N)\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "N",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Y",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 2140,
        "wires": [
            [
                "b511aff3a7d5b58f"
            ],
            [
                "6e41d95ba36076b8"
            ]
        ]
    },
    {
        "id": "b511aff3a7d5b58f",
        "type": "debug",
        "z": "c7bf343fb21bd983",
        "name": "Loan Not Approved",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 2100,
        "wires": []
    },
    {
        "id": "6e41d95ba36076b8",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "createBusinessRelationship(D-B)Req",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nlet row = msg.row;\n// const bankAccount = flow.get(\"bankAccount\") || {}\n// const bankDetails = flow.get('bankDetails') || {}\n\n// const {  bankAccountNo,\n//         bankIfsc,\n//         bankName, } = bankAccount\n\nconst bankAccountNo = row[\"Repayment Account No\"];\nconst bankIfsc = row[\"Repayment IFSC\"];\nconst bankName = row[\"Repayment Account Name\"];\n\n\n// const enterpriseId = msg.enterpriseId\nconst enterpriseId = flow.get(\"enterpriseId\");\n\nconst bankId = flow.get(\"bankId\");\nconst businessPartnerId = msg.businessPartnerId;\n\n\n\nmsg.url = `${GO_URL}/business-relationship/service`\nmsg.method = 'POST'\nmsg.headers = {};\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = {\n        businessId: businessPartnerId,\n        parentBusinessId: enterpriseId,\n        identifierByParent: row[\"Merchant Code\"],\n        bankAccountNumber: bankAccountNo,\n        bankIFSC: bankIfsc,\n        bankName: bankName,\n        relationType: \"DISTRIBUTOR-BANK\"\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 2140,
        "wires": [
            [
                "095340bac8a7fc01"
            ]
        ]
    },
    {
        "id": "8514fccc73bc1156",
        "type": "debug",
        "z": "c7bf343fb21bd983",
        "name": "createBusinessRelationship(D-B)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 2260,
        "wires": []
    },
    {
        "id": "206242899b717fd0",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "Loop",
        "func": "function sheetDateToJSDate(n) {\n    // const d = new Date(1899, 11, 30)\n    const d = new Date(1899, 11, 30)\n    d.setDate(d.getDate() + n)\n    // Rounds milliseconds to seconds\n    d.setSeconds(d.getSeconds() + Math.round(d.getMilliseconds() / 1000))\n    d.setMilliseconds(0)\n    // return `${d.getDate()}-${d.getMonth() + 1}-${d.getFullYear()}`\n    return `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`\n}\n\nfor(let row of msg.payload){\n    let date_need_change = row[\"Valid Till\"];\n    let date = sheetDateToJSDate(date_need_change);\n    let Updated_Date = sheetDateToJSDate(row[\"Updated Date\"]);\n    let Created_date = sheetDateToJSDate(row[\"Created Date\"]);\n    node.send({\n        payload:{...row,\n            \"Valid Till\": date,\n            \"Updated Date\": Updated_Date,\n            \"Created Date\": Created_date\n\n        },\n    isComplete : \"false\"\n    });\n}\n\nmsg.isComplete = \"true\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1100,
        "wires": [
            [
                "ccbfb8bd84605c27"
            ]
        ]
    },
    {
        "id": "ccbfb8bd84605c27",
        "type": "switch",
        "z": "c7bf343fb21bd983",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 1100,
        "wires": [
            [],
            [
                "d6290c0c729cecc4"
            ]
        ]
    },
    {
        "id": "971734e3eec6a617",
        "type": "node-red-contrib-graph-oauth-login",
        "z": "c7bf343fb21bd983",
        "name": "",
        "scope": "https://graph.microsoft.com/.default",
        "redirecturi": "",
        "code": "",
        "encoding": false,
        "logintype": "Application",
        "refreshtimer": "10",
        "x": 150,
        "y": 680,
        "wires": [
            [
                "83bf742ae766054d"
            ]
        ]
    },
    {
        "id": "83bf742ae766054d",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "Get All Messages",
        "func": "let data=msg.payload;\nflow.set(\"token\",msg.at);\n// let userID=\"User Id from microsoft Graph\"\n\nlet userID = env.get(\"OUTLOOKUSERID\")//\"c3d94010-41f5-4c12-be2a-fbd8eda649fe\"\n// let sender =\"munukuntla.intern@actyv.com\"\nlet sender =\"ramu.bugudi@actyv.com\"\nlet subject = \"Tata Capital Lead Push\"\n\nconst date = moment().toISOString().split(\"T\")[0].split(\"-\")\nconst today = `${date[0]}/${date[1]}/${date[2]}`\nconsole.log(\"today\",today)\n\n\n// msg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages?$search=\"from:ramu.bugudi@actyv.com\"`\n// msg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages?$search=\"from:mshravan142@gmail.com\"`\n// msg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages?$filter=Subject in 'lead push' and importance eq 'normal'&$orderby=subject,importance,receivedDateTime desc`\n\n// msg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages?$search=\"received:${today}\"`\nmsg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages?$search=\"received:${today} AND from:${sender} AND subject:${subject}\"`\n// msg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages?$search=\"received:${today} AND from:${sender}\"`\nmsg.method=\"GET\";\nmsg.headers={\n    // \"Authorization\":`${data.access_token}`\n    \"Authorization\": `${msg.at}`\n}\nmsg.logger = `Filtering all the mails w.r.t to date,sender,receiver and Subject of the Mail`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 430,
        "y": 680,
        "wires": [
            [
                "57d0aa226cee4a80"
            ]
        ]
    },
    {
        "id": "a7aa0f06ac30f2a2",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "each Msg",
        "func": "// let data=msg.payload;\nlet data = msg.payload.value;\n\n// console.log({valubhchnve:msg.value})\n\n\n// let parsedData = msg.payload.value\n// console.log(\"dsfd\", parsedData)\nfor (let index = 0; index < data.length; index++) {\n    // console.log(\"dhvhsgav\",data[index])\n    node.send({payload:data[index]});\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "bc94bf49e8db1776",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "saveActyvToken",
        "func": "flow.set(\"enterpriseToken\",msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 500,
        "wires": [
            [
                "35717f5d138998f2",
                "468eb7941a219365"
            ]
        ]
    },
    {
        "id": "ad764245178afb07",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "AuthenticateBNPLUserReq",
        "func": "// const envVariables = global.get('envVariables')\nconst BNPL_USER = env.get('CKPL_ENTERPRISE_ADMIN_EMAIL')\nconst BNPL_USER_PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": BNPL_USER_PASSWORD,\n    \"email\": BNPL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 500,
        "wires": [
            [
                "89088603fee9c104"
            ]
        ]
    },
    {
        "id": "82273a94c6ef719b",
        "type": "comment",
        "z": "c7bf343fb21bd983",
        "name": "hardcoded bank applicationId",
        "info": "",
        "x": 400,
        "y": 1240,
        "wires": []
    },
    {
        "id": "35717f5d138998f2",
        "type": "debug",
        "z": "c7bf343fb21bd983",
        "name": "debug 286",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 460,
        "wires": []
    },
    {
        "id": "f2590bca5e29a4e1",
        "type": "debug",
        "z": "c7bf343fb21bd983",
        "name": "debug 287",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 20,
        "wires": []
    },
    {
        "id": "d244b6ce7f4a126a",
        "type": "debug",
        "z": "c7bf343fb21bd983",
        "name": "Read all Msgs from Outlook",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 680,
        "wires": []
    },
    {
        "id": "a80713e377081540",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "each Msg",
        "func": "// let data=msg.payload;\nlet data = msg.payload.value;\n\n// console.log({valubhchnve:msg.value})\n\n\n// let parsedData = msg.payload.value\n// console.log(\"dsfd\", parsedData)\nfor (let index = 0; index < data.length; index++) {\n    // console.log(\"dhvhsgav\",data[index])\n    node.send(\n        {\n            payload:data[index],\n            isCompleted: false\n        }\n    );\n}\nmsg.isCompleted = true;\nmsg.logger = \"Read all atttachement from all emails\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 800,
        "wires": [
            [
                "c78a554d587de321"
            ]
        ]
    },
    {
        "id": "89472f252d69bb62",
        "type": "http request",
        "z": "c7bf343fb21bd983",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 830,
        "y": 780,
        "wires": [
            [
                "99731d7302b40e4c",
                "447ddaba361014cb"
            ]
        ]
    },
    {
        "id": "447ddaba361014cb",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "function 177",
        "func": "let data=msg.payload;\n\nmsg.payload = data.value[0].contentBytes.toString();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 980,
        "wires": [
            [
                "5866546e71ee5cad"
            ]
        ]
    },
    {
        "id": "5866546e71ee5cad",
        "type": "base64",
        "z": "c7bf343fb21bd983",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 467.22216796875,
        "y": 977.22216796875,
        "wires": [
            [
                "b318f784aea0525a"
            ]
        ]
    },
    {
        "id": "b318f784aea0525a",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "read xls",
        "func": "let data = xlsx.read(msg.payload, { type: \"buffer\" })\nconst wsname = data.SheetNames[1];\nconst ws = data.Sheets[wsname];\nconst payload = xlsx.utils.sheet_to_json(ws);\nmsg.payload = payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "xlsx",
                "module": "xlsx"
            }
        ],
        "x": 647.22216796875,
        "y": 977.22216796875,
        "wires": [
            [
                "206242899b717fd0",
                "e7d0c72d7eead4a8"
            ]
        ]
    },
    {
        "id": "319d787f079c085b",
        "type": "debug",
        "z": "c7bf343fb21bd983",
        "name": "debug 308",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 640,
        "wires": []
    },
    {
        "id": "73c595f05df430c7",
        "type": "debug",
        "z": "c7bf343fb21bd983",
        "name": "debug 309",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 1300,
        "wires": []
    },
    {
        "id": "0983c17040364562",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "function 180",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "5ca2a16b824ebd63",
        "type": "debug",
        "z": "c7bf343fb21bd983",
        "name": "debug 323",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 920,
        "wires": []
    },
    {
        "id": "eddcdf0f7b9c04d8",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "Searching Attachment",
        "func": "let data = msg.payload;\nlet token=flow.get(\"token\");\nflow.set(\"msg\",data);\nlet userID = env.get(\"OUTLOOKUSERID\")\n// msg.url = `https://graph.microsoft.com/v1.0/users/1870cd49-a831-4b52-ba5e-b680441f9f70/messages/${data.id}/attachments`\nmsg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages/${data.id}/attachments`\n\nmsg.method = \"GET\";\nmsg.headers = {\n    // \"Authorization\": `${token.access_token}`\n    \"Authorization\": `${token}`\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 780,
        "wires": [
            [
                "89472f252d69bb62"
            ]
        ]
    },
    {
        "id": "bd549a5993be05c3",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "function 200",
        "func": "function formatDates(inputDate) {\n    const date = inputDate\n    const [day, month, year] = date.toString()?.split(\"/\")\n    const result = new Date(year, month - 1, day).toLocaleDateString('en-GB');\n    return result.split(\"/\").reverse().join(\"-\")\n}\n\nfunction sheetDateToJSDate(n) {\n    // const d = new Date(1899, 11, 30)\n    const d = new Date(1899, 11, 30)\n    d.setDate(d.getDate() + n)\n    // Rounds milliseconds to seconds\n    d.setSeconds(d.getSeconds() + Math.round(d.getMilliseconds() / 1000))\n    d.setMilliseconds(0)\n    // return `${d.getDate()}-${d.getMonth() + 1}-${d.getFullYear()}`\n    return `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`\n}\n\nlet date_need_change = msg.payload[0][\"Valid Till\"];\nlet date = formatDates(date_need_change);\nmsg.payload[\"Valid Till\"] = date;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 700,
        "wires": [
            [
                "319d787f079c085b"
            ]
        ]
    },
    {
        "id": "ad465f5b1ec3e00a",
        "type": "debug",
        "z": "c7bf343fb21bd983",
        "name": "Body for loan Update terms",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 1800,
        "wires": []
    },
    {
        "id": "468eb7941a219365",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "getBankProductConfigReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY_NIVEA_TATA_CAPITAL')\nconsole.log(GO_URL);\nconsole.log(BANK_PRODUCT_KEY)\n\n// flow.set('businessPartnerId', msg.payload._id)\n\n\n\nmsg.url = `${GO_URL}/bank-application-config/key/${BANK_PRODUCT_KEY}`\nmsg.method = 'GET'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 580,
        "wires": [
            [
                "ba88bc84b37d8754"
            ]
        ]
    },
    {
        "id": "1481644fe53ba742",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "Saving entId,bpAppId,bankId",
        "func": "flow.set(\"enterpriseId\", msg.payload.allowedEnterprises[0]);\nflow.set(\"bankApplicationConfigId\",msg.payload.id);\nflow.set(\"bankId\",msg.payload.bank);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 580,
        "wires": [
            [
                "971734e3eec6a617"
            ]
        ]
    },
    {
        "id": "61de02e911420bcb",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "function 201",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "99731d7302b40e4c",
        "type": "debug",
        "z": "c7bf343fb21bd983",
        "name": "Reading the file from the attachement",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 780,
        "wires": []
    },
    {
        "id": "f5d5ad213ccc6363",
        "type": "debug",
        "z": "c7bf343fb21bd983",
        "name": "Body for Updating Bank APplication status",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 1780,
        "wires": []
    },
    {
        "id": "e7d0c72d7eead4a8",
        "type": "debug",
        "z": "c7bf343fb21bd983",
        "name": "Reading the XLSX file",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 940,
        "wires": []
    },
    {
        "id": "3c80ce152415dc84",
        "type": "debug",
        "z": "c7bf343fb21bd983",
        "name": "Loan term API",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 1980,
        "wires": []
    },
    {
        "id": "1951d507fb440b3f",
        "type": "debug",
        "z": "c7bf343fb21bd983",
        "name": "debug 543",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 540,
        "wires": []
    },
    {
        "id": "c78a554d587de321",
        "type": "switch",
        "z": "c7bf343fb21bd983",
        "name": "",
        "property": "isCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 800,
        "wires": [
            [
                "eddcdf0f7b9c04d8"
            ],
            []
        ]
    },
    {
        "id": "ee3917a48c0eab5b",
        "type": "debug",
        "z": "c7bf343fb21bd983",
        "name": "debug 544",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 80,
        "wires": []
    },
    {
        "id": "89088603fee9c104",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "c7bf343fb21bd983",
        "name": "Authenticate BNPL User",
        "x": 650,
        "y": 500,
        "wires": [
            [
                "bc94bf49e8db1776"
            ],
            []
        ]
    },
    {
        "id": "ba88bc84b37d8754",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "c7bf343fb21bd983",
        "name": "getBankProductConfig",
        "x": 680,
        "y": 580,
        "wires": [
            [
                "1951d507fb440b3f",
                "1481644fe53ba742"
            ],
            []
        ]
    },
    {
        "id": "57d0aa226cee4a80",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "c7bf343fb21bd983",
        "name": "",
        "x": 670,
        "y": 680,
        "wires": [
            [
                "d244b6ce7f4a126a",
                "a80713e377081540"
            ],
            []
        ]
    },
    {
        "id": "dade8dfdc3218b11",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "c7bf343fb21bd983",
        "name": "get Business Partner API",
        "x": 490,
        "y": 1180,
        "wires": [
            [
                "708e52d4c7f49c1d",
                "637e9c6c460777d4"
            ],
            []
        ]
    },
    {
        "id": "f6e973d156580fec",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "c7bf343fb21bd983",
        "name": "Get All Bank Applications",
        "x": 430,
        "y": 1420,
        "wires": [
            [
                "e8d4d35d5d94531f",
                "9e8ca8be643b46e3"
            ],
            []
        ]
    },
    {
        "id": "b7fe21cf9c006c95",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "c7bf343fb21bd983",
        "name": "Update Bank Application Status",
        "x": 610,
        "y": 1680,
        "wires": [
            [
                "16c29fdc79b9332c",
                "9e8ca8be643b46e3"
            ],
            []
        ]
    },
    {
        "id": "00f79fcf3e720d44",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "c7bf343fb21bd983",
        "name": "Create Loan term API",
        "x": 540,
        "y": 1860,
        "wires": [
            [
                "7a31d1b4c79a9d8c",
                "3c80ce152415dc84"
            ],
            []
        ]
    },
    {
        "id": "b1b00af1cc29760d",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "c7bf343fb21bd983",
        "name": "Update Loan Term API",
        "x": 180,
        "y": 2140,
        "wires": [
            [
                "df2505cca687d484"
            ],
            []
        ]
    },
    {
        "id": "095340bac8a7fc01",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "c7bf343fb21bd983",
        "name": "Create Business relationship(D-B)",
        "x": 260,
        "y": 2260,
        "wires": [
            [
                "8514fccc73bc1156",
                "5e6464f2d8c44818"
            ],
            [
                "8514fccc73bc1156"
            ]
        ]
    },
    {
        "id": "97f6277690acd77e",
        "type": "debug",
        "z": "c7bf343fb21bd983",
        "name": "debug 623",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "url",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 1340,
        "wires": []
    },
    {
        "id": "76d786213cc6c16f",
        "type": "debug",
        "z": "c7bf343fb21bd983",
        "name": "create loan term",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 1920,
        "wires": []
    },
    {
        "id": "5e6464f2d8c44818",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "fetchTenor",
        "func": "const PAYLATER_URL = env.get(\"PAYLATER_URL\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\nconst { customercode, payload, bankApplication,loanData,actyvEntityId} = msg;\nconst bankId = flow.get(\"bankId\")\n\nmsg.url = `${PAYLATER_URL}/v1/tenor-and-rate-spread/service/fetch`\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n    Authorization: `Bearer ${flow.get(\"actyvToken\")}`,\n    actyventityid: flow.get(\"actyvEntityId\")\n}\nmsg.method = \"POST\"\nmsg.payload = {\n        \"bankID\": bankId,\n    \"loanID\": msg.loanId,\n}\n\nmsg.logger = `Fetch tenor and rate spread for bank ${JSON.stringify(bankId)}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 2340,
        "wires": [
            [
                "e6aa34dc419e4a32"
            ]
        ]
    },
    {
        "id": "e6aa34dc419e4a32",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "c7bf343fb21bd983",
        "name": "fetchTenor",
        "x": 430,
        "y": 2340,
        "wires": [
            [
                "93bfab6ab998fa14",
                "b079ee662e234d3b"
            ],
            [
                "93bfab6ab998fa14"
            ]
        ]
    },
    {
        "id": "93bfab6ab998fa14",
        "type": "debug",
        "z": "c7bf343fb21bd983",
        "name": "fetchTenor",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 2340,
        "wires": []
    },
    {
        "id": "b079ee662e234d3b",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "createBnplPreference",
        "func": "const PAYLATER_URL = env.get(\"PAYLATER_URL\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\nconst { customercode, payload, bankApplication,loanData,actyvEntityId} = msg;\nconst bankId = flow.get(\"bankId\")\nconst defaultSpreadId = msg.payload[0].id\nmsg.url = `${PAYLATER_URL}/v1/bnpl-preference`\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n    Authorization: `Bearer ${flow.get(\"actyvToken\")}`,\n    actyventityid: flow.get(\"actyvEntityId\")\n}\nmsg.method = \"POST\"\nmsg.payload = {\n    \"borrowerID\": msg.businessPartnerId,\n    \"bankApplicationConfigID\": flow.get(\"bankApplicationConfigId\"),\n    \"defaultBankID\": bankId,\n    \"defaultSpreadID\": defaultSpreadId,\n    \"minInvoiceAmountThreshold\": 10\n}\n\nmsg.logger = `Fetch tenor and rate spread for bank ${JSON.stringify(bankId)}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 2420,
        "wires": [
            [
                "ee816e45e5ec77d2"
            ]
        ]
    },
    {
        "id": "ee816e45e5ec77d2",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "c7bf343fb21bd983",
        "name": "createBnplPreference",
        "x": 460,
        "y": 2420,
        "wires": [
            [
                "d520cb2097902893"
            ],
            [
                "d520cb2097902893"
            ]
        ]
    },
    {
        "id": "d520cb2097902893",
        "type": "debug",
        "z": "c7bf343fb21bd983",
        "name": "createBnplPreference",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 2420,
        "wires": []
    },
    {
        "id": "19181e5932a827f7",
        "type": "inject",
        "z": "c7bf343fb21bd983",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 100,
        "wires": [
            [
                "80456da1ec44b67b"
            ]
        ]
    },
    {
        "id": "80456da1ec44b67b",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "Setting Global Variables",
        "func": "let userID = env.get(\"OUTLOOKUSERID\")\n\n/*----------------------------    QA  ---------------------------*/\n\n\n\n// const ENV_VARIABLES = {\n//     \"ADMIN_EMAIL\": \"darkhorse@gmail.com\",\n//     \"ADMIN_PASSWORD\": \"User@123\",\n//     \"ACTYV_ENTITY_URL\": \"https://actyv1-platform.qa.actyv.com\",\n//     \"ACTYV_ENTITY_KEY\": \"dark_horse\",\n//     \"AXIS_READ_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABT4dnQAAA=\",\n//     \"AXIS_SUCCESS_FOLDER_ID\":\"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIwAAA=\",\n//     \"AXIS_FAILURE_FOLDER_ID\":\"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIxAAA=\",\n//     \"OUTLOOK_USER_ID\": userID\n// }\n\n/*----------------------------    UAT  ---------------------------*/\n\n\n\n// const ENV_VARIABLES = {\n//     \"ADMIN_EMAIL\": \"darkhorse@gmail.com\",\n//     \"ADMIN_PASSWORD\": \"User@123\",\n//     \"ACTYV_ENTITY_URL\": \"https://actyv1-platform.uat.actyv.com\",\n//     \"ACTYV_ENTITY_KEY\": \"dark_horse\",\n//     \"AXIS_READ_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABT4dnQAAA=\",\n//     \"AXIS_SUCCESS_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIwAAA=\",\n//     \"AXIS_FAILURE_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIxAAA=\",\n//     \"OUTLOOK_USER_ID\": userID\n// }\n\n/*----------------------------    PROD  ---------------------------*/\nconst ENV_VARIABLES = {\n    \"ADMIN_EMAIL\": \"darkhorse1@gmail.com\",\n    \"ADMIN_PASSWORD\": \"890ioP@darkhorse\",\n    \"ACTYV_ENTITY_URL\": \"https://actyv1-platform.qa.actyv.com\",\n    \"ACTYV_ENTITY_KEY\": \"dark_horse1\",\n    \"AXIS_READ_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABT4dnQAAA=\",\n    \"AXIS_SUCCESS_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIwAAA=\",\n    \"AXIS_FAILURE_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIxAAA=\",\n    \"OUTLOOK_USER_ID\": userID\n}\n\nglobal.set(\"ENV_VARIABLES\", ENV_VARIABLES);\n\n// msg.payload = `${XLSX_FILE_PATH}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 503,
        "y": 101,
        "wires": [
            [
                "e961446a0e32d49d"
            ]
        ]
    },
    {
        "id": "e961446a0e32d49d",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "AuthenticateActyvUserReq",
        "func": "// const envVariables = global.get('envVariables')\nconst ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\nconst EMAIL = ENV_VARIABLES.ADMIN_EMAIL;\nconst PASSWORD = ENV_VARIABLES.ADMIN_PASSWORD\n\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 220,
        "wires": [
            [
                "9284b528c2d9784d"
            ]
        ]
    },
    {
        "id": "9284b528c2d9784d",
        "type": "subflow:0cbd918f05921aae",
        "z": "c7bf343fb21bd983",
        "name": "authentic actyv entity user",
        "x": 560,
        "y": 220,
        "wires": [
            [
                "09d9e68d17fd723a"
            ],
            []
        ]
    },
    {
        "id": "09d9e68d17fd723a",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\nconsole.log({actyvToken: msg.payload.idToken})\nmsg.actyvToken = msg.payload.idToken\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 220,
        "wires": [
            [
                "51c612d60713c6de"
            ]
        ]
    },
    {
        "id": "51c612d60713c6de",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "getAllActyvUsers",
        "func": "\n\nconst GO_URL = env.get('GO_URL');\nconst BANK_KEY = env.get(\"BANK_KEY\")\n\nmsg.url = `${GO_URL}/actyv-entity`;\nmsg.method = \"GET\"\n// msg.headers = {}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 320,
        "wires": [
            [
                "253ea21889128a4c"
            ]
        ]
    },
    {
        "id": "253ea21889128a4c",
        "type": "subflow:0cbd918f05921aae",
        "z": "c7bf343fb21bd983",
        "name": "getAllActyvUsers",
        "x": 510,
        "y": 320,
        "wires": [
            [
                "bd31e2c0905d14c5"
            ],
            []
        ]
    },
    {
        "id": "bd31e2c0905d14c5",
        "type": "function",
        "z": "c7bf343fb21bd983",
        "name": "save actyv_entity_id",
        "func": "const ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\nconst actyvKey = ENV_VARIABLES.ACTYV_ENTITY_KEY\nconst actyvEntity = msg.payload.filter((actyv) => actyv.key === actyvKey)\nflow.set(\"actyvEntityId\", actyvEntity[0]._id);\nmsg.actyvEntityId = actyvEntity[0]._id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 320,
        "wires": [
            [
                "ad764245178afb07"
            ]
        ]
    },
    {
        "id": "9496c8ee49a6fa27",
        "type": "inject",
        "z": "c03c74b3e3b3a2bb",
        "name": "11 AM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 05 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 380,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "05d6b7ee82b0e144",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "getAllBankApplicationReq",
        "func": "const GO_URL = env.get('GO_URL')\n// msg.payload = {}\nconst status = \"AWAITING_CHANGE\"\n\nmsg.url = `${GO_URL}/bank-application?applicationStatus=${status}`\nmsg.method = 'GET'\n\nglobal.set(\"res\",msg.res)\n\nmsg.logger = `Get all bank-application with status #${status}`\nmsg.loggerNewLine = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 300,
        "wires": [
            [
                "b5bce55431c945f8",
                "f5658c869eda7e41"
            ]
        ]
    },
    {
        "id": "50950f60ed1bedcd",
        "type": "debug",
        "z": "c03c74b3e3b3a2bb",
        "name": "get all bank application",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 300,
        "wires": []
    },
    {
        "id": "1c1a9fb82af31dc0",
        "type": "switch",
        "z": "c03c74b3e3b3a2bb",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 440,
        "wires": [
            [
                "770ecc06f126ebbc"
            ],
            [
                "ca8146aa125bc6da"
            ]
        ]
    },
    {
        "id": "ca8146aa125bc6da",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "loop",
        "func": "delete msg.loggerNewLine\n\nfor (const application of msg.payload) {\n    let fieldValuePayload = {\n        key: \"date_of_effect\",\n        businessPartnerId: application.businessPartnerID,\n        bankApplicationId: application._id,\n    };\n    node.send({\n        ...msg,\n        payload: {},\n        application: application,\n        isComplete: false\n    })\n}\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 480,
        "wires": [
            [
                "8ed8872edd9b1ec4"
            ]
        ]
    },
    {
        "id": "770ecc06f126ebbc",
        "type": "debug",
        "z": "c03c74b3e3b3a2bb",
        "name": "No bank application found",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 400,
        "wires": []
    },
    {
        "id": "a2e824b7c896dc7b",
        "type": "http in",
        "z": "c03c74b3e3b3a2bb",
        "name": "",
        "url": "/api/updates-roi",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 660,
        "y": 60,
        "wires": [
            [
                "8a6432f8e8073ba3"
            ]
        ]
    },
    {
        "id": "5861882ba3fc75cd",
        "type": "inject",
        "z": "c03c74b3e3b3a2bb",
        "name": "4 PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 10 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "a2b1f50407bc9f17",
        "type": "inject",
        "z": "c03c74b3e3b3a2bb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 620,
        "y": 100,
        "wires": [
            [
                "62f667755eacc635"
            ]
        ]
    },
    {
        "id": "8a6432f8e8073ba3",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "checkTheHeaders",
        "func": "const X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nif(msg.req.headers[\"x-actyv-api-config-key\"]===X_ACTYV_API_CONFIG_KEY){\n    msg.isKeyPresent = true\n}else{\n    msg.isKeyPresent = false\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 904,
        "y": 60,
        "wires": [
            [
                "1d87588838934722"
            ]
        ]
    },
    {
        "id": "1d87588838934722",
        "type": "switch",
        "z": "c03c74b3e3b3a2bb",
        "name": "",
        "property": "isKeyPresent",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1144,
        "y": 60,
        "wires": [
            [
                "f77aaa1f9ea933bc"
            ],
            [
                "62f667755eacc635"
            ]
        ]
    },
    {
        "id": "f77aaa1f9ea933bc",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "",
        "func": "msg.payload = {\n    \"statusCode\": 403,\n    \"message\": \"Unauthorized\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1314,
        "y": 40,
        "wires": [
            [
                "5c6bda1011c64225"
            ]
        ]
    },
    {
        "id": "5c6bda1011c64225",
        "type": "http response",
        "z": "c03c74b3e3b3a2bb",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1504,
        "y": 40,
        "wires": []
    },
    {
        "id": "8ed8872edd9b1ec4",
        "type": "switch",
        "z": "c03c74b3e3b3a2bb",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 892,
        "y": 478,
        "wires": [
            [
                "af5c19bd99dec594"
            ],
            [
                "7dbad15eaad94c33"
            ]
        ]
    },
    {
        "id": "af5c19bd99dec594",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "",
        "func": "msg.payload = {\n    \"statusCode\": 200,\n    \"message\": \"Success\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1082,
        "y": 458,
        "wires": [
            [
                "d069707762aa1d5f"
            ]
        ]
    },
    {
        "id": "d069707762aa1d5f",
        "type": "http response",
        "z": "c03c74b3e3b3a2bb",
        "d": true,
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1252,
        "y": 458,
        "wires": []
    },
    {
        "id": "68bcc76cc3aafe29",
        "type": "inject",
        "z": "c03c74b3e3b3a2bb",
        "name": "9 PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 15 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "62f667755eacc635",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst ENTERPRISE_EMAIL = \"darkhorse@gmail.com\"\nconst PASSWORD = \"User@123\"\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": ENTERPRISE_EMAIL,\n    \"password\": PASSWORD\n};\n\nmsg.loggerNewLine = true\nmsg.logger = `Authenticate ${ENTERPRISE_EMAIL}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 160,
        "wires": [
            [
                "2370d8f29b520160"
            ]
        ]
    },
    {
        "id": "2370d8f29b520160",
        "type": "subflow:0cbd918f05921aae",
        "z": "c03c74b3e3b3a2bb",
        "name": "Authenticate",
        "x": 1010,
        "y": 160,
        "wires": [
            [
                "df6cac22d0017e59"
            ],
            [
                "71ba0856ddcb7add"
            ]
        ]
    },
    {
        "id": "df6cac22d0017e59",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "set actyv Entity Token",
        "func": "flow.set('actyv_token', msg.payload.idToken);\n\n// msg.ent_token = msg.payload.idToken\n\nconsole.log(msg.payload.idToken,\"TOKEN\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 160,
        "wires": [
            [
                "917329f12d060725",
                "e00fb27ea9c1d9e8"
            ]
        ]
    },
    {
        "id": "e00fb27ea9c1d9e8",
        "type": "debug",
        "z": "c03c74b3e3b3a2bb",
        "name": "actyvEntityToken",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 160,
        "wires": []
    },
    {
        "id": "917329f12d060725",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "getActyvEntityUser",
        "func": "\n\nconst GO_URL = env.get('GO_URL');\n\n\nmsg.url = `${GO_URL}/actyv-entity`;\nmsg.method = \"GET\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 240,
        "wires": [
            [
                "e53518d4269be694"
            ]
        ]
    },
    {
        "id": "e53518d4269be694",
        "type": "subflow:0cbd918f05921aae",
        "z": "c03c74b3e3b3a2bb",
        "name": "getCurrentUser",
        "x": 1040,
        "y": 240,
        "wires": [
            [
                "f5c471c9500c5685"
            ],
            []
        ]
    },
    {
        "id": "f5c471c9500c5685",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "Save actyv entity ID",
        "func": "const found = msg.payload.find(entity => entity.key === \"dark_horse\") ?? undefined\n\nconsole.log(found?._id)\nif (found) {\n    msg.actyvEntityId = found?._id\n    msg.payload = found?._id\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 240,
        "wires": [
            [
                "05d6b7ee82b0e144"
            ]
        ]
    },
    {
        "id": "0cb758d59dfca301",
        "type": "debug",
        "z": "c03c74b3e3b3a2bb",
        "name": "actyvEntityID",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1690,
        "y": 300,
        "wires": []
    },
    {
        "id": "71ba0856ddcb7add",
        "type": "debug",
        "z": "c03c74b3e3b3a2bb",
        "name": "actyvEntityToken",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 120,
        "wires": []
    },
    {
        "id": "b3833d0786490490",
        "type": "subflow:951a533bb3498fe6",
        "z": "c03c74b3e3b3a2bb",
        "name": "",
        "x": 1440,
        "y": 460,
        "wires": [
            [
                "7ce5f724f2fbcb78"
            ]
        ]
    },
    {
        "id": "7ce5f724f2fbcb78",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "join",
        "func": "delete msg.logger\ndelete msg.logger2\ndelete msg.loggerNewLine\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "b5bce55431c945f8",
        "type": "subflow:0cbd918f05921aae",
        "z": "c03c74b3e3b3a2bb",
        "name": "getAllBankApplication",
        "x": 1140,
        "y": 300,
        "wires": [
            [
                "50950f60ed1bedcd",
                "4a119fd99d1a6544",
                "1c1a9fb82af31dc0"
            ],
            [
                "50950f60ed1bedcd",
                "d1bfcfe770bbeb68"
            ]
        ]
    },
    {
        "id": "d1bfcfe770bbeb68",
        "type": "subflow:951a533bb3498fe6",
        "z": "c03c74b3e3b3a2bb",
        "name": "",
        "x": 1540,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "4a119fd99d1a6544",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "logger",
        "func": "msg.payload = `Fetched the bank applications and length ${msg.payload.length}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 380,
        "wires": [
            [
                "d1bfcfe770bbeb68"
            ]
        ]
    },
    {
        "id": "f5658c869eda7e41",
        "type": "debug",
        "z": "c03c74b3e3b3a2bb",
        "name": "debug 561",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 400,
        "wires": []
    },
    {
        "id": "7dbad15eaad94c33",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "get ROI req",
        "func": "\n\nconst PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\nconst bankApplicationID = msg.application._id\nmsg.url = `${PAYLATER_URL}/v1/form-field/fetch?bankApplicationID=${bankApplicationID}`\n\nmsg.headers = {\n    Authorization: `Bearer ${flow.get(\"actyv_token\")}`\n}\n\n\nmsg.logger = `Get updated ROI `\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 580,
        "wires": [
            [
                "31cb3c79f0153521",
                "82f5db5d475a9bf7"
            ]
        ]
    },
    {
        "id": "82f5db5d475a9bf7",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "c03c74b3e3b3a2bb",
        "name": "",
        "x": 950,
        "y": 580,
        "wires": [
            [
                "7c024164781aeeb5",
                "31cb3c79f0153521"
            ],
            [
                "31cb3c79f0153521"
            ]
        ]
    },
    {
        "id": "7c024164781aeeb5",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "switch",
        "func": "delete msg.logger\n\nconst dateOfEffect = msg?.payload?.formData?.validFrom\n// const currentDate = moment().format(\"YYYY-MM-DD\");\nconst currentDate = moment().add(1, 'days').format(\"YYYY-MM-DD\");\nmsg.formData = msg.payload.formData\nif (\n    !_.isEmpty(dateOfEffect) &&\n    dateOfEffect === currentDate\n) {\n    return msg\n}else{\n    throw new Error(\"Date is not matched\")\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            },
            {
                "var": "_",
                "module": "lodash"
            },
            {
                "var": "axios",
                "module": "axios"
            }
        ],
        "x": 1130,
        "y": 580,
        "wires": [
            [
                "202bd8f05e3c6544",
                "1ff7a145691a082a"
            ]
        ]
    },
    {
        "id": "1ff7a145691a082a",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "getLoanTerms",
        "func": "\n\nconst PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\n\nlet roiUpdateResponse = {};\nconst fieldValueLimit = msg.payload\n\nconst loanTermPayload = {\n    borrowerID: msg.application.businessPartnerID,\n    bankID: msg.application.bankId,\n    enterpriseID: msg.application.enterpriseId,\n};\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/service/fetchByBankID`\nmsg.method = 'POST'\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = loanTermPayload\n\n\nmsg.logger = `Fetching Loan term for ${loanTermPayload}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 660,
        "wires": [
            [
                "671b438e45bd2ca9",
                "04d239fdfe693ef7"
            ]
        ]
    },
    {
        "id": "a88288c49e1c3a73",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "limitUpdatepayload",
        "func": "const limitUpdatepayload = {\n    loanTermsID: msg.payload[0].id,\n    approvedLimit: msg.formData.newLimit,\n};\n\nconst {formData} = msg; \n\n// msg.old_approved_limit = msg.payload[0].approvedLimit\n// msg.new_approved_limit = msg.fieldValueLimit[0].value\n\n// flow.set(\"old_approved_limit\", msg.payload[0].approvedLimit)\n// flow.set(\"new_approved_limit\", msg.fieldValueLimit[0].value)\nlet isUpdateLoanTermRequired = false;\n\nif (formData.newLimit || formData.isActive !== undefined ){\n    isUpdateLoanTermRequired = true\n}\n\nmsg.isUpdateLoanTermRequired = isUpdateLoanTermRequired\nmsg.payload = limitUpdatepayload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 740,
        "wires": [
            [
                "0dcf507869af54ce",
                "6c7026ed79afb1c6"
            ]
        ]
    },
    {
        "id": "a2a44837b43ee2bc",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "updateLoanTerm",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst payload = msg.payload\nif (typeof msg.formData.isActive === 'boolean'){\n    payload[\"isActive\"] = msg.formData.isActive;\n}\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/service/update`\nmsg.method = 'PATCH',\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = payload\n\nmsg.logger = `Update the loan term`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 820,
        "wires": [
            [
                "550f7907a46434d1"
            ]
        ]
    },
    {
        "id": "671b438e45bd2ca9",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "c03c74b3e3b3a2bb",
        "name": "getLoanTerms",
        "x": 920,
        "y": 660,
        "wires": [
            [
                "71e825eafdc57c9f",
                "a88288c49e1c3a73"
            ],
            []
        ]
    },
    {
        "id": "550f7907a46434d1",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "c03c74b3e3b3a2bb",
        "name": "updateLoanTerm",
        "x": 950,
        "y": 820,
        "wires": [
            [
                "e0e4ae9f5ec31223",
                "c2acbc32cb5a0d5b"
            ],
            [
                "c2acbc32cb5a0d5b",
                "e0e4ae9f5ec31223"
            ]
        ]
    },
    {
        "id": "e0e4ae9f5ec31223",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "ROI Update",
        "func": "const PAYLATER_URL = env.get(\"PAYLATER_URL\")\nconst {newRoi,newTenor,newPenalRoi,oldRoi,oldTenor,oldPenalRoi} = msg.formData\nlet roiUpdatePayload = {\n    bankID: msg.application.bankId,\n    borrowerID: msg.application.businessPartnerID,\n    bankSpread: newRoi?parseFloat(newRoi): parseFloat(oldRoi),\n    tenor: newTenor? parseFloat(newTenor) : parseFloat(oldTenor),\n    penalROI: newPenalRoi? parseFloat(newPenalRoi): parseFloat(oldPenalRoi),\n};\n\nconsole.log({ newRoi, newTenor, newPenalRoi })\n\n// if(newRoi){\n// roiUpdatePayload[\"bankSpread\"] = parseFloat(newRoi)\n// }\n\n// if(newTenor){\n//     roiUpdatePayload[\"tenor\"] = parseFloat(newTenor)\n// }\n\n// if(newPenalRoi){\n//     roiUpdatePayload[\"penalROI\"] = parseFloat(newPenalRoi)\n// }\n\n\n// msg.new_roi = parseFloat(msg.payload[0].value)\nif (typeof msg.formData.isActive === 'boolean'){\n    msg.isActiveStatus = {\n        status: msg.payload.isActive ? \"Activated\" : \"Deactivated\",\n        accNumber: msg.payload.bankProvidedLoanCodes\n    }\n}\nmsg.limitUpdateResponse = msg.payload\nmsg.url = `${PAYLATER_URL}/v1/tenor-and-rate-spread/update-roi`\nmsg.method = 'PATCH',\nmsg.payload = roiUpdatePayload\nconst token = flow.get(\"actyv_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers['actyventityid'] = msg.actyvEntityId\n\nmsg.logger = `Update ROI ${roiUpdatePayload}`\n\nlet isRoiUpdateRequired = false;\n\nif(newPenalRoi || newRoi || newTenor){\n    isRoiUpdateRequired = true\n}\n\nmsg.isRoiUpdateRequired = isRoiUpdateRequired\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 900,
        "wires": [
            [
                "69208307fbf74011"
            ]
        ]
    },
    {
        "id": "29d2afe7dd239458",
        "type": "debug",
        "z": "c03c74b3e3b3a2bb",
        "name": "ROI Updated",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 900,
        "wires": []
    },
    {
        "id": "b5dea64d7517b336",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "updateBPMNVariable",
        "func": "const CAMUNDA_BASE_URL = env.get(\"CAMUNDA_BASE_URL\")\n\nconst variableName =  \"awaiting_change_action\"\n\nmsg.url = `${CAMUNDA_BASE_URL}/engine-rest/process-instance/${msg.application.workflowTaskID}/variables/${variableName}`\nmsg.method = 'PUT',\nmsg.payload = { value: true }\n\nmsg.logger = `Update BPMN variable`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1460,
        "wires": [
            [
                "02da897ec77925f1",
                "343572a3145c4f78"
            ]
        ]
    },
    {
        "id": "02da897ec77925f1",
        "type": "subflow:0cbd918f05921aae",
        "z": "c03c74b3e3b3a2bb",
        "name": "updateBPMNVariable",
        "x": 1000,
        "y": 1460,
        "wires": [
            [
                "bb9a6ea4ae191159",
                "98d229d4327da312"
            ],
            [
                "bb9a6ea4ae191159"
            ]
        ]
    },
    {
        "id": "bb9a6ea4ae191159",
        "type": "debug",
        "z": "c03c74b3e3b3a2bb",
        "name": "updateBPMNVariable",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 1460,
        "wires": []
    },
    {
        "id": "aedc5bf9bade2c82",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "c03c74b3e3b3a2bb",
        "name": "ROI update",
        "x": 950,
        "y": 900,
        "wires": [
            [
                "29d2afe7dd239458",
                "5951b415d0fc6b22"
            ],
            [
                "29d2afe7dd239458",
                "5951b415d0fc6b22"
            ]
        ]
    },
    {
        "id": "98d229d4327da312",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "Get user",
        "func": "const ADMIN_URL = env.get(\"ADMIN_URL\")\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nmsg.url = `${ADMIN_URL}/api/business-partner-user/all/businessPartner/${msg.application.businessPartnerID}`\nmsg.method = 'GET'\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n\nmsg.logger = `Get user for business partner ID ${msg.application.businessPartnerID}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1540,
        "wires": [
            [
                "8a1d522d7ab36141"
            ]
        ]
    },
    {
        "id": "c5fc07b7da57864c",
        "type": "debug",
        "z": "c03c74b3e3b3a2bb",
        "name": "get user",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1540,
        "wires": []
    },
    {
        "id": "443f8fa2be116501",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "Get user email",
        "func": "const ADMIN_URL = env.get(\"ADMIN_URL\")\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nmsg.url = `${ADMIN_URL}/api/user?_id=${msg.payload[0].userId}`\nmsg.method = 'GET'\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n\nmsg.logger = `Fetch the user with id #${msg.payload[0].userId}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1620,
        "wires": [
            [
                "58550e225c4754a3"
            ]
        ]
    },
    {
        "id": "4c7a044b83deb495",
        "type": "debug",
        "z": "c03c74b3e3b3a2bb",
        "name": "get user id",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1112,
        "y": 1618,
        "wires": []
    },
    {
        "id": "fa41e800fe830d25",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "getBank",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\n\n\nmsg.url = `${GO_URL}/bank/${msg.application.bankId}`\nmsg.method = 'GET'\n\nmsg.logger = `Fetch the bank with id #${msg.application.bankId}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1700,
        "wires": [
            [
                "d3059d7059c5321f"
            ]
        ]
    },
    {
        "id": "e194b17392f596f8",
        "type": "debug",
        "z": "c03c74b3e3b3a2bb",
        "name": "get bank",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 1700,
        "wires": []
    },
    {
        "id": "ce5e0ab7e18269c2",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "getBusinessPartner",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\n\nmsg.bankName = msg.payload.name\nmsg.bankEmailId = msg?.payload?.eSignTenant?.emailId\n\nmsg.url = `${GO_URL}/business-partner/get/${msg.application.businessPartnerID}`\nmsg.method = 'GET'\nmsg.headers = {}\nmsg.headers['x-actyv-api-config-key'] = X_ACTYV_API_CONFIG_KEY\n\nmsg.logger = `Get business partner with id #${msg.application.businessPartnerID}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1780,
        "wires": [
            [
                "77090f2d2524cf65"
            ]
        ]
    },
    {
        "id": "ee67c89ed164f75d",
        "type": "debug",
        "z": "c03c74b3e3b3a2bb",
        "name": "Before send email",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1220,
        "y": 1780,
        "wires": []
    },
    {
        "id": "8e02c7863dc52536",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "sendEmailReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\n// const oldApprovedLimit = flow.get('old_approved_limit') || \"\"\n// const newApprovedLimit = flow.get('new_approved_limit') || \"\"\n// const oldROI = flow.get(\"old_roi\") || \"\"\n// const newROI = flow.get('new_roi') || \"\"\n\n// const oldApprovedLimit = msg.old_approved_limit\nconst oldApprovedLimit = msg.formData.oldLimit\nconst newApprovedLimit = msg.formData.newLimit\nconst oldROI = msg.formData.oldRoi\nconst newROI = msg.formData.newRoi\n\nconst { newTenor, oldTenor, newPenalRoi, oldPenalRoi, validFrom} = msg.formData\n\nconst oldApprovedLimitCurrencyFormat = new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(+oldApprovedLimit)\nconst newApprovedLimitCurrencyFormat = new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(+newApprovedLimit)\n\nfunction changeDateFormat(date){\n  return date.split(\"-\").reverse().join(\"/\")\n}\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n  \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\nconst emails = [\n  // `${msg.businessPartnerEmail}`,\n  // \"mahesh.kumar@actyv.com\",\n  // \"vijaychand@actyv.com\",\n  // \"anand.rastogi@actyv.com\",\n  // \"aniruddha@actyv.com\",\n  // \"shailvi.shukla@actyv.com\",\n  // \"ramu.bugudi@actyv.com\",\n  \"saravanakumar.k@actyv.com\",\n  \"shravan.pm@actyv.com\",\n  // \"niravjayesh.intern@actyv.com\"\n]\nconst data = msg.businessRelationsForEmail\nlet table = ``;\nfor (const item of data) {\n  table += `\\n<tr>\n    <td>${item.identifierByParent}</td>\n    <td>${item.bankAccountNumber}</td>\n    <td>${item.bankName}</td>\n    <td>${item.bankIFSC}</td>\n    <td>${item.action}</td>\n  <tr/>`;\n}\n\nmsg.payload = {\n  \"from\": \"help@actyv.com\",\n  \"to\": emails,\n  \"subject\": `actyv BNPL ROI and LIMIT update`,\n  // \"html\": `${msg.error}`,\n  \"html\": `\n<html>\n    <head>\n        <style>\n            table, td, th {\n            border: 1px solid #000000;\n            border-collapse: collapse;\n            padding: .5rem;\n            text-align: center\n            }\n        </style>\n    </head>\n  <body>\n    <p>Dear <strong>${msg.payload.businessName}</strong></p>\n    ${newApprovedLimit ?`<p>\n      Your Paylater limit from the ${msg.bankName} is changed from ${oldApprovedLimitCurrencyFormat} to\n      ${newApprovedLimitCurrencyFormat}.\n    </p>`:\"\"}\n    ${newROI ? `<p>ROI is changed from ${oldROI}% to ${newROI}%.</p>`:\"\"}\n    ${newTenor ? `<p>Tenor is changed from ${oldTenor} days to ${newTenor} days.</p>`:\"\"}\n    ${ newPenalRoi ? `<p>Penal interest is changed from ${oldPenalRoi}% to ${newPenalRoi}%.</p>`:\"\"}\n    ${ typeof msg.formData.isActive === 'boolean' ? `<p> Your Paylater Account with Account Number <strong>\"${msg.isActiveStatus.accNumber}\"</strong> is ${msg.isActiveStatus.status} by ${msg.application.bankName}.</p>` : \"\"}\n    ${ msg.businessRelationsForEmail.length > 0 ? \n    `<div class=\"main-container\">\n    <p>Your Bank relationship details are updated as below.</p>\n    <table>\n                <tr>\n                  <th>Bank CRN</th>\n                  <th>Repayment Account Number</th>\n                  <th>Repayment Bank Name</th>\n                  <th>Repayment Bank IFSC</th>\n                  <th>Action</th>\n                </tr>\n                <tbody>\n                    ${table}\n                </tbody>\n           </table>\n    </div>`\n    :\n    \"\"\n    }\n    <p>These changes will be effective from ${changeDateFormat(validFrom)}.</p>\n\n    <p>For any queries please contact: ${msg.bankEmailId}.</p>\n\n    Thanks, <br />\n    ${msg.bankName}\n  </body>\n</html>\n`,\n  \"priority\": \"high\"\n}\n\n\n\nmsg.logger = `Send emails to ${emails} with ${{oldROI,newROI,oldApprovedLimitCurrencyFormat,newApprovedLimitCurrencyFormat}}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1860,
        "wires": [
            [
                "6893664cd0143978"
            ]
        ]
    },
    {
        "id": "d130214914596764",
        "type": "debug",
        "z": "c03c74b3e3b3a2bb",
        "name": "Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 1860,
        "wires": []
    },
    {
        "id": "8a1d522d7ab36141",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "c03c74b3e3b3a2bb",
        "name": "Get User",
        "x": 900,
        "y": 1540,
        "wires": [
            [
                "c5fc07b7da57864c",
                "443f8fa2be116501"
            ],
            [
                "c5fc07b7da57864c"
            ]
        ]
    },
    {
        "id": "58550e225c4754a3",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "c03c74b3e3b3a2bb",
        "name": "Get User Id",
        "x": 910,
        "y": 1620,
        "wires": [
            [
                "4c7a044b83deb495",
                "fa41e800fe830d25"
            ],
            [
                "4c7a044b83deb495"
            ]
        ]
    },
    {
        "id": "d3059d7059c5321f",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "c03c74b3e3b3a2bb",
        "name": "get Bank",
        "x": 880,
        "y": 1700,
        "wires": [
            [
                "e194b17392f596f8",
                "ce5e0ab7e18269c2"
            ],
            [
                "e194b17392f596f8"
            ]
        ]
    },
    {
        "id": "77090f2d2524cf65",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "c03c74b3e3b3a2bb",
        "name": "getBusinessPartner",
        "x": 972.8571472167969,
        "y": 1778.5715351104736,
        "wires": [
            [
                "ee67c89ed164f75d",
                "8e02c7863dc52536"
            ],
            [
                "ee67c89ed164f75d"
            ]
        ]
    },
    {
        "id": "6893664cd0143978",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "c03c74b3e3b3a2bb",
        "name": "send Email",
        "x": 910,
        "y": 1860,
        "wires": [
            [
                "d130214914596764"
            ],
            [
                "d130214914596764"
            ]
        ]
    },
    {
        "id": "71e825eafdc57c9f",
        "type": "debug",
        "z": "c03c74b3e3b3a2bb",
        "name": "get Loan terms",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 660,
        "wires": []
    },
    {
        "id": "c2acbc32cb5a0d5b",
        "type": "debug",
        "z": "c03c74b3e3b3a2bb",
        "name": "update Loan term",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 820,
        "wires": []
    },
    {
        "id": "0dcf507869af54ce",
        "type": "debug",
        "z": "c03c74b3e3b3a2bb",
        "name": "debug 562",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 740,
        "wires": []
    },
    {
        "id": "31cb3c79f0153521",
        "type": "debug",
        "z": "c03c74b3e3b3a2bb",
        "name": "Get ROI",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 520,
        "wires": []
    },
    {
        "id": "343572a3145c4f78",
        "type": "debug",
        "z": "c03c74b3e3b3a2bb",
        "name": "debug 564",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 1420,
        "wires": []
    },
    {
        "id": "202bd8f05e3c6544",
        "type": "debug",
        "z": "c03c74b3e3b3a2bb",
        "name": "debug 565",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 560,
        "wires": []
    },
    {
        "id": "0a73a8e0a421d8d4",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "Delete Relation Based on id",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst businessRelationId = msg.payload;\n\nmsg.url = `${GO_URL}/business-relationship/${businessRelationId}`\nmsg.method = 'DELETE'\nmsg.headers = {\n    \"x-actyv-api-config-key\" : X_ACTYV_API_CONFIG_KEY\n}\nmsg.logger = `Delete Business Relation with id #${businessRelationId}`\nmsg.loggerNewLine = true\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1200,
        "wires": [
            [
                "837067e4c962cdf6"
            ]
        ]
    },
    {
        "id": "4475f841c9811027",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "loop over Relations to be deleted",
        "func": "msg.roiUpdateResponse = msg.payload\nif (msg.formData.deletedRelationshipIds){\nfor (const deleteRelationId of msg.formData.deletedRelationshipIds) {\n    node.send({\n        ...msg,\n        payload: deleteRelationId,\n        isDeleted: false\n    })\n}\n}\nmsg.isDeleted = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1140,
        "wires": [
            [
                "9a63d09080070153"
            ]
        ]
    },
    {
        "id": "9a63d09080070153",
        "type": "switch",
        "z": "c03c74b3e3b3a2bb",
        "name": "",
        "property": "isDeleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 1220,
        "wires": [
            [
                "0a73a8e0a421d8d4"
            ],
            [
                "c62740837e194cc4"
            ]
        ]
    },
    {
        "id": "87fe62fdb4f472c7",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "Add Relation Based on Payload",
        "func": "const GO_URL = env.get('GO_URL')\n\nconst businessRelationDetails = msg.payload;\n\nmsg.url = `${GO_URL}/business-relationship`\nmsg.method = 'POST'\nmsg.payload = businessRelationDetails\n\nmsg.headers = {\n    Authorization: `Bearer ${flow.get(\"actyv_token\")}`\n}\n\nmsg.logger = `Create Business Relation with payload #${businessRelationDetails}`\nmsg.loggerNewLine = true\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1360,
        "wires": [
            [
                "105455cd1fe34307"
            ]
        ]
    },
    {
        "id": "c62740837e194cc4",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "Loop over relations to be added",
        "func": "if (msg.formData.newRelationships){\n    for (const newRelationDetails of msg.formData.newRelationships) {\n        node.send({\n            ...msg,\n            payload: newRelationDetails,\n            isCreated: false\n        })\n    }\n}\nmsg.isCreated = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1300,
        "wires": [
            [
                "66a9af866518e833"
            ]
        ]
    },
    {
        "id": "66a9af866518e833",
        "type": "switch",
        "z": "c03c74b3e3b3a2bb",
        "name": "",
        "property": "isCreated",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 1380,
        "wires": [
            [
                "87fe62fdb4f472c7"
            ],
            [
                "b5dea64d7517b336"
            ]
        ]
    },
    {
        "id": "d0ee14584fad4bc6",
        "type": "debug",
        "z": "c03c74b3e3b3a2bb",
        "name": "Delete Relationship",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 1200,
        "wires": []
    },
    {
        "id": "837067e4c962cdf6",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "c03c74b3e3b3a2bb",
        "name": "Delete Relationship",
        "x": 1170,
        "y": 1200,
        "wires": [
            [
                "d0ee14584fad4bc6"
            ],
            [
                "d0ee14584fad4bc6"
            ]
        ]
    },
    {
        "id": "105455cd1fe34307",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "c03c74b3e3b3a2bb",
        "name": "Add Relationship",
        "x": 1210,
        "y": 1360,
        "wires": [
            [
                "1da2744897d04a11"
            ],
            [
                "1da2744897d04a11"
            ]
        ]
    },
    {
        "id": "1da2744897d04a11",
        "type": "debug",
        "z": "c03c74b3e3b3a2bb",
        "name": "Add Relationship",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 1360,
        "wires": []
    },
    {
        "id": "5951b415d0fc6b22",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "Get All Business Relations",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst businessRelationId = msg.payload;\n\nmsg.url = `${GO_URL}/business-relationship/service/getByBusinessId/${msg.application.businessPartnerID}`\nmsg.method = 'GET'\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\nmsg.logger = `Fetch all Business Relation of businessId ${msg.application.businessPartnerID}`\nmsg.loggerNewLine = true\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1000,
        "wires": [
            [
                "6a4d2743b3dc82cf"
            ]
        ]
    },
    {
        "id": "6a4d2743b3dc82cf",
        "type": "subflow:7dfb7fc299d103f9",
        "z": "c03c74b3e3b3a2bb",
        "name": "",
        "x": 990,
        "y": 1000,
        "wires": [
            [
                "4590a6cda2255b7a",
                "8b29b9add273d5c3"
            ],
            [
                "4590a6cda2255b7a",
                "8b29b9add273d5c3"
            ]
        ]
    },
    {
        "id": "4590a6cda2255b7a",
        "type": "debug",
        "z": "c03c74b3e3b3a2bb",
        "name": "debug 566",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 980,
        "wires": []
    },
    {
        "id": "8b29b9add273d5c3",
        "type": "function",
        "z": "c03c74b3e3b3a2bb",
        "name": "Set all Business Relations to be sent to Bank",
        "func": "const businessRelations = msg.payload;\n\nlet emailRelations = []\n\nif (msg.formData.deletedRelationshipIds){\n    const deletedIdsSet = new Set(msg.formData.deletedRelationshipIds);\n    for(const businessRelation of businessRelations){\n        if (deletedIdsSet.has(businessRelation._id) && businessRelation.parentBusinessId == msg.application.bankId){\n            emailRelations.push({...businessRelation, action:\"Deleted\"})\n        }\n    }\n}\nif (msg.formData.newRelationships) {\n    for (const businessRelation of msg.formData.newRelationships) {\n        emailRelations.push({ ...businessRelation, action: \"Added\" })\n    }\n}\n\nmsg.businessRelationsForEmail = emailRelations;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1060,
        "wires": [
            [
                "0a6e49cac7bf0298",
                "4475f841c9811027"
            ]
        ]
    },
    {
        "id": "0a6e49cac7bf0298",
        "type": "debug",
        "z": "c03c74b3e3b3a2bb",
        "name": "debug 567",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 1060,
        "wires": []
    },
    {
        "id": "6c7026ed79afb1c6",
        "type": "switch",
        "z": "c03c74b3e3b3a2bb",
        "name": "",
        "property": "isUpdateLoanTermRequired",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 860,
        "wires": [
            [
                "a2a44837b43ee2bc"
            ],
            [
                "e0e4ae9f5ec31223"
            ]
        ]
    },
    {
        "id": "69208307fbf74011",
        "type": "switch",
        "z": "c03c74b3e3b3a2bb",
        "name": "",
        "property": "isRoiUpdateRequired",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 960,
        "wires": [
            [
                "aedc5bf9bade2c82"
            ],
            [
                "5951b415d0fc6b22",
                "66882844b0b87f6f"
            ]
        ]
    },
    {
        "id": "04d239fdfe693ef7",
        "type": "debug",
        "z": "c03c74b3e3b3a2bb",
        "name": "debug 624",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 640,
        "wires": []
    },
    {
        "id": "66882844b0b87f6f",
        "type": "debug",
        "z": "c03c74b3e3b3a2bb",
        "name": "debug 625",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 1020,
        "wires": []
    }
]