[
    {
        "id": "62bce85b962c1ba4",
        "type": "tab",
        "label": "IIFL drawdown",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "996aaae174a57dd4",
        "type": "tab",
        "label": "IIFL REPAYMENT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "61062284bea26a85",
        "type": "tab",
        "label": "IIFL Loan Level Status Update",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e8842e93c37e68d3",
        "type": "tab",
        "label": "IIFL Lead Push",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "09338278a6827f06",
        "type": "tab",
        "label": "IIFL leadPush response",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6aa904d67d2907b2",
        "type": "tab",
        "label": "Download file",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "84b812933a436af8",
        "type": "tab",
        "label": "Download file",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c458c3f61cf5894d",
        "type": "tab",
        "label": "split file",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2c9b62ae02743e16",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fc1716ca544be1e5",
        "type": "tab",
        "label": "Download And Zip",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c8388b64545e95b6",
        "type": "tab",
        "label": "TC Response for leadpush",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3dba22b286b032b4",
        "type": "SFTP-credentials",
        "host": "43.204.74.60",
        "port": "22",
        "username": "apl_uat_sftp",
        "password": "14UiqD1LvPobOpZIC8"
    },
    {
        "id": "5d210162c7877d54",
        "type": "aws-config"
    },
    {
        "id": "46e321986ef67141",
        "type": "amazon config",
        "name": "AWS",
        "region": "us-east-1",
        "proxyRequired": false,
        "proxy": ""
    },
    {
        "id": "2e225edb63763603",
        "type": "chronos-config",
        "name": "",
        "timezone": "",
        "sunPositions": []
    },
    {
        "id": "e890793010d7a406",
        "type": "SFTP-credentials",
        "host": "43.204.74.60",
        "port": "22",
        "username": "apl_uat_sftp",
        "password": "14UiqD1LvPobOpZIC8"
    },
    {
        "id": "d4942248b841ce28",
        "type": "SFTP-credentials",
        "host": "43.204.74.60",
        "port": "22",
        "username": "tata_uat_sftp",
        "password": "QLYEe4B7eRCPjqm2fntn"
    },
    {
        "id": "e3cfc177798d2d62",
        "type": "SFTP-credentials",
        "host": "s2fs.axisbank.com",
        "port": "22",
        "username": "Actyv_Onbaording",
        "password": "Happy@2022"
    },
    {
        "id": "015617f7b1e92c5e",
        "type": "SFTP-credentials",
        "host": "43.204.74.60",
        "port": "22",
        "username": "tata_uat_sftp",
        "password": "QLYEe4B7eRCPjqm2fntn"
    },
    {
        "id": "463d31d2537b4e59",
        "type": "aws-config"
    },
    {
        "id": "ec0eb0d718c8abe0",
        "type": "SFTP-credentials",
        "host": "s2fs.axisbank.com",
        "port": "22",
        "username": "DBATActyv_Transaction",
        "password": "Newindia@2022"
    },
    {
        "id": "9120915a93d43166",
        "type": "SSH-SFTP-credentials",
        "host": "43.204.74.60",
        "port": "22",
        "username": "apl_uat_sftp",
        "password": "14UiqD1LvPobOpZIC8"
    },
    {
        "id": "41941cb5b48f7a71",
        "type": "SFTP-credentials",
        "host": "127.0.0.1",
        "port": "22",
        "username": "",
        "password": ""
    },
    {
        "id": "dadbdab7c6a32790",
        "type": "SSH-SFTP-credentials",
        "host": "{{host}}",
        "port": "22",
        "username": "{{username}}",
        "password": "{{password}}"
    },
    {
        "id": "a0e863bf6c443264",
        "type": "chronos-config",
        "name": "",
        "timezone": "",
        "sunPositions": []
    },
    {
        "id": "f1b47f066ebebea5",
        "type": "aws-config"
    },
    {
        "id": "60d47eb81626fb0d",
        "type": "SSH-SFTP-credentials",
        "host": "127.0.0.1",
        "port": "22",
        "username": "",
        "password": ""
    },
    {
        "id": "2d3d7df6c65235a6",
        "type": "SFTP-credentials",
        "host": "s2fs.axisbank.com",
        "port": "22",
        "username": "Actyv_Onbaording",
        "password": "Happy@2022"
    },
    {
        "id": "8713902662c7b8a4",
        "type": "SFTP-credentials",
        "host": "43.204.74.60",
        "port": "22",
        "username": "tata_uat_sftp",
        "password": "QLYEe4B7eRCPjqm2fntn"
    },
    {
        "id": "35040c3d6c72a137",
        "type": "SSH-SFTP-credentials",
        "host": "43.204.74.60",
        "port": "22",
        "username": "apl_uat_sftp",
        "password": "14UiqD1LvPobOpZIC8"
    },
    {
        "id": "d25de1b6f4850991",
        "type": "SSH-SFTP-credentials",
        "host": "43.204.74.60",
        "port": "22",
        "username": "apl_uat_sftp",
        "password": "14UiqD1LvPobOpZIC8"
    },
    {
        "id": "50699989681bb650",
        "type": "inject",
        "z": "62bce85b962c1ba4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 120,
        "wires": [
            [
                "77d2dcb76a92fbce"
            ]
        ]
    },
    {
        "id": "0e13dfda5d905e0d",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "No Pending Drawdowns",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.length",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 620,
        "wires": []
    },
    {
        "id": "77d2dcb76a92fbce",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "Set env variables",
        "func": "\n// let v8 = global.get(\"v8\");\n// const totalHeapSize = v8.getHeapStatistics().total_available_size;\n// let totalHeapSizeInMB = (totalHeapSize / 1024 / 1024).toFixed(2)\n// node.warn(\"V8 Total Heap Size \"+totalHeapSize+\" bytes\");\n\nconst ENV_VARIABLES = new Map();\n\nENV_VARIABLES.set('PAYLATER_URL',\"https://actyv-platform-paylater-service-v1.qa.actyv.com\")\nENV_VARIABLES.set('GO_URL',\"https://actyv-platform-go-service.qa.actyv.com/api\")\nENV_VARIABLES.set('ADMIN_URL',\"https://actyv-platform-admin-service.qa.actyv.com\")\n\nENV_VARIABLES.set('BUSINESS_IDENTIFIER',\"ABBCB2066P\")\nENV_VARIABLES.set('BUSINESS_TYPE',\"ENTERPRISE\")\nENV_VARIABLES.set('BANK_KEY',\"msl\")\nENV_VARIABLES.set('X_ACTYV_API_CONFIG_KEY',\"8HhkIWzVMSnSgvlhxr\")\nENV_VARIABLES.set('BANK_UNIQUE_IDENTIFIER',\"AASCA2089A\")\nENV_VARIABLES.set('BASE_URL', \"https://iifl-atlas-uat.finfluxtrial.io\")\nENV_VARIABLES.set('tenant_id', \"iifl-qa\")\nENV_VARIABLES.set('IIFL_USER', \"demoUser1\")\nENV_VARIABLES.set('IIFL_USER_PASSWORD', \"fc895Tbr2i&w@\")\nENV_VARIABLES.set('BNPL_USER', \"surajkumar@aplapollo.com\")\nENV_VARIABLES.set('BNPL_USER_PASSWORD', \"890ioP@12\")\n\nglobal.set('envVariables',ENV_VARIABLES)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 120,
        "wires": [
            [
                "fd222e8aba92c133"
            ]
        ]
    },
    {
        "id": "275ddaa1421c57b5",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "getPendingDrawdownsReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\nconst BANK_UNIQUE_IDENTIFIER = envVariables.get('BANK_UNIQUE_IDENTIFIER')\nflow.set(\"bnplToken\", msg.payload.idToken);\nconst bnplToken = msg.payload.idToken\n\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown/send-drawdowns-to-bank/${BANK_UNIQUE_IDENTIFIER}`\nmsg.method = 'PUT';\n\nmsg.headers = {\nAuthorization : `Bearer ${bnplToken}`\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 440,
        "wires": [
            [
                "e911195085bb0c3d"
            ]
        ]
    },
    {
        "id": "e911195085bb0c3d",
        "type": "http request",
        "z": "62bce85b962c1ba4",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 440,
        "wires": [
            [
                "ee2e15543739d07e"
            ]
        ]
    },
    {
        "id": "ee2e15543739d07e",
        "type": "switch",
        "z": "62bce85b962c1ba4",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 195.00000762939453,
        "y": 627.5000057220459,
        "wires": [
            [
                "0e13dfda5d905e0d"
            ],
            [
                "bfdd274754ca45ea"
            ]
        ]
    },
    {
        "id": "bfdd274754ca45ea",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "setDrawdownReqFormat",
        "func": "const pendingDrawdowns = msg.payload\nconst formatPendingDrawdownsForIIFL = []\nfor (let pendingDrawdown of pendingDrawdowns) {\n    formatPendingDrawdownsForIIFL.push({\n        \"Dealer Code\": pendingDrawdown.loanTerm?.crnNumber || \"\",\n        \"Invoice Date\": changeDateFormat(pendingDrawdown.invoice.documentDate.split(\"T\")[0]),\n        // \"Invoice Date\": pendingDrawdown.invoice.documentDate,\n        \"Invoice Number\": pendingDrawdown.invoice.finalInvoiceNo,\n        \"Invoice Amount\": pendingDrawdown.invoice.netAmount,\n        // \"Due Date\": changeDateFormat(pendingDrawdown.invoice.dueDate.split(\"T\")[0]),\n        \"Account No\": pendingDrawdown.businessRelationShip.bankAccountNumber || \"\",\n        \"Email ID\": \"\",\n        \"ROI\": pendingDrawdown.tenorAndRateSpread?.bankSpread,\n        \"Request Unique Code\": pendingDrawdown.loanDrawdown?.requestUniqueCode\n    })\n\n}\n\nfunction changeDateFormat(str) {\n\n    str = str.split(\"-\");\n    let res = str[1] + \"/\" + str[2] + \"/\" + str[0]\n    let date = Date.parse(res)\n    return date\n}\n\nmsg.payload = formatPendingDrawdownsForIIFL;\n// TODO: Follow naming of the filename as per Axis\n// const fileConvention = createFileNameForAxis()\t\n// msg.filename = `/Users/shravanpm/Desktop/node-red/drawdowns/${fileConvention}`\n\n// function createFileNameForAxis(){\n//     const input = new Date().toISOString().split('.')\n//     const modified = `${input[0].split(\":\").join(\"-\")}.txt`\n\n//     return `Actyv_${modified}`\n// }\nmsg.payload = [msg.payload[0]]\nfor(let i=0;i<msg.payload.length;i++){\n    node.send({payload:msg.payload[i]});\n}\n\n// return msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 740,
        "wires": [
            [
                "3c47ac3a20e4f657",
                "2f56d2e007815135"
            ]
        ]
    },
    {
        "id": "63bb448d262dc246",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "mockPendingDrawdowns",
        "func": "msg.payload = [\n    {\n        \"loanTerm\": {\n            \"approvedLimit\": \"50000000\",\n            \"crnNumber\": \"123\",\n            \"bankProvidedLoanCode\": \"2134\",\n            \"validTill\": \"2022-11-16\",\n            \"loanAmount\": \"\",\n            \"holdAmount\": 0,\n            \"businessType\": \"VENDOR\"\n        },\n        \"invoice\": {\n            \"id\": \"e9966a85-c09c-4302-8a1e-5ad28e1deed2\",\n            \"finalInvoiceNo\": \"0050101517SGFL2022\",\n            \"documentDate\": \"2022-10-17T00:00:00.000Z\",\n            \"dueDate\": \"2022-11-16T00:00:00.000Z\",\n            \"remitTo\": \"\",\n            \"remitAccount\": \"\",\n            \"netAmount\": 3540543,\n            \"additionalAttributes\": null,\n            \"erpID\": null\n        },\n        \"tenorAndRateSpread\": {\n            \"fromDuration\": \"P0D\",\n            \"toDuration\": \"P7D\",\n            \"bankSpread\": 12\n        },\n        \"loanDrawdown\": {\n            \"requestUniqueCode\": \"ACTY3891670954806167\",\n            \"requestAmount\": 3540543,\n            \"dueDate\": \"2022-11-23T00:00:00.000Z\",\n            \"remitAccount\": \"APLATB101104\",\n            \"bankIFSC\": \"HDFC0000003\"\n        },\n        \"bank\": {\n            \"userFriendlyIdentifier\": \"Moongipa Securities Ltd.\",\n            \"name\": \"Moongipa Securities Ltd.\"\n        },\n        \"enterprise\": {\n            \"userFriendlyIdentifier\": \"Apollo\",\n            \"name\": \"Apollo\"\n        },\n        \"distributor\": {\n            \"userFriendlyIdentifier\": \"Santosh Steel\",\n            \"name\": \"Santosh Steel\"\n        },\n        \"businessRelationShip\": {\n\n        }\n    }\n]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "2f56d2e007815135",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "createLoanReq",
        "func": "msg.drawdown = msg.payload;\n\nconst iiflToken = flow.get(\"iiflToken\")\nconst envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL')\nconst tenant_id = envVariables.get('tenant_id')\nconst vclAccountNumber = msg.payload[\"Dealer Code\"] //take from loan term\nmsg.dealerCode = msg.payload[\"Dealer Code\"]\nmsg.url = `${BASE_URL}/api/virtual-credit-line/${vclAccountNumber}/draw-downs\n`\nmsg.method = \"POST\";\nmsg.headers = {\n    \"Fineract-Platform-TenantId\": tenant_id,\n    Authorization : `Bearer ${iiflToken}`\n}\nmsg.payload = {\n    \"productCode\": 5,\n    \"amount\": msg.payload[\"Invoice Amount\"],\n    \"interestRate\":msg.payload.ROI,//take from loan term\n    \"repayEvery\":2, //constant\n    \"repaymentPeriodFrequencyEnum\":2, //constant\n    \"numberOfInstallments\":3, //constant\n    \"drawDownDate\": msg.payload[\"Invoice Date\"], //epoch date need to be passed\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 840,
        "wires": [
            [
                "aff2d2fba1f4c9f5"
            ]
        ]
    },
    {
        "id": "aff2d2fba1f4c9f5",
        "type": "http request",
        "z": "62bce85b962c1ba4",
        "name": "createLoan",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 840,
        "wires": [
            [
                "b2752abac5be2585",
                "578fad4caae8e5c9"
            ]
        ]
    },
    {
        "id": "b2752abac5be2585",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "approveLoanReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL')\nconst tenant_id = envVariables.get('tenant_id');\nconst iiflToken = flow.get(\"iiflToken\")\n\n\nmsg.url = `${BASE_URL}/fineract-provider/api/v1/virtual-credit-line/${msg.dealerCode}/draw-downs/:${msg.payload.loanid}/approve`\nmsg.headers = {\n    \"Fineract-Platform-TenantId\": tenant_id,\n    Authorization: `Bearer ${iiflToken}`\n};\nmsg.req = {}\nmsg.req.query = {\n    command:\"approve\"\n}\n\nmsg.payload = {\n    \"notes\": \"approved\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 940,
        "wires": [
            [
                "a8525b30c31a4e9a"
            ]
        ]
    },
    {
        "id": "a8525b30c31a4e9a",
        "type": "http request",
        "z": "62bce85b962c1ba4",
        "name": "approveLoan",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 940,
        "wires": [
            [
                "14cd394a6020b381",
                "9a72b758a84637d6"
            ]
        ]
    },
    {
        "id": "14cd394a6020b381",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "disburseLoanReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL')\nconst tenant_id = envVariables.get('tenant_id')\nconst iiflToken = flow.get(\"iiflToken\")\n\n\nmsg.url = `${BASE_URL}/fineract-provider/api/v1/virtual-credit-line/${msg.dealerCode}/draw-downs/${msg.loadId}/disburse`\nmsg.headers = {\n    \"Fineract-Platform-TenantId\": tenant_id,\n    Authorization: `Bearer ${iiflToken}`\n};\nmsg.req = {}\nmsg.req.query = {\n    command:\"disburse\"\n}\n\nmsg.payload = {\n    \"transactionAmount\": 10000,\n    \"actualDisbursementDate\": \"04 September 2022\",\n    \"locale\": \"en\",\n    \"dateFormat\": \"dd MMMM yyyy\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1040,
        "wires": [
            [
                "ee3251b28dc1164b"
            ]
        ]
    },
    {
        "id": "ee3251b28dc1164b",
        "type": "http request",
        "z": "62bce85b962c1ba4",
        "name": "disburseLoan",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 600,
        "y": 1040,
        "wires": [
            [
                "f4cc89bf78b24fdb",
                "3a3b6647d3781e54"
            ]
        ]
    },
    {
        "id": "80ea9b3494df383a",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "updateDrawdownForSuccessReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\n\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown/`\nmsg.method = 'PATCH';\nmsg.payload = {\n    \"drawdownStatus\": \"paid\",\n    \"bankProvidedDrawdownCodes\":msg.loanId,\n    \"requestUniqueCode\": msg.drawdown[\"Request Unique Code\"]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1180,
        "wires": [
            [
                "6706ab124d12f334"
            ]
        ]
    },
    {
        "id": "f4cc89bf78b24fdb",
        "type": "switch",
        "z": "62bce85b962c1ba4",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "201",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "201",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 1240,
        "wires": [
            [
                "80ea9b3494df383a"
            ],
            [
                "00ef493f45cb637f"
            ]
        ]
    },
    {
        "id": "00ef493f45cb637f",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "updateDrawdownForFailureReq ",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\n\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown/`\nmsg.method = 'PATCH';\nmsg.payload = {\n    \"drawdownStatus\": \"failed\",\n    \"requestUniqueCode\": msg.drawdown[\"Request Unique Code\"],\n    \"bankProvidedDrawdownCodes\": msg.loanId,\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1300,
        "wires": [
            [
                "6706ab124d12f334"
            ]
        ]
    },
    {
        "id": "6706ab124d12f334",
        "type": "http request",
        "z": "62bce85b962c1ba4",
        "name": "updateDrawdownStatus",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 990,
        "y": 1240,
        "wires": [
            [
                "633f7ce511474dc5"
            ]
        ]
    },
    {
        "id": "633f7ce511474dc5",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 1240,
        "wires": []
    },
    {
        "id": "fd222e8aba92c133",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "AuthenticateIIFLUserReq",
        "func": "const envVariables = global.get('envVariables')\nconst IIFL_USER = envVariables.get('IIFL_USER')\nconst IIFL_USER_PASSWORD = envVariables.get('IIFL_USER_PASSWORD')\nconst BASE_URL = envVariables.get('BASE_URL');\n\n\nmsg.url = `${BASE_URL}/api/auth/login`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": IIFL_USER_PASSWORD,\n        \"userName\": IIFL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 180,
        "wires": [
            [
                "fad48673d80f5e48"
            ]
        ]
    },
    {
        "id": "fad48673d80f5e48",
        "type": "http request",
        "z": "62bce85b962c1ba4",
        "name": "AuthenticateIIFLUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 580,
        "y": 180,
        "wires": [
            [
                "900aba3a49e05c71"
            ]
        ]
    },
    {
        "id": "900aba3a49e05c71",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "saveIIFLToken",
        "func": "flow.set(\"iiflToken\",msg.payload)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 280,
        "wires": [
            [
                "4292f939c2539d6e"
            ]
        ]
    },
    {
        "id": "4292f939c2539d6e",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "AuthenticateBNPLUserReq",
        "func": "const envVariables = global.get('envVariables')\nconst BNPL_USER = envVariables.get('BNPL_USER')\nconst BNPL_USER_PASSWORD = envVariables.get('BNPL_USER_PASSWORD')\nconst ADMIN_URL = envVariables.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": BNPL_USER_PASSWORD,\n    \"email\": BNPL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 280,
        "wires": [
            [
                "9219973578398d27"
            ]
        ]
    },
    {
        "id": "9219973578398d27",
        "type": "http request",
        "z": "62bce85b962c1ba4",
        "name": "AuthenticateBNPLUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 280,
        "wires": [
            [
                "275ddaa1421c57b5"
            ]
        ]
    },
    {
        "id": "3c47ac3a20e4f657",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "drawdownRqstFormat",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 740,
        "wires": []
    },
    {
        "id": "578fad4caae8e5c9",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "create IIFL Loan",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 840,
        "wires": []
    },
    {
        "id": "9a72b758a84637d6",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "IIFL LoanApproval",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 940,
        "wires": []
    },
    {
        "id": "3a3b6647d3781e54",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "IIFL disburseLoan",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 1040,
        "wires": []
    },
    {
        "id": "bc23fc535ad2be48",
        "type": "inject",
        "z": "996aaae174a57dd4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 120,
        "wires": [
            [
                "d4a563f6bec24b80"
            ]
        ]
    },
    {
        "id": "d4a563f6bec24b80",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "Set env variables",
        "func": "\n// let v8 = global.get(\"v8\");\n// const totalHeapSize = v8.getHeapStatistics().total_available_size;\n// let totalHeapSizeInMB = (totalHeapSize / 1024 / 1024).toFixed(2)\n// node.warn(\"V8 Total Heap Size \"+totalHeapSize+\" bytes\");\n\nconst ENV_VARIABLES = new Map();\n\nENV_VARIABLES.set('PAYLATER_URL', \"https://actyv-platform-paylater-service-v1.qa.actyv.com\")\nENV_VARIABLES.set('GO_URL', \"https://actyv-platform-go-service.qa.actyv.com/api\")\nENV_VARIABLES.set('ADMIN_URL', \"https://actyv-platform-admin-service.qa.actyv.com\")\n\nENV_VARIABLES.set('BUSINESS_IDENTIFIER', \"ABBCB2066P\")\nENV_VARIABLES.set('BUSINESS_TYPE', \"ENTERPRISE\")\nENV_VARIABLES.set('BANK_KEY', \"msl\")\nENV_VARIABLES.set('X_ACTYV_API_CONFIG_KEY', \"8HhkIWzVMSnSgvlhxr\")\nENV_VARIABLES.set('BANK_UNIQUE_IDENTIFIER', \"AASCA2089A\")\nENV_VARIABLES.set('BASE_URL', \"https://iifl-atlas-uat.finfluxtrial.io\")\nENV_VARIABLES.set('tenant_id', \"iifl-qa\")\nENV_VARIABLES.set('BANK_PRODUCT_KEY', \"axis-sabari-product\")\n\nENV_VARIABLES.set('BNPL_USER', \"surajkumar@aplapollo.com\")\nENV_VARIABLES.set('BNPL_USER_PASSWORD', \"890ioP@12\")\n\nENV_VARIABLES.set('IIFL_USER', \"demoUser1\")\nENV_VARIABLES.set('IIFL_USER_PASSWORD', \"fc895Tbr2i&w@\")\n\nglobal.set('envVariables', ENV_VARIABLES)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 120,
        "wires": [
            [
                "dd0d71112b90392f"
            ]
        ]
    },
    {
        "id": "c009ce22dbc96c3d",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "getBankProductReq",
        "func": "const envVariables = global.get('envVariables')\nconst GO_URL = envVariables.get('GO_URL')\nconst BANK_PRODUCT_KEY = envVariables.get('BANK_PRODUCT_KEY')\n\nmsg.headers = {}\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank-product-config/key/${BANK_PRODUCT_KEY}`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 500,
        "wires": [
            [
                "def64810440574ea"
            ]
        ]
    },
    {
        "id": "def64810440574ea",
        "type": "http request",
        "z": "996aaae174a57dd4",
        "name": "getBankProduct",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 600,
        "y": 500,
        "wires": [
            [
                "8b0e28813da8dd6b"
            ]
        ]
    },
    {
        "id": "8b0e28813da8dd6b",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "setBankAndEnterpriseId",
        "func": "flow.set(\"bankId\",msg.payload.bank);\nflow.set(\"enterpriseId\", msg.payload.allowedEnterprises[0]);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 600,
        "wires": [
            [
                "eecf173edc9397da"
            ]
        ]
    },
    {
        "id": "eecf173edc9397da",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "getDistributorRelatonsReq",
        "func": "const envVariables = global.get('envVariables')\nconst GO_URL = envVariables.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = envVariables.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.url = `${GO_URL}/business-relationship/getByParentBusinessId/${msg.payload[\"allowedEnterprises\"]}`\nmsg.method = \"GET\"\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n    Authorization : `Bearer ${actyvToken}`\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 600,
        "wires": [
            [
                "740a76f7c96becda",
                "e746917b9b5219a8"
            ]
        ]
    },
    {
        "id": "740a76f7c96becda",
        "type": "http request",
        "z": "996aaae174a57dd4",
        "name": "getDistributorRelatons",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 960,
        "y": 600,
        "wires": [
            [
                "a5e37392b86c864f"
            ]
        ]
    },
    {
        "id": "a5e37392b86c864f",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "filterByBankAndDistributer",
        "func": "msg.payload = msg.payload.filter((item)=>{\n    return item.relationType === \"DISTRIBUTOR-BANK\"\n});\n\nfor(let i=0;i<msg.payload.length;i++){\n    node.send({\n        payload:msg.payload[i].identifierByParent\n    })\n}\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 680,
        "wires": [
            [
                "865145a15b51b9b8"
            ]
        ]
    },
    {
        "id": "dd0d71112b90392f",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "AuthenticateBNPLUserReq",
        "func": "const envVariables = global.get('envVariables')\nconst BNPL_USER = envVariables.get('BNPL_USER')\nconst BNPL_USER_PASSWORD = envVariables.get('BNPL_USER_PASSWORD')\nconst ADMIN_URL = envVariables.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": BNPL_USER_PASSWORD,\n    \"email\": BNPL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 200,
        "wires": [
            [
                "a6bd86fda79a387b"
            ]
        ]
    },
    {
        "id": "a6bd86fda79a387b",
        "type": "http request",
        "z": "996aaae174a57dd4",
        "name": "AuthenticateBNPLUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 630,
        "y": 200,
        "wires": [
            [
                "4e8f2685c30a9d56"
            ]
        ]
    },
    {
        "id": "55865ec6cf840209",
        "type": "debug",
        "z": "996aaae174a57dd4",
        "name": "debug 60",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 880,
        "wires": []
    },
    {
        "id": "4e8f2685c30a9d56",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 200,
        "wires": [
            [
                "21fbe25aa67aa8ec"
            ]
        ]
    },
    {
        "id": "865145a15b51b9b8",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "getLoanTermByCrnReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL');\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/fetchByCrnNumber`;\nmsg.method = \"POST\";\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`\n}\nmsg.crnNumber = msg.payload\nmsg.payload = { \n    // crnNumber: msg.payload\n    crnNumber:\"SGFLTD101104\"\n    }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 680,
        "wires": [
            [
                "6120cb77cdf78d74"
            ]
        ]
    },
    {
        "id": "6120cb77cdf78d74",
        "type": "http request",
        "z": "996aaae174a57dd4",
        "name": "getLoanTermByCrn",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 910,
        "y": 680,
        "wires": [
            [
                "31ef4ad07643841b"
            ]
        ]
    },
    {
        "id": "31ef4ad07643841b",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "getPaidDrawdownsForLoanIDReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL');\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown/fetch`;\nmsg.method = \"POST\";\nmsg.headers = {\n    Authorization: `Bearer ${actyvToken}`\n}\nmsg.crnNumber = msg.payload\nmsg.payload = \n   {\n\n    // \"loanTermID\": msg.payload.id,\n    \"loanTermID\":\"1e035bf2-00b2-4ac3-80d6-2c405461a5e5\",\n        \"drawdownStatus\" : \"paid\"\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 780,
        "wires": [
            [
                "ab18ac1d9c6aa423"
            ]
        ]
    },
    {
        "id": "ab18ac1d9c6aa423",
        "type": "http request",
        "z": "996aaae174a57dd4",
        "name": "getPaidDrawdownsForLoanID",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 670,
        "y": 780,
        "wires": [
            [
                "fbb8d461b3e2c8a0"
            ]
        ]
    },
    {
        "id": "fbb8d461b3e2c8a0",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "loopThroughDrawdowns",
        "func": "\n\nfor(let i=0;i<msg.payload.length;i++){\n    node.send({\n        drawdown :{\n            id:msg.payload[i].id,\n            requestUniqueCode: msg.payload[i].requestUniqueCode,\n            loanId: msg.payload[i].bankProvidedDrawdownCodes,\n            vcl: msg.payload[i].loanTerm.crnNumber,\n            loanTermId: msg.payload[i].loanTerm.id\n        }\n    })\n}\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 880,
        "wires": [
            [
                "55865ec6cf840209",
                "d55aafc5bf695080"
            ]
        ]
    },
    {
        "id": "d55aafc5bf695080",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "getLoanStatusReq",
        "func": "const iiflToken = flow.get(\"iiflToken\")\nconst envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL')\nconst tenant_id = envVariables.get('tenant_id')\nconst vclAccountNumber = msg.drawdown.vcl //take from loan term\nconst loanId = msg.drawdown.loanId\nmsg.url = `${BASE_URL}/api/loans/${loanId}`\nmsg.method = \"GET\";\nmsg.headers = {\n    \"Fineract-Platform-TenantId\": tenant_id,\n    Authorization: `Bearer ${iiflToken}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 980,
        "wires": [
            [
                "c2b9b6a2d408ec31"
            ]
        ]
    },
    {
        "id": "c2b9b6a2d408ec31",
        "type": "http request",
        "z": "996aaae174a57dd4",
        "name": "getLoanStatus",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 620,
        "y": 980,
        "wires": [
            [
                "f598a0f54b3791e5"
            ]
        ]
    },
    {
        "id": "f598a0f54b3791e5",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "createEntryOnDailyLedgerReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\nconst tenant_id = envVariables.get('tenant_id')\n\nmsg.url = `${PAYLATER_URL}/v1/daily-ledger`\nmsg.method = \"POST\";\n\nmsg.payload = {\n    \"loanTermID\": msg.drawdown.loanTermId,\n    \"transactionDate\": \"2023-01-16T13:51:12.958Z\",\n    \"openingBalance\": 0,\n    \"closingBalance\": 0,\n    \"totalPayment\": 0,\n    \"totalDrawdown\": 0,\n    \"interestAmount\": 0,\n    \"overdueAmount\": 0,\n    \"penalInterestAmount\": 0,\n    \"interestRate\": 0,\n    \"penalInterestRate\": 0\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1060,
        "wires": [
            [
                "ab963133e6904785"
            ]
        ]
    },
    {
        "id": "ab963133e6904785",
        "type": "http request",
        "z": "996aaae174a57dd4",
        "name": "createEntryOnRepaymentTable",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 670,
        "y": 1060,
        "wires": [
            [
                "cc1449116ae322eb"
            ]
        ]
    },
    {
        "id": "cc1449116ae322eb",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "createEntryOnRepaymentTableReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\nconst tenant_id = envVariables.get('tenant_id')\n\nmsg.url = `${PAYLATER_URL}/v1/loan-payment`\nmsg.method = \"POST\";\n\nmsg.payload = {\n    \"loanID\": \"xxxx-xxxx-xxxx\",\n    \"drawdownID\": \"xxxx-xxxx-xxxx\",\n    \"amount\": 1000000,\n    \"date\": \"2011-04-11T10:20:30Z\",\n    \"paymentMethod\": \"Cash\",\n    \"fromAccount\": \"123412341234\",\n    \"principal\": 100000,\n    \"interest\": 1000,\n    \"balance\": 0\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1180,
        "wires": [
            [
                "c22dd584c751c67d"
            ]
        ]
    },
    {
        "id": "c22dd584c751c67d",
        "type": "http request",
        "z": "996aaae174a57dd4",
        "name": "createEntryOnDailyLedger",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 660,
        "y": 1180,
        "wires": [
            [
                "e78a633d45d434b1"
            ]
        ]
    },
    {
        "id": "e78a633d45d434b1",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "createEntryOnCashTableReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\nconst tenant_id = envVariables.get('tenant_id')\n\nmsg.url = `${PAYLATER_URL}/v1/cash-application`\nmsg.method = \"POST\";\n\nmsg.payload = {\n    \"loanDrawdownID\": \"string\",\n    \"loanPaymentID\": \"string\",\n    \"loanTermID\": \"string\",\n    \"transactionDate\": \"2023-01-16T13:52:30.856Z\",\n    \"appliedAmount\": 0\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1320,
        "wires": [
            [
                "b37fc11cbb1fccbf"
            ]
        ]
    },
    {
        "id": "b37fc11cbb1fccbf",
        "type": "http request",
        "z": "996aaae174a57dd4",
        "name": "createEntryOnCashTable",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 650,
        "y": 1320,
        "wires": [
            [
                "a6a7b6e4ba6af4f1"
            ]
        ]
    },
    {
        "id": "a6a7b6e4ba6af4f1",
        "type": "debug",
        "z": "996aaae174a57dd4",
        "name": "debug 61",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 1320,
        "wires": []
    },
    {
        "id": "21fbe25aa67aa8ec",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "AuthenticateIIFLUserReq",
        "func": "const envVariables = global.get('envVariables')\nconst IIFL_USER = envVariables.get('IIFL_USER')\nconst IIFL_USER_PASSWORD = envVariables.get('IIFL_USER_PASSWORD')\nconst BASE_URL = envVariables.get('BASE_URL');\n\n\nmsg.url = `${BASE_URL}/api/auth/login`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": IIFL_USER_PASSWORD,\n        \"userName\": IIFL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 340,
        "wires": [
            [
                "8328b5c951504740"
            ]
        ]
    },
    {
        "id": "8328b5c951504740",
        "type": "http request",
        "z": "996aaae174a57dd4",
        "name": "AuthenticateIIFLUser",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 640,
        "y": 340,
        "wires": [
            [
                "ca99bf5b7ee9a3cb",
                "acc5fa752e399e47"
            ]
        ]
    },
    {
        "id": "ca99bf5b7ee9a3cb",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "saveIIFLToken",
        "func": "flow.set(\"iiflToken\",msg.payload)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 340,
        "wires": [
            [
                "c009ce22dbc96c3d"
            ]
        ]
    },
    {
        "id": "e746917b9b5219a8",
        "type": "debug",
        "z": "996aaae174a57dd4",
        "name": "debug 63",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 540,
        "wires": []
    },
    {
        "id": "acc5fa752e399e47",
        "type": "debug",
        "z": "996aaae174a57dd4",
        "name": "debug 64",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 400,
        "wires": []
    },
    {
        "id": "bb737c30c8ca6f98",
        "type": "inject",
        "z": "61062284bea26a85",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "9ac0cc4dad29c7b2"
            ]
        ]
    },
    {
        "id": "9ac0cc4dad29c7b2",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "Set env variables",
        "func": "\n// let v8 = global.get(\"v8\");\n// const totalHeapSize = v8.getHeapStatistics().total_available_size;\n// let totalHeapSizeInMB = (totalHeapSize / 1024 / 1024).toFixed(2)\n// node.warn(\"V8 Total Heap Size \"+totalHeapSize+\" bytes\");\n\nconst ENV_VARIABLES = new Map();\n\nENV_VARIABLES.set('PAYLATER_URL', \"https://actyv-platform-paylater-service-v1.qa.actyv.com\")\nENV_VARIABLES.set('GO_URL', \"https://actyv-platform-go-service.qa.actyv.com/api\")\nENV_VARIABLES.set('ADMIN_URL', \"https://actyv-platform-admin-service.qa.actyv.com\")\n\nENV_VARIABLES.set('BUSINESS_IDENTIFIER', \"ABBCB2066P\")\nENV_VARIABLES.set('BUSINESS_TYPE', \"ENTERPRISE\")\nENV_VARIABLES.set('BANK_KEY', \"msl\")\nENV_VARIABLES.set('X_ACTYV_API_CONFIG_KEY', \"8HhkIWzVMSnSgvlhxr\")\nENV_VARIABLES.set('BANK_UNIQUE_IDENTIFIER', \"AASCA2089A\")\nENV_VARIABLES.set('BASE_URL', \"https://iifl-atlas-uat.finfluxtrial.io\")\nENV_VARIABLES.set('tenant_id', \"iifl-qa\")\nENV_VARIABLES.set('BANK_PRODUCT_KEY', \"axis-sabari-product\")\n\nENV_VARIABLES.set('BNPL_USER', \"surajkumar@aplapollo.com\")\nENV_VARIABLES.set('BNPL_USER_PASSWORD', \"890ioP@12\")\nENV_VARIABLES.set('IIFL_USER', \"demoUser1\")\nENV_VARIABLES.set('IIFL_USER_PASSWORD', \"fc895Tbr2i&w@\")\n\nglobal.set('envVariables', ENV_VARIABLES)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 60,
        "wires": [
            [
                "7530dc11778e49ea"
            ]
        ]
    },
    {
        "id": "f7ba9a887eb49491",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "getBankProductReq",
        "func": "const envVariables = global.get('envVariables')\nconst GO_URL = envVariables.get('GO_URL')\nconst BANK_PRODUCT_KEY = envVariables.get('BANK_PRODUCT_KEY')\n\nmsg.headers = {}\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank-product-config/key/${BANK_PRODUCT_KEY}`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 300,
        "wires": [
            [
                "a79e7fe9748cf123"
            ]
        ]
    },
    {
        "id": "a79e7fe9748cf123",
        "type": "http request",
        "z": "61062284bea26a85",
        "name": "getBankProduct",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 480,
        "y": 300,
        "wires": [
            [
                "fd5c0b77d2411e9f",
                "65f3ab07a6f11f22"
            ]
        ]
    },
    {
        "id": "fd5c0b77d2411e9f",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "setBankAndEnterpriseId",
        "func": "flow.set(\"bankId\",msg.payload.bank);\nflow.set(\"enterpriseId\", msg.payload.allowedEnterprises[0]);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 420,
        "wires": [
            [
                "b5d193f12a4ba20b"
            ]
        ]
    },
    {
        "id": "b5d193f12a4ba20b",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "getDistributorRelatonsReq",
        "func": "const envVariables = global.get('envVariables')\nconst GO_URL = envVariables.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = envVariables.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.url = `${GO_URL}/business-relationship/getByParentBusinessId/${msg.payload[\"allowedEnterprises\"]}`\nmsg.method = \"GET\"\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n    Authorization : `Bearer ${actyvToken}`\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 420,
        "wires": [
            [
                "73d9214512e9ebc6"
            ]
        ]
    },
    {
        "id": "73d9214512e9ebc6",
        "type": "http request",
        "z": "61062284bea26a85",
        "name": "getDistributorRelatons",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 820,
        "y": 420,
        "wires": [
            [
                "88c594de00aaf369",
                "edc50df4010bb0af"
            ]
        ]
    },
    {
        "id": "edc50df4010bb0af",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "filterByBankAndDistributer",
        "func": "msg.payload = msg.payload.filter((item)=>{\n    return item.relationType === \"DISTRIBUTOR-BANK\"\n});\n\nfor(let i=0;i<msg.payload.length;i++){\n    node.send({\n        payload:msg.payload[i]\n    })\n}\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 520,
        "wires": [
            [
                "ccd0d6350dfce3be"
            ]
        ]
    },
    {
        "id": "ccd0d6350dfce3be",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "getLoanTermByCrnReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL');\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/fetchByCrnNumber`;\nmsg.method = \"POST\";\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`\n}\nmsg.crnNumber = msg.payload.identifierByParent\nmsg.payload = { \n    // crnNumber: msg.payload.identifierByParent\n    crnNumber:\"SGFLTD101104\"\n    }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 520,
        "wires": [
            [
                "0284ef1ee47e9034"
            ]
        ]
    },
    {
        "id": "0284ef1ee47e9034",
        "type": "http request",
        "z": "61062284bea26a85",
        "name": "getLoanTermByCrn",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 830,
        "y": 520,
        "wires": [
            [
                "668959e1f01e6611"
            ]
        ]
    },
    {
        "id": "7530dc11778e49ea",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "AuthenticateBNPLUserReq",
        "func": "const envVariables = global.get('envVariables')\nconst BNPL_USER = envVariables.get('BNPL_USER')\nconst BNPL_USER_PASSWORD = envVariables.get('BNPL_USER_PASSWORD')\nconst ADMIN_URL = envVariables.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": BNPL_USER_PASSWORD,\n    \"email\": BNPL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 120,
        "wires": [
            [
                "b459e362ef2b9c61"
            ]
        ]
    },
    {
        "id": "b459e362ef2b9c61",
        "type": "http request",
        "z": "61062284bea26a85",
        "name": "AuthenticateBNPLUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 120,
        "wires": [
            [
                "103963ae6567f156"
            ]
        ]
    },
    {
        "id": "103963ae6567f156",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 120,
        "wires": [
            [
                "bd4c69d7bc9b264b",
                "7629a302d71cb32c"
            ]
        ]
    },
    {
        "id": "bd4c69d7bc9b264b",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "AuthenticateIIFLUserReq",
        "func": "const envVariables = global.get('envVariables')\nconst IIFL_USER = envVariables.get('IIFL_USER')\nconst IIFL_USER_PASSWORD = envVariables.get('IIFL_USER_PASSWORD')\nconst BASE_URL = envVariables.get('BASE_URL');\n\n\nmsg.url = `${BASE_URL}/api/auth/login`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": IIFL_USER_PASSWORD,\n        \"userName\": IIFL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 200,
        "wires": [
            [
                "0d6cb629be9c052e"
            ]
        ]
    },
    {
        "id": "0d6cb629be9c052e",
        "type": "http request",
        "z": "61062284bea26a85",
        "name": "AuthenticateIIFLUser",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 200,
        "wires": [
            [
                "07ee7d166a5ace75"
            ]
        ]
    },
    {
        "id": "07ee7d166a5ace75",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "saveIIFLToken",
        "func": "flow.set(\"iiflToken\",msg.payload)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 200,
        "wires": [
            [
                "f7ba9a887eb49491",
                "45cf2365d568989e"
            ]
        ]
    },
    {
        "id": "cb7ad22c93ac5e31",
        "type": "debug",
        "z": "61062284bea26a85",
        "name": "debug 62",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 600,
        "wires": []
    },
    {
        "id": "45cf2365d568989e",
        "type": "debug",
        "z": "61062284bea26a85",
        "name": "IIFL Token",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 200,
        "wires": []
    },
    {
        "id": "7629a302d71cb32c",
        "type": "debug",
        "z": "61062284bea26a85",
        "name": "actyv Token",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 120,
        "wires": []
    },
    {
        "id": "65f3ab07a6f11f22",
        "type": "debug",
        "z": "61062284bea26a85",
        "name": "bankProduct",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 300,
        "wires": []
    },
    {
        "id": "88c594de00aaf369",
        "type": "debug",
        "z": "61062284bea26a85",
        "name": "distributorRelationships",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 420,
        "wires": []
    },
    {
        "id": "668959e1f01e6611",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "getLoanTermReq",
        "func": "// msg.loanID = msg.payload.id\nmsg.loanID = \"1e035bf2-00b2-4ac3-80d6-2c405461a5e5\"\n\nconst envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL');\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/fetch`;\nmsg.method = \"POST\";\nmsg.headers = {\n    Authorization: `Bearer ${actyvToken}`\n}\nmsg.crnNumber = msg.payload.identifierByParent\nmsg.payload = {\n    // crnNumber: msg.payload.identifierByParent\n    \"loanTermsID\": msg.loanID,\n    \"toMask\": false\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 600,
        "wires": [
            [
                "b9801a93bb233b3b"
            ]
        ]
    },
    {
        "id": "ee3bae13c71165ec",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "loanUpdatesFromIIFLReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\n// const clientId = msg.payload[0].bankProvidedLoanCodes\nconst clientId = msg.payload[0].bankProvidedLoanCodes\n\nconst iiflToken = flow.get(\"iiflToken\")\n\n\nmsg.url = `${BASE_URL}/api/clients/${clientId}/virtual-credit-line`\nmsg.headers = {\n    // \"Fineract-Platform-TenantId\": tenant_id,.\n    Authorization: `Bearer ${iiflToken}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 700,
        "wires": [
            [
                "9298002a8115a859"
            ]
        ]
    },
    {
        "id": "b9801a93bb233b3b",
        "type": "http request",
        "z": "61062284bea26a85",
        "name": "getLoanTerm",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 600,
        "wires": [
            [
                "cb7ad22c93ac5e31",
                "ee3bae13c71165ec"
            ]
        ]
    },
    {
        "id": "9298002a8115a859",
        "type": "http request",
        "z": "61062284bea26a85",
        "name": "loanUpdatesFromIIFL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 700,
        "wires": [
            [
                "15b6002441d89aff"
            ]
        ]
    },
    {
        "id": "15b6002441d89aff",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "filterByCrn",
        "func": "let vclData = msg.payload.filter((item)=>{\n    return item.accountNo == msg.crnNumber\n});\nmsg.payload = vclData[0]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 700,
        "wires": [
            [
                "8efe067680650f64"
            ]
        ]
    },
    {
        "id": "8efe067680650f64",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "updateLoanTermReq",
        "func": "// msg.loanID = msg.payload.id\nmsg.loanID = \"1e035bf2-00b2-4ac3-80d6-2c405461a5e5\"\n\nconst envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL');\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/update`;\nmsg.method = \"PATCH\";\nmsg.headers = {\n    Authorization: `Bearer ${actyvToken}`\n}\nmsg.crnNumber = msg.payload.identifierByParent\nmsg.payload = {\n    // crnNumber: msg.payload.identifierByParent\n    \"loanTermsID\": msg.loanID,\n    \"loanAmount\": msg.payload.creditLimit,\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 800,
        "wires": [
            [
                "a624176a4154eb3f"
            ]
        ]
    },
    {
        "id": "fa6beeef2e013814",
        "type": "comment",
        "z": "61062284bea26a85",
        "name": "loop",
        "info": "",
        "x": 130,
        "y": 480,
        "wires": []
    },
    {
        "id": "a624176a4154eb3f",
        "type": "http request",
        "z": "61062284bea26a85",
        "name": "updateLoanTerm",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 490,
        "y": 800,
        "wires": [
            [
                "2f6325eaabdc18ad"
            ]
        ]
    },
    {
        "id": "2f6325eaabdc18ad",
        "type": "debug",
        "z": "61062284bea26a85",
        "name": "completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 800,
        "wires": []
    },
    {
        "id": "23a7fbaace120573",
        "type": "inject",
        "z": "e8842e93c37e68d3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "32591d37a841bef2"
            ]
        ]
    },
    {
        "id": "32591d37a841bef2",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "Set env variables",
        "func": "\n// let v8 = global.get(\"v8\");\n// const totalHeapSize = v8.getHeapStatistics().total_available_size;\n// let totalHeapSizeInMB = (totalHeapSize / 1024 / 1024).toFixed(2)\n// node.warn(\"V8 Total Heap Size \"+totalHeapSize+\" bytes\");\n\nconst ENV_VARIABLES = new Map();\n\nENV_VARIABLES.set('PAYLATER_URL', \"https://actyv-platform-paylater-service-v1.qa.actyv.com\")\nENV_VARIABLES.set('GO_URL', \"https://actyv-platform-go-service.qa.actyv.com\")\nENV_VARIABLES.set('ADMIN_URL', \"https://actyv-platform-admin-service.qa.actyv.com\")\n\nENV_VARIABLES.set('BUSINESS_IDENTIFIER', \"ABBCB2066P\")\nENV_VARIABLES.set('BUSINESS_TYPE', \"ENTERPRISE\")\nENV_VARIABLES.set('BANK_KEY', \"msl\")\nENV_VARIABLES.set('X_ACTYV_API_CONFIG_KEY', \"8HhkIWzVMSnSgvlhxr\")\nENV_VARIABLES.set('BANK_UNIQUE_IDENTIFIER', \"AASCA2089A\")\nENV_VARIABLES.set('BASE_URL', \"https://iifl-atlas-uat.finfluxtrial.io\")\nENV_VARIABLES.set('tenant_id', \"iifl-qa\")\nENV_VARIABLES.set('BANK_PRODUCT_KEY', \"axis-sabari-product\")\n\nENV_VARIABLES.set('BNPL_USER', \"surajkumar@aplapollo.com\")\nENV_VARIABLES.set('BNPL_USER_PASSWORD', \"890ioP@12\")\nENV_VARIABLES.set('IIFL_USER', \"demoUser2\")\nENV_VARIABLES.set('IIFL_USER_PASSWORD', \"fc895Tbr2i&w@\")\n\nglobal.set('envVariables', ENV_VARIABLES)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 60,
        "wires": [
            [
                "c9968cc2d1d8ca3b"
            ]
        ]
    },
    {
        "id": "c9968cc2d1d8ca3b",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "AuthenticateBNPLUserReq",
        "func": "const envVariables = global.get('envVariables')\nconst BNPL_USER = envVariables.get('BNPL_USER')\nconst BNPL_USER_PASSWORD = envVariables.get('BNPL_USER_PASSWORD')\nconst ADMIN_URL = envVariables.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": BNPL_USER_PASSWORD,\n    \"email\": BNPL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 120,
        "wires": [
            [
                "704f8f1009f33844"
            ]
        ]
    },
    {
        "id": "704f8f1009f33844",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "AuthenticateBNPLUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 120,
        "wires": [
            [
                "8a728e695af44a28",
                "a257ca5bd6faa3e4"
            ]
        ]
    },
    {
        "id": "8a728e695af44a28",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\n// console.log(msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 120,
        "wires": [
            [
                "1f3f810b8fb8f45e"
            ]
        ]
    },
    {
        "id": "1f3f810b8fb8f45e",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "AuthenticateIIFLUserReq",
        "func": "const envVariables = global.get('envVariables')\nconst IIFL_USER = envVariables.get('IIFL_USER')\nconst IIFL_USER_PASSWORD = envVariables.get('IIFL_USER_PASSWORD')\nconst BASE_URL = envVariables.get('BASE_URL');\n\n\nmsg.url = `${BASE_URL}/api/auth/login`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": IIFL_USER_PASSWORD,\n        \"userName\": IIFL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 200,
        "wires": [
            [
                "a532dc305f0c9995"
            ]
        ]
    },
    {
        "id": "a532dc305f0c9995",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "AuthenticateIIFLUser",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 200,
        "wires": [
            [
                "db3e1d47472bb697",
                "a57c8877ea24e8d8"
            ]
        ]
    },
    {
        "id": "db3e1d47472bb697",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveIIFLToken",
        "func": "flow.set(\"iiflToken\",msg.payload)\nconsole.log({token:msg.payload})\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 200,
        "wires": [
            [
                "2b483fb15ef70afa"
            ]
        ]
    },
    {
        "id": "2b483fb15ef70afa",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "getBankProductKeyReq",
        "func": "const envVariables = global.get('envVariables')\nconst GO_URL = envVariables.get('GO_URL')\nconst BANK_PRODUCT_KEY = envVariables.get('BANK_PRODUCT_KEY')\n\nmsg.url = `${GO_URL}/api/bank-product-config/key/${BANK_PRODUCT_KEY}`\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 300,
        "wires": [
            [
                "e744ec0a521965e0"
            ]
        ]
    },
    {
        "id": "e744ec0a521965e0",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "getBankProductKeyReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 300,
        "wires": [
            [
                "496cf6c85e17e0c7",
                "cd80c266bd75f768"
            ]
        ]
    },
    {
        "id": "496cf6c85e17e0c7",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "bankProductConfig",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 300,
        "wires": []
    },
    {
        "id": "cd80c266bd75f768",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "getPendingBankApplicationsReq",
        "func": "const envVariables = global.get('envVariables')\nconst GO_URL = envVariables.get('GO_URL')\nconst BANK_PRODUCT_KEY = envVariables.get('BANK_PRODUCT_KEY')\n\nmsg.bankId = msg.payload.bank\nmsg.enterpriseId = msg.payload.allowedEnterprises[0]\n\nmsg.url = `${GO_URL}/api/bank-application?bankID=${msg.bankId}&enterpriseID=${msg.enterpriseId}`\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 420,
        "wires": [
            [
                "1c06a40aea2c963b"
            ]
        ]
    },
    {
        "id": "1c06a40aea2c963b",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "getPendingBankApplications",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 420,
        "wires": [
            [
                "e575ef382e1b0832",
                "039ae05e46075e66"
            ]
        ]
    },
    {
        "id": "e575ef382e1b0832",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "pendingBankApplications",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 420,
        "wires": []
    },
    {
        "id": "039ae05e46075e66",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "mockBankApplication",
        "func": "msg.payload = [\n    {\n        \"_id\": \"63ff1b2f723b070cae7c09c0\",\n        \"createdOn\": \"Tue, 21 Feb 2023 11:32:41 GMT\",\n        \"createdBy\": \"63750a1995a6a16f696d2f7b\",\n        \"updatedOn\": \"Tue, 21 Feb 2023 11:32:42 GMT\",\n        \"isDeleted\": false,\n        \"bankApplicationDocumentConfigKey\": \"63cfbc85edee8f7eee6f3d6e\",\n        \"bankName\": \"Axis Bank Limited\",\n        \"productFamily\": \"PAYLATER\",\n        \"productType\": \"PAYLATER\",\n        \"status\": \"DOCUMENT_CAPTURE\",\n        \"businessPartnerName\": \"Shri Durga Metalex\",\n        \"businessPartnerID\": \"63750a19ca608a344ae556d6\",\n        \"productGranularity\": \"product\",\n        \"bankProductConfigId\": \"63cfbe250c729962c86ec8a7\",\n        \"bankId\": \"63c8fa075f1c5afda77bae5e\",\n        \"bankApplicationLabel\": \"Continue Bank Application\",\n        \"bankApplicationURL\": \"www.google.com\",\n        \"enterpriseId\": \"638c73f16ea52ce57470c1a9\",\n        \"approvedLimit\": null,\n        \"availableLimit\": null\n    }\n]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 500,
        "wires": [
            [
                "6deb7717f8dbf7f1"
            ]
        ]
    },
    {
        "id": "6deb7717f8dbf7f1",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "LoopOverBankApplication",
        "func": "\nfor(let bankApplication of msg.payload){\n    // console.log({bankApplication})\n    node.send({\n        businessPartnerId: bankApplication.businessPartnerID,\n        bankId: bankApplication.bankId,\n        enterpriseId: bankApplication.enterpriseId,\n        bankProductConfigId: bankApplication.bankProductConfigId,\n        bankApplicationId : bankApplication._id,\n        dataPartDone: \"false\"\n    })\n}\n\n// return msg;\n\n/**\n *  \"_id\": \"63f4abd94f0acc5aa73d9e46\",\n        \"createdOn\": \"Tue, 21 Feb 2023 11:32:41 GMT\",\n        \"createdBy\": \"63750a1995a6a16f696d2f7b\",\n        \"updatedOn\": \"Tue, 21 Feb 2023 11:32:42 GMT\",\n        \"isDeleted\": false,\n        \"bankApplicationDocumentConfigKey\": \"63cfbc85edee8f7eee6f3d6e\",\n        \"bankName\": \"Axis Bank Limited\",\n        \"productFamily\": \"PAYLATER\",\n        \"productType\": \"PAYLATER\",\n        \"status\": \"DOCUMENT_CAPTURE\",\n        \"businessPartnerName\": \"Shri Durga Metalex\",\n        \"businessPartnerID\": \"63750a19ca608a344ae556d6\",\n        \"productGranularity\": \"product\",\n        \"bankProductConfigId\": \"63cfbe250c729962c86ec8a7\",\n        \"bankId\": \"63c8fa075f1c5afda77bae5e\",\n        \"bankApplicationLabel\": \"Continue Bank Application\",\n        \"bankApplicationURL\": \"www.google.com\",\n        \"enterpriseId\": \"638c73f16ea52ce57470c1a9\",\n        \"approvedLimit\": null,\n        \"availableLimit\": null\n */",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 500,
        "wires": [
            [
                "c55d34a0b7d3f920",
                "da7029d68fcd7c4e"
            ]
        ]
    },
    {
        "id": "c55d34a0b7d3f920",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "bankApplication",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 500,
        "wires": []
    },
    {
        "id": "f736deeaccbb3789",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "getBusinessPartnerDataReq",
        "func": "const envVariables = global.get('envVariables')\nconst GO_URL = envVariables.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = envVariables.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.enterpriseBankAccountDetails = {\n    accountNo: msg.payload[0]?.bankAccountNumber,\n    ifsc: msg.payload[0]?.bankIFSC,\n    bankName: msg.payload[0]?.bankName\n}\n\nmsg.dealerCode = msg.payload.identifierByParent\n\n\nmsg.url = `${GO_URL}/api/business-partner/allData/${msg.businessPartnerId}`\n\nmsg.headers = {\n    \"x-actyv-api-config-key\" : X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 660,
        "wires": [
            [
                "e9bf25e995d728ce"
            ]
        ]
    },
    {
        "id": "e9bf25e995d728ce",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "getBusinessPartnerData",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 660,
        "wires": [
            [
                "bedefb3af6f1cf60",
                "23590d1e71b9f5c4"
            ]
        ]
    },
    {
        "id": "bedefb3af6f1cf60",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "businessPartnerData",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 660,
        "wires": []
    },
    {
        "id": "d99129b6df753753",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "createClientReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${BASE_URL}/api/customer`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nconst aadhar = msg.data.documents.filter((document) => document.documentType ===\"AADHAAR\");\n// console.log({aadhar:aadhar[0].data})\n\nconst pan = msg.data.documents.filter((document) => document.documentType === \"PERSONAL_PAN\");\nconst name = aadhar[0].data.name.split(\" \")\nmsg.payload = {\n    \"firstName\": name[0],\n    \"lastName\": name[name.length-1],\n    \"dateOfBirth\": aadhar[0].data.dob,//\"2022-12-01\",\n    \"gender\":  aadhar[0].data.gender,//\"MALE\",\n    \"mobileNo\": msg.data.persons[0].phone,//\"9876543210\",\n    \"email\": msg.data.persons[0].email,//\"aa@example.com\",\n    \"clientReferenceId\": msg.dealerCode,//\"1234\",\n    \"panNo\": pan[0].data.panNumber,//\"AAAAA1111A\",\n    \"panAuthenticationRequired\": true,\n    \"productCode\": \"string\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 860,
        "wires": [
            [
                "d7e023ec521fe983",
                "a9272948125ad233"
            ]
        ]
    },
    {
        "id": "da7029d68fcd7c4e",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "getDealerCodeReq",
        "func": "\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.url = `${env.get(\"GO_URL\")}/api/business-relationship/${msg.businessPartnerId}/${msg.enterpriseId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 580,
        "wires": [
            [
                "782e89e2c1965b72"
            ]
        ]
    },
    {
        "id": "782e89e2c1965b72",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "getDealerCode",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 520,
        "y": 580,
        "wires": [
            [
                "5d5fe0d2dcee7b75",
                "f736deeaccbb3789"
            ]
        ]
    },
    {
        "id": "23590d1e71b9f5c4",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "storeBPdataToData",
        "func": "msg.data = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 740,
        "wires": [
            [
                "d99129b6df753753",
                "a9272948125ad233"
            ]
        ]
    },
    {
        "id": "d7e023ec521fe983",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "createClient",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 450,
        "y": 860,
        "wires": [
            [
                "311235acf43729ea",
                "ca3b93f4132c427c"
            ]
        ]
    },
    {
        "id": "311235acf43729ea",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "createClient",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 860,
        "wires": []
    },
    {
        "id": "ca3b93f4132c427c",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "addClientAddressReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.payload.clientId\n\n//set clientId and leadId to msg object\nmsg.clientId = msg.payload.clientId,\nmsg.leadId = msg.payload.leadId\n\nmsg.url = `${BASE_URL}/api/clients/${clientId}/addresses`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nconst aadhar = msg.data.documents.filter((document) => document.documentType ===\"AADHAAR\");\n\nconst pan = msg.data.documents.filter((document) => document.documentType === \"PERSONAL_PAN\");\nconst name = aadhar[0].data.name.split(\" \")\nmsg.payload = {\n    \"addressLine1\": aadhar[0].data.address,//\"123, Abc Street\",\n    \"addressLine2\": `${aadhar[0].data.subDistrict},${aadhar[0].data.district},${aadhar[0].data.state}`,//\"Some Locality\",\n    \"addressType\": \"PERMANENT\",\n    \"pincode\": aadhar[0].data.pinCode,//\"126778\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 960,
        "wires": [
            [
                "8128476ed06ff640",
                "3226cc0a9c541665"
            ]
        ]
    },
    {
        "id": "8128476ed06ff640",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "addClientAddress",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 960,
        "wires": [
            [
                "608e3159c26db254",
                "3226cc0a9c541665"
            ]
        ]
    },
    {
        "id": "608e3159c26db254",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "createClient",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 960,
        "wires": []
    },
    {
        "id": "a9272948125ad233",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "mockCreateClient",
        "func": "msg.payload = {\n    clientId :2127,\n    leadId: 1140\n}\n\nconsole.log(\"mock\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 900,
        "wires": [
            [
                "311235acf43729ea",
                "ca3b93f4132c427c"
            ]
        ]
    },
    {
        "id": "3226cc0a9c541665",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "addClientImageReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\n\n//set clientId and leadId to msg object\n// msg.clientId = clientId,\n// msg.leadId = msg.payload.leadId\n\nmsg.url = `${BASE_URL}/api/clients/${clientId}/selfie`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nconst aadhar = msg.data.documents.filter((document) => document.documentType ===\"AADHAAR\");\n\nconst SELFIE = msg.data.fieldValues.filter((document) => document.key=== \"SELFIE\");\nconst name = aadhar[0].data.name.split(\" \")\nmsg.payload = {\n    \"doLiveliness\": true,\n    \"image\": {\n        \"fileName\": \"abc\",\n        \"filePath\": \"abcde\",\n        \"fileType\": \".jpeg\",\n        \"storageType\": \"base64\"\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1060,
        "wires": [
            [
                "0e15e88b28b2984b",
                "43b12b26c26018b2"
            ]
        ]
    },
    {
        "id": "0e15e88b28b2984b",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "addClientImage",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 440,
        "y": 1060,
        "wires": [
            [
                "3cac056f95ffbc2e",
                "43b12b26c26018b2"
            ]
        ]
    },
    {
        "id": "3cac056f95ffbc2e",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "addClientImage",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 1060,
        "wires": []
    },
    {
        "id": "0d67a39f22cd8724",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "function 163",
        "func": "// console.log({file:msg.file})\nif(msg.file){\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 2700,
        "wires": [
            [
                "e6a8274f2d872169",
                "cbb17514e4b83f69"
            ]
        ]
    },
    {
        "id": "97fa262b7cb08e63",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "Scrapping Documents of a particular Business Partner",
        "func": "let c = 0\nconst arr = msg.data.documents;\nconst businessPartnerId = msg.businessPartnerId;\nconst gst_regex = new RegExp(/^GST/);\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\n// const dealerCode = msg.payload.identifierByParent\nconst dealerCode = msg.dealerCode\n\n// const lp = msg.LOCAL_PATH;\n\nlet documents = [\n    'AADHAAR', 'BANK_STATEMENT',\n    'ITR', 'BUSINESS_PAN',\n    'PERSONAL_PAN', 'GST',\n    'GST', 'GSTR3B_RETSUM',\n    'GSTR2A_B2B', 'GSTR2A_RETSUM',\n    'GSTR1_EXP', 'GSTR1_B2B',\n    'GSTR1_CDNR', 'GSTR1_HSNSUM',\n    'GSTR1_CDNUR', 'GSTR1_B2CL',\n    'GSTR1_CDN', 'GSTR1_NIL',\n    'GSTR1_B2CS', 'GSTR_FILES',\n    'BANK_FORM_1'\n]\n\nfor(let document of msg.data?.documents){\n    \n    \n    switch (true) {\n        case /^AADHAAR/.test(document?.documentType):\n        \n            node.send({\n                ...msg,\n                    data:{},\n                payload: document,\n                // businessPartnerId: msg.businessPartnerId,\n                // bankId: msg.bankId,\n                // enterpriseId: msg.enterpriseId,\n                // bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                dealerCode,\n                documentType: \"KYC\",\n                documentName:\"AADHAAR\",//document.documentType,\n                isSelfie: false\n            });\n         \n            break\n        case /^BANK_STATEMENT/.test(document?.documentType):\n            node.send({\n                ...msg,\n                payload: document,\n             data:{},\n                // businessPartnerId: msg.businessPartnerId,\n                // bankId: msg.bankId,\n                // enterpriseId: msg.enterpriseId,\n                // bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\", \n                dealerCode,\n                documentType: \"BANK_STATEMENT\",\n                isSelfie: false\n            });\n           \n            break;\n        // case /^ITR/.test(document?.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode,\n        //         isSelfie: false\n        //     });\n          \n        //     break\n        case /^BUSINESS_PAN/.test(document?.documentType):\n       \n            node.send({\n                ...msg,\n                payload: document,\n                // businessPartnerId: msg.businessPartnerId,\n                // bankId: msg.bankId,\n                // enterpriseId: msg.enterpriseId,\n                // bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                documentType: \"KYC\",\n                dealerCode,\n                isSelfie: false\n            });\n           \n            break\n        case /^PERSONAL_PAN/.test(document?.documentType):\n      \n            node.send({\n                ...msg,\n                payload: document,\n                \n                data:{},\n                // businessPartnerId: msg.businessPartnerId,\n                // bankId: msg.bankId,\n                // enterpriseId: msg.enterpriseId,\n                // bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                documentType: \"KYC\",\n                dealerCode,\n                isSelfie: false\n            });\n           \n            break\n        // case /^GST/.test(document?.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode,\n        //         isSelfie: false\n        //     });\n           \n        //     break\n       \n\n\n        case /BANK_FORM_1/.test(document.documentType):\n            node.send({\n                ...msg,\n                payload: document,\n                // businessPartnerId: msg.businessPartnerId,\n                // bankId: msg.bankId,\n                // enterpriseId: msg.enterpriseId,\n                // bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                documentType: \"KYC\",\n                dealerCode\n            });\n            \n            break\n        \n        \n\n        default: {}\n        // node.send({\n        //     payload: {\n        //         files:[]\n        //     },\n        //     businessPartnerId: msg.businessPartnerId,\n        //     bankId: msg.bankId,\n        //     enterpriseId: msg.enterpriseId,\n        //     bankProductConfigId: msg.bankProductConfigId,\n        //     transferDone: \"false\",\n        //     dealerCode,\n        //     isSelfie: false\n        // });\n    }\n};\n\n\nconst reqDocsFromFieldValue = [\"SELFIE\"]\n\nlet documentsFromFieldValue = msg.data.fieldValues.filter((doc)=>{\n    if(reqDocsFromFieldValue.includes(doc.key)){\n        return doc\n    }\n})\n\n\n\nfor (let i = 0; i < documentsFromFieldValue.length;i++){\n    if (reqDocsFromFieldValue.includes(documentsFromFieldValue[i].key)){\n        if (msg.data.fieldValues[i].key===\"SELFIE\"){\n            node.send({\n                ...msg,\n                payload: documentsFromFieldValue[i].value,\n                // businessPartnerId: msg.businessPartnerId,\n                // bankId: msg.bankId,\n                // enterpriseId: msg.enterpriseId,\n                // bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                documentType:\"SELFIE\",\n                dealerCode,\n                isSelfie :true\n            }); \n        }else{\n            node.send({\n                ...msg,\n                payload: documentsFromFieldValue[i].value,\n                // businessPartnerId: msg.businessPartnerId,\n                // bankId: msg.bankId,\n                // enterpriseId: msg.enterpriseId,\n                // bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                documentType: documentsFromFieldValue[i].key,\n                dealerCode,\n                isSelfie: false\n            }); \n        }\n        \n    }\n}\n\n\nmsg.transferDone = \"true\";\n// msg.LOCAL_PATH = lp;\nreturn msg;\n\n/**\n    businessPartnerId: msg.businessPartnerId,\n    bankId: msg.bankId,\n    enterpriseId: msg.enterpriseId,\n    bankProductConfigId: msg.bankProductConfigId,\n */",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 2120,
        "wires": [
            [
                "31fbcbab58c58277",
                "bbc1f3cb6646c2cf"
            ]
        ]
    },
    {
        "id": "bbc1f3cb6646c2cf",
        "type": "switch",
        "z": "e8842e93c37e68d3",
        "name": "",
        "property": "transferDone",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 630,
        "y": 2120,
        "wires": [
            [
                "c8244f98f0d204d1"
            ],
            [
                "c7d994672ce58d94",
                "3f2ca455eb3f16a3"
            ]
        ]
    },
    {
        "id": "6a7e84aca2cca9fa",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "sendFilesToReaderReq",
        "func": "// msg.payload.documentType = \"BUSINESS_PAN\"\n\nfor(let file of msg?.payload?.files){\n// console.log({file})\nswitch(msg?.payload?.documentType){\n\n    \n\n    case \"PERSONAL_PAN\" :{\n  \n        node.send ({ \n                ...msg,\n            tag:\"pan-front\",\n                file: file,\n                payload: {}\n        })\n        break\n    }\n\n    case \"BUSINESS_PAN\" :{\n\n        node.send({\n            ...msg,\n            tag: \"pan-front\",\n            file: file,\n            payload: {}\n        })\n        break\n    }\n\n    case \"AADHAAR\": {\n\n        if (file.type === \"AADHAAR_FRONT\") {\n            \n            node.send({\n                ...msg,\n                tag: \"aadhar-front\",\n                file: file,\n                payload: {}\n            })\n        } else if (file.type === \"AADHAAR_BACK\") {\n            console.log(\"aadhaar back\")\n            node.send({\n                ...msg,\n                tag: \"aadhar-back\",\n                file: file,\n                payload: {}\n            })\n        }\n        break\n    }\n\n    \n\n\n    default:{\n        // node.send({\n        //     ...msg,\n        //     file: \"\",\n        //     payload:{}\n        // })\n    }\n}\n// node.send({\n//     ...msg,\n//     file: file,\n//     // payload:{}\n//     // businessPartnerId: msg.businessPartnerId,\n//     // bankId: msg.bankId,\n//     // enterpriseId: msg.enterpriseId,\n//     // bankProductConfigId: msg.bankProductConfigId,\n//     // dealerCode : msg.dealerCode\n// })\n}\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 2700,
        "wires": [
            [
                "0d67a39f22cd8724"
            ]
        ]
    },
    {
        "id": "e6a8274f2d872169",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "file",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2570,
        "y": 2700,
        "wires": []
    },
    {
        "id": "cbb17514e4b83f69",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "Setting fileID of a particular file",
        "func": "msg.fid = msg.file.fileId;\n\nmsg.method = \"GET\"\nmsg.url = `${env.get(\"GO_URL\")}/api/file/read/${msg.file.fileId}`;\nmsg.fileUrl = `${env.get(\"GO_URL\")}/api/file/read/${msg.file.fileId}`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2070,
        "y": 2800,
        "wires": [
            [
                "6a5214d2a925f7a8"
            ]
        ]
    },
    {
        "id": "6a5214d2a925f7a8",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "read file",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "x-actyv-api-config-key",
                "valueType": "other",
                "valueValue": "8HhkIWzVMSnSgvlhxr"
            }
        ],
        "x": 2300,
        "y": 2800,
        "wires": [
            [
                "f74ca82278b3b386"
            ]
        ]
    },
    {
        "id": "f74ca82278b3b386",
        "type": "base64",
        "z": "e8842e93c37e68d3",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 2480,
        "y": 2800,
        "wires": [
            [
                "fc47661640189886"
            ]
        ]
    },
    {
        "id": "fc47661640189886",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "detectMimeType",
        "func": "const signatures = {\n    JVBERi0: \"application/pdf\",\n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"application/vnd.openxmlformats-officedocument.\",\n    PK: \"application/zip\",\n};\n\n// console.log({signature:msg.file.fileType})\n\n\nlet fileName = msg.fid.split(\"-\");\nlet extension = msg.file.fileType.split(\"/\")[1];\n// let filePath = `${msg.LOCAL_PATH}/${fileName}.${extension}`;\n// const base64String = msg.payload;\n\n// for (let ext in signatures) {\n//     const base64Sig = base64String.slice(0, ext.length)\n//     if (base64Sig === ext) {\n//         fileName = msg.fid\n//         extension = getExtension(ext)\n//         filePath = `${msg.LOCAL_PATH}/${fileName}${msg.ind}.${extension}`\n//     }\n// }\n\nmsg.filename = `${fileName[fileName.length-1]}.${extension}`\n\n// console.log({fun:msg.filename})\n\n// msg.filePath = filePath\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 2880,
        "wires": [
            [
                "f5cf45879011af0b",
                "130bcc50fedf8e8b"
            ]
        ]
    },
    {
        "id": "f5cf45879011af0b",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "debug 250",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 2880,
        "wires": []
    },
    {
        "id": "31fbcbab58c58277",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "debug 251",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1980,
        "wires": []
    },
    {
        "id": "5d5fe0d2dcee7b75",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "debug 256",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 560,
        "wires": []
    },
    {
        "id": "a257ca5bd6faa3e4",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "debug 257",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 60,
        "wires": []
    },
    {
        "id": "a57c8877ea24e8d8",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "debug 258",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 180,
        "wires": []
    },
    {
        "id": "c7d994672ce58d94",
        "type": "switch",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "switch by documentType",
        "property": "documentType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "KYC",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BANK_STATEMENT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SELFIE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1410,
        "y": 3100,
        "wires": [
            [
                "6a7e84aca2cca9fa"
            ],
            [
                "b826ee2a92dabc2a"
            ],
            [
                "4ffacaf77a8cd653"
            ]
        ]
    },
    {
        "id": "130bcc50fedf8e8b",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "uploadKycDocReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\n\n//set clientId and leadId to msg object\n// msg.clientId = clientId,\n// msg.leadId = msg.payload.leadId\n\nmsg.url = `${BASE_URL}/api/clients/${clientId}/upload-document`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\n// console.log({file:msg.file,filename:msg.filename,tag:msg.tag})\nmsg.payload = {\n    \"tag\": msg.tag,//\"aadhaar-front\",\n    \"document\": {\n        \"fileName\": msg.filename,//\"sample.jpeg\",\n        \"base64\": `data:${msg.file.fileType};base64,${msg.payload}`\n    },\n    // \"isFaceMatchRequired\": false,\n    // \"isImageQualityRequired\": false,\n    // \"isMaskRequired\": false,\n    // \"isOCRNameMatchRequired\": false\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 2980,
        "wires": [
            [
                "08775f2caeac8ac3"
            ]
        ]
    },
    {
        "id": "08775f2caeac8ac3",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "uploadKycDoc",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2280,
        "y": 2980,
        "wires": [
            [
                "e13c533ef5809e77"
            ]
        ]
    },
    {
        "id": "e13c533ef5809e77",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "uploadKycDoc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2560,
        "y": 2980,
        "wires": []
    },
    {
        "id": "c71de0cd414b59a8",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "sendFilesToReaderReq",
        "func": "// msg.payload.documentType = \"BUSINESS_PAN\"\nmsg.bankStatementAnalysisID = msg.payload.resourceId\nfor(let file of msg?.payload?.files){\n// console.log({file})\n    node.send({\n        ...msg,\n        \n        file: file,\n        payload: {}\n    })\n\n}\n// node.send({\n//     ...msg,\n//     file: file,\n//     // payload:{}\n//     // businessPartnerId: msg.businessPartnerId,\n//     // bankId: msg.bankId,\n//     // enterpriseId: msg.enterpriseId,\n//     // bankProductConfigId: msg.bankProductConfigId,\n//     // dealerCode : msg.dealerCode\n// })\n\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 3380,
        "wires": [
            [
                "60573e98eea7bf70"
            ]
        ]
    },
    {
        "id": "60573e98eea7bf70",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "function 164",
        "func": "// console.log({file:msg.file})\nif(msg.file){\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 3380,
        "wires": [
            [
                "ccfe876e571eab2b",
                "e15476df092709bd"
            ]
        ]
    },
    {
        "id": "ccfe876e571eab2b",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "file",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2590,
        "y": 3380,
        "wires": []
    },
    {
        "id": "e15476df092709bd",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "Setting fileID of a particular file",
        "func": "msg.fid = msg.file.fileId;\n\nmsg.method = \"GET\"\nmsg.url = `${env.get(\"GO_URL\")}/api/file/read/${msg.file.fileId}`;\nmsg.fileUrl = `${env.get(\"GO_URL\")}/api/file/read/${msg.file.fileId}`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2090,
        "y": 3480,
        "wires": [
            [
                "2b4a7b100af3a3e5"
            ]
        ]
    },
    {
        "id": "2b4a7b100af3a3e5",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "read file",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "x-actyv-api-config-key",
                "valueType": "other",
                "valueValue": "8HhkIWzVMSnSgvlhxr"
            }
        ],
        "x": 2320,
        "y": 3480,
        "wires": [
            [
                "1b6c50d3bff52719"
            ]
        ]
    },
    {
        "id": "1b6c50d3bff52719",
        "type": "base64",
        "z": "e8842e93c37e68d3",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 2500,
        "y": 3480,
        "wires": [
            [
                "f02f6ea5c82a0306"
            ]
        ]
    },
    {
        "id": "f02f6ea5c82a0306",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "detectMimeType",
        "func": "const signatures = {\n    JVBERi0: \"application/pdf\",\n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"application/vnd.openxmlformats-officedocument.\",\n    PK: \"application/zip\",\n};\n\n// console.log({signature:msg.file.fileType})\n\n\nlet fileName = msg.fid.split(\"-\");\nlet extension = msg.file.fileType.split(\"/\")[1];\n// let filePath = `${msg.LOCAL_PATH}/${fileName}.${extension}`;\n// const base64String = msg.payload;\n\n// for (let ext in signatures) {\n//     const base64Sig = base64String.slice(0, ext.length)\n//     if (base64Sig === ext) {\n//         fileName = msg.fid\n//         extension = getExtension(ext)\n//         filePath = `${msg.LOCAL_PATH}/${fileName}${msg.ind}.${extension}`\n//     }\n// }\n\nmsg.filename = `${fileName[fileName.length-1]}.${extension}`\n\n// console.log({fun:msg.filename})\n\n// msg.filePath = filePath\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 3560,
        "wires": [
            [
                "539b387afd3463df",
                "69eac55a6117f5ac"
            ]
        ]
    },
    {
        "id": "539b387afd3463df",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "debug 259",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2470,
        "y": 3560,
        "wires": []
    },
    {
        "id": "69eac55a6117f5ac",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "uploadBankStatementReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\n\n//set clientId and leadId to msg object\n// msg.clientId = clientId,\n// msg.leadId = msg.payload.leadId\n\nmsg.url = `${BASE_URL}/api/clients/${msg.clientId}/bank-statement-analysis/manual/${msg.bankStatementAnalysisID}/upload`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\n// console.log({file:msg.file,filename:msg.filename,tag:msg.tag})\nmsg.payload = {\n    \"name\": \"Bank Statement Analysis\",\n    \"bank\": \"OPTIONAL BANK NAME\",\n    \"statement\": {\n        \"contentBase64\": msg.payload,\n        \"contentType\": \"application/pdf\",\n        \"password\": \"pdf_password\"\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 3660,
        "wires": [
            [
                "28ba42bb81bb3d99"
            ]
        ]
    },
    {
        "id": "28ba42bb81bb3d99",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "uploadBankStatement",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2320,
        "y": 3660,
        "wires": [
            [
                "fec5340ae228c5b4"
            ]
        ]
    },
    {
        "id": "fec5340ae228c5b4",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "uploadBankStatement",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2600,
        "y": 3660,
        "wires": []
    },
    {
        "id": "43b12b26c26018b2",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "addThirdPartyAccountReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\nconsole.log(\"test\")\n\nconst           {\n    accountNo,\n    ifsc,\n    bankName\n                } = msg.enterpriseBankAccountDetails\n\n\nmsg.url = `${BASE_URL}/api/clients/${clientId}/third-party-bank-account-details`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nmsg.payload = {\n    \"accountTypeId\": 1,\n    \"name\": \"enterpriseName\",\n    \"accountNumber\": accountNo,//\"67896745532734\",\n    \"ifscCode\": ifsc,//\"SBIN0001632\",\n    \"bankName\": bankName,//\"SBI\",\n    // \"branchName\": \"Bellandur\",\n    // \"bankCity\": \"Bangalore\",\n    // \"bankCode\": \"98978\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1160,
        "wires": [
            [
                "1550c86fcc134d89",
                "c5ccba4b33542a7f"
            ]
        ]
    },
    {
        "id": "1550c86fcc134d89",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "addThirdPartyAccount",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 480,
        "y": 1160,
        "wires": [
            [
                "4e03cc76190e497a",
                "c5ccba4b33542a7f"
            ]
        ]
    },
    {
        "id": "4e03cc76190e497a",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "addThirdPartyAccount",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 1160,
        "wires": []
    },
    {
        "id": "c5ccba4b33542a7f",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "activateThirdPartyAccountReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\nconsole.log(\"test\")\n\nconst clientThirdPartyBankAccountDetailAssociationId = msg.payload.clientThirdPartyBankAccountDetailAssociationId\nmsg.url = `${BASE_URL}/api/client-third-party-bank-account-details/${clientThirdPartyBankAccountDetailAssociationId}/activate`\nmsg.method = \"PUT\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nmsg.payload = {\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 1260,
        "wires": [
            [
                "387f774266576673",
                "ddda7a5cc3aa58b0"
            ]
        ]
    },
    {
        "id": "387f774266576673",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "activateThirdPartyAccount",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 1260,
        "wires": [
            [
                "ddf0fc21b8ce3e71",
                "ddda7a5cc3aa58b0"
            ]
        ]
    },
    {
        "id": "ddf0fc21b8ce3e71",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "activateThirdPartyAccount",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 1260,
        "wires": []
    },
    {
        "id": "ddda7a5cc3aa58b0",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "initiateBankStatementAnalysisReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\nconsole.log(\"test\")\n\nconst clientThirdPartyBankAccountDetailAssociationId = msg.payload.clientThirdPartyBankAccountDetailAssociationId\nmsg.url = `${BASE_URL}/api/client-third-party-bank-account-details/${clientThirdPartyBankAccountDetailAssociationId}/activate`\nmsg.method = \"PUT\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nmsg.payload = {\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1360,
        "wires": [
            [
                "084a251e66bd63fa",
                "04811f28b04f0f65"
            ]
        ]
    },
    {
        "id": "084a251e66bd63fa",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "initiateBankStatementAnalysis",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 490,
        "y": 1360,
        "wires": [
            [
                "66874b2f57329d2c",
                "04811f28b04f0f65"
            ]
        ]
    },
    {
        "id": "66874b2f57329d2c",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "initiateBankStatementAnalysis",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1360,
        "wires": []
    },
    {
        "id": "fb87403b9c58e3a3",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "saveClientId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 1480,
        "wires": [
            [
                "50536d6780805fe8",
                "92d7c60b05e4d288"
            ]
        ]
    },
    {
        "id": "04811f28b04f0f65",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveClientIdReq",
        "func": "\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.url = `${env.get(\"GO_URL\")}/api/field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflClientId\",\n    \"value\": msg.clientId,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1480,
        "wires": [
            [
                "fb87403b9c58e3a3",
                "92d7c60b05e4d288"
            ]
        ]
    },
    {
        "id": "50536d6780805fe8",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "saveClientId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1480,
        "wires": []
    },
    {
        "id": "92d7c60b05e4d288",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveLeadIdReq",
        "func": "\nconst actyvToken = flow.get(\"actyvToken\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${env.get(\"GO_URL\")}/api/field-value`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflLeadId\",\n    \"value\": msg.leadId,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1560,
        "wires": [
            [
                "e9517a7806304033",
                "97fa262b7cb08e63"
            ]
        ]
    },
    {
        "id": "e9517a7806304033",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "saveLeadId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 1560,
        "wires": [
            [
                "a8aef02ea5c7d2f8",
                "97fa262b7cb08e63"
            ]
        ]
    },
    {
        "id": "a8aef02ea5c7d2f8",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "saveLeadId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1560,
        "wires": []
    },
    {
        "id": "1fb07682b9d16e1e",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "generateLeadDocReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${BASE_URL}/api/leads/${msg.leadId}/document/generate/IIFL%20Loan%20Agreement`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {\n   \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 1060,
        "wires": [
            [
                "c2ce907a073183d1",
                "8f9514206e47caf0"
            ]
        ]
    },
    {
        "id": "c2ce907a073183d1",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "generateLeadDoc",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2230,
        "y": 1060,
        "wires": [
            [
                "8816c3acdd6ae618",
                "8f9514206e47caf0"
            ]
        ]
    },
    {
        "id": "8816c3acdd6ae618",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "generateLeadDoc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2550,
        "y": 1060,
        "wires": []
    },
    {
        "id": "8f9514206e47caf0",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "downloadLeadDocReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n// msg.docId = msg.payload.id \nmsg.docId = 3049\nmsg.url = `${BASE_URL}/api/document/download/${msg.docId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {\n   \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 1140,
        "wires": [
            [
                "d3ea0d0868911cec",
                "8816c3acdd6ae618"
            ]
        ]
    },
    {
        "id": "d3ea0d0868911cec",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "downloadLeadDoc",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2230,
        "y": 1140,
        "wires": [
            [
                "95efc5305242d41f",
                "0bbe87707fa915fc"
            ]
        ]
    },
    {
        "id": "95efc5305242d41f",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "downloadLeadDoc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2550,
        "y": 1140,
        "wires": []
    },
    {
        "id": "77b592770405c22d",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "initiateEsignReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${BASE_URL}/api/leads/${msg.leadId}/esign/init`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload =\n{\n    \"clientId\": msg.clientId,\n    \"esignKey\": \"bl-esign\",\n    \"signingType\": \"ELECTRONIC\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 1520,
        "wires": [
            [
                "055bc894d08ce1e1"
            ]
        ]
    },
    {
        "id": "055bc894d08ce1e1",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "initiateEsign",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2170,
        "y": 1520,
        "wires": [
            [
                "7e7ef07752c6b641",
                "5cd1c5d9a83ec3fd"
            ]
        ]
    },
    {
        "id": "7e7ef07752c6b641",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "initiateEsign",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2490,
        "y": 1520,
        "wires": []
    },
    {
        "id": "d0a0ed332341bef7",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "pNatch/eNatch?",
        "func": "\n\nlet natch = msg.data.fieldValues.filter((fieldValue) => {\n    return fieldValue.key == \"nach\"\n})\n\nmsg.natch = natch[0].value\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1859,
        "y": 1664,
        "wires": [
            [
                "7cfa197b6ef1a784"
            ]
        ]
    },
    {
        "id": "7cfa197b6ef1a784",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "initiateNatchReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${BASE_URL}/api/leads/${msg.leadId}/nach/init`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload =\n{\n    \"amount\": \"50000\",\n    \"bankAccountDetailId\": \"214\",\n    \"debitFrequency\": \"MONTHLY\",\n    \"debitType\": \"FIXED_AMOUNT\",\n    \"fromDate\": \"2022-10-20\",\n    \"registrationMode\": msg.natch==\"enatch\"?\"API\":\"pnatch\",\n    \"toDate\": \"2022-10-20\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2089,
        "y": 1664,
        "wires": [
            [
                "7c286e766a6f19d3",
                "0a8be38952893f3b"
            ]
        ]
    },
    {
        "id": "7c286e766a6f19d3",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "initiateNatch",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2389,
        "y": 1664,
        "wires": [
            [
                "bb1a060ed26cf407"
            ]
        ]
    },
    {
        "id": "bb1a060ed26cf407",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "initiateNatch",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2709,
        "y": 1664,
        "wires": []
    },
    {
        "id": "202b427ded8f7b54",
        "type": "comment",
        "z": "e8842e93c37e68d3",
        "name": "hardCodedNatchReq",
        "info": "",
        "x": 1960,
        "y": 1620,
        "wires": []
    },
    {
        "id": "5cd1c5d9a83ec3fd",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveEsignIdReq",
        "func": "\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.url = `${env.get(\"GO_URL\")}/api/field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflEsignId\",\n    \"value\": msg.payload.esignId,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 1580,
        "wires": [
            [
                "3be82fd5efc25e68"
            ]
        ]
    },
    {
        "id": "3be82fd5efc25e68",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "saveEsignId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2230,
        "y": 1580,
        "wires": [
            [
                "3ad1adc114214f96",
                "d0a0ed332341bef7"
            ]
        ]
    },
    {
        "id": "3ad1adc114214f96",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "saveEsignId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2490,
        "y": 1580,
        "wires": []
    },
    {
        "id": "0a8be38952893f3b",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveNatchIdReq",
        "func": "\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.url = `${env.get(\"GO_URL\")}/api/field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.natchId = msg.payload.resourceId\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflNatchId\",\n    \"value\": msg.payload.resourceId,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 1740,
        "wires": [
            [
                "c67fb72e922af84d"
            ]
        ]
    },
    {
        "id": "c67fb72e922af84d",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "saveNatchId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2230,
        "y": 1740,
        "wires": [
            [
                "c067d7335fa5d7c6",
                "d7b0f1048d0a9929"
            ]
        ]
    },
    {
        "id": "c067d7335fa5d7c6",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "saveEsignId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2490,
        "y": 1740,
        "wires": []
    },
    {
        "id": "d7b0f1048d0a9929",
        "type": "switch",
        "z": "e8842e93c37e68d3",
        "name": "",
        "property": "natch",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "pnatch",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "enatch",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1850,
        "y": 1820,
        "wires": [
            [
                "d8c65ed42d681cbe"
            ],
            []
        ]
    },
    {
        "id": "d8c65ed42d681cbe",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "generateP-natchDocReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${BASE_URL}/api/leads/${msg.leadId}/nach/${msg.natchId}/generate-file`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {\n   \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 1820,
        "wires": [
            [
                "0d1ffb3aa3e1f5e0"
            ]
        ]
    },
    {
        "id": "0d1ffb3aa3e1f5e0",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "generateP-natchDoc",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2360,
        "y": 1820,
        "wires": [
            [
                "340467033835c515",
                "f9dc1a2d374cb8d6"
            ]
        ]
    },
    {
        "id": "340467033835c515",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "generateP-natchDoc",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2680,
        "y": 1820,
        "wires": []
    },
    {
        "id": "439e7d266108eac6",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "downloadP-NatchDoc",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2520,
        "y": 1920,
        "wires": []
    },
    {
        "id": "727f5cc081c6f40c",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "downloadP-NatchDoc",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2200,
        "y": 1920,
        "wires": [
            [
                "439e7d266108eac6",
                "37af8d6f68ab5843"
            ]
        ]
    },
    {
        "id": "f9dc1a2d374cb8d6",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "downloadP-NatchDocReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nmsg.docId = msg.payload.id\n\nmsg.url = `${BASE_URL}/api/document/download/${msg.payload.resourceId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {\n   \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 1920,
        "wires": [
            [
                "727f5cc081c6f40c"
            ]
        ]
    },
    {
        "id": "c8244f98f0d204d1",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "initiateVclReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${BASE_URL}/api/leads/${msg.leadId}/update-limit`\nmsg.method = \"PUT\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload =\n{\n    \"loanAmountRequested\": 100000\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 900,
        "wires": [
            [
                "c00a59de1e2f6be8",
                "214113718349eb7b"
            ]
        ]
    },
    {
        "id": "c00a59de1e2f6be8",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "initiateVcl",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2200,
        "y": 900,
        "wires": [
            [
                "b7439c897a5c60d6",
                "214113718349eb7b"
            ]
        ]
    },
    {
        "id": "b7439c897a5c60d6",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "initiateVcl",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2520,
        "y": 900,
        "wires": []
    },
    {
        "id": "214113718349eb7b",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveVclIdReq",
        "func": "\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.url = `${env.get(\"GO_URL\")}/api/field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.natchId = msg.payload.resourceId\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflVclId\",\n    \"value\": msg.payload.vclAccountNumber,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 980,
        "wires": [
            [
                "64cd3911bc5dce3d",
                "1fb07682b9d16e1e"
            ]
        ]
    },
    {
        "id": "64cd3911bc5dce3d",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "saveVclId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2260,
        "y": 980,
        "wires": [
            [
                "484d4463ef8836f1",
                "1fb07682b9d16e1e"
            ]
        ]
    },
    {
        "id": "484d4463ef8836f1",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "saveVclId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2520,
        "y": 980,
        "wires": []
    },
    {
        "id": "0bbe87707fa915fc",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "uploadFileReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\n\nconst token = flow.get(\"actyvToken\")\n\nmsg.headers = {\n    \"content-type\": 'multipart/form-data',\n    Authorization: `Bearer ${token}`\n};\n\nmsg.url = `${ADMIN_URL}/api/file/upload`\nmsg.method = \"POST\"\nmsg.payload = {\n    \"file\": {\n        \"value\": msg.payload,\n        \"options\": {\n            \"filename\": 'IIFL Loan document'\n        }\n    },\n    \"filename\": 'IIFL Loan document'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 1240,
        "wires": [
            [
                "f743b59db70ae941"
            ]
        ]
    },
    {
        "id": "f743b59db70ae941",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "uploadFile",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2170,
        "y": 1240,
        "wires": [
            [
                "cc541b387ae0a219",
                "aa3470a8827d8f78"
            ]
        ]
    },
    {
        "id": "cc541b387ae0a219",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "uploadFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 1240,
        "wires": []
    },
    {
        "id": "aa3470a8827d8f78",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveLoanAgreementReq",
        "func": "\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.url = `${env.get(\"GO_URL\")}/api/field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflLoanAgreement\",\n    \"value\": msg.payload.key,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 1320,
        "wires": [
            [
                "8267bb56245455d5"
            ]
        ]
    },
    {
        "id": "8267bb56245455d5",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "saveLoanAgreement",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2280,
        "y": 1320,
        "wires": [
            [
                "3ed6f7be6672e592",
                "77b592770405c22d"
            ]
        ]
    },
    {
        "id": "3ed6f7be6672e592",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "saveLoanAgreement",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2540,
        "y": 1320,
        "wires": []
    },
    {
        "id": "37af8d6f68ab5843",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "uploadFileReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\n\nconst token = flow.get(\"actyvToken\")\n\nmsg.headers = {\n    \"content-type\": 'multipart/form-data',\n    Authorization: `Bearer ${token}`\n};\n\nmsg.url = `${ADMIN_URL}/api/file/upload`\nmsg.method = \"POST\"\nmsg.payload = {\n    \"file\": {\n        \"value\": msg.payload,\n        \"options\": {\n            \"filename\": 'IIFL Loan document'\n        }\n    },\n    \"filename\": 'IIFL Nach agreement'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 1980,
        "wires": [
            [
                "576eccf5414345cc"
            ]
        ]
    },
    {
        "id": "576eccf5414345cc",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "uploadFile",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2130,
        "y": 1980,
        "wires": [
            [
                "c6553b1fca00482e",
                "fb679d18598e9979"
            ]
        ]
    },
    {
        "id": "c6553b1fca00482e",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "uploadFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2370,
        "y": 1980,
        "wires": []
    },
    {
        "id": "fb679d18598e9979",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveP-NatchAgreementReq",
        "func": "\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.url = `${env.get(\"GO_URL\")}/api/field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflNatchAgreement\",\n    \"value\": msg.payload.key,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 2060,
        "wires": [
            [
                "9f1f7c1d0575884c"
            ]
        ]
    },
    {
        "id": "9f1f7c1d0575884c",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "saveP-NatchAgreement",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2250,
        "y": 2060,
        "wires": [
            [
                "f9fbef4ea855807d"
            ]
        ]
    },
    {
        "id": "f9fbef4ea855807d",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "saveLoanAgreement",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2500,
        "y": 2060,
        "wires": []
    },
    {
        "id": "b826ee2a92dabc2a",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "initBankStatementReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nmsg.docId = msg.payload.id\n\nmsg.url = `${BASE_URL}/api/clients/${msg.clientId}/bank-statement-analysis/manual/init`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {\n    \"callbackUrl\": \"ut deserunt\",\n    \"endDate\": \"2022-11-03\",\n    \"startDate\": \"2022-11-01\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2060,
        "y": 3200,
        "wires": [
            [
                "3684795c88b62bd0"
            ]
        ]
    },
    {
        "id": "3684795c88b62bd0",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "initBankStatement",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2370,
        "y": 3200,
        "wires": [
            [
                "397b1b701525473e",
                "c71de0cd414b59a8"
            ]
        ]
    },
    {
        "id": "397b1b701525473e",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "initBankStatement",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2690,
        "y": 3200,
        "wires": []
    },
    {
        "id": "c92690606edfab90",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "function 165",
        "func": "// console.log({file:msg.file})\nif(msg.file){\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 3820,
        "wires": [
            [
                "301abb79cd7ec0a2",
                "e706400f1264d3a8"
            ]
        ]
    },
    {
        "id": "4ffacaf77a8cd653",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "sendFilesToReaderReq",
        "func": "// msg.payload.documentType = \"BUSINESS_PAN\"\n\nfor(let file of msg?.payload?.files){\n// console.log({file})\nswitch(msg?.payload?.documentType){\n\n    \n\n    case \"PERSONAL_PAN\" :{\n  \n        node.send ({ \n                ...msg,\n            tag:\"pan-front\",\n                file: file,\n                payload: {}\n        })\n        break\n    }\n\n    case \"BUSINESS_PAN\" :{\n\n        node.send({\n            ...msg,\n            tag: \"pan-front\",\n            file: file,\n            payload: {}\n        })\n        break\n    }\n\n    case \"AADHAAR\": {\n\n        if (file.type === \"AADHAAR_FRONT\") {\n            \n            node.send({\n                ...msg,\n                tag: \"aadhar-front\",\n                file: file,\n                payload: {}\n            })\n        } else if (file.type === \"AADHAAR_BACK\") {\n            console.log(\"aadhaar back\")\n            node.send({\n                ...msg,\n                tag: \"aadhar-back\",\n                file: file,\n                payload: {}\n            })\n        }\n        break\n    }\n\n    \n\n\n    default:{\n        // node.send({\n        //     ...msg,\n        //     file: \"\",\n        //     payload:{}\n        // })\n    }\n}\n// node.send({\n//     ...msg,\n//     file: file,\n//     // payload:{}\n//     // businessPartnerId: msg.businessPartnerId,\n//     // bankId: msg.bankId,\n//     // enterpriseId: msg.enterpriseId,\n//     // bankProductConfigId: msg.bankProductConfigId,\n//     // dealerCode : msg.dealerCode\n// })\n}\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 3820,
        "wires": [
            [
                "c92690606edfab90"
            ]
        ]
    },
    {
        "id": "301abb79cd7ec0a2",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "file",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2570,
        "y": 3820,
        "wires": []
    },
    {
        "id": "e706400f1264d3a8",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "Setting fileID of a particular file",
        "func": "msg.fid = msg.file.fileId;\n\nmsg.method = \"GET\"\nmsg.url = `${env.get(\"GO_URL\")}/api/file/read/${msg.file.fileId}`;\nmsg.fileUrl = `${env.get(\"GO_URL\")}/api/file/read/${msg.file.fileId}`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2070,
        "y": 3920,
        "wires": [
            [
                "047421ab22850551"
            ]
        ]
    },
    {
        "id": "047421ab22850551",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "read file",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "x-actyv-api-config-key",
                "valueType": "other",
                "valueValue": "8HhkIWzVMSnSgvlhxr"
            }
        ],
        "x": 2300,
        "y": 3920,
        "wires": [
            [
                "381207f3cf5d46ae"
            ]
        ]
    },
    {
        "id": "381207f3cf5d46ae",
        "type": "base64",
        "z": "e8842e93c37e68d3",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 2480,
        "y": 3920,
        "wires": [
            [
                "9b0378f1d8610e48"
            ]
        ]
    },
    {
        "id": "9b0378f1d8610e48",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "detectMimeType",
        "func": "const signatures = {\n    JVBERi0: \"application/pdf\",\n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"application/vnd.openxmlformats-officedocument.\",\n    PK: \"application/zip\",\n};\n\n// console.log({signature:msg.file.fileType})\n\n\nlet fileName = msg.fid.split(\"-\");\nlet extension = msg.file.fileType.split(\"/\")[1];\n// let filePath = `${msg.LOCAL_PATH}/${fileName}.${extension}`;\n// const base64String = msg.payload;\n\n// for (let ext in signatures) {\n//     const base64Sig = base64String.slice(0, ext.length)\n//     if (base64Sig === ext) {\n//         fileName = msg.fid\n//         extension = getExtension(ext)\n//         filePath = `${msg.LOCAL_PATH}/${fileName}${msg.ind}.${extension}`\n//     }\n// }\n\nmsg.filename = `${fileName[fileName.length-1]}.${extension}`\n\n// console.log({fun:msg.filename})\n\n// msg.filePath = filePath\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 4000,
        "wires": [
            [
                "a76710880f1f36f4",
                "555f8cbc82d24ef1"
            ]
        ]
    },
    {
        "id": "a76710880f1f36f4",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "debug 264",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 4000,
        "wires": []
    },
    {
        "id": "555f8cbc82d24ef1",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "uploadSelfieReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\n\n//set clientId and leadId to msg object\n// msg.clientId = clientId,\n// msg.leadId = msg.payload.leadId\n\nmsg.url = `${BASE_URL}/api/clients/${clientId}/selfie`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\n// console.log({file:msg.file,filename:msg.filename,tag:msg.tag})\nmsg.payload = {\n    \"doLiveliness\": true,\n    \"image\": {\n        \"fileName\": \"abc\",\n        \"filePath\": msg.payload,\n        \"fileType\": \".jpeg\",\n        \"storageType\": \"base64\"\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1980,
        "y": 4100,
        "wires": [
            [
                "62f5248c6df740d1"
            ]
        ]
    },
    {
        "id": "62f5248c6df740d1",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "uploadSelfie",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2270,
        "y": 4100,
        "wires": [
            [
                "113ea40b17f0f6c7"
            ]
        ]
    },
    {
        "id": "113ea40b17f0f6c7",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "uploadSelfie",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2550,
        "y": 4100,
        "wires": []
    },
    {
        "id": "51203aba317e60c4",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "function 166",
        "func": "// console.log({file:msg.file})\nif(msg.file){\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 2840,
        "wires": [
            [
                "fb37e062a9ae96e5",
                "cb8af0ee537f4130"
            ]
        ]
    },
    {
        "id": "3f2ca455eb3f16a3",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "sendFilesToReaderReq",
        "func": "// msg.payload.documentType = \"BUSINESS_PAN\"\n\nfor(let file of msg?.payload?.files){\n// console.log({file})\nswitch(msg?.payload?.documentType){\n\n    \n\n    case \"PERSONAL_PAN\" :{\n  \n        node.send ({ \n                ...msg,\n            tag:\"pan-front\",\n                file: file,\n                payload: {}\n        })\n        break\n    }\n\n    case \"BUSINESS_PAN\" :{\n\n        node.send({\n            ...msg,\n            tag: \"pan-front\",\n            file: file,\n            payload: {}\n        })\n        break\n    }\n\n    case \"AADHAAR\": {\n\n        if (file.type === \"AADHAAR_FRONT\") {\n            \n            node.send({\n                ...msg,\n                tag: \"aadhar-front\",\n                file: file,\n                payload: {}\n            })\n        } else if (file.type === \"AADHAAR_BACK\") {\n            console.log(\"aadhaar back\")\n            node.send({\n                ...msg,\n                tag: \"aadhar-back\",\n                file: file,\n                payload: {}\n            })\n        }\n        break\n    }\n\n    \n\n\n    default:{\n        // node.send({\n        //     ...msg,\n        //     file: \"\",\n        //     payload:{}\n        // })\n    }\n}\n// node.send({\n//     ...msg,\n//     file: file,\n//     // payload:{}\n//     // businessPartnerId: msg.businessPartnerId,\n//     // bankId: msg.bankId,\n//     // enterpriseId: msg.enterpriseId,\n//     // bankProductConfigId: msg.bankProductConfigId,\n//     // dealerCode : msg.dealerCode\n// })\n}\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2840,
        "wires": [
            [
                "51203aba317e60c4"
            ]
        ]
    },
    {
        "id": "fb37e062a9ae96e5",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "file",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 2840,
        "wires": []
    },
    {
        "id": "cb8af0ee537f4130",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "Setting fileID of a particular file",
        "func": "msg.fid = msg.file.fileId;\n\nmsg.method = \"GET\"\nmsg.url = `${env.get(\"GO_URL\")}/api/file/read/${msg.file.fileId}`;\nmsg.fileUrl = `${env.get(\"GO_URL\")}/api/file/read/${msg.file.fileId}`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 2940,
        "wires": [
            [
                "d0899605a72b48e7"
            ]
        ]
    },
    {
        "id": "d0899605a72b48e7",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "read file",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "x-actyv-api-config-key",
                "valueType": "other",
                "valueValue": "8HhkIWzVMSnSgvlhxr"
            }
        ],
        "x": 760,
        "y": 2940,
        "wires": [
            [
                "a792592be3175eed"
            ]
        ]
    },
    {
        "id": "a792592be3175eed",
        "type": "base64",
        "z": "e8842e93c37e68d3",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 940,
        "y": 2940,
        "wires": [
            [
                "68ccd4ff19bf6be1"
            ]
        ]
    },
    {
        "id": "68ccd4ff19bf6be1",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "detectMimeType",
        "func": "const signatures = {\n    JVBERi0: \"application/pdf\",\n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"application/vnd.openxmlformats-officedocument.\",\n    PK: \"application/zip\",\n};\n\n// console.log({signature:msg.file.fileType})\n\n\nlet fileName = msg.fid.split(\"-\");\nlet extension = msg.file.fileType.split(\"/\")[1];\n// let filePath = `${msg.LOCAL_PATH}/${fileName}.${extension}`;\n// const base64String = msg.payload;\n\n// for (let ext in signatures) {\n//     const base64Sig = base64String.slice(0, ext.length)\n//     if (base64Sig === ext) {\n//         fileName = msg.fid\n//         extension = getExtension(ext)\n//         filePath = `${msg.LOCAL_PATH}/${fileName}${msg.ind}.${extension}`\n//     }\n// }\n\nmsg.filename = `${fileName[fileName.length-1]}.${extension}`\n\n// console.log({fun:msg.filename})\n\n// msg.filePath = filePath\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 3020,
        "wires": [
            [
                "d1b61a694a1729d8",
                "f649f1a9bc4301c8"
            ]
        ]
    },
    {
        "id": "d1b61a694a1729d8",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "debug 265",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "documentType",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 3020,
        "wires": []
    },
    {
        "id": "f649f1a9bc4301c8",
        "type": "switch",
        "z": "e8842e93c37e68d3",
        "name": "switch by documentType",
        "property": "documentType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "KYC",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BANK_STATEMENT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SELFIE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 450,
        "y": 3420,
        "wires": [
            [
                "3b13bb6d3257ebc6"
            ],
            [],
            [
                "17cf58e10d2ea70d"
            ]
        ]
    },
    {
        "id": "3b13bb6d3257ebc6",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "uploadKycDocReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\n\n//set clientId and leadId to msg object\n// msg.clientId = clientId,\n// msg.leadId = msg.payload.leadId\n\nmsg.url = `${BASE_URL}/api/clients/${clientId}/upload-document`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\n// console.log({file:msg.file,filename:msg.filename,tag:msg.tag})\nmsg.payload = {\n    \"tag\": msg.tag,//\"aadhaar-front\",\n    \"document\": {\n        \"fileName\": msg.filename,//\"sample.jpeg\",\n        \"base64\": `data:${msg.file.fileType};base64,${msg.payload}`\n    },\n    // \"isFaceMatchRequired\": false,\n    // \"isImageQualityRequired\": false,\n    // \"isMaskRequired\": false,\n    // \"isOCRNameMatchRequired\": false\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 3220,
        "wires": [
            [
                "81381b115b373252"
            ]
        ]
    },
    {
        "id": "81381b115b373252",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "uploadKycDoc",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1040,
        "y": 3220,
        "wires": [
            [
                "013f4501ad08ff68"
            ]
        ]
    },
    {
        "id": "013f4501ad08ff68",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "uploadKycDoc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 3220,
        "wires": []
    },
    {
        "id": "17cf58e10d2ea70d",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "uploadSelfieReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\n\n//set clientId and leadId to msg object\n// msg.clientId = clientId,\n// msg.leadId = msg.payload.leadId\n\nmsg.url = `${BASE_URL}/api/clients/${clientId}/selfie`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\n// console.log({file:msg.file,filename:msg.filename,tag:msg.tag})\nmsg.payload = {\n    \"doLiveliness\": true,\n    \"image\": {\n        \"fileName\": \"abc\",\n        \"filePath\": msg.payload,\n        \"fileType\": \".jpeg\",\n        \"storageType\": \"base64\"\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 3600,
        "wires": [
            [
                "0e7e80d01030a490"
            ]
        ]
    },
    {
        "id": "0e7e80d01030a490",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "uploadSelfie",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 710,
        "y": 3600,
        "wires": [
            [
                "ecd02dd906ea5e54"
            ]
        ]
    },
    {
        "id": "ecd02dd906ea5e54",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "uploadSelfie",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 3600,
        "wires": []
    },
    {
        "id": "228993283d56c854",
        "type": "inject",
        "z": "09338278a6827f06",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "93905e3b32148be1"
            ]
        ]
    },
    {
        "id": "93905e3b32148be1",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "Set env variables",
        "func": "\n// let v8 = global.get(\"v8\");\n// const totalHeapSize = v8.getHeapStatistics().total_available_size;\n// let totalHeapSizeInMB = (totalHeapSize / 1024 / 1024).toFixed(2)\n// node.warn(\"V8 Total Heap Size \"+totalHeapSize+\" bytes\");\n\nconst ENV_VARIABLES = new Map();\n\nENV_VARIABLES.set('PAYLATER_URL', \"https://actyv-platform-paylater-service-v1.qa.actyv.com\")\nENV_VARIABLES.set('GO_URL', \"https://actyv-platform-go-service.qa.actyv.com\")\nENV_VARIABLES.set('ADMIN_URL', \"https://actyv-platform-admin-service.qa.actyv.com\")\n\nENV_VARIABLES.set('BUSINESS_IDENTIFIER', \"ABBCB2066P\")\nENV_VARIABLES.set('BUSINESS_TYPE', \"ENTERPRISE\")\nENV_VARIABLES.set('BANK_KEY', \"msl\")\nENV_VARIABLES.set('X_ACTYV_API_CONFIG_KEY', \"8HhkIWzVMSnSgvlhxr\")\nENV_VARIABLES.set('BANK_UNIQUE_IDENTIFIER', \"AASCA2089A\")\nENV_VARIABLES.set('BASE_URL', \"https://iifl-atlas-uat.finfluxtrial.io\")\nENV_VARIABLES.set('tenant_id', \"iifl-qa\")\nENV_VARIABLES.set('BANK_PRODUCT_KEY', \"axis-sabari-product\")\n\nENV_VARIABLES.set('BNPL_ENTERPRISE_USER', \"surajkumar@aplapollo.com\")\nENV_VARIABLES.set('BNPL_BANK_USER', \"vivekanand.t@sgfinserv.in\")\nENV_VARIABLES.set('BNPL_USER_PASSWORD', \"890ioP@12\")\nENV_VARIABLES.set('IIFL_USER', \"demoUser2\")\nENV_VARIABLES.set('IIFL_USER_PASSWORD', \"fc895Tbr2i&w@\")\n\nglobal.set('envVariables', ENV_VARIABLES)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 100,
        "wires": [
            [
                "84616d321b0e3362"
            ]
        ]
    },
    {
        "id": "84616d321b0e3362",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "AuthenticateBNPLEnterpriseUserReq",
        "func": "const envVariables = global.get('envVariables')\nconst BNPL_ENTERPRISE_USER = envVariables.get('BNPL_ENTERPRISE_USER')\nconst BNPL_USER_PASSWORD = envVariables.get('BNPL_USER_PASSWORD')\nconst ADMIN_URL = envVariables.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": BNPL_USER_PASSWORD,\n    \"email\": BNPL_ENTERPRISE_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 160,
        "wires": [
            [
                "dc467c36e6db6b66"
            ]
        ]
    },
    {
        "id": "dc467c36e6db6b66",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "AuthenticateBNPLUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 160,
        "wires": [
            [
                "50f32a17e67380c3",
                "146cc0a34b284216"
            ]
        ]
    },
    {
        "id": "50f32a17e67380c3",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "saveActyvEnterpriseToken",
        "func": "flow.set(\"actyvEnterpriseToken\",msg.payload.idToken)\nconsole.log({enterprise:msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 160,
        "wires": [
            [
                "ad41cd48800e707b"
            ]
        ]
    },
    {
        "id": "10b875fbb12ea8ee",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "AuthenticateIIFLUserReq",
        "func": "const envVariables = global.get('envVariables')\nconst IIFL_USER = envVariables.get('IIFL_USER')\nconst IIFL_USER_PASSWORD = envVariables.get('IIFL_USER_PASSWORD')\nconst BASE_URL = envVariables.get('BASE_URL');\n\n\nmsg.url = `${BASE_URL}/api/auth/login`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": IIFL_USER_PASSWORD,\n        \"userName\": IIFL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 460,
        "wires": [
            [
                "a8d7d1c972276370"
            ]
        ]
    },
    {
        "id": "a8d7d1c972276370",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "AuthenticateIIFLUser",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 460,
        "wires": [
            [
                "eea2d5dd45010ea8",
                "8b892fbcda46021a"
            ]
        ]
    },
    {
        "id": "eea2d5dd45010ea8",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "saveIIFLToken",
        "func": "flow.set(\"iiflToken\",msg.payload)\nconsole.log({token:msg.payload})\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 460,
        "wires": [
            [
                "7855873c45c3a33b"
            ]
        ]
    },
    {
        "id": "7855873c45c3a33b",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getBankProductKeyReq",
        "func": "const envVariables = global.get('envVariables')\nconst GO_URL = envVariables.get('GO_URL')\nconst BANK_PRODUCT_KEY = envVariables.get('BANK_PRODUCT_KEY')\n\nmsg.url = `${GO_URL}/api/bank-product-config/key/${BANK_PRODUCT_KEY}`\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 560,
        "wires": [
            [
                "cda5824aef9f6d83"
            ]
        ]
    },
    {
        "id": "cda5824aef9f6d83",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "getBankProductKeyReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 560,
        "wires": [
            [
                "6ceb7c49590b5b78",
                "ed50a1baf6cf2c41"
            ]
        ]
    },
    {
        "id": "6ceb7c49590b5b78",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "bankProductConfig",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 560,
        "wires": []
    },
    {
        "id": "ed50a1baf6cf2c41",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getPendingBankApplicationsReq",
        "func": "const envVariables = global.get('envVariables')\nconst GO_URL = envVariables.get('GO_URL')\nconst BANK_PRODUCT_KEY = envVariables.get('BANK_PRODUCT_KEY')\n\nmsg.bankId = msg.payload.bank\nmsg.enterpriseId = msg.payload.allowedEnterprises[0]\n\nmsg.url = `${GO_URL}/api/bank-application?bankID=${msg.bankId}&enterpriseID=${msg.enterpriseId}`\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 680,
        "wires": [
            [
                "ac24ab74f66e7a9c"
            ]
        ]
    },
    {
        "id": "ac24ab74f66e7a9c",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "getPendingBankApplications",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 680,
        "wires": [
            [
                "6d2568904f1f711e",
                "18a39e7851d7744b"
            ]
        ]
    },
    {
        "id": "6d2568904f1f711e",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "pendingBankApplications",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 680,
        "wires": []
    },
    {
        "id": "18a39e7851d7744b",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "mockBankApplication",
        "func": "msg.payload = [\n    {\n        \"_id\": \"63ff1b2f723b070cae7c09c0\",\n        \"createdOn\": \"Tue, 21 Feb 2023 11:32:41 GMT\",\n        \"createdBy\": \"63750a1995a6a16f696d2f7b\",\n        \"updatedOn\": \"Tue, 21 Feb 2023 11:32:42 GMT\",\n        \"isDeleted\": false,\n        \"bankApplicationDocumentConfigKey\": \"63cfbc85edee8f7eee6f3d6e\",\n        \"bankName\": \"Axis Bank Limited\",\n        \"productFamily\": \"PAYLATER\",\n        \"productType\": \"PAYLATER\",\n        \"status\": \"DOCUMENT_CAPTURE\",\n        \"businessPartnerName\": \"Shri Durga Metalex\",\n        \"businessPartnerID\": \"63750a19ca608a344ae556d6\",\n        \"productGranularity\": \"product\",\n        \"bankProductConfigId\": \"63cfbe250c729962c86ec8a7\",\n        \"bankId\": \"63c8fa075f1c5afda77bae5e\",\n        \"bankApplicationLabel\": \"Continue Bank Application\",\n        \"bankApplicationURL\": \"www.google.com\",\n        \"enterpriseId\": \"638c73f16ea52ce57470c1a9\",\n        \"approvedLimit\": null,\n        \"availableLimit\": null\n    }\n]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 760,
        "wires": [
            [
                "72b57cd0da748ed6"
            ]
        ]
    },
    {
        "id": "72b57cd0da748ed6",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "LoopOverBankApplication",
        "func": "\nfor(let bankApplication of msg.payload){\n    // console.log({bankApplication})\n    node.send({\n        businessPartnerId: bankApplication.businessPartnerID,\n        bankId: bankApplication.bankId,\n        enterpriseId: bankApplication.enterpriseId,\n        bankProductConfigId: bankApplication.bankProductConfigId,\n        bankApplicationId : bankApplication._id,\n        dataPartDone: \"false\"\n    })\n}\n\n// return msg;\n\n/**\n *  \"_id\": \"63f4abd94f0acc5aa73d9e46\",\n        \"createdOn\": \"Tue, 21 Feb 2023 11:32:41 GMT\",\n        \"createdBy\": \"63750a1995a6a16f696d2f7b\",\n        \"updatedOn\": \"Tue, 21 Feb 2023 11:32:42 GMT\",\n        \"isDeleted\": false,\n        \"bankApplicationDocumentConfigKey\": \"63cfbc85edee8f7eee6f3d6e\",\n        \"bankName\": \"Axis Bank Limited\",\n        \"productFamily\": \"PAYLATER\",\n        \"productType\": \"PAYLATER\",\n        \"status\": \"DOCUMENT_CAPTURE\",\n        \"businessPartnerName\": \"Shri Durga Metalex\",\n        \"businessPartnerID\": \"63750a19ca608a344ae556d6\",\n        \"productGranularity\": \"product\",\n        \"bankProductConfigId\": \"63cfbe250c729962c86ec8a7\",\n        \"bankId\": \"63c8fa075f1c5afda77bae5e\",\n        \"bankApplicationLabel\": \"Continue Bank Application\",\n        \"bankApplicationURL\": \"www.google.com\",\n        \"enterpriseId\": \"638c73f16ea52ce57470c1a9\",\n        \"approvedLimit\": null,\n        \"availableLimit\": null\n */",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 760,
        "wires": [
            [
                "0684f8dc42bd19e4",
                "a460b00268816abf"
            ]
        ]
    },
    {
        "id": "0684f8dc42bd19e4",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "bankApplication",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 760,
        "wires": []
    },
    {
        "id": "a460b00268816abf",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getDealerCodeReq",
        "func": "\nconst actyvEnterpriseToken = flow.get(\"actyvEnterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/api/business-relationship/${msg.businessPartnerId}/${msg.enterpriseId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${actyvEnterpriseToken}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 840,
        "wires": [
            [
                "beb4a2357a741554"
            ]
        ]
    },
    {
        "id": "beb4a2357a741554",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "getDealerCode",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 520,
        "y": 840,
        "wires": [
            [
                "25bfa163c9eda5fd",
                "07c2e0c61982a2c1"
            ]
        ]
    },
    {
        "id": "25bfa163c9eda5fd",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "debug 260",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 820,
        "wires": []
    },
    {
        "id": "146cc0a34b284216",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "debug 261",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 100,
        "wires": []
    },
    {
        "id": "8b892fbcda46021a",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "debug 262",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 440,
        "wires": []
    },
    {
        "id": "cfc98e75d3b550c6",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getClientIdReq",
        "func": "\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.url = `${env.get(\"GO_URL\")}/api/field-value/find-field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.vclId = msg.payload[0].value\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflClientId\",\n   \n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 920,
        "wires": [
            [
                "2bb24f48cecef4ae"
            ]
        ]
    },
    {
        "id": "2bb24f48cecef4ae",
        "type": "http request",
        "z": "09338278a6827f06",
        "d": true,
        "name": "getClientId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 920,
        "wires": [
            [
                "762e11096983c174",
                "d5169b5159bd5674"
            ]
        ]
    },
    {
        "id": "762e11096983c174",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "getClientId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 920,
        "wires": []
    },
    {
        "id": "d5169b5159bd5674",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getLeadIdReq",
        "func": "\nconst actyvToken = flow.get(\"actyvToken\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${env.get(\"GO_URL\")}/api/field-value/find-field-value`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.clientId = msg.payload[0].value\n\nmsg.payload = {\n    \"key\": \"iiflLeadId\",\n    \n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1000,
        "wires": [
            [
                "7508a4c1907c9bcf"
            ]
        ]
    },
    {
        "id": "7508a4c1907c9bcf",
        "type": "http request",
        "z": "09338278a6827f06",
        "d": true,
        "name": "getLeadId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 1000,
        "wires": [
            [
                "4d924d6fe14c308d",
                "11b404f5802adee7"
            ]
        ]
    },
    {
        "id": "4d924d6fe14c308d",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "saveLeadId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1000,
        "wires": []
    },
    {
        "id": "11b404f5802adee7",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getEsignIdReq",
        "func": "\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.url = `${env.get(\"GO_URL\")}/api/field-value/find-field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\n\nmsg.leadId = msg.payload[0].value\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflEsignId\",\n\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1100,
        "wires": [
            [
                "38d48035dbc5b1ca"
            ]
        ]
    },
    {
        "id": "38d48035dbc5b1ca",
        "type": "http request",
        "z": "09338278a6827f06",
        "d": true,
        "name": "getEsignId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 1100,
        "wires": [
            [
                "1aecbcae3e33409b",
                "3af5c33b137c8005"
            ]
        ]
    },
    {
        "id": "1aecbcae3e33409b",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "saveEsignId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1100,
        "wires": []
    },
    {
        "id": "3af5c33b137c8005",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getNatchIdReq",
        "func": "\nconst actyvEnterpriseToken = flow.get(\"actyvEnterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/api/field-value/find-field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.eSignId = msg.payload[0].value\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${actyvEnterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflNatchId\",\n    \n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1200,
        "wires": [
            [
                "1865d612ac68a70e"
            ]
        ]
    },
    {
        "id": "1865d612ac68a70e",
        "type": "http request",
        "z": "09338278a6827f06",
        "d": true,
        "name": "getNatchId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 1200,
        "wires": [
            [
                "efb7a0b1dc693a96",
                "3676ebda52d26301"
            ]
        ]
    },
    {
        "id": "efb7a0b1dc693a96",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "saveEsignId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1200,
        "wires": []
    },
    {
        "id": "3676ebda52d26301",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getE-signStatusReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nmsg.natchId = msg.payload[0].value\n\nmsg.url = `${BASE_URL}/api/leads/${msg.leadId}/esign/status/${msg.eSignId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1280,
        "wires": [
            [
                "e075c685dc04eb68"
            ]
        ]
    },
    {
        "id": "e075c685dc04eb68",
        "type": "http request",
        "z": "09338278a6827f06",
        "d": true,
        "name": "getE-signStatus",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 460,
        "y": 1280,
        "wires": [
            [
                "e5fbbb20f2474776",
                "237db827a7f11100"
            ]
        ]
    },
    {
        "id": "e5fbbb20f2474776",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "getE-signStatus",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 1280,
        "wires": []
    },
    {
        "id": "237db827a7f11100",
        "type": "switch",
        "z": "09338278a6827f06",
        "name": "",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "COMPLETED",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 230,
        "y": 1380,
        "wires": [
            [
                "bbb151e5a4e5a6e7"
            ]
        ]
    },
    {
        "id": "bbb151e5a4e5a6e7",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getNatchStatusReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${BASE_URL}/api/leads/${msg.leadId}/nach/${msg.natchId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1460,
        "wires": [
            [
                "074093fa43c9f38f"
            ]
        ]
    },
    {
        "id": "074093fa43c9f38f",
        "type": "http request",
        "z": "09338278a6827f06",
        "d": true,
        "name": "getNatchStatus",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 460,
        "y": 1460,
        "wires": [
            [
                "ee0bd04a9553f430",
                "4f7fd2cbb351d2a0"
            ]
        ]
    },
    {
        "id": "ee0bd04a9553f430",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "getNatchStatus",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 1460,
        "wires": []
    },
    {
        "id": "4f7fd2cbb351d2a0",
        "type": "switch",
        "z": "09338278a6827f06",
        "name": "",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "COMPLETED",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 210,
        "y": 1540,
        "wires": [
            [
                "13dd5d5ac7d7ade7"
            ]
        ]
    },
    {
        "id": "07c2e0c61982a2c1",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getVCLIdReq",
        "func": "\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.url = `${env.get(\"GO_URL\")}/api/field-value/find-field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflVclId\",\n   \n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 880,
        "wires": [
            [
                "1efc1171ceaec18b"
            ]
        ]
    },
    {
        "id": "1efc1171ceaec18b",
        "type": "http request",
        "z": "09338278a6827f06",
        "d": true,
        "name": "getVCLId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 480,
        "y": 880,
        "wires": [
            [
                "1c094f567c7ad1e7",
                "cfc98e75d3b550c6"
            ]
        ]
    },
    {
        "id": "1c094f567c7ad1e7",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "getVCLId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 880,
        "wires": []
    },
    {
        "id": "13dd5d5ac7d7ade7",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getVclReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${BASE_URL}/api/leads/${msg.leadId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 1620,
        "wires": [
            [
                "81a1897a491c88d6"
            ]
        ]
    },
    {
        "id": "81a1897a491c88d6",
        "type": "http request",
        "z": "09338278a6827f06",
        "d": true,
        "name": "getVCL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 440,
        "y": 1620,
        "wires": [
            [
                "778f5cf4f4dd4885",
                "0904cad0dbdcec41"
            ]
        ]
    },
    {
        "id": "778f5cf4f4dd4885",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "getVCL",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 1620,
        "wires": []
    },
    {
        "id": "0904cad0dbdcec41",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "createLoanTermReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\nconst BANK_PRODUCT_KEY = envVariables.get('BANK_PRODUCT_KEY')\nconst actyvBankToken = flow.get(\"actyvBankToken\")\n\nmsg.vcl = msg.payload\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization:`Bearer ${actyvBankToken}`\n}\nmsg.payload = {\n    \"bankID\": msg.bankId,\n    \"borrowerID\": msg.businessPartnerId,\n    \"enterpriseID\": msg.enterpriseId,\n    \"productType\": \"BNPL\",\n    \"rateOfInterest\": msg.payload.rateOfInterest\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1720,
        "wires": [
            [
                "303684073d99f63b"
            ]
        ]
    },
    {
        "id": "303684073d99f63b",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "createLoanTerm",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 400,
        "y": 1720,
        "wires": [
            [
                "7890ffd32d068ece",
                "15fa8c0d6b8e7ee2"
            ]
        ]
    },
    {
        "id": "7890ffd32d068ece",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "createLoanTerm",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1720,
        "wires": []
    },
    {
        "id": "08bb870a7d14ac96",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "updateLoanTermReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\nconst BANK_PRODUCT_KEY = envVariables.get('BANK_PRODUCT_KEY')\nconst actyvBankToken = flow.get(\"actyvBankToken\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.vcl = msg.payload\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/service/update`\nmsg.method = \"PATCH\"\n\nmsg.headers = {\n    Authorization : `Bearer ${actyvBankToken}`,\n    bankid: msg.bankId,\n    \"x-actyv-api-config\":X_ACTYV_API_CONFIG_KEY\n    \n}\n\nmsg.payload = {\n    \"loanTermsID\": msg.loanId,\n    \"approvedLimit\": msg.vcl.availableLimit,\n    \"validTill\": msg.virtualCreditLines[0].expiryDate,\n    \"bankProvidedLoanCodes\": msg.clientId,\n    \n   \n    \"loanGrantStatus\": \"APPROVED\",\n    \"crnNumber\": msg.virtualCreditLines[0].accountNo,//msg.clientId,\n    \"awaitingBalanceRefresh\": true,\n    \"businessType\": \"VENDOR\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1880,
        "wires": [
            [
                "a39268ab66cb6bfd"
            ]
        ]
    },
    {
        "id": "a39268ab66cb6bfd",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "updateLoanTerm",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 410,
        "y": 1880,
        "wires": [
            [
                "2e4929ed23f08776",
                "89fade42183290f5"
            ]
        ]
    },
    {
        "id": "2e4929ed23f08776",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "updateLoanTerm",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1880,
        "wires": []
    },
    {
        "id": "15fa8c0d6b8e7ee2",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getVclReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nmsg.loanId = msg.payload.id\n\n\nmsg.url = `${BASE_URL}/api/clients/${msg.clientId}/virtual-credit-line`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 1800,
        "wires": [
            [
                "453993ee72d5dab0"
            ]
        ]
    },
    {
        "id": "453993ee72d5dab0",
        "type": "http request",
        "z": "09338278a6827f06",
        "d": true,
        "name": "getVCL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 440,
        "y": 1800,
        "wires": [
            [
                "003a2bfca14ad556",
                "08bb870a7d14ac96"
            ]
        ]
    },
    {
        "id": "003a2bfca14ad556",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "getVCL",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 1800,
        "wires": []
    },
    {
        "id": "89fade42183290f5",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "createBankDistributorReq",
        "func": "const X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.url = `${env.get(\"GO_URL\")}/api/business-relationship/service`\nmsg.method = \"POST\"\nmsg.headers = {\n    \"x-actyv-api-config\": X_ACTYV_API_CONFIG_KEY,\n    Authorization : `Bearer ${actyvToken}`\n}\n\nmsg.payload = {\n    \"businessId\": msg.businessPartnerId,\n    \"parentBusinessId\": msg.bankId,\n    \"identifierByParent\": msg.vclId,\n    \"bankAccountNumber\": \"string\",\n    \"bankIFSC\": \"string\",\n    \"bankName\": \"string\",\n    \"relationType\": \"DISTRIBUTOR-BANK\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1980,
        "wires": [
            [
                "aee31f43e1c58bc1"
            ]
        ]
    },
    {
        "id": "aee31f43e1c58bc1",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "createBankDistributor",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 540,
        "y": 1980,
        "wires": [
            [
                "9bff150159647b75",
                "6ed78d090be39040"
            ]
        ]
    },
    {
        "id": "9bff150159647b75",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "debug 263",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1980,
        "wires": []
    },
    {
        "id": "6ed78d090be39040",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "createTenorAndRateSpreadReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\nconst BANK_PRODUCT_KEY = envVariables.get('BANK_PRODUCT_KEY')\n\nmsg.vcl = msg.payload\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms`\nmsg.method = \"POST\"\nmsg.payload = {\n    \"loanProductID\": \"BNPL\",\n    \"bankID\": msg.bankId,\n    \"loanID\": msg.loanId,\n    \"fromDuration\": \"P1Y2M3DT4H5M6S\",\n    \"toDuration\": \"P1Y2M3DT4H5M6S\",\n    \"benchmarkRateID\": \"b7802e04-2416-4365-ab07-44ac283d1b8a\",\n    \"bankSpread\": msg,\n    \"variableSpread\": msg.vcl.rateOfInterest,\n    \"actyvSpread\": 1,\n    \"additionalCashbackCodes\": [\n        \"UYUS\",\n        \"CSY+23\"\n    ],\n    \"bankMaxAllowedRate\": 9.008,\n    \"doesActyvSpreadBreachThreshold\": false,\n    \"actyvSpreadExceedingThreshold\": 1.234,\n    \"validFrom\": \"2024-11-31 00:00:00.000000+00\",\n    \"ValidTill\": \"2024-11-31 00:00:00.000000+00\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 2060,
        "wires": [
            [
                "ce44db861ab36ffe"
            ]
        ]
    },
    {
        "id": "ce44db861ab36ffe",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "createTenorAndRateSpread",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 520,
        "y": 2060,
        "wires": [
            [
                "9471ec1bb4551452"
            ]
        ]
    },
    {
        "id": "9471ec1bb4551452",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "createTenorAndRateSpread",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 2060,
        "wires": []
    },
    {
        "id": "0a39bb98e87e51ca",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "saveActyvBankToken",
        "func": "flow.set(\"actyvEnterpriseToken\",msg.payload.idToken)\nconsole.log({bank:msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "5acdf3f35bdb9dae",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "AuthenticateBNPLUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 490,
        "y": 260,
        "wires": [
            [
                "0a39bb98e87e51ca"
            ]
        ]
    },
    {
        "id": "ad41cd48800e707b",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "AuthenticateBNPLBankUserReq",
        "func": "const envVariables = global.get('envVariables')\nconst BNPL_BANK_USER = envVariables.get('BNPL_BANK_USER')\nconst BNPL_USER_PASSWORD = envVariables.get('BNPL_USER_PASSWORD')\nconst ADMIN_URL = envVariables.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": BNPL_USER_PASSWORD,\n    \"email\": BNPL_BANK_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 260,
        "wires": [
            [
                "5acdf3f35bdb9dae"
            ]
        ]
    },
    {
        "id": "0e8998edac209abd",
        "type": "inject",
        "z": "6aa904d67d2907b2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 100,
        "wires": [
            [
                "2f78549a2c7adca0"
            ]
        ]
    },
    {
        "id": "234c2c522a2ab078",
        "type": "http request",
        "z": "6aa904d67d2907b2",
        "name": "readFile",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 720,
        "y": 100,
        "wires": [
            [
                "776d5a708946d663",
                "5dd52f5fd4298809"
            ]
        ]
    },
    {
        "id": "21a274423118fe71",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 43",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 600,
        "wires": []
    },
    {
        "id": "f9987901c674f1f7",
        "type": "file",
        "z": "6aa904d67d2907b2",
        "name": "",
        "filename": "/Users/shravanpm/Downloads/pdf.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "binary",
        "x": 890,
        "y": 480,
        "wires": [
            [
                "21a274423118fe71"
            ]
        ]
    },
    {
        "id": "ce898b0786d6ad9c",
        "type": "base64",
        "z": "6aa904d67d2907b2",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 330,
        "y": 200,
        "wires": [
            [
                "386d9f3fc10af4c7"
            ]
        ]
    },
    {
        "id": "577860b78f0201be",
        "type": "function",
        "z": "6aa904d67d2907b2",
        "name": "detectMimeType",
        "func": "const LOCAL_PATH = `/Users/shravanpm/Downloads/`\n\nconst signatures = {\n    JVBERi0: \"application/pdf\",\n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"application/vnd.openxmlformats-officedocument.\",\n    PK: \"application/zip\",\n};\n\nlet filePath;\nlet fileName;\nlet extension;\n\nconst base64String = msg.payload;\n\nfor (let ext in signatures) {\n    const base64Sig = base64String.slice(0, ext.length)\n    if (base64Sig === ext) {\n        fileName = msg.fileId\n        extension = getExtension(ext)\n        filePath = `${LOCAL_PATH}/${fileName}.${extension}\n        `\n    }\n}\n\n\nmsg.filePath = filePath\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "2f78549a2c7adca0",
        "type": "function",
        "z": "6aa904d67d2907b2",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\n\n// const fileId = \"5efaaa6b-0471-40d1-9f0f-b1729296faf4-AADHAR_BACK\"\n// const fileId = \"1f4f03e2-e977-43fe-82b5-1aca2adaf8a0-MISCELLANEOUS_DOCUMENT_ADDRESS_PROOF_FORM\"\n// const fileId = \"222eedef-cde8-4aab-8cc7-8debb609e64b-BANK_STATEMENT\"\nconst fileId = \"222eedef-cde8-4aab-8cc7-8debb609e64b-BANK_STATEMENT\"\nmsg.fileId = fileId\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/file/read/${fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 100,
        "wires": [
            [
                "234c2c522a2ab078"
            ]
        ]
    },
    {
        "id": "12aa7f41388a1b6b",
        "type": "file",
        "z": "6aa904d67d2907b2",
        "name": "",
        "filename": "/Users/shravanpm/Downloads/test.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 730,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "f5cb07199db75a98",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 66",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 300,
        "wires": []
    },
    {
        "id": "776d5a708946d663",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 67",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 40,
        "wires": []
    },
    {
        "id": "cba73039553b3be5",
        "type": "function",
        "z": "6aa904d67d2907b2",
        "name": "function 27",
        "func": "// msg.payload = msg.payload.split(\"\\n\")[0]\nconsole.log(msg.payload.length)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 660,
        "wires": [
            [
                "12aa7f41388a1b6b"
            ]
        ]
    },
    {
        "id": "fa52ab0b5c6facea",
        "type": "file in",
        "z": "6aa904d67d2907b2",
        "name": "",
        "filename": "payload",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 300,
        "y": 560,
        "wires": [
            [
                "f962312e4d8dab3d"
            ]
        ]
    },
    {
        "id": "f962312e4d8dab3d",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 68",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 560,
        "wires": []
    },
    {
        "id": "8a31929f15a5b734",
        "type": "function",
        "z": "6aa904d67d2907b2",
        "name": "function 29",
        "func": "const fs = global.get(\"fs\");\nconst pdf = global.get(\"pdf\")\nconst scissors = global.get(\"scissors\")\n\n\n// var pdfOp = scissors(\"/Users/shravanpm/Downloads/bus oct 2021.pdf\")\n\n// console.log({pdfOp})\n\n\n\nconst PDFDocument = pdf.PDFDocument;\n\n// // console.log(PDFDocument.copyPages,\"dcdcc\")\n\n\n\nasync function splitPdf(pathToPdf) {\ntry {\n    const docmentAsBytes = await fs.promises.readFile(pathToPdf);\n\n    // Load your PDFDocument\n    const pdfDoc = await PDFDocument.load(docmentAsBytes, { ignoreEncryption: true })\n    // console.log({pdfDoc})\n    \n\n    const numberOfPages = pdfDoc.getPages().length;\n    // console.log({numberOfPages})\n    const subDocument = await PDFDocument.create();\n    let res = subDocument.copyPages(pdfDoc, [1])\n    console.log({res})\n    // console.log(subDocument.copyPages(pdfDoc, [1]), \"jdslfjls\")\n\n    for (let i = 0; i < 2; i++) {\n\n      // Create a new \"sub\" document\n    //   const subDocument = await PDFDocument.create();\n      // console.log(subDocument.copyPages(pdfDoc,[i]),\"jdslfjls\")\n      // copy the page at current index\n      // const [copiedPage] = await subDocument.copyPages(pdfDoc, [i])\n      // subDocument.addPage(copiedPage);\n      // const pdfBytes = await subDocument.save()\n      // await writePdfBytesToFile(`file-${i + 1}.pdf`, pdfBytes);\n\n    }\n  } catch (error) {\n    console.log({error})\n  };\n}\n\nfunction writePdfBytesToFile(fileName, pdfBytes) {\n  return fs.promises.writeFile(fileName, pdfBytes);\n}\n\n(async () => {\n  await splitPdf(\"/Users/shravanpm/Downloads/bus oct 2021.pdf\");\n})();\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 300,
        "wires": [
            [
                "f5cb07199db75a98"
            ]
        ]
    },
    {
        "id": "55326f0876262081",
        "type": "inject",
        "z": "6aa904d67d2907b2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 380,
        "wires": [
            [
                "ee8516c1c1260445"
            ]
        ]
    },
    {
        "id": "386d9f3fc10af4c7",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 70",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 240,
        "wires": []
    },
    {
        "id": "28a27f4bf063cf0d",
        "type": "file in",
        "z": "6aa904d67d2907b2",
        "name": "read file",
        "filename": "/Users/shravanpm/Downloads/bus oct 2021.pdf",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "hex",
        "allProps": false,
        "x": 200,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "5dd52f5fd4298809",
        "type": "zip",
        "z": "6aa904d67d2907b2",
        "name": "",
        "mode": "compress",
        "filename": "/Users/shravanpm/Downloads/text/test.zip",
        "compressionlevel": "0",
        "outasstring": false,
        "x": 800,
        "y": 180,
        "wires": [
            [
                "28f057098e31844c"
            ]
        ]
    },
    {
        "id": "28f057098e31844c",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 71",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 180,
        "wires": []
    },
    {
        "id": "ee8516c1c1260445",
        "type": "function",
        "z": "6aa904d67d2907b2",
        "name": "base64string",
        "func": "msg.payload = \"\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "d1720175299174b7",
        "type": "inject",
        "z": "6aa904d67d2907b2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 600,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "793e3dfb52bfedb6",
        "type": "file in",
        "z": "6aa904d67d2907b2",
        "name": "read file",
        "filename": "/Users/shravanpm/Downloads/bus oct 2021.pdf",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 480,
        "y": 800,
        "wires": [
            [
                "57ea66c790d55da1",
                "c04a643ed361e831"
            ]
        ]
    },
    {
        "id": "6c6075c0b6dba9d1",
        "type": "inject",
        "z": "6aa904d67d2907b2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 800,
        "wires": [
            [
                "793e3dfb52bfedb6"
            ]
        ]
    },
    {
        "id": "57ea66c790d55da1",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 73",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 720,
        "wires": []
    },
    {
        "id": "8f452b2328d44191",
        "type": "function",
        "z": "6aa904d67d2907b2",
        "name": "function 30",
        "func": "const JSZip = global.get(\"jszip\")\nconst fs = global.get('fs');\n\nconst zip = new JSZip();\n\ntry {\n    console.log(\"hjgsghjad\")\n    const pdfData = fs.readFileSync('/Users/shravanpm/Downloads/bus oct 2021.pdf');\n    zip.file(\"PDFFile.pdf\", pdfData);\n    // console.log({test})\n    // zip.file(\"Textfile.txt\", \"Hello NodeJS\\n\");\n\n    // const images = [\"coding-science.jpg\", \"programming-languages.jpg\"];\n    // const img = zip.folder(\"images\");\n\n    // for (const image of images) {\n    //     const imageData = fs.readFileSync(image);\n    //     img.file(image, imageData);\n    // }\n\n    let result = zip.generateNodeStream({ type: 'nodebuffer', streamFiles: true })\n        .pipe(fs.createWriteStream('sample.zip'))\n        .on('finish', function (res) {\n            \n            \n            console.log(\"sample.zip written.\");\n        });\n\n        // console.log({result})\n\n    const test = fs.readFileSync('sample.zip');\n    // node.send({payload:test})\n    msg.payload = test\n    console.log({ test })\n} catch (err) {\n    console.error(err)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "c04a643ed361e831",
        "type": "zip",
        "z": "6aa904d67d2907b2",
        "name": "",
        "mode": "compress",
        "filename": "",
        "compressionlevel": 6,
        "outasstring": false,
        "x": 780,
        "y": 800,
        "wires": [
            [
                "27e8896d7b824b64",
                "7729f1690ab76186"
            ]
        ]
    },
    {
        "id": "27e8896d7b824b64",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 74",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 706,
        "wires": []
    },
    {
        "id": "0decd3ca114017e7",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 75",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 1000,
        "wires": []
    },
    {
        "id": "77b481c203099e40",
        "type": "file",
        "z": "6aa904d67d2907b2",
        "name": "",
        "filename": "filePath",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "base64",
        "x": 400,
        "y": 1000,
        "wires": [
            [
                "0decd3ca114017e7"
            ]
        ]
    },
    {
        "id": "7729f1690ab76186",
        "type": "base64",
        "z": "6aa904d67d2907b2",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 490,
        "y": 880,
        "wires": [
            [
                "91cf7de891c0b1ee"
            ]
        ]
    },
    {
        "id": "91cf7de891c0b1ee",
        "type": "function",
        "z": "6aa904d67d2907b2",
        "name": "detectMimeType",
        "func": "// const LOCAL_PATH = env.get(\"LOCAL_PATH\")\nconst LOCAL_PATH = \"/Users/shravanpm/Downloads\"\n\nconst signatures = {\n    JVBERi0: \"application/pdf\",\n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"application/vnd.openxmlformats-officedocument.\",\n    PK: \"application/zip\",\n};\n\nlet filePath;\nlet fileName;\nlet extension;\n\nconst base64String = msg.payload;\n\nfor (let ext in signatures) {\n    const base64Sig = base64String.slice(0, ext.length)\n    if (base64Sig === ext) {\n        fileName = msg.fileId\n        extension = getExtension(ext)\n        filePath = `${LOCAL_PATH}/${\"fileName\"}.${\"zip\"}`\n    }\n}\n\n\nmsg.filePath = filePath\n\nconsole.log(fileName)\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 880,
        "wires": [
            [
                "77b481c203099e40"
            ]
        ]
    },
    {
        "id": "563227598a60c241",
        "type": "inject",
        "z": "84b812933a436af8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 460,
        "y": 360,
        "wires": [
            [
                "f500b3761004fa36"
            ]
        ]
    },
    {
        "id": "1f373ffc44f09238",
        "type": "http request",
        "z": "84b812933a436af8",
        "name": "readFile",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 840,
        "y": 360,
        "wires": [
            [
                "be27695051af519a"
            ]
        ]
    },
    {
        "id": "8ab9d6b38ac30338",
        "type": "debug",
        "z": "84b812933a436af8",
        "name": "debug 43",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 660,
        "wires": []
    },
    {
        "id": "fc69e978e3bcd95e",
        "type": "file",
        "z": "84b812933a436af8",
        "name": "write file",
        "filename": "filePath",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "base64",
        "x": 620,
        "y": 660,
        "wires": [
            [
                "8ab9d6b38ac30338"
            ]
        ]
    },
    {
        "id": "eab6a95d143141c8",
        "type": "function",
        "z": "84b812933a436af8",
        "name": "detectMimeType",
        "func": "// const LOCAL_PATH = env.get(\"LOCAL_PATH\")\nconst LOCAL_PATH = \"/Users/shravanpm/Downloads\"\n\nconst signatures = {\n    JVBERi0: \"application/pdf\",\n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"xlsx/xlsx\",\n    PK: \"application/zip\",\n};\n\nlet filePath;\nlet fileName;\nlet extension;\n\nconst base64String = msg.payload;\n\nfor (let ext in signatures) {\n    const base64Sig = base64String.slice(0, ext.length)\n    if (base64Sig === ext) {\n        fileName = \"docsss\"\n        extension = getExtension(ext)\n        filePath = `${LOCAL_PATH}/${\"fileName\"}.${\"pdf\"}`\n    }\n}\n\n\nmsg.filePath = filePath\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "f500b3761004fa36",
        "type": "function",
        "z": "84b812933a436af8",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\n\n// const fileId = \"5efaaa6b-0471-40d1-9f0f-b1729296faf4-AADHAR_BACK\"\nconst fileId = \"1f4f03e2-e977-43fe-82b5-1aca2adaf8a0-MISCELLANEOUS_DOCUMENT_ADDRESS_PROOF_FORM\"\n// const fileId = \"222eedef-cde8-4aab-8cc7-8debb609e64b-BANK_STATEMENT\"\n\nmsg.fileId = fileId\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/file/read/${fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 360,
        "wires": [
            [
                "1f373ffc44f09238"
            ]
        ]
    },
    {
        "id": "be27695051af519a",
        "type": "zip",
        "z": "84b812933a436af8",
        "name": "",
        "mode": "compress",
        "filename": "test.zip",
        "compressionlevel": 6,
        "outasstring": false,
        "x": 380,
        "y": 520,
        "wires": [
            [
                "108bfe5156f6cc24"
            ]
        ]
    },
    {
        "id": "108bfe5156f6cc24",
        "type": "base64",
        "z": "84b812933a436af8",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 270,
        "y": 600,
        "wires": [
            [
                "eab6a95d143141c8"
            ]
        ]
    },
    {
        "id": "70438d11b1e56c39",
        "type": "debug",
        "z": "84b812933a436af8",
        "name": "debug 76",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 460,
        "wires": []
    },
    {
        "id": "c10b4d098657f711",
        "type": "base64",
        "z": "84b812933a436af8",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 630,
        "y": 480,
        "wires": [
            [
                "70438d11b1e56c39"
            ]
        ]
    },
    {
        "id": "366b6f99fb1fcec0",
        "type": "inject",
        "z": "84b812933a436af8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 900,
        "wires": [
            [
                "27238a568feea36e"
            ]
        ]
    },
    {
        "id": "7c54786e2c6ca074",
        "type": "http request",
        "z": "84b812933a436af8",
        "name": "readFile",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 620,
        "y": 900,
        "wires": [
            [
                "83c776182b1939b9",
                "0950989ba9efded9"
            ]
        ]
    },
    {
        "id": "27238a568feea36e",
        "type": "function",
        "z": "84b812933a436af8",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\n\n// const fileId = \"5efaaa6b-0471-40d1-9f0f-b1729296faf4-AADHAR_BACK\"\n// const fileId = \"1f4f03e2-e977-43fe-82b5-1aca2adaf8a0-MISCELLANEOUS_DOCUMENT_ADDRESS_PROOF_FORM\"\n// const fileId = \"8e79976d-26b1-4e18-a458-244b3b0ed4a9-BANK_STATEMENT\"\nconst fileId = \"4c21b525-3709-4d23-8fb2-1a9b8efabee2-AADHAR_FRONT\"\nmsg.fileId = fileId\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/api/file/read/${fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 900,
        "wires": [
            [
                "7c54786e2c6ca074",
                "32a47838ddfe72e2"
            ]
        ]
    },
    {
        "id": "83c776182b1939b9",
        "type": "debug",
        "z": "84b812933a436af8",
        "name": "debug 77",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 900,
        "wires": []
    },
    {
        "id": "15c33e8fe19e62a8",
        "type": "function",
        "z": "84b812933a436af8",
        "name": "function 31",
        "func": "const JSZip = global.get(\"jszip\")\nconst fs = global.get('fs');\n\nconst zip = new JSZip();\n\ntry {\n    console.log(\"hjgsghjad\")\n    // const pdfData = fs.readFileSync('/Users/shravanpm/Downloads/bus oct 2021.pdf');\n    const pdfData  = msg.payload\n    \n    zip.file(\"PDFFile.pdf\", pdfData);\n    console.log({pdfData})\n    // zip.file(\"Textfile.txt\", \"Hello NodeJS\\n\");\n\n    // const images = [\"coding-science.jpg\", \"programming-languages.jpg\"];\n    // const img = zip.folder(\"images\");\n\n    // for (const image of images) {\n    //     const imageData = fs.readFileSync(image);\n    //     img.file(image, imageData);\n    // }\n\n    let result = zip.generateNodeStream({ type: 'nodebuffer', streamFiles: true })\n        // .pipe(fs.createWriteStream('sample.zip'))\n        .pipe(fs.createWriteStream('PDFFile.pdf'))\n        .on('finish', function (res) {\n            \n            \n            console.log(\"sample.zip written.\");\n        });\n\n        // console.log({result})\n\n    const test = fs.readFileSync('sample.zip');\n    // node.send({payload:test})\n    msg.payload = test\n    console.log({ test })\n} catch (err) {\n    console.error(err)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1000,
        "wires": [
            [
                "eef43beeeb4982dd"
            ]
        ]
    },
    {
        "id": "a3d778801f791f9d",
        "type": "debug",
        "z": "84b812933a436af8",
        "name": "debug 78",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 1000,
        "wires": []
    },
    {
        "id": "eef43beeeb4982dd",
        "type": "base64",
        "z": "84b812933a436af8",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 510,
        "y": 1000,
        "wires": [
            [
                "a3d778801f791f9d",
                "7290765312faeb0d"
            ]
        ]
    },
    {
        "id": "0950989ba9efded9",
        "type": "file",
        "z": "84b812933a436af8",
        "name": "write file",
        "filename": "/Users/shravanpm/Downloads/fileName.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "binary",
        "x": 560,
        "y": 1100,
        "wires": [
            [
                "fa8436ffe7cf3ed1"
            ]
        ]
    },
    {
        "id": "7290765312faeb0d",
        "type": "function",
        "z": "84b812933a436af8",
        "name": "detectMimeType",
        "func": "// const LOCAL_PATH = env.get(\"LOCAL_PATH\")\nconst LOCAL_PATH = \"/Users/shravanpm/Downloads\"\n\nconst signatures = {\n    JVBERi0: \"application/pdf\",\n    \n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"xlsx/xlsx\",\n    PK: \"application/zip\",\n};\n\nlet filePath;\nlet fileName;\nlet extension;\n\nconst base64String = msg.payload;\n\nfor (let ext in signatures) {\n    const base64Sig = base64String.slice(0, ext.length)\n    if (base64Sig === ext) {\n        fileName = \"docsss\"\n        extension = getExtension(ext)\n        filePath = `${LOCAL_PATH}/${\"fileName\"}.${extension}`\n    }\n}\n\n\nmsg.filePath = filePath\n\nconsole.log({filePath,extension})\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1100,
        "wires": [
            [
                "0950989ba9efded9"
            ]
        ]
    },
    {
        "id": "fa8436ffe7cf3ed1",
        "type": "debug",
        "z": "84b812933a436af8",
        "name": "debug 79",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 1100,
        "wires": []
    },
    {
        "id": "e48f244b873111e5",
        "type": "file in",
        "z": "84b812933a436af8",
        "name": "",
        "filename": "",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 440,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "33f190cf03adce07",
        "type": "inject",
        "z": "84b812933a436af8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 1260,
        "wires": [
            [
                "f527386241d0196a"
            ]
        ]
    },
    {
        "id": "43bd688c23c1969f",
        "type": "debug",
        "z": "84b812933a436af8",
        "name": "debug 225",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 1380,
        "wires": []
    },
    {
        "id": "f527386241d0196a",
        "type": "file in",
        "z": "84b812933a436af8",
        "name": "read",
        "filename": "/Users/shravanpm/Downloads/Holiday list.pdf",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 430,
        "y": 1260,
        "wires": [
            [
                "c0661b1558d6d168"
            ]
        ]
    },
    {
        "id": "c0661b1558d6d168",
        "type": "base64",
        "z": "84b812933a436af8",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 630,
        "y": 1260,
        "wires": [
            [
                "33dddb0822c29145"
            ]
        ]
    },
    {
        "id": "33dddb0822c29145",
        "type": "file",
        "z": "84b812933a436af8",
        "name": "write file",
        "filename": "/Users/shravanpm/Downloads/gfccg.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 380,
        "y": 1380,
        "wires": [
            [
                "43bd688c23c1969f"
            ]
        ]
    },
    {
        "id": "32a47838ddfe72e2",
        "type": "debug",
        "z": "84b812933a436af8",
        "name": "debug 249",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "url",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 840,
        "wires": []
    },
    {
        "id": "d188a7237d9a16df",
        "type": "inject",
        "z": "c458c3f61cf5894d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "f62adde18ea51a16"
            ]
        ]
    },
    {
        "id": "75a4f7593309a5e5",
        "type": "http request",
        "z": "c458c3f61cf5894d",
        "name": "readFile",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 540,
        "y": 120,
        "wires": [
            [
                "2cd4df085beffc92",
                "b6eb09c25ae2391d"
            ]
        ]
    },
    {
        "id": "f62adde18ea51a16",
        "type": "function",
        "z": "c458c3f61cf5894d",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\n\n// const fileId = \"5efaaa6b-0471-40d1-9f0f-b1729296faf4-AADHAR_BACK\"\nconst fileId = \"1f4f03e2-e977-43fe-82b5-1aca2adaf8a0-MISCELLANEOUS_DOCUMENT_ADDRESS_PROOF_FORM\"\n// const fileId = \"222eedef-cde8-4aab-8cc7-8debb609e64b-BANK_STATEMENT\"\n\nmsg.fileId = fileId\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/file/read/${fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 120,
        "wires": [
            [
                "75a4f7593309a5e5"
            ]
        ]
    },
    {
        "id": "2cd4df085beffc92",
        "type": "debug",
        "z": "c458c3f61cf5894d",
        "name": "debug 83",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 120,
        "wires": []
    },
    {
        "id": "b6eb09c25ae2391d",
        "type": "function",
        "z": "c458c3f61cf5894d",
        "name": "function 33",
        "func": "const JSZip = global.get(\"jszip\")\nconst fs = global.get('fs');\n\nconst zip = new JSZip();\n\ntry {\n    console.log(\"hjgsghjad\")\n    // const pdfData = fs.readFileSync('/Users/shravanpm/Downloads/bus oct 2021.pdf');\n    const pdfData  = msg.payload\n    \n    zip.file(\"PDFFile.pdf\", pdfData);\n    console.log({pdfData})\n    // zip.file(\"Textfile.txt\", \"Hello NodeJS\\n\");\n\n    // const images = [\"coding-science.jpg\", \"programming-languages.jpg\"];\n    // const img = zip.folder(\"images\");\n\n    // for (const image of images) {\n    //     const imageData = fs.readFileSync(image);\n    //     img.file(image, imageData);\n    // }\n\n    let result = zip.generateNodeStream({ type: 'nodebuffer', streamFiles: true })\n        // .pipe(fs.createWriteStream('sample.zip'))\n        .pipe(fs.createWriteStream('PDFFile.pdf'))\n        .on('finish', function (res) {\n            \n            \n            console.log(\"sample.zip written.\");\n        });\n\n        // console.log({result})\n\n    const test = fs.readFileSync('sample.zip');\n    // node.send({payload:test})\n    msg.payload = test\n    console.log({ test })\n} catch (err) {\n    console.error(err)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 220,
        "wires": [
            [
                "ed73b1c7b0200bd5"
            ]
        ]
    },
    {
        "id": "a27fbb9638b177c5",
        "type": "debug",
        "z": "c458c3f61cf5894d",
        "name": "debug 84",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 220,
        "wires": []
    },
    {
        "id": "ed73b1c7b0200bd5",
        "type": "base64",
        "z": "c458c3f61cf5894d",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 430,
        "y": 220,
        "wires": [
            [
                "a27fbb9638b177c5",
                "44faad76ee4176c8"
            ]
        ]
    },
    {
        "id": "44faad76ee4176c8",
        "type": "file",
        "z": "c458c3f61cf5894d",
        "name": "write file",
        "filename": "/Users/shravanpm/Downloads/fileNameTest.zip",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "base64",
        "x": 480,
        "y": 320,
        "wires": [
            [
                "0cae38af04a7bcda"
            ]
        ]
    },
    {
        "id": "bda931c547488d6f",
        "type": "function",
        "z": "c458c3f61cf5894d",
        "name": "detectMimeType",
        "func": "// const LOCAL_PATH = env.get(\"LOCAL_PATH\")\nconst LOCAL_PATH = \"/Users/shravanpm/Downloads\"\n\nconst signatures = {\n    JVBERi0: \"application/pdf\",\n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"xlsx/xlsx\",\n    PK: \"application/zip\",\n};\n\nlet filePath;\nlet fileName;\nlet extension;\n\nconst base64String = msg.payload;\n\nfor (let ext in signatures) {\n    const base64Sig = base64String.slice(0, ext.length)\n    if (base64Sig === ext) {\n        fileName = \"docsss\"\n        extension = getExtension(ext)\n        filePath = `${LOCAL_PATH}/${\"fileName\"}.${\"pdf\"}`\n    }\n}\n\n\nmsg.filePath = filePath\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 320,
        "wires": [
            [
                "44faad76ee4176c8"
            ]
        ]
    },
    {
        "id": "0cae38af04a7bcda",
        "type": "debug",
        "z": "c458c3f61cf5894d",
        "name": "debug 85",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 320,
        "wires": []
    },
    {
        "id": "84200e31b199b4cd",
        "type": "function",
        "z": "c458c3f61cf5894d",
        "name": "function 34",
        "func": "\n\nconst splitFile = global.get(\"splitFile\");\n\nsplitFile.splitFile('/Users/shravanpm/Downloads/bus oct 2021.pdf', 3)\n    .then((names) => {\n        console.log(names);\n    })\n    .catch((err) => {\n        console.log('Error: ', err);\n    });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 440,
        "wires": [
            [
                "a44d395b82ceea14"
            ]
        ]
    },
    {
        "id": "1a794ae26046a551",
        "type": "inject",
        "z": "c458c3f61cf5894d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 440,
        "wires": [
            [
                "84200e31b199b4cd"
            ]
        ]
    },
    {
        "id": "a44d395b82ceea14",
        "type": "debug",
        "z": "c458c3f61cf5894d",
        "name": "debug 86",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 440,
        "wires": []
    },
    {
        "id": "88c85528a49294de",
        "type": "e-mail",
        "z": "c458c3f61cf5894d",
        "server": "smtp-mail.outlook.com",
        "port": "587",
        "secure": false,
        "tls": true,
        "name": "mailsofshravan@gmail.com",
        "dname": "",
        "x": 600,
        "y": 540,
        "wires": []
    },
    {
        "id": "e767b703250fb0eb",
        "type": "inject",
        "z": "c458c3f61cf5894d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 540,
        "wires": [
            [
                "88c85528a49294de"
            ]
        ]
    },
    {
        "id": "4449234dc869ecea",
        "type": "inject",
        "z": "2c9b62ae02743e16",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 120,
        "wires": [
            [
                "a8c490dbc18a3152"
            ]
        ]
    },
    {
        "id": "8da14af8d4ced6b8",
        "type": "function",
        "z": "2c9b62ae02743e16",
        "name": "uploadFileReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\n\nconst token = flow.get(\"BNPL_TOKEN\")\n\nmsg.headers = {\n    \"content-type\": 'multipart/form-data',\n    Authorization: `Bearer ${token}`\n};\n\nmsg.url = `${ADMIN_URL}/api/file/upload`\nmsg.method = \"POST\"\nmsg.payload = {\n    \"file\": {\n        \"value\": msg.payload,\n        \"options\": {\n            \"filename\": 'DDS'\n        }\n    },\n    \"filename\": 'DDS'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 540,
        "wires": [
            [
                "707b28afc78d2a20"
            ]
        ]
    },
    {
        "id": "707b28afc78d2a20",
        "type": "http request",
        "z": "2c9b62ae02743e16",
        "name": "uploadFile",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 540,
        "wires": [
            [
                "702a5035fc9cc43f"
            ]
        ]
    },
    {
        "id": "702a5035fc9cc43f",
        "type": "debug",
        "z": "2c9b62ae02743e16",
        "name": "uploadFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 540,
        "wires": []
    },
    {
        "id": "3b5d25d1c07af5e2",
        "type": "function",
        "z": "2c9b62ae02743e16",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\nflow.set(\"BNPL_TOKEN\",msg.payload.idToken)\n// const fileId = \"5efaaa6b-0471-40d1-9f0f-b1729296faf4-AADHAR_BACK\"\n// const fileId = \"1f4f03e2-e977-43fe-82b5-1aca2adaf8a0-MISCELLANEOUS_DOCUMENT_ADDRESS_PROOF_FORM\"\n// const fileId = \"8e79976d-26b1-4e18-a458-244b3b0ed4a9-BANK_STATEMENT\"\nconst fileId = \"4c21b525-3709-4d23-8fb2-1a9b8efabee2-AADHAR_FRONT\"\nmsg.fileId = fileId\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/api/file/read/${fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 380,
        "wires": [
            [
                "131d20a21d4df331"
            ]
        ]
    },
    {
        "id": "131d20a21d4df331",
        "type": "http request",
        "z": "2c9b62ae02743e16",
        "name": "readFile",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 380,
        "y": 380,
        "wires": [
            [
                "8da14af8d4ced6b8"
            ]
        ]
    },
    {
        "id": "a8c490dbc18a3152",
        "type": "function",
        "z": "2c9b62ae02743e16",
        "name": "AuthenticateBNPLUserReq",
        "func": "const envVariables = global.get('envVariables')\nconst BNPL_USER = env.get('BNPL_USER')\nconst BNPL_USER_PASSWORD = env.get('BNPL_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": BNPL_USER_PASSWORD,\n    \"email\": BNPL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 220,
        "wires": [
            [
                "ed781aa879feab4e"
            ]
        ]
    },
    {
        "id": "ed781aa879feab4e",
        "type": "http request",
        "z": "2c9b62ae02743e16",
        "name": "AuthenticateBNPLUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 220,
        "wires": [
            [
                "3b5d25d1c07af5e2"
            ]
        ]
    },
    {
        "id": "fccbf73acba8d852",
        "type": "http request",
        "z": "fc1716ca544be1e5",
        "name": "readFile",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 540,
        "y": 180,
        "wires": [
            [
                "c8b238963d4eeafd"
            ]
        ]
    },
    {
        "id": "af4fe2ec79a4ef68",
        "type": "function",
        "z": "fc1716ca544be1e5",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\n\n// const fileId = \"5efaaa6b-0471-40d1-9f0f-b1729296faf4-AADHAR_BACK\"\n// const fileId = \"1f4f03e2-e977-43fe-82b5-1aca2adaf8a0-MISCELLANEOUS_DOCUMENT_ADDRESS_PROOF_FORM\"\nconst fileId = \"222eedef-cde8-4aab-8cc7-8debb609e64b-BANK_STATEMENT\"\n\nmsg.fileId = fileId\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/file/read/${fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 180,
        "wires": [
            [
                "fccbf73acba8d852"
            ]
        ]
    },
    {
        "id": "c8b238963d4eeafd",
        "type": "debug",
        "z": "fc1716ca544be1e5",
        "name": "debug 80",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 180,
        "wires": []
    },
    {
        "id": "c9a3c17e4e802aec",
        "type": "function",
        "z": "fc1716ca544be1e5",
        "name": "pdf-lib",
        "func": "const pdf = global.get('pdf')\nconst fs = global.get('fs');\nconst { PDFDocument } = pdf\n\nasync function splitFile() {\n    try {\n        const pdfBytes = fs.readFileSync('/Users/shravanpm/Downloads/traffic_pub_gen19.pdf');\n        const pdfDoc = await PDFDocument.load(pdfBytes);\n\n        const maxFileSizeInBytes = 1024 * 1024; // 1mb\n        const pageCount = pdfDoc.getPageCount();\n        let currentPageIndex = 0;\n        let currentFileSize = 0;\n        let count = 0\n        while (currentPageIndex < pageCount) {\n            let endIndex = currentPageIndex;\n            let newPdfDoc = await PDFDocument.create();\n\n            while (endIndex < pageCount) {\n                const [copiedPage] = await newPdfDoc?.copyPages(pdfDoc, [endIndex]);\n                // const [firstDonorPage] = await pdfDoc.copyPages(firstDonorPdfDoc, [0])\n                newPdfDoc.addPage(copiedPage);\n                console.log({ endIndex })\n                const pdfBytes = await newPdfDoc.save();\n                currentFileSize = pdfBytes.length;\n\n                endIndex++;\n\n                if (currentFileSize > maxFileSizeInBytes) {\n                    break;\n                }\n\n\n            }\n            count = count + 1\n            console.log({ count })\n           \n            const newPdfBytes = await newPdfDoc.save();\n\n            fs.writeFileSync(`/Users/shravanpm/Desktop/log/page${count}.pdf`, newPdfBytes);\n            currentPageIndex = endIndex;\n        }\n    } catch (error) {\n        console.log(\"error\",error)\n    };\n}\n\nsplitFile()\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 460,
        "wires": [
            [
                "84903dc9187f09d6"
            ]
        ]
    },
    {
        "id": "d50a5a9524c1d958",
        "type": "debug",
        "z": "fc1716ca544be1e5",
        "name": "debug 81",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 260,
        "wires": []
    },
    {
        "id": "0fc3dabc924f60d2",
        "type": "base64",
        "z": "fc1716ca544be1e5",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 430,
        "y": 280,
        "wires": [
            [
                "d50a5a9524c1d958",
                "1ffd5d957d54586d"
            ]
        ]
    },
    {
        "id": "ab702dd208980b3b",
        "type": "file",
        "z": "fc1716ca544be1e5",
        "name": "write file",
        "filename": "/Users/shravanpm/Downloads/fileNameTest.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 480,
        "y": 380,
        "wires": [
            [
                "aa96406e24f15f15"
            ]
        ]
    },
    {
        "id": "1ffd5d957d54586d",
        "type": "function",
        "z": "fc1716ca544be1e5",
        "name": "detectMimeType",
        "func": "// const LOCAL_PATH = env.get(\"LOCAL_PATH\")\nconst LOCAL_PATH = \"/Users/shravanpm/Downloads\"\n\nconst signatures = {\n    JVBERi0: \"application/pdf\",\n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"xlsx/xlsx\",\n    PK: \"application/zip\",\n};\n\nlet filePath;\nlet fileName;\nlet extension;\n\nconst base64String = msg.payload;\n\nfor (let ext in signatures) {\n    const base64Sig = base64String.slice(0, ext.length)\n    if (base64Sig === ext) {\n        fileName = \"docsss\"\n        extension = getExtension(ext)\n        filePath = `${LOCAL_PATH}/${\"fileName\"}.${\"txt\"}`\n    }\n}\n\n\nmsg.filePath = filePath\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 380,
        "wires": [
            [
                "ab702dd208980b3b"
            ]
        ]
    },
    {
        "id": "aa96406e24f15f15",
        "type": "debug",
        "z": "fc1716ca544be1e5",
        "name": "debug 82",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 380,
        "wires": []
    },
    {
        "id": "1877bc2695415c79",
        "type": "debug",
        "z": "fc1716ca544be1e5",
        "name": "debug 87",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "bytes",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 140,
        "y": 320,
        "wires": []
    },
    {
        "id": "bbb7817c9218b869",
        "type": "inject",
        "z": "fc1716ca544be1e5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 180,
        "wires": [
            [
                "af4fe2ec79a4ef68"
            ]
        ]
    },
    {
        "id": "753d3b8be5d37ae0",
        "type": "function",
        "z": "fc1716ca544be1e5",
        "name": "node-pdftk",
        "func": "const pdftk = global.get(\"pdftk\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "1f51b5e3e4caeae9",
        "type": "inject",
        "z": "fc1716ca544be1e5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 460,
        "wires": [
            [
                "c9a3c17e4e802aec"
            ]
        ]
    },
    {
        "id": "84903dc9187f09d6",
        "type": "debug",
        "z": "fc1716ca544be1e5",
        "name": "debug 88",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 460,
        "wires": []
    },
    {
        "id": "93f72a5ff7622e69",
        "type": "http request",
        "z": "fc1716ca544be1e5",
        "name": "readFile",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 460,
        "y": 720,
        "wires": [
            [
                "fbdf3da7701cd99c"
            ]
        ]
    },
    {
        "id": "671013b8b8947a0b",
        "type": "function",
        "z": "fc1716ca544be1e5",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\n\n// const fileId = \"5efaaa6b-0471-40d1-9f0f-b1729296faf4-AADHAR_BACK\"\n// const fileId = \"1f4f03e2-e977-43fe-82b5-1aca2adaf8a0-MISCELLANEOUS_DOCUMENT_ADDRESS_PROOF_FORM\"\nconst fileId = \"222eedef-cde8-4aab-8cc7-8debb609e64b-BANK_STATEMENT\"\n\nmsg.fileId = fileId\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/file/read/${fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 720,
        "wires": [
            [
                "93f72a5ff7622e69"
            ]
        ]
    },
    {
        "id": "c507c1ea1db4616d",
        "type": "debug",
        "z": "fc1716ca544be1e5",
        "name": "debug 227",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 820,
        "wires": []
    },
    {
        "id": "f45488b2433e0b95",
        "type": "inject",
        "z": "fc1716ca544be1e5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 720,
        "wires": [
            [
                "671013b8b8947a0b"
            ]
        ]
    },
    {
        "id": "d0851e0f7722cb8c",
        "type": "zip",
        "z": "fc1716ca544be1e5",
        "name": "Compress",
        "mode": "compress",
        "filename": "",
        "compressionlevel": "0",
        "outasstring": false,
        "x": 790,
        "y": 720,
        "wires": [
            [
                "ce3e48cb59e8aba4"
            ]
        ]
    },
    {
        "id": "50b706438450b8c4",
        "type": "file",
        "z": "fc1716ca544be1e5",
        "name": "write file",
        "filename": "/Users/shravanpm/Downloads/fileNameTest.zip",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "base64",
        "x": 400,
        "y": 820,
        "wires": [
            [
                "c507c1ea1db4616d"
            ]
        ]
    },
    {
        "id": "ce3e48cb59e8aba4",
        "type": "base64",
        "z": "fc1716ca544be1e5",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 170,
        "y": 820,
        "wires": [
            [
                "50b706438450b8c4"
            ]
        ]
    },
    {
        "id": "fbdf3da7701cd99c",
        "type": "function",
        "z": "fc1716ca544be1e5",
        "name": "function 160",
        "func": "msg.filename = \"functionName.pdf\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 720,
        "wires": [
            [
                "d0851e0f7722cb8c"
            ]
        ]
    },
    {
        "id": "bad214e123661042",
        "type": "inject",
        "z": "fc1716ca544be1e5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "0602a57e07bf064d",
        "type": "xlsx",
        "z": "fc1716ca544be1e5",
        "name": "",
        "sheets": "first",
        "multi": "one",
        "parse": "rows",
        "map": "",
        "x": 310,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "96d98bf5611b99e7",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "getBusinsessPartnerReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\n// console.log({ X_ACTYV_API_CONFIG_KEY, GO_URL })\nconst row = msg.payload\n\nmsg.url = `${GO_URL}/api/business-partner/service/XX${row[\"Pan Card\"]}XXX`\nmsg.method = 'GET'\nmsg.headers = {};\nmsg.headers['x-actyv-api-config-key'] = X_ACTYV_API_CONFIG_KEY;\n\nmsg.row = row\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1160,
        "wires": [
            [
                "9fa3adf21a3e09dd"
            ]
        ]
    },
    {
        "id": "9fa3adf21a3e09dd",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "getBusinessPartner",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 470,
        "y": 1160,
        "wires": [
            [
                "2d97946698b6174d",
                "b5b1dcf3cdea65e1"
            ]
        ]
    },
    {
        "id": "2d97946698b6174d",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "getBusinessPartner",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1160,
        "wires": []
    },
    {
        "id": "b5b1dcf3cdea65e1",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "getBankProductConfigReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\n\nflow.set('businessPartnerId', msg.payload._id)\n\nmsg.url = `${GO_URL}/api/bank-product-config/key/${BANK_PRODUCT_KEY}`\nmsg.method = 'GET'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1280,
        "wires": [
            [
                "3adc56c34d64ba36"
            ]
        ]
    },
    {
        "id": "3adc56c34d64ba36",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "getBankProductConfig",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 460,
        "y": 1280,
        "wires": [
            [
                "2b2bff84df2281fb",
                "8c0e426c5fece3fe"
            ]
        ]
    },
    {
        "id": "2b2bff84df2281fb",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "getAllBankApplicationReq",
        "func": "const GO_URL = env.get('GO_URL')\n\nconst businessPartnerId = flow.get('businessPartnerId') || \"\"\n\nflow.set('bankProductConfigId', msg.payload.id)\nconst bankId = msg.payload.bank\nmsg.bankId = bankId\nmsg.enterpriseId = msg.payload.allowedEnterprises[0]\n\nmsg.url = `${GO_URL}/api/bank-application?bankID=${bankId}&businessPartner=${businessPartnerId}&bankProductConfigKey=${msg.payload.id}`\nconsole.log(\"URL\",msg.url)\nmsg.method = 'GET'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1380,
        "wires": [
            [
                "3f3b20a915cc4d0e"
            ]
        ]
    },
    {
        "id": "8c0e426c5fece3fe",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "getBankProduct",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 1280,
        "wires": []
    },
    {
        "id": "3f3b20a915cc4d0e",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "getAllBankApplication",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 460,
        "y": 1380,
        "wires": [
            [
                "8d91d1144fa961c7",
                "f7b8aff814cbb834"
            ]
        ]
    },
    {
        "id": "8d91d1144fa961c7",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "updateBankApplicationStatusReq",
        "func": "const GO_URL = env.get('GO_URL')\n\nconst token = flow.get(\"token\")\n\nmsg.url = `${GO_URL}/api/bank-application/decision/update`\nmsg.method = 'POST'\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.payload = {\n    remarks: msg.row[\"Reason For rejection\"], // actual message\n    // remarks: \"APPROVE\", // actual message\n    decision: {\n        label: msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? \"Approve\" : \"Reject\",\n        value: msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? \"APPROVE\" : \"REJECT\",\n        // value: false ? \"APPROVE\" : \"REJECT\",\n        variableName: \"bankapprover_action\",\n        actionType: \"DECISION\",\n    },\n    bankApplicationId: msg.payload[0]._id || \"63fc9febc7d9bb697685ab4a\",\n    correctionItems: {\n        documentIds: [],\n    },\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1560,
        "wires": [
            [
                "801fd995f2e8ff63"
            ]
        ]
    },
    {
        "id": "f7b8aff814cbb834",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "getAllBankApplications",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 1380,
        "wires": []
    },
    {
        "id": "801fd995f2e8ff63",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "updateBankApplicationStatus",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 490,
        "y": 1560,
        "wires": [
            [
                "9f0213676e1804f9",
                "d7eb43486e56b9c9"
            ]
        ]
    },
    {
        "id": "9f0213676e1804f9",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "debug 235",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1500,
        "wires": []
    },
    {
        "id": "d7eb43486e56b9c9",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "createLoanTermReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst bankAccount = flow.get(\"bankAccount\") || {}\n\nconst bankDetails = flow.get('bankDetails') || {}\nconst businessPartnerId = flow.get('businessPartnerId')\n\n\nconst enterpriseID = msg.enterpriseId\nconst bankId = msg.bankId\n\nconst row = msg.row\n\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.headers = {\n        Authorization: `Bearer ${actyvToken}`\n}\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms`\nmsg.method = 'POST'\n\nmsg.payload = {\n        bankID: bankId,\n        borrowerID: businessPartnerId,\n        enterpriseID,\n        productType: \"BNPL\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1700,
        "wires": [
            [
                "0456f1f1bb30bb5f"
            ]
        ]
    },
    {
        "id": "0456f1f1bb30bb5f",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "createLoanTerm",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 460,
        "y": 1700,
        "wires": [
            [
                "45e2ae4877c62511",
                "411a7c42864ac576"
            ]
        ]
    },
    {
        "id": "45e2ae4877c62511",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "debug 236",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 1700,
        "wires": []
    },
    {
        "id": "411a7c42864ac576",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "updateLoanTermReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst row = msg.row\n\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.headers = {\n        Authorization: `Bearer ${actyvToken}`,\n        \"x-actyv-api-config\":X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/service/update`\nmsg.method = 'PATCH',\n\nmsg.payload = {\n        loanTermsID: msg.payload.id,\n        approvedLimit: msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? row[\"Sanction amount\"] : 0,\n        // loanAmount: row[\"Loan Accepted Amount\"],\n        loanAmount: 0,\n        crnNumber: row[\"Dealer Code\"],\n        validTill: msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? calculateValidTill(row[\"Updated Date\"]) : \"\",\n        loanGrantStatus: msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? \"APPROVED\" : \"REJECTED\",\n        bankProvidedLoanCodes: msg.row[\"Loan Account No\"]\n}\n\nfunction calculateValidTill(inputDate){\n        let date = inputDate\n        let split = date.split(\"/\")\n        let addOneYear = Number(split[split.length - 1]) + 1\n        split[split.length - 1] = addOneYear\n        let joined = split.join('-')\n        return joined\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1820,
        "wires": [
            [
                "5e037c3cb5e2feb0"
            ]
        ]
    },
    {
        "id": "5e037c3cb5e2feb0",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "updateLoanTerm",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 470,
        "y": 1820,
        "wires": [
            [
                "d813b4aabd7040bc"
            ]
        ]
    },
    {
        "id": "d813b4aabd7040bc",
        "type": "switch",
        "z": "c8388b64545e95b6",
        "name": "",
        "property": "row[\"Loan Approved (Y/N)\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "N",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Y",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 1820,
        "wires": [
            [
                "924d4ff38e8b161d"
            ],
            [
                "bdb757d73d66b370"
            ]
        ]
    },
    {
        "id": "924d4ff38e8b161d",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "debug 237",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 1800,
        "wires": []
    },
    {
        "id": "bdb757d73d66b370",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "createTernorAndRateSpreadReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst bankAccount = flow.get(\"bankAccount\") || {}\nconst bankDetails = flow.get('bankDetails') || {}\nconst benchmarkRateID = flow.get(\"benchmarkRateID\") || \"\"\n\nconsole.log(\"benchmarkRateID\", benchmarkRateID)\n\nconst bankId = msg.bankId\n\nconst row = msg.row\n\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.headers = {\n        Authorization: `Bearer ${actyvToken}`,\n        bankid:bankId\n}\n\nmsg.url = `${PAYLATER_URL}/v1/tenor-and-rate-spread`\nmsg.method = 'POST'\nmsg.payload = {\n        bankID: bankId,\n        loanID: msg.payload.id,\n        fromDuration: \"P0D\",\n        benchmarkRateID: benchmarkRateID,\n        toDuration: \"P45D\",\n        loanProductID: \"BNPL\",\n        bankSpread: row[\"ROI\"],\n        actyvSpread: 1,\n        additionalCashbackCodes: []\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1920,
        "wires": [
            [
                "2e506a1a40e1bddb"
            ]
        ]
    },
    {
        "id": "2e506a1a40e1bddb",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "createTenorAndRateSpread",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 480,
        "y": 1920,
        "wires": [
            [
                "bca40386f64a4687",
                "702410267a4fd5a9"
            ]
        ]
    },
    {
        "id": "bca40386f64a4687",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "setTenorAndRateSpreadId",
        "func": "flow.set(\"tenorAndRateSpreadId\",msg.payload.id)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1920,
        "wires": [
            [
                "103d024432c5abf3"
            ]
        ]
    },
    {
        "id": "702410267a4fd5a9",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "createBusinessRelationship(D-B)Req",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst bankAccount = flow.get(\"bankAccount\") || {}\nconst bankDetails = flow.get('bankDetails') || {}\n\nconst {  bankAccountNo,\n        bankIfsc,\n        bankName, } = bankAccount\n\nconst enterpriseId = msg.enterpriseId\nconst bankId = msg.bankId\nconst businessPartnerId = flow.get('businessPartnerId') || \"\"\n\nconst row = msg.row\n\nmsg.url = `${GO_URL}/business-relationship/service`\nmsg.method = 'POST'\nmsg.headers = {};\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = {\n        businessId: businessPartnerId,\n        parentBusinessId: enterpriseId,\n        identifierByParent: row[\"Dealer Code\"],\n        bankAccountNumber: bankAccountNo,\n        bankIFSC: bankIfsc,\n        bankName: bankName,\n        relationType: \"DISTRIBUTOR-BANK\"\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 2060,
        "wires": [
            [
                "7e77bd149a2b15a3"
            ]
        ]
    },
    {
        "id": "103d024432c5abf3",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "debug 238",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 1920,
        "wires": []
    },
    {
        "id": "7e77bd149a2b15a3",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "createBusinessRelationship(D-B)",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 500,
        "y": 2060,
        "wires": [
            [
                "b16584432ce9a7c9"
            ]
        ]
    },
    {
        "id": "b16584432ce9a7c9",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "createBusinessRelationship(D-B)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 2060,
        "wires": []
    },
    {
        "id": "64a93ca2489e5e51",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "Loop",
        "func": "\n\nfor(let row of msg.payload){\n\nnode.send({\n    payload:row,\n    isComplete : \"false\"\n});\n}\n\nmsg.isComplete = \"true\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 1020,
        "wires": [
            [
                "3b6efcdb3409acdf"
            ]
        ]
    },
    {
        "id": "3b6efcdb3409acdf",
        "type": "switch",
        "z": "c8388b64545e95b6",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 1020,
        "wires": [
            [],
            [
                "96d98bf5611b99e7"
            ]
        ]
    },
    {
        "id": "bc182e6c9cb87c64",
        "type": "node-red-contrib-graph-oauth-login",
        "z": "c8388b64545e95b6",
        "name": "",
        "scope": "https://graph.microsoft.com/.default",
        "redirecturi": "",
        "code": "",
        "encoding": false,
        "logintype": "Application",
        "refreshtimer": "10",
        "x": 130,
        "y": 420,
        "wires": [
            [
                "0a60278894a31394"
            ]
        ]
    },
    {
        "id": "a8de946bf9850971",
        "type": "inject",
        "z": "c8388b64545e95b6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "0a60278894a31394",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "Get All Messages",
        "func": "let data=msg.payload;\nflow.set(\"token\",msg.at);\n// let userID=\"User Id from microsoft Graph\"\n\nlet userID = env.get(\"OUTLOOKUSERID\")\nlet sender =\"from:gargayush456@gmail.com\"\n\n\n\nconsole.log({token:msg.at})\n\n// msg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages?$search=\"from:ramu.bugudi@actyv.com\"`\nmsg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages?$search=\"from:mshravan142@gmail.com\"`\n// msg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages?$filter=Subject in 'lead push' and importance eq 'normal'&$orderby=subject,importance,receivedDateTime desc`\nmsg.method=\"GET\";\nmsg.headers={\n    // \"Authorization\":`${data.access_token}`\n    \"Authorization\": `${msg.at}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 420,
        "wires": [
            [
                "113e28cbd1472770"
            ]
        ]
    },
    {
        "id": "113e28cbd1472770",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 390,
        "y": 500,
        "wires": [
            [
                "9c73c8d7b5a7fbfb"
            ]
        ]
    },
    {
        "id": "9e07c5b5a40947a6",
        "type": "inject",
        "z": "c8388b64545e95b6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 200,
        "wires": [
            [
                "701ea1cfddbf0260"
            ]
        ]
    },
    {
        "id": "7e2fafd53187b004",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "Searching Attachment",
        "func": "let data = msg.payload;\nlet token=flow.get(\"token\");\nflow.set(\"msg\",data);\nlet userID = env.get(\"OUTLOOKUSERID\")\n// msg.url = `https://graph.microsoft.com/v1.0/users/1870cd49-a831-4b52-ba5e-b680441f9f70/messages/${data.id}/attachments`\nmsg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages/${data.id}/attachments`\n\nmsg.method = \"GET\";\nmsg.headers = {\n    // \"Authorization\": `${token.access_token}`\n    \"Authorization\": `${token}`\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 640,
        "wires": [
            [
                "2e3c729878e92353"
            ]
        ]
    },
    {
        "id": "2e3c729878e92353",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 640,
        "wires": [
            [
                "83673e1b9559aace",
                "e29c88dec3870a8d"
            ]
        ]
    },
    {
        "id": "83673e1b9559aace",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "debug 245",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 640,
        "wires": []
    },
    {
        "id": "9c73c8d7b5a7fbfb",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "each Msg",
        "func": "// let data=msg.payload;\nlet data = msg.payload.value;\n\n// console.log({valubhchnve:msg.value})\n\n\n// let parsedData = msg.payload.value\n// console.log(\"dsfd\", parsedData)\nfor (let index = 0; index < data.length; index++) {\n    // console.log(\"dhvhsgav\",data[index])\n    node.send({payload:data[index]});\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 500,
        "wires": [
            [
                "7e2fafd53187b004"
            ]
        ]
    },
    {
        "id": "f69b26a2f9d52e38",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "debug 246",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 880,
        "wires": []
    },
    {
        "id": "44a8720b112fbbc7",
        "type": "book",
        "z": "c8388b64545e95b6",
        "name": "",
        "raw": false,
        "x": 150,
        "y": 880,
        "wires": [
            [
                "70f911c713eeadbe"
            ]
        ]
    },
    {
        "id": "70f911c713eeadbe",
        "type": "sheet",
        "z": "c8388b64545e95b6",
        "name": "",
        "sheetName": "Sheet1",
        "x": 290,
        "y": 880,
        "wires": [
            [
                "0578820f894f482b"
            ]
        ]
    },
    {
        "id": "0578820f894f482b",
        "type": "sheet-to-json",
        "z": "c8388b64545e95b6",
        "name": "",
        "raw": "false",
        "range": "",
        "header": "default",
        "blankrows": false,
        "x": 490,
        "y": 880,
        "wires": [
            [
                "f69b26a2f9d52e38",
                "64a93ca2489e5e51"
            ]
        ]
    },
    {
        "id": "e29c88dec3870a8d",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "function 162",
        "func": "let data=msg.payload;\n\nmsg.payload = data.value[0].contentBytes.toString();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 740,
        "wires": [
            [
                "f9d25bef865b2f3e"
            ]
        ]
    },
    {
        "id": "f9d25bef865b2f3e",
        "type": "base64",
        "z": "c8388b64545e95b6",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 760,
        "y": 740,
        "wires": [
            [
                "44a8720b112fbbc7"
            ]
        ]
    },
    {
        "id": "26bf47bca542c04f",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 280,
        "wires": [
            [
                "bc182e6c9cb87c64"
            ]
        ]
    },
    {
        "id": "2fb5df234f8e402e",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "AuthenticateBNPLUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 280,
        "wires": [
            [
                "26bf47bca542c04f"
            ]
        ]
    },
    {
        "id": "701ea1cfddbf0260",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "AuthenticateBNPLUserReq",
        "func": "// const envVariables = global.get('envVariables')\nconst BNPL_USER = env.get('BNPL_USER')\nconst BNPL_USER_PASSWORD = env.get('BNPL_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": BNPL_USER_PASSWORD,\n    \"email\": BNPL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 280,
        "wires": [
            [
                "2fb5df234f8e402e",
                "5d1860af97196436"
            ]
        ]
    },
    {
        "id": "5d1860af97196436",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "debug 247",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 200,
        "wires": []
    },
    {
        "id": "4a5967710ee356b2",
        "type": "comment",
        "z": "c8388b64545e95b6",
        "name": "hardcoded bank applicationId",
        "info": "",
        "x": 320,
        "y": 1520,
        "wires": []
    }
]