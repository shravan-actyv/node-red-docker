[
    {
        "id": "62bce85b962c1ba4",
        "type": "tab",
        "label": "IIFL drawdown",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "996aaae174a57dd4",
        "type": "tab",
        "label": "IIFL REPAYMENT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "61062284bea26a85",
        "type": "tab",
        "label": "IIFL Loan Level Status Update",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e8842e93c37e68d3",
        "type": "tab",
        "label": "IIFL Lead Push",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "09338278a6827f06",
        "type": "tab",
        "label": "IIFL leadPush Nach completed",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6aa904d67d2907b2",
        "type": "tab",
        "label": "Download file",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "84b812933a436af8",
        "type": "tab",
        "label": "Download file",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c458c3f61cf5894d",
        "type": "tab",
        "label": "split file",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fc1716ca544be1e5",
        "type": "tab",
        "label": "Download And Zip",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c072707ead15851f",
        "type": "tab",
        "label": "IIFL Wait Esign And create loan term",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c8388b64545e95b6",
        "type": "tab",
        "label": "TC Response for leadpush",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fb44a60890b22361",
        "type": "tab",
        "label": "SMS to notify nach",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2659280b75890366",
        "type": "tab",
        "label": "Raise Nach Req",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "32607aaaf853d8ed",
        "type": "tab",
        "label": "Axis - Maturity report",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dca724589f9513c8",
        "type": "tab",
        "label": "Axis - Utilization report",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "79f42ae3a90a4604",
        "type": "tab",
        "label": "Axis Lead push",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f5c81779c63cb9e6",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ad42c8b5ca08905f",
        "type": "tab",
        "label": "Update TRS (Tenor and Rate Spread)",
        "disabled": false,
        "info": "Update new tenor and rate spread in BNPL preference",
        "env": []
    },
    {
        "id": "6438b3204074b24c",
        "type": "tab",
        "label": "Axis tentativie limit",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b77a80e15cf9f8c6",
        "type": "tab",
        "label": "Flow 4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5bf29b5d3a6e7fb3",
        "type": "tab",
        "label": "Nivea Enterprise Connect",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a29923d1b01e690c",
        "type": "tab",
        "label": "latest maturity report",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "58e110d7c2bbe19a",
        "type": "tab",
        "label": "utilization report by email",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e546fa9119a2d093",
        "type": "tab",
        "label": "GoSeedingBase",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ced2a26ef4f97d80",
        "type": "tab",
        "label": "BNPL Seeding Updating",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "46bc40aaa70da7e7",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e85847ac8c3405fe",
        "type": "tab",
        "label": "Verification",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4da9cf371ae8419b",
        "type": "tab",
        "label": "change go seeding",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0cbd918f05921aae",
        "type": "subflow",
        "name": "Axios",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "f5135a3098c39671"
                    },
                    {
                        "id": "cf46fc37499c5b2e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 80,
                "wires": [
                    {
                        "id": "f5135a3098c39671",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "responseType",
                "type": "str",
                "value": "json"
            }
        ],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-life-bouy",
        "status": {
            "x": 300,
            "y": 240,
            "wires": [
                {
                    "id": "cf46fc37499c5b2e",
                    "port": 0
                },
                {
                    "id": "d268c12bb7353110",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "951a533bb3498fe6",
        "type": "subflow",
        "name": "Logger",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 220,
                "wires": [
                    {
                        "id": "3f661de354f47776"
                    },
                    {
                        "id": "e4215efc1acec389"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 460,
                "y": 260,
                "wires": [
                    {
                        "id": "e4215efc1acec389",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "icon": "node-red/debug.svg"
    },
    {
        "id": "9c6db570ab89ba16",
        "type": "subflow",
        "name": "update file status",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 140,
                "wires": [
                    {
                        "id": "9e546c06d8ce037c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 560,
                "wires": [
                    {
                        "id": "8907c34638902cf1",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#FDF0C2"
    },
    {
        "id": "330045778eef98cf",
        "type": "group",
        "z": "32607aaaf853d8ed",
        "name": "Move file SFTP",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "110afad24fd8188c",
            "dd9a74d8f33afc5b",
            "9572b589acd33875",
            "80292021a81a8a72"
        ],
        "x": 304,
        "y": 459
    },
    {
        "id": "c61f6fd5ccf5ede8",
        "type": "group",
        "z": "dca724589f9513c8",
        "name": "Move file SFTP",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "9e89c0628dae798d",
            "ab60355897d8a01d",
            "ce2076e6cdd3b758",
            "45b8eb1406dfc508"
        ],
        "x": 11.142822265625,
        "y": 491.8571472167969
    },
    {
        "id": "28b29c9f1aa1a2d3",
        "type": "group",
        "z": "62bce85b962c1ba4",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true
        },
        "nodes": [],
        "x": 234,
        "y": 2239
    },
    {
        "id": "395878a351894d59",
        "type": "group",
        "z": "62bce85b962c1ba4",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true
        },
        "nodes": [],
        "x": 924,
        "y": 2559
    },
    {
        "id": "28df55e7a361e197",
        "type": "group",
        "z": "ced2a26ef4f97d80",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "63f280a67f79ac66",
            "ed5825176bd9fc8e",
            "1c2f0496c7bc6466",
            "3789fb2fd858e425",
            "274950bd79f3474f",
            "e890773239f9acac",
            "d6a0411041bdb589",
            "4cb69be7e4f48182",
            "3535ab03aafd4358"
        ],
        "x": 344,
        "y": 1559
    },
    {
        "id": "93fe5307bc4762c3",
        "type": "group",
        "z": "ced2a26ef4f97d80",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true
        },
        "nodes": [
            "19b29090b9a70c40",
            "71f26c0e1f8fad42",
            "cef5adcc7e91d25c",
            "bc1963a56b571703",
            "a140de239e0421a1",
            "f0141033b31aea8c",
            "d2113b7ce3c1dadf"
        ],
        "x": 274,
        "y": 1919
    },
    {
        "id": "4d2788302b21251a",
        "type": "group",
        "z": "ced2a26ef4f97d80",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true
        },
        "nodes": [
            "be07fd207670da4a",
            "63818f2da050c30e",
            "bfbeeaf036fc2740",
            "41316525dcc1cf41",
            "e366cbcd386837e1",
            "3316790d275b93bf",
            "cd4c10d01f090c6f",
            "2f3757e690577221",
            "63747b6725757db2",
            "36da4c1579934909",
            "bb04036c4186958e",
            "2015a2f8936088d2",
            "556f6a9a6eac7ea2",
            "6734c4e3e7d72467"
        ],
        "x": 174,
        "y": 2179
    },
    {
        "id": "93fb9229bcd9bcd6",
        "type": "group",
        "z": "ced2a26ef4f97d80",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true
        },
        "nodes": [
            "153face4af99e128",
            "72c1569f3eeefc5c",
            "737828aa9a9921a3",
            "00baff346ee0b259",
            "8cf22f3bbd1217cf",
            "035172bd95bd9f1c",
            "4893b32644bc4cdd"
        ],
        "x": 864,
        "y": 2499
    },
    {
        "id": "dc64955919fe19cf",
        "type": "group",
        "z": "e85847ac8c3405fe",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "6f15bf766bd12c08",
            "e41cc43dae18adfe",
            "a043445408d86571",
            "628a8998f42b6052",
            "0f25d6e6d94a7e0d",
            "3a8f4e19e7283f04",
            "8be7f0961948cf85",
            "8d5ac1fddc3f9236",
            "2b0fa9dcdb7f0b96",
            "daaff4dfd94f8e71",
            "c6ef0b15ad9dac33",
            "47d9d5700be81b1b",
            "136f04db2c3fbb8d"
        ],
        "x": 224,
        "y": 1119
    },
    {
        "id": "8cfefe96b6c823a7",
        "type": "group",
        "z": "e85847ac8c3405fe",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true
        },
        "nodes": [
            "5d522b92d1e80319",
            "8983099b8176c964",
            "4abe3720557458e3",
            "47a483a81ffc868b",
            "36b3ada9f1f98b29",
            "c8fc569f224813b4",
            "3f664a2fc2393923",
            "4a787803266e19ff",
            "1b1decfe115033d0",
            "693639d732c2a674"
        ],
        "x": 874,
        "y": 1679
    },
    {
        "id": "d35d5d3072cd06fb",
        "type": "group",
        "z": "e85847ac8c3405fe",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true
        },
        "nodes": [
            "ee22802dff03a0d7",
            "af96e8892128dcab",
            "3898a644c2953717",
            "7f19a41d6bbbb5e1",
            "b9c719b0382b06e9",
            "21617460e950ef83",
            "7fbdbfe068c3c34c",
            "de2fbb7ebb05d02e",
            "0c2b634090b27e87",
            "e02f1f37c2d87077",
            "8d4733523365b76e",
            "dd39442e581e2014",
            "bbf511d8fc4a756a",
            "6afef67c304aeda0",
            "96db78e1bb5a39f4",
            "c06c662c110d9a05",
            "0116a9f867a05327",
            "f58abea0475d695e"
        ],
        "x": 594,
        "y": 2159
    },
    {
        "id": "89e23a4b656bb16d",
        "type": "group",
        "z": "e85847ac8c3405fe",
        "name": "",
        "style": {
            "fill": "#3f93cf",
            "label": true
        },
        "nodes": [
            "9186d68940e05f6a",
            "eb41dce1e0f37a8f",
            "da1a91bd467ff1fa",
            "708bace8714594ef",
            "2e73c6518d6be371",
            "a88e6a5dfd1f264e",
            "023443ad11220cde",
            "9b476196ef49981c",
            "0413856805265935",
            "30809dbb220998f2",
            "14255c8859b137ae",
            "8bc2ab516a6ed6c8"
        ],
        "x": 524,
        "y": 2639
    },
    {
        "id": "3dba22b286b032b4",
        "type": "SFTP-credentials",
        "host": "43.204.74.60",
        "port": "22",
        "username": "apl_uat_sftp",
        "password": "14UiqD1LvPobOpZIC8"
    },
    {
        "id": "5d210162c7877d54",
        "type": "aws-config"
    },
    {
        "id": "2e225edb63763603",
        "type": "chronos-config",
        "name": "",
        "timezone": "",
        "sunPositions": []
    },
    {
        "id": "e890793010d7a406",
        "type": "SFTP-credentials",
        "host": "43.204.74.60",
        "port": "22",
        "username": "apl_uat_sftp",
        "password": "14UiqD1LvPobOpZIC8"
    },
    {
        "id": "d4942248b841ce28",
        "type": "SFTP-credentials",
        "host": "43.204.74.60",
        "port": "22",
        "username": "tata_uat_sftp",
        "password": "QLYEe4B7eRCPjqm2fntn"
    },
    {
        "id": "e3cfc177798d2d62",
        "type": "SFTP-credentials",
        "host": "s2fs.axisbank.com",
        "port": "22",
        "username": "Actyv_Onbaording",
        "password": "Happy@2022"
    },
    {
        "id": "015617f7b1e92c5e",
        "type": "SFTP-credentials",
        "host": "43.204.74.60",
        "port": "22",
        "username": "tata_uat_sftp",
        "password": "QLYEe4B7eRCPjqm2fntn"
    },
    {
        "id": "ec0eb0d718c8abe0",
        "type": "SFTP-credentials",
        "host": "s2fs.axisbank.com",
        "port": "22",
        "username": "DBATActyv_Transaction",
        "password": "Newindia@2022"
    },
    {
        "id": "9120915a93d43166",
        "type": "SSH-SFTP-credentials",
        "host": "43.204.74.60",
        "port": "22",
        "username": "apl_uat_sftp",
        "password": "14UiqD1LvPobOpZIC8"
    },
    {
        "id": "41941cb5b48f7a71",
        "type": "SFTP-credentials",
        "host": "127.0.0.1",
        "port": "22",
        "username": "",
        "password": ""
    },
    {
        "id": "dadbdab7c6a32790",
        "type": "SSH-SFTP-credentials",
        "host": "{{host}}",
        "port": "22",
        "username": "{{username}}",
        "password": "{{password}}"
    },
    {
        "id": "a0e863bf6c443264",
        "type": "chronos-config",
        "name": "",
        "timezone": "",
        "sunPositions": []
    },
    {
        "id": "60d47eb81626fb0d",
        "type": "SSH-SFTP-credentials",
        "host": "127.0.0.1",
        "port": "22",
        "username": "",
        "password": ""
    },
    {
        "id": "2d3d7df6c65235a6",
        "type": "SFTP-credentials",
        "host": "s2fs.axisbank.com",
        "port": "22",
        "username": "Actyv_Onbaording",
        "password": "Happy@2022"
    },
    {
        "id": "8713902662c7b8a4",
        "type": "SFTP-credentials",
        "host": "43.204.74.60",
        "port": "22",
        "username": "tata_uat_sftp",
        "password": "QLYEe4B7eRCPjqm2fntn"
    },
    {
        "id": "35040c3d6c72a137",
        "type": "SSH-SFTP-credentials",
        "host": "43.204.74.60",
        "port": "22",
        "username": "apl_uat_sftp",
        "password": "14UiqD1LvPobOpZIC8"
    },
    {
        "id": "d25de1b6f4850991",
        "type": "SSH-SFTP-credentials",
        "host": "43.204.74.60",
        "port": "22",
        "username": "apl_uat_sftp",
        "password": "14UiqD1LvPobOpZIC8"
    },
    {
        "id": "f5135a3098c39671",
        "type": "function",
        "z": "0cbd918f05921aae",
        "name": "axios",
        "func": "\nasync function callApi(msg){\n\n    try {\n        node.status({fill:\"blue\",shape:\"ring\",text:\"requesting\"});\n       let data = await axios({\n            url: msg.url,\n            data: msg.payload,\n            headers: msg.headers,\n            method: msg.method,\n            // responseType: msg.responseType\n        })\n        node.send({...msg,responseType:\"json\",payload:data?.data})\n   \n  \n        node.status({fill:\"green\",shape:\"ring\",text:\"completed\"});\n    } catch (error) {\n        \n        node.send({...msg,payload:error})\n        \n        // node.done()\n        node.status({fill:\"red\",shape:\"ring\",text:\"failed\"});\n        node.error(\"Axios error\",{error:error.response?.data,...msg});\n    };\n}\ncallApi(msg)\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "axios",
                "module": "axios"
            }
        ],
        "x": 250,
        "y": 80,
        "wires": [
            [
                "d268c12bb7353110"
            ]
        ]
    },
    {
        "id": "cf46fc37499c5b2e",
        "type": "function",
        "z": "0cbd918f05921aae",
        "name": "function 218",
        "func": "msg.payload = \"Initiated\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "d268c12bb7353110",
        "type": "function",
        "z": "0cbd918f05921aae",
        "name": "function 219",
        "func": "msg.payload = \"completed\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "3f661de354f47776",
        "type": "function",
        "z": "951a533bb3498fe6",
        "name": "logger",
        "func": "const date = new Date().toISOString()\nconst flowName = env.get(\"NR_FLOW_NAME\")\nconst nodeName = env.get(\"NR_NODE_NAME\")\n\nlet log = `${msg.loggerNewLine ? `\\n*************************************************************************************************\\n\\n` : \"\" } ${date}: flow_name:\"${flowName}\", ${msg.logger ? `,logger: ${JSON.stringify(msg.logger)}` : \"\" } Payload: ${JSON.stringify(msg.payload)}${msg.error ? `,${JSON.stringify(msg.error)}` : \"\"} \\n\\n`\n// log = JSON.stringify(JSON.parse(JSON.stringify(log)));\n// console.log(log)\nmsg.payload = log;\nlet dates = date.split(\"T\")[0]\nmsg.filename = `/Users/shravanpm/Desktop/Enterprises/logs_${dates}.txt`\ndelete msg.logger\ndelete msg.loggerNewLine\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 180,
        "wires": [
            [
                "e55513515433c2d0"
            ]
        ]
    },
    {
        "id": "e55513515433c2d0",
        "type": "file",
        "z": "951a533bb3498fe6",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 380,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "e4215efc1acec389",
        "type": "function",
        "z": "951a533bb3498fe6",
        "name": "function 186",
        "func": "delete msg.logger\ndelete msg.loggerNewLine\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "55d9a5a1e6e5413d",
        "type": "function",
        "z": "9c6db570ab89ba16",
        "name": "uploadFileReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\n\nconst token = msg.actyvToken\nconsole.log({token})\nmsg.headers = {\n    \"content-type\": 'multipart/form-data',\n    Authorization: `Bearer ${token}`\n};\n\nmsg.url = `${ADMIN_URL}/api/file/upload`\nmsg.method = \"POST\"\nmsg.payload = {\n    \"file\": {\n        \"value\": msg.attachment,\n        \"options\": {\n            \"filename\": `Seeding File response.xlsx`\n        }\n    },\n    \"filename\": `Seeding File response.xlsx`\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 240,
        "wires": [
            [
                "b34b86b2d2793f73",
                "1d369ebf9c438734"
            ]
        ]
    },
    {
        "id": "b34b86b2d2793f73",
        "type": "http request",
        "z": "9c6db570ab89ba16",
        "d": true,
        "name": "uploadFile",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 240,
        "wires": [
            [
                "1d369ebf9c438734"
            ]
        ]
    },
    {
        "id": "1d369ebf9c438734",
        "type": "function",
        "z": "9c6db570ab89ba16",
        "name": "function 221",
        "func": "msg.newFileId = msg.payload.key\n\nconsole.log({payload: msg.payload})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 340,
        "wires": [
            [
                "99238cd9045ba8f8"
            ]
        ]
    },
    {
        "id": "99238cd9045ba8f8",
        "type": "function",
        "z": "9c6db570ab89ba16",
        "name": "updateStatus of file processing",
        "func": "const actyvToken = msg.actyvToken\n// const fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/changeStatus/${msg.fileId}`;\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/update/${msg.fileId}`;\nconst failedRows = msg.failedRows//flow.get(\"failedRows\")\nconst succeededRows = msg.succeededRows// flow.get(\"succeededRows\")\n\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"actyventityid\": msg.actyvEntityId\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'PATCH';\nmsg.payload = {\n    \"fileId\": msg.newFileId,\n    \"seedingStatus\": msg.numOfRows == failedRows.length ? \"FAILED\" : failedRows.length == 0 ? \"COMPLETED\" : \"PARTIALLY_COMPLETED\",\n    \"numOfRows\": msg.numOfRows,\n    \"successRows\": msg.numOfRows - failedRows.length,\n    \"failedRows\": failedRows.length\n}\n\n\nmsg.logger = { seedingStatusCount: { succeededRows, failedRows, success: succeededRows.length, failed: failedRows.length } }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 460,
        "wires": [
            [
                "f58babc5c281519c"
            ]
        ]
    },
    {
        "id": "f58babc5c281519c",
        "type": "subflow:951a533bb3498fe6",
        "z": "9c6db570ab89ba16",
        "name": "",
        "x": 460,
        "y": 460,
        "wires": [
            [
                "56db551a2a645bf4",
                "705a046ef195e56b"
            ]
        ]
    },
    {
        "id": "56db551a2a645bf4",
        "type": "subflow:0cbd918f05921aae",
        "z": "9c6db570ab89ba16",
        "d": true,
        "name": "update file Status to completed",
        "x": 750,
        "y": 460,
        "wires": [
            [
                "705a046ef195e56b"
            ]
        ]
    },
    {
        "id": "705a046ef195e56b",
        "type": "function",
        "z": "9c6db570ab89ba16",
        "name": "Logger",
        "func": "msg.logger = \"Updated file status to completed\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 540,
        "wires": [
            [
                "8907c34638902cf1"
            ]
        ]
    },
    {
        "id": "8907c34638902cf1",
        "type": "subflow:951a533bb3498fe6",
        "z": "9c6db570ab89ba16",
        "name": "",
        "x": 440,
        "y": 540,
        "wires": [
            [
                "10182137b402052c"
            ]
        ]
    },
    {
        "id": "10182137b402052c",
        "type": "debug",
        "z": "9c6db570ab89ba16",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 540,
        "wires": []
    },
    {
        "id": "9e546c06d8ce037c",
        "type": "switch",
        "z": "9c6db570ab89ba16",
        "name": "fileProcessingCompleted?",
        "property": "isFileProcessingCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 380,
        "y": 160,
        "wires": [
            [
                "2cec9ac34ba231e2"
            ]
        ]
    },
    {
        "id": "2cec9ac34ba231e2",
        "type": "delay",
        "z": "9c6db570ab89ba16",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 600,
        "y": 160,
        "wires": [
            [
                "6cdc4dd171bc57c3"
            ]
        ]
    },
    {
        "id": "6cdc4dd171bc57c3",
        "type": "function",
        "z": "9c6db570ab89ba16",
        "name": "create xlsx",
        "func": "\n\nconst failedRows = msg.failedRows\nlet seedingData = msg.seedingData\n\nconsole.log({failedRows})\nfailedRows.forEach((failedRow) => {\n    seedingData.forEach((row) => {\n        if (failedRow.applicantEmail == row[\"Business Partner Email\"]) {\n            row[\"Remarks\"] = JSON.stringify(failedRow[\"message\"])\n        }\n    })\n})\n\nseedingData.forEach((row) => {\n    if (!row.Remarks) {\n        row.Remarks = \"Success\"\n    }\n})\n// console.log({ seedingData })\nif(msg.allFailed){\n    seedingData.forEach((row) => {\n        \n            row.Remarks = msg.remark\n        \n    })\n}\n\nconst workbook = XLSX.utils.book_new();\nvar worksheet = XLSX.utils.json_to_sheet(seedingData, {\n    skipHeader: false,\n    header: [\n        \"Business Partner Customer No\",\n        \"Primary User First Name\",\n        \"Primary User Last Name\",\n        \"Business Partner Company Name\",\n        \"Business Partner PAN\",\n        \"Business Partner GST\",\n        \"Business Partner Phone\",\n        \"Business Partner Email\",\n        \"Business Partner City\",\n        \"Business Partner Type\",\n        \"Business Partner Account with Enterprise\",\n        \"Business Partner Bank Name with Enterprise\",\n        \"Business Partner Bank IFSC with Enterprise\",\n        \"Vintage with Enterprise (in months)\",\n        \"Transaction History M1\",\n        \"Transaction History M2\",\n        \"Transaction History M3\",\n        \"Transaction History M4\",\n        \"Transaction History M5\",\n        \"Transaction History M6\",\n        \"Transaction History M7\",\n        \"Transaction History M8\",\n        \"Transaction History M9\",\n        \"Transaction History M10\",\n        \"Transaction History M11\",\n        \"Transaction History M12\",\n        \"Projected Next 12 Months Sales\",\n        \"Remarks\"\n    ],\n});\nXLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\n//  XLSX.writeFile(workbook, \"example.xlsx\");\nconst buffer = XLSX.write(workbook, { type: 'buffer' });\nconsole.log({ buffer });\nmsg.attachment = buffer\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "XLSX",
                "module": "xlsx"
            },
            {
                "var": "json2xls",
                "module": "json2xls"
            },
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 750,
        "y": 160,
        "wires": [
            [
                "55d9a5a1e6e5413d"
            ]
        ]
    },
    {
        "id": "50699989681bb650",
        "type": "inject",
        "z": "62bce85b962c1ba4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 120,
        "wires": [
            [
                "77d2dcb76a92fbce"
            ]
        ]
    },
    {
        "id": "0e13dfda5d905e0d",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "No Pending Drawdowns",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.length",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 620,
        "wires": []
    },
    {
        "id": "77d2dcb76a92fbce",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "Set env variables",
        "func": "\n// let v8 = global.get(\"v8\");\n// const totalHeapSize = v8.getHeapStatistics().total_available_size;\n// let totalHeapSizeInMB = (totalHeapSize / 1024 / 1024).toFixed(2)\n// node.warn(\"V8 Total Heap Size \"+totalHeapSize+\" bytes\");\n\nconst ENV_VARIABLES = new Map();\n\nENV_VARIABLES.set('PAYLATER_URL',\"https://actyv-platform-paylater-service-v1.qa.actyv.com\")\nENV_VARIABLES.set('GO_URL',\"https://actyv-platform-go-service.qa.actyv.com/api\")\nENV_VARIABLES.set('ADMIN_URL',\"https://actyv-platform-admin-service.qa.actyv.com\")\n\nENV_VARIABLES.set('BUSINESS_IDENTIFIER',\"ABBCB2066P\")\nENV_VARIABLES.set('BUSINESS_TYPE',\"ENTERPRISE\")\nENV_VARIABLES.set('BANK_KEY',\"msl\")\nENV_VARIABLES.set('X_ACTYV_API_CONFIG_KEY',\"8HhkIWzVMSnSgvlhxr\")\nENV_VARIABLES.set('BANK_UNIQUE_IDENTIFIER',\"AASCA2089A\")\nENV_VARIABLES.set('BASE_URL', \"https://iifl-atlas-uat.finfluxtrial.io\")\nENV_VARIABLES.set('tenant_id', \"iifl-qa\")\nENV_VARIABLES.set('IIFL_USER', \"demoUser1\")\nENV_VARIABLES.set('IIFL_USER_PASSWORD', \"fc895Tbr2i&w@\")\nENV_VARIABLES.set('BNPL_USER', \"surajkumar@aplapollo.com\")\nENV_VARIABLES.set('BNPL_USER_PASSWORD', \"890ioP@12\")\n\nglobal.set('envVariables',ENV_VARIABLES)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 120,
        "wires": [
            [
                "fd222e8aba92c133"
            ]
        ]
    },
    {
        "id": "275ddaa1421c57b5",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "getPendingDrawdownsReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst BANK_UNIQUE_IDENTIFIER = env.get('BANK_UNIQUE_IDENTIFIER')\n\nconst bankToken = flow.get(\"bankToken\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown/send-drawdowns-to-bank/${BANK_UNIQUE_IDENTIFIER}`\nmsg.method = 'PUT';\n\nmsg.headers = {\nAuthorization : `Bearer ${bankToken}`,\nbankid: msg.bankId\n}\nmsg.payload = {}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 500,
        "wires": [
            [
                "e911195085bb0c3d"
            ]
        ]
    },
    {
        "id": "e911195085bb0c3d",
        "type": "http request",
        "z": "62bce85b962c1ba4",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 500,
        "wires": [
            [
                "e40283809434048d",
                "63bb448d262dc246"
            ]
        ]
    },
    {
        "id": "ee2e15543739d07e",
        "type": "switch",
        "z": "62bce85b962c1ba4",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 195.00000762939453,
        "y": 627.5000057220459,
        "wires": [
            [
                "0e13dfda5d905e0d"
            ],
            [
                "bfdd274754ca45ea"
            ]
        ]
    },
    {
        "id": "bfdd274754ca45ea",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "setDrawdownReqFormat",
        "func": "const pendingDrawdowns = msg.payload\nconst formatPendingDrawdownsForIIFL = []\nfor (let pendingDrawdown of pendingDrawdowns) {\n    formatPendingDrawdownsForIIFL.push({\n        \"Dealer Code\": pendingDrawdown.loanTerm?.crnNumber || \"\",\n        \"Invoice Date\": changeDateFormat(pendingDrawdown.invoice.documentDate.split(\"T\")[0]),\n        // \"Invoice Date\": pendingDrawdown.invoice.documentDate,\n        \"Invoice Number\": pendingDrawdown.invoice.finalInvoiceNo,\n        \"Invoice Amount\": pendingDrawdown.invoice.netAmount,\n        // \"Due Date\": changeDateFormat(pendingDrawdown.invoice.dueDate.split(\"T\")[0]),\n        \"Account No\": pendingDrawdown.businessRelationShip.bankAccountNumber || \"\",\n        \"Email ID\": \"\",\n        \"ROI\": pendingDrawdown.tenorAndRateSpread?.bankSpread,\n        \"Request Unique Code\": pendingDrawdown.loanDrawdown?.requestUniqueCode,\n        bankId: msg.bankId\n    })\n\n}\n\nfunction changeDateFormat(str) {\n\n    str = str.split(\"-\");\n    let res = str[1] + \"/\" + str[2] + \"/\" + str[0]\n    let date = Date.parse(res)\n    return date\n}\n\nmsg.payload = formatPendingDrawdownsForIIFL;\n// TODO: Follow naming of the filename as per Axis\n// const fileConvention = createFileNameForAxis()\t\n// msg.filename = `/Users/shravanpm/Desktop/node-red/drawdowns/${fileConvention}`\n\n// function createFileNameForAxis(){\n//     const input = new Date().toISOString().split('.')\n//     const modified = `${input[0].split(\":\").join(\"-\")}.txt`\n\n//     return `Actyv_${modified}`\n// }\nmsg.payload = [msg.payload[0]]\nfor(let i=0;i<msg.payload.length;i++){\n    node.send({payload:msg.payload[i]});\n}\n\n// return msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 740,
        "wires": [
            [
                "3c47ac3a20e4f657",
                "2f56d2e007815135"
            ]
        ]
    },
    {
        "id": "63bb448d262dc246",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "mockPendingDrawdowns",
        "func": "msg.payload = [\n    {\n        \"loanTerm\": {\n            \"approvedLimit\": \"50000000\",\n            \"crnNumber\": \"ACTYVDEMO000000294\",\n            \"bankProvidedLoanCode\": \"2134\",\n            \"validTill\": \"2022-11-16\",\n            \"loanAmount\": \"\",\n            \"holdAmount\": 0,\n            \"businessType\": \"VENDOR\"\n        },\n        \"invoice\": {\n            \"id\": \"e9966a85-c09c-4302-8a1e-5ad28e1deed2\",\n            \"finalInvoiceNo\": \"0050101517SGFL2022\",\n            \"documentDate\": \"2023-03-17T00:00:00.000Z\",\n            \"dueDate\": \"2023-03-16T00:00:00.000Z\",\n            \"remitTo\": \"\",\n            \"remitAccount\": \"\",\n            \"netAmount\": 5000,\n            \"additionalAttributes\": null,\n            \"erpID\": null\n        },\n        \"tenorAndRateSpread\": {\n            \"fromDuration\": \"P0D\",\n            \"toDuration\": \"P7D\",\n            \"bankSpread\": 12\n        },\n        \"loanDrawdown\": {\n            \"requestUniqueCode\": \"ACTY3891670954806167\",\n            \"requestAmount\": 3540543,\n            \"dueDate\": \"2022-11-23T00:00:00.000Z\",\n            \"remitAccount\": \"APLATB101104\",\n            \"bankIFSC\": \"HDFC0000003\"\n        },\n        \"bank\": {\n            \"userFriendlyIdentifier\": \"Moongipa Securities Ltd.\",\n            \"name\": \"Moongipa Securities Ltd.\"\n        },\n        \"enterprise\": {\n            \"userFriendlyIdentifier\": \"Apollo\",\n            \"name\": \"Apollo\"\n        },\n        \"distributor\": {\n            \"userFriendlyIdentifier\": \"Santosh Steel\",\n            \"name\": \"Santosh Steel\"\n        },\n        \"businessRelationShip\": {\n\n        }\n    }\n]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 500,
        "wires": [
            [
                "ee2e15543739d07e"
            ]
        ]
    },
    {
        "id": "2f56d2e007815135",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "createLoanReq",
        "func": "msg.drawdown = msg.payload;\n\nconst iiflToken = flow.get(\"iiflToken\")\nconst IIFL_URL = env.get('IIFL_URL')\n// const tenant_id = env.get('tenant_id')\nconst vclAccountNumber = msg.payload[\"Dealer Code\"] //take from loan term\nmsg.dealerCode = msg.payload[\"Dealer Code\"]\nmsg.url = `${IIFL_URL}/api/virtual-credit-line/${vclAccountNumber}/draw-downs`\nmsg.method = \"POST\";\nmsg.headers = {\n    // \"Fineract-Platform-TenantId\": tenant_id,\n    Authorization : `Bearer ${iiflToken}`\n}\n\nmsg.payload = {\n    \"productCode\": \"ACTYV_LOC\",\n    \"amount\": msg.payload[\"Invoice Amount\"],\n    \"interestRate\":msg.payload.ROI,//take from loan term\n    \"repayEvery\":1, //constant\n    \"repaymentPeriodFrequencyEnum\":2, //constant\n    \"numberOfInstallments\":2, //constant\n    \"drawDownDate\": msg.payload[\"Invoice Date\"], //epoch date need to be passed\n    \"isWorkFlowCreationEnabled\": \"false\"\n}\n\n// msg.payload.identifier = \"8b10189b-67f7-42b0-bc22-862956e210f1\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 840,
        "wires": [
            [
                "aff2d2fba1f4c9f5",
                "de4b6b6926270bbe",
                "b2752abac5be2585"
            ]
        ]
    },
    {
        "id": "aff2d2fba1f4c9f5",
        "type": "http request",
        "z": "62bce85b962c1ba4",
        "name": "createLoan",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 840,
        "wires": [
            [
                "578fad4caae8e5c9"
            ]
        ]
    },
    {
        "id": "b2752abac5be2585",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "approveLoanReq",
        "func": "const FINFLUX_BASE_URL = env.get('FINFLUX_BASE_URL')\nconst tenant_id = env.get('tenant_id');\nconst FINFLUX_TOKEN = env.get(\"FINFLUX_TOKEN\")\n\nmsg.identifier = msg.payload.identifier\n// msg.url = `${IIFL_URL}/fineract-provider/api/v1/virtual-credit-line/${msg.dealerCode}/draw-downs/${msg.payload.identifier}/approve`\nmsg.url = `${FINFLUX_BASE_URL}/fineract-provider/api/v1/virtual-credit-line/${msg.dealerCode}/draw-downs/${msg.payload.identifier}/approve`\nmsg.headers = {\n    // \"Fineract-Platform-TenantId\": tenant_id,\n    Authorization: `Bearer ${FINFLUX_TOKEN}`\n};\n// msg.req = {}\n// msg.req.query = {\n//     command:\"approve\"\n// }\n\nmsg.payload = {\n    \"notes\": \"approved\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 940,
        "wires": [
            [
                "a8525b30c31a4e9a"
            ]
        ]
    },
    {
        "id": "a8525b30c31a4e9a",
        "type": "http request",
        "z": "62bce85b962c1ba4",
        "name": "approveLoan",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 940,
        "wires": [
            [
                "14cd394a6020b381",
                "9a72b758a84637d6"
            ]
        ]
    },
    {
        "id": "14cd394a6020b381",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "disburseLoanReq",
        "func": "const FINFLUX_BASE_URL = env.get('FINFLUX_BASE_URL')\n// const tenant_id = env.get('tenant_id')\nconst FINFLUX_TOKEN = env.get(\"FINFLUX_TOKEN\")\n\n\nmsg.url = `${FINFLUX_BASE_URL}/fineract-provider/api/v1/virtual-credit-line/${msg.dealerCode}/draw-downs/${msg.identifier}/disburse`\nmsg.headers = {\n    // \"Fineract-Platform-TenantId\": tenant_id,\n    Authorization: `Bearer ${FINFLUX_TOKEN}`\n};\n// msg.req = {}\n// msg.req.query = {\n//     command:\"disburse\"\n// }\n\nmsg.payload = {\n    \"transactionAmount\": 10000,//msg.drawdown[\"Invoice Amount\"]\n    \"actualDisbursementDate\": \"04 September 2022\",\n    \"locale\": \"en\",\n    \"dateFormat\": \"dd MMMM yyyy\",\n    \"disburseToBankAccount\": {\n        \"bankAccountNo\": \"61323432312\",\n        \"ifscCode\": \"SBIN0016272\"\n    },\n    \"disbursePaymentDetail\": {\n        \"remark\": \"Test\",\n        \"routingCode\": \"1234567\",\n        \"bankNumber\": \"StandardCharteredBank\"\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1040,
        "wires": [
            [
                "ee3251b28dc1164b"
            ]
        ]
    },
    {
        "id": "ee3251b28dc1164b",
        "type": "http request",
        "z": "62bce85b962c1ba4",
        "name": "disburseLoan",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 600,
        "y": 1040,
        "wires": [
            [
                "f4cc89bf78b24fdb",
                "3a3b6647d3781e54"
            ]
        ]
    },
    {
        "id": "80ea9b3494df383a",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "updateDrawdownForSuccessReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst bankToken = flow.get(\"bankToken\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown/service`\nmsg.method = 'PATCH';\nmsg.headers = {\n    Authorization : `Bearer ${bankToken}`,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n    bankid: msg.drawdown.bankId\n}\nmsg.payload = {\n    \"drawdownStatus\": \"paid\",\n    \"bankProvidedDrawdownCodes\":msg.payload.loanId.toString(),\n    \"requestUniqueCode\": msg.drawdown[\"Request Unique Code\"]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1180,
        "wires": [
            [
                "6706ab124d12f334"
            ]
        ]
    },
    {
        "id": "f4cc89bf78b24fdb",
        "type": "switch",
        "z": "62bce85b962c1ba4",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 1240,
        "wires": [
            [
                "80ea9b3494df383a"
            ],
            [
                "00ef493f45cb637f"
            ]
        ]
    },
    {
        "id": "00ef493f45cb637f",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "updateDrawdownForFailureReq ",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\nconst bankToken = flow.get(\"bankToken\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown/service`\nmsg.method = 'PATCH';\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n    Authorization: `Bearer ${bankToken}`,\n    bankid: msg.drawdown.bankId\n}\nmsg.payload = {\n    \"drawdownStatus\": \"failed\",\n    \"requestUniqueCode\": msg.drawdown[\"Request Unique Code\"],\n    \"bankProvidedDrawdownCodes\": msg.payload.loanId.toString(),\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1300,
        "wires": [
            [
                "6706ab124d12f334"
            ]
        ]
    },
    {
        "id": "6706ab124d12f334",
        "type": "http request",
        "z": "62bce85b962c1ba4",
        "name": "updateDrawdownStatus",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 990,
        "y": 1240,
        "wires": [
            [
                "633f7ce511474dc5"
            ]
        ]
    },
    {
        "id": "633f7ce511474dc5",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 1240,
        "wires": []
    },
    {
        "id": "fd222e8aba92c133",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "AuthenticateIIFLUserReq",
        "func": "const envVariables = global.get('envVariables')\nconst IIFL_USER = envVariables.get('IIFL_USER')\nconst IIFL_USER_PASSWORD = envVariables.get('IIFL_USER_PASSWORD')\nconst BASE_URL = envVariables.get('BASE_URL');\n\n\nmsg.url = `${BASE_URL}/api/auth/login`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": IIFL_USER_PASSWORD,\n        \"userName\": IIFL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 180,
        "wires": [
            [
                "fad48673d80f5e48"
            ]
        ]
    },
    {
        "id": "fad48673d80f5e48",
        "type": "http request",
        "z": "62bce85b962c1ba4",
        "name": "AuthenticateIIFLUser",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 580,
        "y": 180,
        "wires": [
            [
                "900aba3a49e05c71"
            ]
        ]
    },
    {
        "id": "900aba3a49e05c71",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "saveIIFLToken",
        "func": "flow.set(\"iiflToken\", msg.payload.accessToken)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 180,
        "wires": [
            [
                "6a115c3ffa026925"
            ]
        ]
    },
    {
        "id": "3c47ac3a20e4f657",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "drawdownRqstFormat",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 740,
        "wires": []
    },
    {
        "id": "578fad4caae8e5c9",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "create IIFL Loan",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 840,
        "wires": []
    },
    {
        "id": "9a72b758a84637d6",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "IIFL LoanApproval",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 940,
        "wires": []
    },
    {
        "id": "3a3b6647d3781e54",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "IIFL disburseLoan",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 1040,
        "wires": []
    },
    {
        "id": "6a115c3ffa026925",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst ENTERPRISE_USER_EMAIL = env.get('ENTERPRISE_USER_EMAIL')\nconst ENTERPRISE_USER_PASSWORD = env.get('ENTERPRISE_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": ENTERPRISE_USER_PASSWORD,\n    \"email\": ENTERPRISE_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 260,
        "wires": [
            [
                "915f70e442d96e20"
            ]
        ]
    },
    {
        "id": "915f70e442d96e20",
        "type": "http request",
        "z": "62bce85b962c1ba4",
        "name": "AuthenticateEnterpriseUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 520,
        "y": 260,
        "wires": [
            [
                "c6d4b50b4990bdfa"
            ]
        ]
    },
    {
        "id": "c6d4b50b4990bdfa",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "saveEnterpriseToken",
        "func": "flow.set(\"enterpriseToken\",msg.payload.idToken)\n// console.log({enterpriseToken:msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 260,
        "wires": [
            [
                "992b517d5a27cb59"
            ]
        ]
    },
    {
        "id": "992b517d5a27cb59",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "AuthenticateBankUserReq",
        "func": "\nconst BANK_USER_EMAIL = env.get('BANK_USER_EMAIL')\nconst BANK_USER_PASSWORD = env.get('BANK_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": BANK_USER_PASSWORD,\n    \"email\": BANK_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 340,
        "wires": [
            [
                "17af09f673771f82"
            ]
        ]
    },
    {
        "id": "17af09f673771f82",
        "type": "http request",
        "z": "62bce85b962c1ba4",
        "name": "AuthenticateBankUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 340,
        "wires": [
            [
                "3a8baf9b80f7e220"
            ]
        ]
    },
    {
        "id": "3a8baf9b80f7e220",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "saveBankToken",
        "func": "flow.set(\"bankToken\",msg.payload.idToken)\nconsole.log({bankToken:msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 340,
        "wires": [
            [
                "7b388eef24e2692d"
            ]
        ]
    },
    {
        "id": "7b388eef24e2692d",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "getBankByKeyReq",
        "func": "\n\nconst GO_URL = env.get('GO_URL');\nconst BANK_KEY = env.get(\"BANK_KEY\")\n\nmsg.url = `${GO_URL}/bank/key/${BANK_KEY}`;\nmsg.method = \"GET\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 400,
        "wires": [
            [
                "0bbbd097a892add4"
            ]
        ]
    },
    {
        "id": "0bbbd097a892add4",
        "type": "http request",
        "z": "62bce85b962c1ba4",
        "name": "getBankByKey",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 480,
        "y": 400,
        "wires": [
            [
                "2e0b9c4e9de4ca10"
            ]
        ]
    },
    {
        "id": "2e0b9c4e9de4ca10",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "saveBankId",
        "func": "msg.bankId = msg.payload._id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 400,
        "wires": [
            [
                "275ddaa1421c57b5"
            ]
        ]
    },
    {
        "id": "e40283809434048d",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "debug 294",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 460,
        "wires": []
    },
    {
        "id": "de4b6b6926270bbe",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "debug 311",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 800,
        "wires": []
    },
    {
        "id": "48ec4dbae63060da",
        "type": "inject",
        "z": "62bce85b962c1ba4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 40,
        "wires": [
            [
                "6f7738ec467ac029"
            ]
        ]
    },
    {
        "id": "6f7738ec467ac029",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "function 180",
        "func": "msg.payload = {env: env.get(\"ENV\")}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 40,
        "wires": [
            [
                "600756bdcb81be4d"
            ]
        ]
    },
    {
        "id": "600756bdcb81be4d",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "debug 336",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 40,
        "wires": []
    },
    {
        "id": "534aaf916f99b0a0",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "debug 386",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 60,
        "wires": []
    },
    {
        "id": "6566e72519c944cd",
        "type": "debug",
        "z": "62bce85b962c1ba4",
        "name": "debug 394",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 60,
        "wires": []
    },
    {
        "id": "122fc23955e31d38",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "saveactyvId",
        "func": "flow.set(\"actyv_id\", msg.payload.actyvEntityId);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "8e95ffb521d2489a",
        "type": "function",
        "z": "62bce85b962c1ba4",
        "name": "Getting Actyv Entity User",
        "func": "const flow_var = flow.get('FLOW_VARIABLES');\nconst EMAIL = \"anand.rastogi@actyv.com\";\nconst PASSWORD =  \"890ioP@12\";\n// const EMAIL = env.get('EMAIL')\n// const PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow_var.token}`,\n}\n\nmsg.url = `${ADMIN_URL}/api/user/getCurrentUser?url=https://actyv-platform.uat.actyv.com`;\nmsg.method = \"GET\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 260,
        "wires": [
            [
                "7232d8fdac7bae0a"
            ]
        ]
    },
    {
        "id": "7232d8fdac7bae0a",
        "type": "http request",
        "z": "62bce85b962c1ba4",
        "name": "Getting Actyv_id",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1320,
        "y": 260,
        "wires": [
            [
                "122fc23955e31d38"
            ]
        ]
    },
    {
        "id": "bc23fc535ad2be48",
        "type": "inject",
        "z": "996aaae174a57dd4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 120,
        "wires": [
            [
                "d4a563f6bec24b80"
            ]
        ]
    },
    {
        "id": "d4a563f6bec24b80",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "Set env variables",
        "func": "\n// let v8 = global.get(\"v8\");\n// const totalHeapSize = v8.getHeapStatistics().total_available_size;\n// let totalHeapSizeInMB = (totalHeapSize / 1024 / 1024).toFixed(2)\n// node.warn(\"V8 Total Heap Size \"+totalHeapSize+\" bytes\");\n\nconst ENV_VARIABLES = new Map();\n\nENV_VARIABLES.set('PAYLATER_URL', \"https://actyv-platform-paylater-service-v1.qa.actyv.com\")\nENV_VARIABLES.set('GO_URL', \"https://actyv-platform-go-service.qa.actyv.com/api\")\nENV_VARIABLES.set('ADMIN_URL', \"https://actyv-platform-admin-service.qa.actyv.com\")\n\nENV_VARIABLES.set('BUSINESS_IDENTIFIER', \"ABBCB2066P\")\nENV_VARIABLES.set('BUSINESS_TYPE', \"ENTERPRISE\")\nENV_VARIABLES.set('BANK_KEY', \"msl\")\nENV_VARIABLES.set('X_ACTYV_API_CONFIG_KEY', \"8HhkIWzVMSnSgvlhxr\")\nENV_VARIABLES.set('BANK_UNIQUE_IDENTIFIER', \"AASCA2089A\")\nENV_VARIABLES.set('BASE_URL', \"https://iifl-atlas-uat.finfluxtrial.io\")\nENV_VARIABLES.set('tenant_id', \"iifl-qa\")\nENV_VARIABLES.set('BANK_PRODUCT_KEY', \"axis-sabari-product\")\n\nENV_VARIABLES.set('BNPL_USER', \"surajkumar@aplapollo.com\")\nENV_VARIABLES.set('BNPL_USER_PASSWORD', \"890ioP@12\")\n\nENV_VARIABLES.set('IIFL_USER', \"demoUser1\")\nENV_VARIABLES.set('IIFL_USER_PASSWORD', \"fc895Tbr2i&w@\")\n\nglobal.set('envVariables', ENV_VARIABLES)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 120,
        "wires": [
            [
                "03d162704cc4b6ef"
            ]
        ]
    },
    {
        "id": "c009ce22dbc96c3d",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "getBankProductReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\n\nmsg.headers = {}\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank-application-config/key/${BANK_PRODUCT_KEY}`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 500,
        "wires": [
            [
                "def64810440574ea"
            ]
        ]
    },
    {
        "id": "def64810440574ea",
        "type": "http request",
        "z": "996aaae174a57dd4",
        "name": "getBankProduct",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 600,
        "y": 500,
        "wires": [
            [
                "8b0e28813da8dd6b"
            ]
        ]
    },
    {
        "id": "8b0e28813da8dd6b",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "setBankAndEnterpriseId",
        "func": "flow.set(\"bankId\",msg.payload.bank);\nflow.set(\"enterpriseId\", msg.payload.allowedEnterprises[0]);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 600,
        "wires": [
            [
                "eecf173edc9397da"
            ]
        ]
    },
    {
        "id": "eecf173edc9397da",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "getDistributorRelatonsReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst enterpriseToken = flow.get(\"enterpriseToken\")\n\nmsg.url = `${GO_URL}/business-relationship/getByParentBusinessId/${msg.payload[\"bank\"]}`\nmsg.method = \"GET\"\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n    Authorization : `Bearer ${enterpriseToken}`\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 600,
        "wires": [
            [
                "740a76f7c96becda"
            ]
        ]
    },
    {
        "id": "740a76f7c96becda",
        "type": "http request",
        "z": "996aaae174a57dd4",
        "name": "getDistributorRelatons",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 820,
        "y": 600,
        "wires": [
            [
                "a5e37392b86c864f"
            ]
        ]
    },
    {
        "id": "a5e37392b86c864f",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "filterByBankAndDistributer",
        "func": "msg.payload = msg.payload.filter((item)=>{\n    return item.relationType === \"DISTRIBUTOR-BANK\"\n});\n\nfor(let i=0;i<msg.payload.length;i++){\n    node.send({\n        payload:msg.payload[i].identifierByParent\n    })\n}\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 680,
        "wires": [
            [
                "865145a15b51b9b8"
            ]
        ]
    },
    {
        "id": "55865ec6cf840209",
        "type": "debug",
        "z": "996aaae174a57dd4",
        "name": "debug 60",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 880,
        "wires": []
    },
    {
        "id": "865145a15b51b9b8",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "getLoanTermByCrnReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL');\nconst bankToken = flow.get(\"bankToken\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/fetchByCrnNumber`;\nmsg.method = \"POST\";\nmsg.headers = {\n    Authorization : `Bearer ${bankToken}`\n}\nmsg.crnNumber = msg.payload\nmsg.payload = { \n    // crnNumber: msg.payload\n    crnNumber:\"SGFLTD101104\"\n    }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 680,
        "wires": [
            [
                "6120cb77cdf78d74"
            ]
        ]
    },
    {
        "id": "6120cb77cdf78d74",
        "type": "http request",
        "z": "996aaae174a57dd4",
        "name": "getLoanTermByCrn",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 830,
        "y": 680,
        "wires": [
            [
                "31ef4ad07643841b"
            ]
        ]
    },
    {
        "id": "31ef4ad07643841b",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "getPaidDrawdownsForLoanIDReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL');\nconst bankToken = flow.get(\"bankToken\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown/service/fetch`;\nmsg.method = \"POST\";\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY \n}\nmsg.crnNumber = msg.payload.crnNumber\nmsg.payload = \n   {\n\n    // \"loanTermID\": msg.payload.id,\n    \"loanTermID\":\"1e035bf2-00b2-4ac3-80d6-2c405461a5e5\",\n        \"drawdownStatus\" : \"paid\"\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 780,
        "wires": [
            [
                "ab18ac1d9c6aa423"
            ]
        ]
    },
    {
        "id": "ab18ac1d9c6aa423",
        "type": "http request",
        "z": "996aaae174a57dd4",
        "name": "getPaidDrawdownsForLoanID",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 670,
        "y": 780,
        "wires": [
            [
                "fbb8d461b3e2c8a0"
            ]
        ]
    },
    {
        "id": "fbb8d461b3e2c8a0",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "loopThroughDrawdowns",
        "func": "\n\nfor(let i=0;i<msg.payload.length;i++){\n    node.send({\n        drawdown :{\n            id:msg.payload[i].id,\n            requestUniqueCode: msg.payload[i].requestUniqueCode,\n            loanId: msg.payload[i].bankProvidedDrawdownCodes,\n            vcl: msg.payload[i].loanTerm.crnNumber,\n            loanTermId: msg.payload[i].loanTerm.id\n        }\n    })\n}\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 880,
        "wires": [
            [
                "55865ec6cf840209",
                "d55aafc5bf695080"
            ]
        ]
    },
    {
        "id": "d55aafc5bf695080",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "getLoanStatusReq",
        "func": "const iiflToken = flow.get(\"iiflToken\")\nconst IIFL_URL = env.get('IIFL_URL')\n// const tenant_id = env.get('tenant_id')\nconst vclAccountNumber = msg.drawdown.vcl //take from loan term\nconst loanId = msg.drawdown.loanId\nmsg.url = `${IIFL_URL}/api/loans/${loanId}`\nmsg.method = \"GET\";\nmsg.headers = {\n    // \"Fineract-Platform-TenantId\": tenant_id,\n    Authorization: `Bearer ${iiflToken}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 980,
        "wires": [
            [
                "c2b9b6a2d408ec31"
            ]
        ]
    },
    {
        "id": "c2b9b6a2d408ec31",
        "type": "http request",
        "z": "996aaae174a57dd4",
        "name": "getLoanStatus",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 620,
        "y": 980,
        "wires": [
            [
                "c95f30e41150c848"
            ]
        ]
    },
    {
        "id": "f598a0f54b3791e5",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "createEntryOnDailyLedgerReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\nconst tenant_id = envVariables.get('tenant_id')\n\nmsg.url = `${PAYLATER_URL}/v1/daily-ledger`\nmsg.method = \"POST\";\n\nmsg.payload = {\n    \"loanTermID\": msg.drawdown.loanTermId,\n    \"transactionDate\": \"2023-01-16T13:51:12.958Z\",\n    \"openingBalance\": 0,\n    \"closingBalance\": 0,\n    \"totalPayment\": 0,\n    \"totalDrawdown\": 0,\n    \"interestAmount\": 0,\n    \"overdueAmount\": 0,\n    \"penalInterestAmount\": 0,\n    \"interestRate\": 0,\n    \"penalInterestRate\": 0\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 1400,
        "wires": [
            [
                "ab963133e6904785"
            ]
        ]
    },
    {
        "id": "ab963133e6904785",
        "type": "http request",
        "z": "996aaae174a57dd4",
        "name": "createEntryOnRepaymentTable",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 670,
        "y": 1400,
        "wires": [
            [
                "cc1449116ae322eb"
            ]
        ]
    },
    {
        "id": "cc1449116ae322eb",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "createEntryOnRepaymentTableReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\nconst tenant_id = envVariables.get('tenant_id')\n\nmsg.url = `${PAYLATER_URL}/v1/loan-payment`\nmsg.method = \"POST\";\n\nmsg.payload = {\n    \"loanID\": \"xxxx-xxxx-xxxx\",\n    \"drawdownID\": \"xxxx-xxxx-xxxx\",\n    \"amount\": 1000000,\n    \"date\": \"2011-04-11T10:20:30Z\",\n    \"paymentMethod\": \"Cash\",\n    \"fromAccount\": \"123412341234\",\n    \"principal\": 100000,\n    \"interest\": 1000,\n    \"balance\": 0\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1520,
        "wires": [
            [
                "c22dd584c751c67d"
            ]
        ]
    },
    {
        "id": "c22dd584c751c67d",
        "type": "http request",
        "z": "996aaae174a57dd4",
        "name": "createEntryOnDailyLedger",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 660,
        "y": 1520,
        "wires": [
            [
                "e78a633d45d434b1"
            ]
        ]
    },
    {
        "id": "e78a633d45d434b1",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "createEntryOnCashTableReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\nconst tenant_id = envVariables.get('tenant_id')\n\nmsg.url = `${PAYLATER_URL}/v1/cash-application`\nmsg.method = \"POST\";\n\nmsg.payload = {\n    \"loanDrawdownID\": \"string\",\n    \"loanPaymentID\": \"string\",\n    \"loanTermID\": \"string\",\n    \"transactionDate\": \"2023-01-16T13:52:30.856Z\",\n    \"appliedAmount\": 0\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1660,
        "wires": [
            [
                "b37fc11cbb1fccbf"
            ]
        ]
    },
    {
        "id": "b37fc11cbb1fccbf",
        "type": "http request",
        "z": "996aaae174a57dd4",
        "name": "createEntryOnCashTable",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 650,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "a6a7b6e4ba6af4f1",
        "type": "debug",
        "z": "996aaae174a57dd4",
        "name": "debug 61",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 1120,
        "wires": []
    },
    {
        "id": "21fbe25aa67aa8ec",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "AuthenticateIIFLUserReq",
        "func": "const IIFL_USER = env.get('IIFL_USER')\nconst IIFL_USER_PASSWORD = env.get('IIFL_USER_PASSWORD')\nconst IIFL_URL = env.get('IIFL_URL');\n\n\nmsg.url = `${IIFL_URL}/api/auth/login`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": IIFL_USER_PASSWORD,\n        \"userName\": IIFL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 340,
        "wires": [
            [
                "8328b5c951504740"
            ]
        ]
    },
    {
        "id": "8328b5c951504740",
        "type": "http request",
        "z": "996aaae174a57dd4",
        "name": "AuthenticateIIFLUser",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 560,
        "y": 340,
        "wires": [
            [
                "ca99bf5b7ee9a3cb"
            ]
        ]
    },
    {
        "id": "ca99bf5b7ee9a3cb",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "saveIIFLToken",
        "func": "flow.set(\"iiflToken\", msg.payload.accessToken)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 340,
        "wires": [
            [
                "c009ce22dbc96c3d"
            ]
        ]
    },
    {
        "id": "acc5fa752e399e47",
        "type": "debug",
        "z": "996aaae174a57dd4",
        "name": "debug 64",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 400,
        "wires": []
    },
    {
        "id": "03d162704cc4b6ef",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst ENTERPRISE_USER_EMAIL = env.get('ENTERPRISE_USER_EMAIL')\nconst ENTERPRISE_USER_PASSWORD = env.get('ENTERPRISE_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": ENTERPRISE_USER_PASSWORD,\n    \"email\": ENTERPRISE_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 180,
        "wires": [
            [
                "0b656ff9869f0716"
            ]
        ]
    },
    {
        "id": "0b656ff9869f0716",
        "type": "http request",
        "z": "996aaae174a57dd4",
        "name": "AuthenticateEnterpriseUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 560,
        "y": 180,
        "wires": [
            [
                "1fa55e16444e6943"
            ]
        ]
    },
    {
        "id": "1fa55e16444e6943",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "saveEnterpriseToken",
        "func": "flow.set(\"enterpriseToken\",msg.payload.idToken)\nconsole.log({enterpriseToken:msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 180,
        "wires": [
            [
                "91474774605389a1"
            ]
        ]
    },
    {
        "id": "91474774605389a1",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "AuthenticateBankUserReq",
        "func": "\nconst BANK_USER_EMAIL = env.get('BANK_USER_EMAIL')\nconst BANK_USER_PASSWORD = env.get('BANK_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": BANK_USER_PASSWORD,\n    \"email\": BANK_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 260,
        "wires": [
            [
                "0873565265f3d04b"
            ]
        ]
    },
    {
        "id": "0873565265f3d04b",
        "type": "http request",
        "z": "996aaae174a57dd4",
        "name": "AuthenticateBankUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 520,
        "y": 260,
        "wires": [
            [
                "4ee423487c83c858"
            ]
        ]
    },
    {
        "id": "4ee423487c83c858",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "saveBankToken",
        "func": "flow.set(\"bankToken\",msg.payload.idToken)\nconsole.log({bankToken:msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 260,
        "wires": [
            [
                "21fbe25aa67aa8ec"
            ]
        ]
    },
    {
        "id": "c95f30e41150c848",
        "type": "function",
        "z": "996aaae174a57dd4",
        "name": "updateDrawdownForSuccessReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst bankToken = flow.get(\"bankToken\")\nconst bankId = flow.get(\"bankId\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown/service`\nmsg.method = 'PATCH';\nmsg.headers = {\n    Authorization : `Bearer ${bankToken}`,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n    bankid: bankId\n}\nmsg.payload = {\n    \"requestUniqueCode\": msg.drawdown[\"requestUniqueCode\"],\n    paidInterestAmount: msg.payload.interestPaid,\n    paidDisbursedAmount: msg.payload.principalPaid\n}\nif(msg.payload.closed){\n    msg.payload.drawdownStatus = \"completed\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1120,
        "wires": [
            [
                "87c78977436e311b"
            ]
        ]
    },
    {
        "id": "87c78977436e311b",
        "type": "http request",
        "z": "996aaae174a57dd4",
        "name": "updateDrawdownStatus",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 1120,
        "wires": [
            [
                "a6a7b6e4ba6af4f1"
            ]
        ]
    },
    {
        "id": "bb737c30c8ca6f98",
        "type": "inject",
        "z": "61062284bea26a85",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "9ac0cc4dad29c7b2"
            ]
        ]
    },
    {
        "id": "9ac0cc4dad29c7b2",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "Set env variables",
        "func": "\n// let v8 = global.get(\"v8\");\n// const totalHeapSize = v8.getHeapStatistics().total_available_size;\n// let totalHeapSizeInMB = (totalHeapSize / 1024 / 1024).toFixed(2)\n// node.warn(\"V8 Total Heap Size \"+totalHeapSize+\" bytes\");\n\nconst ENV_VARIABLES = new Map();\n\nENV_VARIABLES.set('PAYLATER_URL', \"https://actyv-platform-paylater-service-v1.qa.actyv.com\")\nENV_VARIABLES.set('GO_URL', \"https://actyv-platform-go-service.qa.actyv.com/api\")\nENV_VARIABLES.set('ADMIN_URL', \"https://actyv-platform-admin-service.qa.actyv.com\")\n\nENV_VARIABLES.set('BUSINESS_IDENTIFIER', \"ABBCB2066P\")\nENV_VARIABLES.set('BUSINESS_TYPE', \"ENTERPRISE\")\nENV_VARIABLES.set('BANK_KEY', \"msl\")\nENV_VARIABLES.set('X_ACTYV_API_CONFIG_KEY', \"8HhkIWzVMSnSgvlhxr\")\nENV_VARIABLES.set('BANK_UNIQUE_IDENTIFIER', \"AASCA2089A\")\nENV_VARIABLES.set('BASE_URL', \"https://iifl-atlas-uat.finfluxtrial.io\")\nENV_VARIABLES.set('tenant_id', \"iifl-qa\")\nENV_VARIABLES.set('BANK_PRODUCT_KEY', \"axis-sabari-product\")\n\nENV_VARIABLES.set('BNPL_USER', \"surajkumar@aplapollo.com\")\nENV_VARIABLES.set('BNPL_USER_PASSWORD', \"890ioP@12\")\nENV_VARIABLES.set('IIFL_USER', \"demoUser1\")\nENV_VARIABLES.set('IIFL_USER_PASSWORD', \"fc895Tbr2i&w@\")\n\nglobal.set('envVariables', ENV_VARIABLES)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 60,
        "wires": [
            [
                "7530dc11778e49ea"
            ]
        ]
    },
    {
        "id": "f7ba9a887eb49491",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "getBankProductReq",
        "func": "const envVariables = global.get('envVariables')\nconst GO_URL = envVariables.get('GO_URL')\nconst BANK_PRODUCT_KEY = envVariables.get('BANK_PRODUCT_KEY')\n\nmsg.headers = {}\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank-application-config/key/${BANK_PRODUCT_KEY}`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 300,
        "wires": [
            [
                "a79e7fe9748cf123"
            ]
        ]
    },
    {
        "id": "a79e7fe9748cf123",
        "type": "http request",
        "z": "61062284bea26a85",
        "name": "getBankProduct",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 480,
        "y": 300,
        "wires": [
            [
                "fd5c0b77d2411e9f",
                "65f3ab07a6f11f22"
            ]
        ]
    },
    {
        "id": "fd5c0b77d2411e9f",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "setBankAndEnterpriseId",
        "func": "flow.set(\"bankId\",msg.payload.bank);\nflow.set(\"enterpriseId\", msg.payload.allowedEnterprises[0]);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 420,
        "wires": [
            [
                "b5d193f12a4ba20b"
            ]
        ]
    },
    {
        "id": "b5d193f12a4ba20b",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "getDistributorRelatonsReq",
        "func": "const envVariables = global.get('envVariables')\nconst GO_URL = envVariables.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = envVariables.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.url = `${GO_URL}/business-relationship/getByParentBusinessId/${msg.payload[\"bank\"]}`\nmsg.method = \"GET\"\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n    Authorization : `Bearer ${actyvToken}`\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 420,
        "wires": [
            [
                "73d9214512e9ebc6"
            ]
        ]
    },
    {
        "id": "73d9214512e9ebc6",
        "type": "http request",
        "z": "61062284bea26a85",
        "name": "getDistributorRelatons",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 820,
        "y": 420,
        "wires": [
            [
                "88c594de00aaf369",
                "edc50df4010bb0af"
            ]
        ]
    },
    {
        "id": "edc50df4010bb0af",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "filterByBankAndDistributer",
        "func": "msg.payload = msg.payload.filter((item)=>{\n    return item.relationType === \"DISTRIBUTOR-BANK\"\n});\n\nfor(let i=0;i<msg.payload.length;i++){\n    node.send({\n        payload:msg.payload[i]\n    })\n}\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 520,
        "wires": [
            [
                "ccd0d6350dfce3be"
            ]
        ]
    },
    {
        "id": "ccd0d6350dfce3be",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "getLoanTermByCrnReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL');\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/fetchByCrnNumber`;\nmsg.method = \"POST\";\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`\n}\nmsg.crnNumber = msg.payload.identifierByParent\nmsg.payload = { \n    // crnNumber: msg.payload.identifierByParent\n    crnNumber:\"SGFLTD101104\"\n    }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 520,
        "wires": [
            [
                "0284ef1ee47e9034"
            ]
        ]
    },
    {
        "id": "0284ef1ee47e9034",
        "type": "http request",
        "z": "61062284bea26a85",
        "name": "getLoanTermByCrn",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 830,
        "y": 520,
        "wires": [
            [
                "668959e1f01e6611"
            ]
        ]
    },
    {
        "id": "7530dc11778e49ea",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "AuthenticateBNPLUserReq",
        "func": "const envVariables = global.get('envVariables')\nconst BNPL_USER = envVariables.get('BNPL_USER')\nconst BNPL_USER_PASSWORD = envVariables.get('BNPL_USER_PASSWORD')\nconst ADMIN_URL = envVariables.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": BNPL_USER_PASSWORD,\n    \"email\": BNPL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 120,
        "wires": [
            [
                "b459e362ef2b9c61"
            ]
        ]
    },
    {
        "id": "b459e362ef2b9c61",
        "type": "http request",
        "z": "61062284bea26a85",
        "name": "AuthenticateBNPLUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 120,
        "wires": [
            [
                "103963ae6567f156"
            ]
        ]
    },
    {
        "id": "103963ae6567f156",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\", msg.payload.idToken.accessToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 120,
        "wires": [
            [
                "bd4c69d7bc9b264b",
                "7629a302d71cb32c"
            ]
        ]
    },
    {
        "id": "bd4c69d7bc9b264b",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "AuthenticateIIFLUserReq",
        "func": "const envVariables = global.get('envVariables')\nconst IIFL_USER = envVariables.get('IIFL_USER')\nconst IIFL_USER_PASSWORD = envVariables.get('IIFL_USER_PASSWORD')\nconst BASE_URL = envVariables.get('BASE_URL');\n\n\nmsg.url = `${BASE_URL}/api/auth/login`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": IIFL_USER_PASSWORD,\n        \"userName\": IIFL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 200,
        "wires": [
            [
                "0d6cb629be9c052e"
            ]
        ]
    },
    {
        "id": "0d6cb629be9c052e",
        "type": "http request",
        "z": "61062284bea26a85",
        "name": "AuthenticateIIFLUser",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 200,
        "wires": [
            [
                "07ee7d166a5ace75"
            ]
        ]
    },
    {
        "id": "07ee7d166a5ace75",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "saveIIFLToken",
        "func": "flow.set(\"iiflToken\",msg.payload)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 200,
        "wires": [
            [
                "f7ba9a887eb49491",
                "45cf2365d568989e"
            ]
        ]
    },
    {
        "id": "cb7ad22c93ac5e31",
        "type": "debug",
        "z": "61062284bea26a85",
        "name": "debug 62",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 600,
        "wires": []
    },
    {
        "id": "45cf2365d568989e",
        "type": "debug",
        "z": "61062284bea26a85",
        "name": "IIFL Token",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 200,
        "wires": []
    },
    {
        "id": "7629a302d71cb32c",
        "type": "debug",
        "z": "61062284bea26a85",
        "name": "actyv Token",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 120,
        "wires": []
    },
    {
        "id": "65f3ab07a6f11f22",
        "type": "debug",
        "z": "61062284bea26a85",
        "name": "bankProduct",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 300,
        "wires": []
    },
    {
        "id": "88c594de00aaf369",
        "type": "debug",
        "z": "61062284bea26a85",
        "name": "distributorRelationships",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 420,
        "wires": []
    },
    {
        "id": "668959e1f01e6611",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "getLoanTermReq",
        "func": "// msg.loanID = msg.payload.id\nmsg.loanID = \"1e035bf2-00b2-4ac3-80d6-2c405461a5e5\"\n\nconst envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL');\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/fetch`;\nmsg.method = \"POST\";\nmsg.headers = {\n    Authorization: `Bearer ${actyvToken}`\n}\nmsg.crnNumber = msg.payload.identifierByParent\nmsg.payload = {\n    // crnNumber: msg.payload.identifierByParent\n    \"loanTermsID\": msg.loanID,\n    \"toMask\": false\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 600,
        "wires": [
            [
                "b9801a93bb233b3b"
            ]
        ]
    },
    {
        "id": "ee3bae13c71165ec",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "loanUpdatesFromIIFLReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\n// const clientId = msg.payload[0].bankProvidedLoanCodes\nconst clientId = msg.payload[0].bankProvidedLoanCodes\n\nconst iiflToken = flow.get(\"iiflToken\")\n\n\nmsg.url = `${BASE_URL}/api/clients/${clientId}/virtual-credit-line`\nmsg.headers = {\n    // \"Fineract-Platform-TenantId\": tenant_id,.\n    Authorization: `Bearer ${iiflToken}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 700,
        "wires": [
            [
                "9298002a8115a859"
            ]
        ]
    },
    {
        "id": "b9801a93bb233b3b",
        "type": "http request",
        "z": "61062284bea26a85",
        "name": "getLoanTerm",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 600,
        "wires": [
            [
                "cb7ad22c93ac5e31",
                "ee3bae13c71165ec"
            ]
        ]
    },
    {
        "id": "9298002a8115a859",
        "type": "http request",
        "z": "61062284bea26a85",
        "name": "loanUpdatesFromIIFL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 700,
        "wires": [
            [
                "15b6002441d89aff"
            ]
        ]
    },
    {
        "id": "15b6002441d89aff",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "filterByCrn",
        "func": "let vclData = msg.payload.filter((item)=>{\n    return item.accountNo == msg.crnNumber\n});\nmsg.payload = vclData[0]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 700,
        "wires": [
            [
                "8efe067680650f64"
            ]
        ]
    },
    {
        "id": "8efe067680650f64",
        "type": "function",
        "z": "61062284bea26a85",
        "name": "updateLoanTermReq",
        "func": "// msg.loanID = msg.payload.id\nmsg.loanID = \"1e035bf2-00b2-4ac3-80d6-2c405461a5e5\"\n\nconst envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL');\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/update`;\nmsg.method = \"PATCH\";\nmsg.headers = {\n    Authorization: `Bearer ${actyvToken}`\n}\nmsg.crnNumber = msg.payload.identifierByParent\nmsg.payload = {\n    // crnNumber: msg.payload.identifierByParent\n    \"loanTermsID\": msg.loanID,\n    \"loanAmount\": msg.payload.creditLimit,\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 800,
        "wires": [
            [
                "a624176a4154eb3f"
            ]
        ]
    },
    {
        "id": "fa6beeef2e013814",
        "type": "comment",
        "z": "61062284bea26a85",
        "name": "loop",
        "info": "",
        "x": 130,
        "y": 480,
        "wires": []
    },
    {
        "id": "a624176a4154eb3f",
        "type": "http request",
        "z": "61062284bea26a85",
        "name": "updateLoanTerm",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 490,
        "y": 800,
        "wires": [
            [
                "2f6325eaabdc18ad"
            ]
        ]
    },
    {
        "id": "2f6325eaabdc18ad",
        "type": "debug",
        "z": "61062284bea26a85",
        "name": "completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 800,
        "wires": []
    },
    {
        "id": "23a7fbaace120573",
        "type": "inject",
        "z": "e8842e93c37e68d3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "32591d37a841bef2"
            ]
        ]
    },
    {
        "id": "32591d37a841bef2",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "Set env variables",
        "func": "\n// let v8 = global.get(\"v8\");\n// const totalHeapSize = v8.getHeapStatistics().total_available_size;\n// let totalHeapSizeInMB = (totalHeapSize / 1024 / 1024).toFixed(2)\n// node.warn(\"V8 Total Heap Size \"+totalHeapSize+\" bytes\");\n\nconst ENV_VARIABLES = new Map();\n\nENV_VARIABLES.set('PAYLATER_URL', \"https://actyv-platform-paylater-service-v1.qa.actyv.com\")\nENV_VARIABLES.set('GO_URL', \"https://actyv-platform-go-service.qa.actyv.com\")\nENV_VARIABLES.set('ADMIN_URL', \"https://actyv-platform-admin-service.qa.actyv.com\")\n\nENV_VARIABLES.set('BUSINESS_IDENTIFIER', \"ABBCB2066P\")\nENV_VARIABLES.set('BUSINESS_TYPE', \"ENTERPRISE\")\nENV_VARIABLES.set('BANK_KEY', \"msl\")\nENV_VARIABLES.set('X_ACTYV_API_CONFIG_KEY', \"8HhkIWzVMSnSgvlhxr\")\nENV_VARIABLES.set('BANK_UNIQUE_IDENTIFIER', \"AASCA2089A\")\nENV_VARIABLES.set('BASE_URL', \"https://iifl-atlas-uat.finfluxtrial.io\")\nENV_VARIABLES.set('tenant_id', \"iifl-qa\")\nENV_VARIABLES.set('BANK_PRODUCT_KEY', \"axis-sabari-product\")\n\nENV_VARIABLES.set('BNPL_USER', \"surajkumar@aplapollo.com\")\nENV_VARIABLES.set('BNPL_USER_PASSWORD', \"890ioP@12\")\nENV_VARIABLES.set('IIFL_USER', \"demoUser2\")\nENV_VARIABLES.set('IIFL_USER_PASSWORD', \"fc895Tbr2i&w@\")\n\nglobal.set('envVariables', ENV_VARIABLES)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 60,
        "wires": [
            [
                "c9968cc2d1d8ca3b"
            ]
        ]
    },
    {
        "id": "c9968cc2d1d8ca3b",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst CKPL_ENTERPRISE_ADMIN_EMAIL = env.get('CKPL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": CKPL_ENTERPRISE_ADMIN_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 120,
        "wires": [
            [
                "704f8f1009f33844"
            ]
        ]
    },
    {
        "id": "704f8f1009f33844",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "AuthenticateEnterpriseUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 520,
        "y": 120,
        "wires": [
            [
                "8a728e695af44a28",
                "a257ca5bd6faa3e4"
            ]
        ]
    },
    {
        "id": "8a728e695af44a28",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveEnterpriseToken",
        "func": "flow.set(\"enterpriseToken\",msg.payload.idToken)\n// console.log({enterpriseToken: msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 120,
        "wires": [
            [
                "c3c9f25fce09fd4a"
            ]
        ]
    },
    {
        "id": "1f3f810b8fb8f45e",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "AuthenticateIIFLUserReq",
        "func": "const IIFL_USER = env.get('IIFL_USER')\nconst IIFL_USER_PASSWORD = env.get('IIFL_USER_PASSWORD')\nconst IIFL_URL = env.get('IIFL_URL');\n\n\nmsg.url = `${IIFL_URL}/api/auth/login`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": IIFL_USER_PASSWORD,\n        \"userName\": IIFL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 320,
        "wires": [
            [
                "a532dc305f0c9995"
            ]
        ]
    },
    {
        "id": "a532dc305f0c9995",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "AuthenticateIIFLUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 320,
        "wires": [
            [
                "db3e1d47472bb697",
                "2b483fb15ef70afa"
            ]
        ]
    },
    {
        "id": "db3e1d47472bb697",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveIIFLToken",
        "func": "\nflow.set(\"iiflToken\", msg.payload.accessToken)\nconsole.log({ iifl_token: msg.payload.accessToken})\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "2b483fb15ef70afa",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "getBankProductKeyReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY_CKPL_IIFL = env.get('BANK_PRODUCT_KEY_CKPL_IIFL')\n\nmsg.url = `${GO_URL}/bank-application-config/key/${BANK_PRODUCT_KEY_CKPL_IIFL}`\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 420,
        "wires": [
            [
                "e744ec0a521965e0"
            ]
        ]
    },
    {
        "id": "e744ec0a521965e0",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "getBankProductKeyReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 420,
        "wires": [
            [
                "496cf6c85e17e0c7",
                "cd80c266bd75f768"
            ]
        ]
    },
    {
        "id": "496cf6c85e17e0c7",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "bankProductConfig",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 420,
        "wires": []
    },
    {
        "id": "cd80c266bd75f768",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "getPendingBankApplicationsReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY_CKPL_IIFL = env.get('BANK_PRODUCT_KEY_CKPL_IIFL')\nconst IIFL_BANK_APPLICATION_STATUS = env.get(\"IIFL_BANK_APPLICATION_STATUS\")\n\nmsg.bankId = msg.payload.bank\nmsg.enterpriseId = msg.payload.allowedEnterprises[0]\n\nmsg.url = `${GO_URL}/bank-application?bankApplicationConfigKey=${BANK_PRODUCT_KEY_CKPL_IIFL}&applicationStatus=${IIFL_BANK_APPLICATION_STATUS}`\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 540,
        "wires": [
            [
                "1c06a40aea2c963b"
            ]
        ]
    },
    {
        "id": "1c06a40aea2c963b",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "getPendingBankApplications",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 540,
        "wires": [
            [
                "e575ef382e1b0832",
                "6deb7717f8dbf7f1"
            ]
        ]
    },
    {
        "id": "e575ef382e1b0832",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "pendingBankApplications",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 540,
        "wires": []
    },
    {
        "id": "039ae05e46075e66",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "mockBankApplication",
        "func": "msg.payload = [\n    {\n        \"_id\": \"63ff1b2f723b070cae7c09c0\",\n        \"createdOn\": \"Tue, 21 Feb 2023 11:32:41 GMT\",\n        \"createdBy\": \"63750a1995a6a16f696d2f7b\",\n        \"updatedOn\": \"Tue, 21 Feb 2023 11:32:42 GMT\",\n        \"isDeleted\": false,\n        \"bankApplicationDocumentConfigKey\": \"63cfbc85edee8f7eee6f3d6e\",\n        \"bankName\": \"Axis Bank Limited\",\n        \"productFamily\": \"PAYLATER\",\n        \"productType\": \"PAYLATER\",\n        \"status\": \"DOCUMENT_CAPTURE\",\n        \"businessPartnerName\": \"Shri Durga Metalex\",\n        \"businessPartnerID\": \"63750a19ca608a344ae556d6\",\n        \"productGranularity\": \"product\",\n        \"bankProductConfigId\": \"64363fc74516a3ea3c8b86d9\",\n        \"bankId\": \"642d3bc0ebc96f31f3daebe9\",\n        \"bankApplicationLabel\": \"Continue Bank Application\",\n        \"bankApplicationURL\": \"www.google.com\",\n        \"enterpriseId\": \"637670c7f8e9564da0dea656\",\n        \"approvedLimit\": null,\n        \"availableLimit\": null\n    }\n]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 620,
        "wires": [
            [
                "6deb7717f8dbf7f1"
            ]
        ]
    },
    {
        "id": "6deb7717f8dbf7f1",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "LoopOverBankApplication",
        "func": "\nfor(let bankApplication of msg.payload){\n    // console.log({bankApplication})\n    node.send({\n        businessPartnerId: bankApplication.businessPartnerID,\n        bankId: bankApplication.bankId,\n        enterpriseId: bankApplication.enterpriseId,\n        bankProductConfigId: bankApplication.bankProductConfigId,\n        bankApplicationId : bankApplication._id,\n        dataPartDone: \"false\"\n    })\n}\n\n// return msg;\n\n/**\n *  \"_id\": \"63f4abd94f0acc5aa73d9e46\",\n        \"createdOn\": \"Tue, 21 Feb 2023 11:32:41 GMT\",\n        \"createdBy\": \"63750a1995a6a16f696d2f7b\",\n        \"updatedOn\": \"Tue, 21 Feb 2023 11:32:42 GMT\",\n        \"isDeleted\": false,\n        \"bankApplicationDocumentConfigKey\": \"63cfbc85edee8f7eee6f3d6e\",\n        \"bankName\": \"Axis Bank Limited\",\n        \"productFamily\": \"PAYLATER\",\n        \"productType\": \"PAYLATER\",\n        \"status\": \"DOCUMENT_CAPTURE\",\n        \"businessPartnerName\": \"Shri Durga Metalex\",\n        \"businessPartnerID\": \"63750a19ca608a344ae556d6\",\n        \"productGranularity\": \"product\",\n        \"bankProductConfigId\": \"63cfbe250c729962c86ec8a7\",\n        \"bankId\": \"63c8fa075f1c5afda77bae5e\",\n        \"bankApplicationLabel\": \"Continue Bank Application\",\n        \"bankApplicationURL\": \"www.google.com\",\n        \"enterpriseId\": \"638c73f16ea52ce57470c1a9\",\n        \"approvedLimit\": null,\n        \"availableLimit\": null\n */",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 620,
        "wires": [
            [
                "c55d34a0b7d3f920",
                "da7029d68fcd7c4e"
            ]
        ]
    },
    {
        "id": "c55d34a0b7d3f920",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "bankApplication",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 620,
        "wires": []
    },
    {
        "id": "f736deeaccbb3789",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "getBusinessPartnerDataReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.enterpriseBankAccountDetails = {\n    accountNo: msg.payload[0]?.bankAccountNumber,\n    ifsc: msg.payload[0]?.bankIFSC,\n    bankName: msg.payload[0]?.bankName\n}\n\nmsg.dealerCode = msg.payload.identifierByParent\n\n\nmsg.url = `${GO_URL}/business-partner/data/${msg.businessPartnerId}`\n\nmsg.headers = {\n    \"x-actyv-api-config-key\" : X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 780,
        "wires": [
            [
                "e9bf25e995d728ce"
            ]
        ]
    },
    {
        "id": "e9bf25e995d728ce",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "getBusinessPartnerData",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 780,
        "wires": [
            [
                "bedefb3af6f1cf60"
            ]
        ]
    },
    {
        "id": "bedefb3af6f1cf60",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "businessPartnerData",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 780,
        "wires": []
    },
    {
        "id": "d99129b6df753753",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "createClientReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${IIFL_URL}/api/customer`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nconst aadhar = msg.data.documents.filter((document) => document.documentType ===\"AADHAAR\");\n// console.log({aadhar:aadhar[0].data})\n\nconst pan = msg.data.documents.filter((document) => document.documentType === \"PERSONAL_PAN\");\nconst name = aadhar[0].data.name.split(\" \")\n\n// console.log({ clientRefId: msg.dealerCode, mobileNo: msg.data.persons[0].phone, })\nmsg.payload = {\n    \"firstName\": name[0],\n    \"lastName\": name[name.length-1],\n    \"dateOfBirth\": aadhar[0].data.dob.split(\"T\")[0],//\"2022-12-01\",\n    \"gender\":  aadhar[0].data.gender === \"M\"?\"MALE\":\"FEMALE\",//\"MALE\",\n    \"mobileNo\": \"9573603199\",//msg.data.persons[0].phone.split(\"+91\")[1],//\"9876543210\",\n    \"email\": msg.data.persons[0].email,//\"aa@example.com\",\n    \"clientReferenceId\": \"CAVINMC005\",//msg.dealerCode,//\"1234\",\n    \"panNo\": \"BHXPS7086M\",//pan[0].data.panNumber,//\"AAAAA1111A\",\n    \"panAuthenticationRequired\": false,\n    \"productCode\": \"ACTYV_LOC\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 1080,
        "wires": [
            [
                "d7e023ec521fe983",
                "982d5f92330f55d4"
            ]
        ]
    },
    {
        "id": "da7029d68fcd7c4e",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "getDealerCodeReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/business-relationship/${msg.businessPartnerId}/${msg.enterpriseId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 700,
        "wires": [
            [
                "782e89e2c1965b72"
            ]
        ]
    },
    {
        "id": "782e89e2c1965b72",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "getDealerCode",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 520,
        "y": 700,
        "wires": [
            [
                "5d5fe0d2dcee7b75",
                "f736deeaccbb3789"
            ]
        ]
    },
    {
        "id": "23590d1e71b9f5c4",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "storeBPdataToData",
        "func": "msg.data = msg.payload\n// let bankStatement = msg.payload.documents.filter((doc) => doc.documentType === \"BANK_STATEMENT\").sort((a, b) => b.data.statementdetails.statementAccounts[0].xnsEndDate - a.data.statementdetails.statementAccounts[0].xnsEndDate)\n// console.log({bankStatement:bankStatement})\n// let data = JSON.parse(msg.payload.documents)\nlet gstin = msg.data.documents.filter((doc)=>doc.documentType === \"GSTIN\")\nmsg.gstIn = gstin[0];\n// console.log({gstin: JSON.stringify(gstin,null,\"\\t\")})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 880,
        "wires": [
            [
                "a9272948125ad233"
            ]
        ]
    },
    {
        "id": "d7e023ec521fe983",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "createClient",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 1080,
        "wires": [
            [
                "311235acf43729ea",
                "3e9e3c20e266386d"
            ]
        ]
    },
    {
        "id": "311235acf43729ea",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "createClient",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1080,
        "wires": []
    },
    {
        "id": "ca3b93f4132c427c",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "addClientAddressReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.payload.clientId\n\n//set clientId and leadId to msg object\nmsg.clientId = msg.payload.clientId,\nmsg.leadId = msg.payload.leadId\nconsole.log({clientId})\nmsg.url = `${IIFL_URL}/api/clients/${clientId}/addresses`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nconst aadhar = msg.data.documents.filter((document) => document.documentType ===\"AADHAAR\");\n\nconst pan = msg.data.documents.filter((document) => document.documentType === \"PERSONAL_PAN\");\nconst name = aadhar[0].data.name.split(\" \")\nmsg.payload = {\n    \"addressLine1\": aadhar[0].data.address,//\"123, Abc Street\",\n    \"addressLine2\": `${aadhar[0].data.subDistrict},${aadhar[0].data.district},${aadhar[0].data.state}`,//\"Some Locality\",\n    \"addressType\": \"PERMANENT\",\n    \"pincode\": aadhar[0].data.pinCode,//\"126778\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1200,
        "wires": [
            [
                "8128476ed06ff640",
                "d761cd61d63908b7"
            ]
        ]
    },
    {
        "id": "8128476ed06ff640",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "addClientAddress",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 1200,
        "wires": [
            [
                "608e3159c26db254"
            ]
        ]
    },
    {
        "id": "608e3159c26db254",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "addClientAddress",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1200,
        "wires": []
    },
    {
        "id": "a9272948125ad233",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "mockCreateClient",
        "func": "msg.payload = {\n    clientId: 2762,\n    leadId: 1707\n}\n\nconsole.log(\"mock\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 880,
        "wires": [
            [
                "d99129b6df753753"
            ]
        ]
    },
    {
        "id": "97fa262b7cb08e63",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "Scrapping Documents of a particular Business Partner",
        "func": "let c = 0\n\nconst arr = msg.data.documents;\nconst businessPartnerId = msg.businessPartnerId;\nconst gst_regex = new RegExp(/^GST/);\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\n// const dealerCode = msg.payload.identifierByParent\nconst dealerCode = msg.dealerCode\n\n// const lp = msg.LOCAL_PATH;\n\nlet documents = [\n    'AADHAAR', 'BANK_STATEMENT',\n    'ITR', 'BUSINESS_PAN',\n    'PERSONAL_PAN', 'GST',\n    'GST', 'GSTR3B_RETSUM',\n    'GSTR2A_B2B', 'GSTR2A_RETSUM',\n    'GSTR1_EXP', 'GSTR1_B2B',\n    'GSTR1_CDNR', 'GSTR1_HSNSUM',\n    'GSTR1_CDNUR', 'GSTR1_B2CL',\n    'GSTR1_CDN', 'GSTR1_NIL',\n    'GSTR1_B2CS', 'GSTR_FILES',\n    'BANK_FORM_1'\n]\n\nfor(let document of msg.data?.documents){\n    \n    \n    switch (true) {\n        case /^AADHAAR/.test(document?.documentType):\n        \n            node.send({\n                ...msg,\n                    data:{},\n                payload: document,\n                // businessPartnerId: msg.businessPartnerId,\n                // bankId: msg.bankId,\n                // enterpriseId: msg.enterpriseId,\n                // bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                dealerCode,\n                documentType: \"KYC\",\n                documentName:\"AADHAAR\",//document.documentType,\n                isSelfie: false\n            });\n         \n            break\n        // case /^BANK_STATEMENT/.test(document?.documentType):\n        //     node.send({\n        //         ...msg,\n        //         payload: document,\n        //      data:{},\n        //         // businessPartnerId: msg.businessPartnerId,\n        //         // bankId: msg.bankId,\n        //         // enterpriseId: msg.enterpriseId,\n        //         // bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\", \n        //         dealerCode,\n        //         documentType: \"BANK_STATEMENT\",\n        //         isSelfie: false\n        //     });\n           \n        //     break;\n        // case /^ITR/.test(document?.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode,\n        //         isSelfie: false\n        //     });\n          \n        //     break\n        case /^BUSINESS_PAN/.test(document?.documentType):\n       \n            node.send({\n                ...msg,\n                payload: document,\n                // businessPartnerId: msg.businessPartnerId,\n                // bankId: msg.bankId,\n                // enterpriseId: msg.enterpriseId,\n                // bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                documentType: \"KYC\",\n                dealerCode,\n                isSelfie: false\n            });\n           \n            break\n        case /^PERSONAL_PAN/.test(document?.documentType):\n      \n            node.send({\n                ...msg,\n                payload: document,\n                \n                data:{},\n                // businessPartnerId: msg.businessPartnerId,\n                // bankId: msg.bankId,\n                // enterpriseId: msg.enterpriseId,\n                // bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                documentType: \"KYC\",\n                dealerCode,\n                isSelfie: false\n            });\n           \n            break\n        // case /^GST/.test(document?.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode,\n        //         isSelfie: false\n        //     });\n           \n        //     break\n       \n\n\n        // case /BANK_FORM_1/.test(document.documentType):\n        //     node.send({\n        //         ...msg,\n        //         payload: document,\n        //         // businessPartnerId: msg.businessPartnerId,\n        //         // bankId: msg.bankId,\n        //         // enterpriseId: msg.enterpriseId,\n        //         // bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         documentType: \"KYC\",\n        //         dealerCode\n        //     });\n            \n        //     break\n        \n        \n\n        default: {}\n        // node.send({\n        //     payload: {\n        //         files:[]\n        //     },\n        //     businessPartnerId: msg.businessPartnerId,\n        //     bankId: msg.bankId,\n        //     enterpriseId: msg.enterpriseId,\n        //     bankProductConfigId: msg.bankProductConfigId,\n        //     transferDone: \"false\",\n        //     dealerCode,\n        //     isSelfie: false\n        // });\n    }\n};\n\n\nconst reqDocsFromFieldValue = [\"iifl_live_selfie_1\"]\n\nlet documentsFromFieldValue = msg.data.fieldValues.filter((doc)=>{\n    if(reqDocsFromFieldValue.includes(doc.key)){\n        return doc\n    }\n})\n\n\n\n\nfor (let i = 0; i < documentsFromFieldValue.length;i++){\n   \n    \n        if (documentsFromFieldValue[i].key ===\"iifl_live_selfie_1\"){\n          \n            node.send({\n                ...msg,\n                payload: documentsFromFieldValue[i].value,\n                // businessPartnerId: msg.businessPartnerId,\n                // bankId: msg.bankId,\n                // enterpriseId: msg.enterpriseId,\n                // bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                documentType:\"SELFIE\",\n                dealerCode,\n                isSelfie :true\n            }); \n        }else{\n            node.send({\n                ...msg,\n                payload: documentsFromFieldValue[i].value,\n                // businessPartnerId: msg.businessPartnerId,\n                // bankId: msg.bankId,\n                // enterpriseId: msg.enterpriseId,\n                // bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                documentType: documentsFromFieldValue[i].key,\n                dealerCode,\n                isSelfie: false\n            }); \n        }\n        \n    \n}\n\n\nmsg.transferDone = \"true\";\n// msg.LOCAL_PATH = lp;\nreturn msg;\n\n/**\n    businessPartnerId: msg.businessPartnerId,\n    bankId: msg.bankId,\n    enterpriseId: msg.enterpriseId,\n    bankProductConfigId: msg.bankProductConfigId,\n */",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 306.6666717529297,
        "y": 2375.0000677108765,
        "wires": [
            [
                "bbc1f3cb6646c2cf"
            ]
        ]
    },
    {
        "id": "bbc1f3cb6646c2cf",
        "type": "switch",
        "z": "e8842e93c37e68d3",
        "name": "",
        "property": "transferDone",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "falseh",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 636.6666717529297,
        "y": 2375.0000677108765,
        "wires": [
            [
                "c8244f98f0d204d1"
            ],
            [
                "3f2ca455eb3f16a3"
            ]
        ]
    },
    {
        "id": "5d5fe0d2dcee7b75",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "dealerCode",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 680,
        "wires": []
    },
    {
        "id": "a257ca5bd6faa3e4",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "debug 257",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 60,
        "wires": []
    },
    {
        "id": "43b12b26c26018b2",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "addThirdPartyAccountReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\n\n\nconst           {\n    accountNo,\n    ifsc,\n    bankName\n                } = msg.enterpriseBankAccountDetails\n\n\nmsg.url = `${IIFL_URL}/api/clients/${clientId}/third-party-bank-account-details`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nmsg.payload = {\n    \"accountTypeId\": 1,\n    \"name\": \"enterpriseName\",\n    \"accountNumber\": accountNo,//\"67896745532734\",\n    \"ifscCode\": ifsc,//\"SBIN0001632\",\n    \"bankName\": bankName,//\"SBI\",\n    \"accountType\": \"CURRENTACCOUNT\"\n    // \"branchName\": \"Bellandur\",\n    // \"bankCity\": \"Bangalore\",\n    // \"bankCode\": \"98978\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 186.6666717529297,
        "y": 1415.0000677108765,
        "wires": [
            [
                "1550c86fcc134d89"
            ]
        ]
    },
    {
        "id": "1550c86fcc134d89",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "addThirdPartyAccount",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 486.6666717529297,
        "y": 1415.0000677108765,
        "wires": [
            [
                "4e03cc76190e497a",
                "c5ccba4b33542a7f"
            ]
        ]
    },
    {
        "id": "4e03cc76190e497a",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "addThirdPartyAccount",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 766.6666717529297,
        "y": 1415.0000677108765,
        "wires": []
    },
    {
        "id": "c5ccba4b33542a7f",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "activateThirdPartyAccountReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\n\n\nconst clientThirdPartyBankAccountDetailAssociationId = msg.payload.clientThirdPartyBankAccountDetailAssociationId\nmsg.url = `${IIFL_URL}/api/client-third-party-bank-account-details/${clientThirdPartyBankAccountDetailAssociationId}/activate`\nmsg.method = \"PUT\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nmsg.payload = {\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 196.6666717529297,
        "y": 1515.0000677108765,
        "wires": [
            [
                "387f774266576673"
            ]
        ]
    },
    {
        "id": "387f774266576673",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "activateThirdPartyAccount",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 506.6666717529297,
        "y": 1515.0000677108765,
        "wires": [
            [
                "ddf0fc21b8ce3e71",
                "ddda7a5cc3aa58b0"
            ]
        ]
    },
    {
        "id": "ddf0fc21b8ce3e71",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "activateThirdPartyAccount",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 786.6666717529297,
        "y": 1515.0000677108765,
        "wires": []
    },
    {
        "id": "ddda7a5cc3aa58b0",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "initiateBankStatementAnalysisReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\nconsole.log(\"test\")\n\nconst clientThirdPartyBankAccountDetailAssociationId = msg.payload.clientThirdPartyBankAccountDetailAssociationId\nmsg.url = `${IIFL_URL}/api/client-third-party-bank-account-details/${clientThirdPartyBankAccountDetailAssociationId}/activate`\nmsg.method = \"PUT\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nmsg.payload = {\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 186.6666717529297,
        "y": 1615.0000677108765,
        "wires": [
            [
                "084a251e66bd63fa",
                "04811f28b04f0f65"
            ]
        ]
    },
    {
        "id": "084a251e66bd63fa",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "initiateBankStatementAnalysis",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 496.6666717529297,
        "y": 1615.0000677108765,
        "wires": [
            [
                "66874b2f57329d2c",
                "04811f28b04f0f65"
            ]
        ]
    },
    {
        "id": "66874b2f57329d2c",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "initiateBankStatementAnalysis",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 776.6666717529297,
        "y": 1615.0000677108765,
        "wires": []
    },
    {
        "id": "fb87403b9c58e3a3",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "saveClientId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 516.6666717529297,
        "y": 1735.0000677108765,
        "wires": [
            [
                "50536d6780805fe8",
                "92d7c60b05e4d288"
            ]
        ]
    },
    {
        "id": "04811f28b04f0f65",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveClientIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/service`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    enterpriseid: msg.enterpriseId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflClientId\",\n    \"value\": msg.clientId,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId,\n    \"enterpriseId\": msg.enterpriseId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 146.6666717529297,
        "y": 1735.0000677108765,
        "wires": [
            [
                "fb87403b9c58e3a3"
            ]
        ]
    },
    {
        "id": "50536d6780805fe8",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "saveClientId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 776.6666717529297,
        "y": 1735.0000677108765,
        "wires": []
    },
    {
        "id": "92d7c60b05e4d288",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveLeadIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${env.get(\"GO_URL\")}/field-value/service`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n    enterpriseid: msg.enterpriseId\n}\n\nmsg.payload = {\n    \"key\": \"iiflLeadId\",\n    \"value\": msg.leadId,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId,\n    \"enterpriseId\": msg.enterpriseId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 146.6666717529297,
        "y": 1815.0000677108765,
        "wires": [
            [
                "e9517a7806304033"
            ]
        ]
    },
    {
        "id": "e9517a7806304033",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "saveLeadId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 516.6666717529297,
        "y": 1815.0000677108765,
        "wires": [
            [
                "a8aef02ea5c7d2f8",
                "97fa262b7cb08e63"
            ]
        ]
    },
    {
        "id": "a8aef02ea5c7d2f8",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "saveLeadId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 776.6666717529297,
        "y": 1815.0000677108765,
        "wires": []
    },
    {
        "id": "1fb07682b9d16e1e",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "generateLeadDocReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${IIFL_URL}/api/leads/${msg.leadId}/document/generate/IIFL%20Loan%20Agreement`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {\n   \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1926.6666717529297,
        "y": 1375.0000677108765,
        "wires": [
            [
                "c2ce907a073183d1"
            ]
        ]
    },
    {
        "id": "c2ce907a073183d1",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "generateLeadDoc",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2236.6666717529297,
        "y": 1375.0000677108765,
        "wires": [
            [
                "8816c3acdd6ae618",
                "8f9514206e47caf0"
            ]
        ]
    },
    {
        "id": "8816c3acdd6ae618",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "generateLeadDoc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2556.6666717529297,
        "y": 1375.0000677108765,
        "wires": []
    },
    {
        "id": "8f9514206e47caf0",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "downloadLeadDocReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nmsg.docId = msg.payload.id \n// msg.docId = 3049\nmsg.url = `${IIFL_URL}/api/document/download/${msg.docId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {\n   \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1936.6666717529297,
        "y": 1455.0000677108765,
        "wires": [
            [
                "d3ea0d0868911cec"
            ]
        ]
    },
    {
        "id": "d3ea0d0868911cec",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "downloadLeadDoc",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2236.6666717529297,
        "y": 1455.0000677108765,
        "wires": [
            [
                "95efc5305242d41f",
                "0bbe87707fa915fc"
            ]
        ]
    },
    {
        "id": "95efc5305242d41f",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "downloadLeadDoc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2556.6666717529297,
        "y": 1455.0000677108765,
        "wires": []
    },
    {
        "id": "77b592770405c22d",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "initiateEsignReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${IIFL_URL}/api/leads/${msg.leadId}/esign/init`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload =\n{\n    \"clientId\": msg.clientId,\n    \"esignKey\": \"bl-esign\",\n    \"signingType\": \"ELECTRONIC\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2340,
        "y": 2080,
        "wires": [
            [
                "055bc894d08ce1e1"
            ]
        ]
    },
    {
        "id": "055bc894d08ce1e1",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "initiateEsign",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2650,
        "y": 2080,
        "wires": [
            [
                "7e7ef07752c6b641",
                "5cd1c5d9a83ec3fd"
            ]
        ]
    },
    {
        "id": "7e7ef07752c6b641",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "initiateEsign",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2970,
        "y": 2080,
        "wires": []
    },
    {
        "id": "d0a0ed332341bef7",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "pNach/eNach?",
        "func": "\n\nlet natch = msg.data.fieldValues.filter((fieldValue) => {\n    return fieldValue.key == \"nach\"\n})\n\nmsg.nach = \"pnach\"//natch[0].value\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1865.6666717529297,
        "y": 1979.0000677108765,
        "wires": [
            [
                "7cfa197b6ef1a784"
            ]
        ]
    },
    {
        "id": "7cfa197b6ef1a784",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "initiateNachReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${IIFL_URL}/api/leads/${msg.leadId}/nach/init`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload =\n{\n    \"amount\": \"50000\",\n    \"bankAccountDetailId\": \"214\",\n    \"debitFrequency\": \"MONTHLY\",\n    \"debitType\": \"FIXED_AMOUNT\",\n    \"fromDate\": new Date().toISOString().split(\"T\")[0],//\"2023-04-08\",\n    \"registrationMode\": \"physical\",//msg.nach==\"enach\"?\"API\":\"physical\",\n    \"toDate\": \"2023-10-20\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2085.6666717529297,
        "y": 1979.0000677108765,
        "wires": [
            [
                "7c286e766a6f19d3"
            ]
        ]
    },
    {
        "id": "7c286e766a6f19d3",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "initiateNach",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2395.6666717529297,
        "y": 1979.0000677108765,
        "wires": [
            [
                "bb1a060ed26cf407",
                "0a8be38952893f3b"
            ]
        ]
    },
    {
        "id": "bb1a060ed26cf407",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "initiateNach",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2715.6666717529297,
        "y": 1979.0000677108765,
        "wires": []
    },
    {
        "id": "202b427ded8f7b54",
        "type": "comment",
        "z": "e8842e93c37e68d3",
        "name": "hardCodedNatchReq",
        "info": "",
        "x": 1940,
        "y": 2200,
        "wires": []
    },
    {
        "id": "5cd1c5d9a83ec3fd",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveEsignIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/service`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    enterpriseid: msg.enterpriseId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflEsignId\",\n    \"value\": msg.payload.esignId,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"enterpriseId\": msg.enterpriseId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2340,
        "y": 2140,
        "wires": [
            [
                "3be82fd5efc25e68"
            ]
        ]
    },
    {
        "id": "3be82fd5efc25e68",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "saveEsignId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2710,
        "y": 2140,
        "wires": [
            [
                "3ad1adc114214f96"
            ]
        ]
    },
    {
        "id": "3ad1adc114214f96",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "saveEsignId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2970,
        "y": 2140,
        "wires": []
    },
    {
        "id": "0a8be38952893f3b",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveNachIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/service`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst nachId = 1620//msg.payload.resourceId\n\nmsg.nachId = nachId\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    enterpriseid: msg.enterpriseId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflNachId\",\n    \"value\": nachId,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"enterpriseId\": msg.enterpriseId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1866.6666717529297,
        "y": 2055.0000677108765,
        "wires": [
            [
                "c67fb72e922af84d"
            ]
        ]
    },
    {
        "id": "c67fb72e922af84d",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "saveNachId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2236.6666717529297,
        "y": 2055.0000677108765,
        "wires": [
            [
                "c067d7335fa5d7c6",
                "d7b0f1048d0a9929"
            ]
        ]
    },
    {
        "id": "c067d7335fa5d7c6",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "saveNachId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2496.6666717529297,
        "y": 2055.0000677108765,
        "wires": []
    },
    {
        "id": "d7b0f1048d0a9929",
        "type": "switch",
        "z": "e8842e93c37e68d3",
        "name": "",
        "property": "nach",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "pnach",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "enach",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1856.6666717529297,
        "y": 2135.0000677108765,
        "wires": [
            [
                "d8c65ed42d681cbe"
            ],
            []
        ]
    },
    {
        "id": "d8c65ed42d681cbe",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "generateP-nachDocReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${IIFL_URL}/api/leads/${msg.leadId}/nach/${msg.nachId}/generate-file`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {\n   \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2056.6666717529297,
        "y": 2135.0000677108765,
        "wires": [
            [
                "0d1ffb3aa3e1f5e0"
            ]
        ]
    },
    {
        "id": "0d1ffb3aa3e1f5e0",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "generateP-nachDoc",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2366.6666717529297,
        "y": 2135.0000677108765,
        "wires": [
            [
                "340467033835c515",
                "f9dc1a2d374cb8d6"
            ]
        ]
    },
    {
        "id": "340467033835c515",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "generateP-nachDoc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2686.6666717529297,
        "y": 2135.0000677108765,
        "wires": []
    },
    {
        "id": "439e7d266108eac6",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "downloadP-NathDoc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2526.6666717529297,
        "y": 2235.0000677108765,
        "wires": []
    },
    {
        "id": "727f5cc081c6f40c",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "downloadP-NathDoc",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2206.6666717529297,
        "y": 2235.0000677108765,
        "wires": [
            [
                "439e7d266108eac6",
                "37af8d6f68ab5843"
            ]
        ]
    },
    {
        "id": "f9dc1a2d374cb8d6",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "downloadP-NathDocReq",
        "func": "console.log({ node:\"downloadP-NatchDocReq\"})\n\nconst IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nmsg.docId = msg.payload.resourceId\nconst nachDoc = msg.payload.id\nmsg.url = `${IIFL_URL}/api/document/download/${nachDoc}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {\n   \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1896.6666717529297,
        "y": 2235.0000677108765,
        "wires": [
            [
                "727f5cc081c6f40c"
            ]
        ]
    },
    {
        "id": "c8244f98f0d204d1",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "initiateVclReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${IIFL_URL}/api/leads/${msg.leadId}/update-limit`\nmsg.method = \"PUT\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload =\n{\n    \"loanAmountRequested\": 100000\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1906.6666717529297,
        "y": 1155.0000677108765,
        "wires": [
            [
                "c00a59de1e2f6be8"
            ]
        ]
    },
    {
        "id": "c00a59de1e2f6be8",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "initiateVcl",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2206.6666717529297,
        "y": 1155.0000677108765,
        "wires": [
            [
                "b7439c897a5c60d6",
                "214113718349eb7b"
            ]
        ]
    },
    {
        "id": "b7439c897a5c60d6",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "initiateVcl",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2526.6666717529297,
        "y": 1155.0000677108765,
        "wires": []
    },
    {
        "id": "214113718349eb7b",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveVclIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/service`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\n// msg.natchId = msg.payload.resourceId\nmsg.vclAccountNumber = msg.payload.vclAccountNumber\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n    enterpriseid: msg.enterpriseId,\n}\n\nmsg.payload = {\n    \"key\": \"iiflVclId\",\n    \"value\": msg.payload.vclAccountNumber,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"enterpriseId\": msg.enterpriseId,\n    \"bankApplicationId\": msg.bankApplicationId,\n\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1906.6666717529297,
        "y": 1235.0000677108765,
        "wires": [
            [
                "64cd3911bc5dce3d"
            ]
        ]
    },
    {
        "id": "64cd3911bc5dce3d",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "saveVclId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2266.6666717529297,
        "y": 1235.0000677108765,
        "wires": [
            [
                "484d4463ef8836f1",
                "6597f3ac51b0af31"
            ]
        ]
    },
    {
        "id": "484d4463ef8836f1",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "saveVclId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2526.6666717529297,
        "y": 1235.0000677108765,
        "wires": []
    },
    {
        "id": "0bbe87707fa915fc",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "uploadFileReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\n\nconst token = flow.get(\"enterpriseToken\")\n\nmsg.headers = {\n    \"content-type\": 'multipart/form-data',\n    Authorization: `Bearer ${token}`\n};\n\nmsg.url = `${ADMIN_URL}/api/file/upload`\nmsg.method = \"POST\"\nmsg.payload = {\n    \"file\": {\n        \"value\": msg.payload,\n        \"options\": {\n            \"filename\": 'IIFL Loan document'\n        }\n    },\n    \"filename\": 'IIFL Loan document'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1906.6666717529297,
        "y": 1555.0000677108765,
        "wires": [
            [
                "f743b59db70ae941"
            ]
        ]
    },
    {
        "id": "f743b59db70ae941",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "uploadFile",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2176.6666717529297,
        "y": 1555.0000677108765,
        "wires": [
            [
                "cc541b387ae0a219",
                "aa3470a8827d8f78"
            ]
        ]
    },
    {
        "id": "cc541b387ae0a219",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "uploadFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2416.6666717529297,
        "y": 1555.0000677108765,
        "wires": []
    },
    {
        "id": "aa3470a8827d8f78",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveLoanAgreementReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/service`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    enterpriseid: msg.enterpriseId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflLoanAgreement\",\n    \"value\": msg.payload.key,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"enterpriseId\": msg.enterpriseId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1936.6666717529297,
        "y": 1635.0000677108765,
        "wires": [
            [
                "8267bb56245455d5"
            ]
        ]
    },
    {
        "id": "8267bb56245455d5",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "saveLoanAgreement",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2286.6666717529297,
        "y": 1635.0000677108765,
        "wires": [
            [
                "3ed6f7be6672e592",
                "d0a0ed332341bef7"
            ]
        ]
    },
    {
        "id": "3ed6f7be6672e592",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "saveLoanAgreement",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2546.6666717529297,
        "y": 1635.0000677108765,
        "wires": []
    },
    {
        "id": "37af8d6f68ab5843",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "uploadFileReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\n\nconst token = flow.get(\"enterpriseToken\")\n\nmsg.headers = {\n    \"content-type\": 'multipart/form-data',\n    Authorization: `Bearer ${token}`\n};\n\nmsg.url = `${ADMIN_URL}/api/file/upload`\nmsg.method = \"POST\"\nmsg.payload = {\n    \"file\": {\n        \"value\": msg.payload,\n        \"options\": {\n            \"filename\": 'IIFL Loan document'\n        }\n    },\n    \"filename\": 'IIFL Nach agreement'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1866.6666717529297,
        "y": 2295.0000677108765,
        "wires": [
            [
                "576eccf5414345cc"
            ]
        ]
    },
    {
        "id": "576eccf5414345cc",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "uploadFile",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2136.6666717529297,
        "y": 2295.0000677108765,
        "wires": [
            [
                "c6553b1fca00482e",
                "fb679d18598e9979"
            ]
        ]
    },
    {
        "id": "c6553b1fca00482e",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "uploadFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2376.6666717529297,
        "y": 2295.0000677108765,
        "wires": []
    },
    {
        "id": "fb679d18598e9979",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveP-NatchAgreementReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    enterpriseid: msg.enterpriseId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflNachAgreement\",\n    \"value\": msg.payload.key,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"enterpriseId\": msg.enterpriseId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1906.6666717529297,
        "y": 2375.0000677108765,
        "wires": [
            [
                "9f1f7c1d0575884c"
            ]
        ]
    },
    {
        "id": "9f1f7c1d0575884c",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "saveP-NatchAgreement",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2256.6666717529297,
        "y": 2375.0000677108765,
        "wires": [
            [
                "f9fbef4ea855807d"
            ]
        ]
    },
    {
        "id": "f9fbef4ea855807d",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "saveLoanAgreement",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2506.6666717529297,
        "y": 2375.0000677108765,
        "wires": []
    },
    {
        "id": "51203aba317e60c4",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "function 166",
        "func": "// console.log({file:msg.file})\nif(msg.file){\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 2800,
        "wires": [
            [
                "fb37e062a9ae96e5",
                "cb8af0ee537f4130"
            ]
        ]
    },
    {
        "id": "3f2ca455eb3f16a3",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "sendFilesToReaderReq",
        "func": "// msg.payload.documentType = \"BUSINESS_PAN\"\nconsole.log({payload: msg.payload})\n\nif(msg.documentType !== \"SELFIE\"){\n    for (let file of msg?.payload?.files) {\n        // console.log({file})\n        switch (msg?.payload?.documentType) {\n\n\n\n            case \"PERSONAL_PAN\": {\n\n                node.send({\n                    ...msg,\n                    tag: \"pan-front\",\n                    file: file,\n                    payload: {}\n                })\n                break\n            }\n\n            case \"BUSINESS_PAN\": {\n\n                node.send({\n                    ...msg,\n                    tag: \"pan-front\",\n                    file: file,\n                    payload: {}\n                })\n                break\n            }\n\n            case \"AADHAAR\": {\n\n                if (file.type === \"AADHAAR_FRONT\") {\n\n                    node.send({\n                        ...msg,\n                        tag: \"aadhaar-front\",\n                        file: file,\n                        payload: {}\n                    })\n                } else if (file.type === \"AADHAAR_BACK\") {\n                    console.log(\"aadhaar back\")\n                    node.send({\n                        ...msg,\n                        tag: \"aadhaar-back\",\n                        file: file,\n                        payload: {}\n                    })\n                }\n                break\n            }\n\n\n\n\n            default: {\n                // node.send({\n                //     ...msg,\n                //     file: \"\",\n                //     payload:{}\n                // })\n            }\n        }\n}\n// node.send({\n//     ...msg,\n//     file: file,\n//     // payload:{}\n//     // businessPartnerId: msg.businessPartnerId,\n//     // bankId: msg.bankId,\n//     // enterpriseId: msg.enterpriseId,\n//     // bankProductConfigId: msg.bankProductConfigId,\n//     // dealerCode : msg.dealerCode\n// })\n} else {\n    node.send({\n        ...msg,\n        tag: \"SELFIE\",\n        file: msg.payload[0],\n        payload: {}\n    })\n}\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 2800,
        "wires": [
            [
                "51203aba317e60c4"
            ]
        ]
    },
    {
        "id": "fb37e062a9ae96e5",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "file",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2390,
        "y": 2800,
        "wires": []
    },
    {
        "id": "cb8af0ee537f4130",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "Setting fileID of a particular file",
        "func": "msg.fid = msg.file.fileId;\n\nmsg.method = \"GET\"\nmsg.url = `${env.get(\"GO_URL\")}/file/read/${msg.file.fileId}`;\nmsg.fileUrl = `${env.get(\"GO_URL\")}/file/read/${msg.file.fileId}`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 2900,
        "wires": [
            [
                "d0899605a72b48e7"
            ]
        ]
    },
    {
        "id": "d0899605a72b48e7",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "read file",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "x-actyv-api-config-key",
                "valueType": "other",
                "valueValue": "8HhkIWzVMSnSgvlhxr"
            }
        ],
        "x": 2120,
        "y": 2900,
        "wires": [
            [
                "a792592be3175eed"
            ]
        ]
    },
    {
        "id": "a792592be3175eed",
        "type": "base64",
        "z": "e8842e93c37e68d3",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 2300,
        "y": 2900,
        "wires": [
            [
                "68ccd4ff19bf6be1"
            ]
        ]
    },
    {
        "id": "68ccd4ff19bf6be1",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "detectMimeType",
        "func": "const signatures = {\n    JVBERi0: \"application/pdf\",\n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"application/vnd.openxmlformats-officedocument.\",\n    PK: \"application/zip\",\n};\n\n// console.log({signature:msg.file.fileType})\n\n\nlet fileName = msg.fid.split(\"-\");\nlet extension = msg.file.fileType.split(\"/\")[1];\n// let filePath = `${msg.LOCAL_PATH}/${fileName}.${extension}`;\n// const base64String = msg.payload;\n\n// for (let ext in signatures) {\n//     const base64Sig = base64String.slice(0, ext.length)\n//     if (base64Sig === ext) {\n//         fileName = msg.fid\n//         extension = getExtension(ext)\n//         filePath = `${msg.LOCAL_PATH}/${fileName}${msg.ind}.${extension}`\n//     }\n// }\n\nmsg.filename = `${fileName[fileName.length-1]}.${extension}`\n\n// console.log({fun:msg.filename})\n\n// msg.filePath = filePath\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 2980,
        "wires": [
            [
                "d1b61a694a1729d8",
                "f649f1a9bc4301c8"
            ]
        ]
    },
    {
        "id": "d1b61a694a1729d8",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "document type",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "documentType",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2060,
        "y": 2960,
        "wires": []
    },
    {
        "id": "f649f1a9bc4301c8",
        "type": "switch",
        "z": "e8842e93c37e68d3",
        "name": "switch by documentType",
        "property": "documentType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "KYC",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BANK_STATEMENT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SELFIE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 2090,
        "y": 3060,
        "wires": [
            [
                "3b13bb6d3257ebc6"
            ],
            [],
            [
                "17cf58e10d2ea70d"
            ]
        ]
    },
    {
        "id": "3b13bb6d3257ebc6",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "uploadKycDocReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\n\n//set clientId and leadId to msg object\n// msg.clientId = clientId,\n// msg.leadId = msg.payload.leadId\n\nmsg.url = `${IIFL_URL}/api/clients/${clientId}/upload-document`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nconsole.log({file:msg.file,filename:msg.filename,tag:msg.tag})\nmsg.payload = {\n    \"tag\": msg.tag,//\"aadhaar-front\",\n    \"document\": {\n        \"fileName\": msg.filename,//\"sample.jpeg\",\n        \"base64\": `data:${msg.file.fileType};base64,${msg.payload}`\n    },\n    // \"isFaceMatchRequired\": false,\n    // \"isImageQualityRequired\": false,\n    // \"isMaskRequired\": false,\n    // \"isOCRNameMatchRequired\": false\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2350,
        "y": 2980,
        "wires": [
            [
                "81381b115b373252"
            ]
        ]
    },
    {
        "id": "81381b115b373252",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "uploadKycDoc",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2560,
        "y": 2980,
        "wires": [
            [
                "013f4501ad08ff68"
            ]
        ]
    },
    {
        "id": "013f4501ad08ff68",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "uploadKycDoc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2760,
        "y": 2980,
        "wires": []
    },
    {
        "id": "17cf58e10d2ea70d",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "uploadSelfieReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\n\n//set clientId and leadId to msg object\n// msg.clientId = clientId,\n// msg.leadId = msg.payload.leadId\n\nmsg.url = `${IIFL_URL}/api/clients/${clientId}/selfie`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\n// console.log({file:msg.file,filename:msg.filename,tag:msg.tag})\nmsg.payload = {\n    \"doLiveliness\": true,\n    \"image\": {\n        \"fileName\": \"abc\",\n        \"filePath\": msg.payload,\n        \"fileType\": \".jpeg\",\n        \"storageType\": \"base64\"\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2340,
        "y": 3140,
        "wires": [
            [
                "0e7e80d01030a490"
            ]
        ]
    },
    {
        "id": "0e7e80d01030a490",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "uploadSelfie",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2550,
        "y": 3140,
        "wires": [
            [
                "ecd02dd906ea5e54"
            ]
        ]
    },
    {
        "id": "ecd02dd906ea5e54",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "uploadSelfie",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2730,
        "y": 3140,
        "wires": []
    },
    {
        "id": "c3c9f25fce09fd4a",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "AuthenticateBankUserReq",
        "func": "\nconst IIFL_BANK_ADMIN_EMAIL = env.get('IIFL_BANK_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": PASSWORD,\n    \"email\": IIFL_BANK_ADMIN_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 200,
        "wires": [
            [
                "9ef6f004b1d3273f"
            ]
        ]
    },
    {
        "id": "9ef6f004b1d3273f",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "AuthenticateBankUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 200,
        "wires": [
            [
                "b61d7c8b2f87835a"
            ]
        ]
    },
    {
        "id": "b61d7c8b2f87835a",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "saveBankToken",
        "func": "flow.set(\"bankToken\",msg.payload.idToken)\n// console.log({bankToken: msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 200,
        "wires": [
            [
                "1f3f810b8fb8f45e"
            ]
        ]
    },
    {
        "id": "f1f8256916788874",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "initiateBureau",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst leadId = msg.leadId\n\n\nconst clientThirdPartyBankAccountDetailAssociationId = msg.payload.clientThirdPartyBankAccountDetailAssociationId\nmsg.url = `${IIFL_URL}/api/leads/${leadId}/bureaus`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nmsg.payload = {\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 1760,
        "wires": [
            [
                "a4c1bf879c30bbfb"
            ]
        ]
    },
    {
        "id": "a4c1bf879c30bbfb",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "initiateBankStatementAnalysis",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 490,
        "y": 1760,
        "wires": [
            [
                "146cbdef18efb9ac"
            ]
        ]
    },
    {
        "id": "146cbdef18efb9ac",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "initiateBankStatementAnalysis",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1760,
        "wires": []
    },
    {
        "id": "d21a512a64d709cb",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "initiateBureauPush",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\n\nmsg.cibil = msg.payload\n\nmsg.url = `${IIFL_URL}/api/leads/${clientId}/bureaus`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nmsg.payload = {\n    \"source_name\": \"CIBIL_HARD_PULL\",\n    \"user_id\": \"63462343847\",\n    \"payload\": msg.cibil\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 136.6666717529297,
        "y": 2015.0000677108765,
        "wires": [
            [
                "c18acd2df02fccb9"
            ]
        ]
    },
    {
        "id": "c18acd2df02fccb9",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "initiateBankStatementAnalysis",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 496.6666717529297,
        "y": 2015.0000677108765,
        "wires": [
            [
                "c6ab63727ead4e3d",
                "c070abe593405c79"
            ]
        ]
    },
    {
        "id": "c6ab63727ead4e3d",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "initiateBankStatementAnalysis",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 776.6666717529297,
        "y": 2015.0000677108765,
        "wires": []
    },
    {
        "id": "c070abe593405c79",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "runningDecision",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst clientId = msg.clientId\n\nmsg.cibil = msg.payload\n\n\nmsg.url = `${IIFL_URL}/v1/sentinel/decideCompound`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\nmsg.payload = {\n    \"reference_id\": \"a219d937-ef0e-4dff-996c-56f86e159140\",//msg.payload.data.reference_id,\n    \"policy_version\": \"iifl_bl_compound_policy_v1.2\",\n    \"user_id\": \"2664\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 126.66667175292969,
        "y": 2095.0000677108765,
        "wires": [
            [
                "faa509f689075584"
            ]
        ]
    },
    {
        "id": "faa509f689075584",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "runningDecision",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 446.6666717529297,
        "y": 2095.0000677108765,
        "wires": [
            [
                "24629901470304a4",
                "97fa262b7cb08e63"
            ]
        ]
    },
    {
        "id": "24629901470304a4",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "runningDecision",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 726.6666717529297,
        "y": 2095.0000677108765,
        "wires": []
    },
    {
        "id": "982d5f92330f55d4",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "debug 313",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 1020,
        "wires": []
    },
    {
        "id": "d761cd61d63908b7",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "addBusinessDetails",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nconst leadId = msg.payload.leadId\n\n//set clientId and leadId to msg object\nmsg.clientId = msg.payload.clientId,\nmsg.leadId = msg.payload.leadId\n\nmsg.url = `${IIFL_URL}/api/leads/${leadId}/add-business`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\nlet registrationDateTemp = msg.gstIn.data.rgdt.split(\"/\")\nlet registrationDate = `${registrationDateTemp[2]}-${registrationDateTemp[1]}-${registrationDateTemp[0]}`\nconst aadhar = msg.data.documents.filter((document) => document.documentType ===\"AADHAAR\");\n\nconst pan = msg.data.documents.filter((document) => document.documentType === \"PERSONAL_PAN\");\nconst name = aadhar[0].data.name.split(\" \")\nmsg.payload = {\n    \"businessType\": \"Private\",//msg.gstIn.data.ctb,//\n    \"dateOfEstablishment\": \"2022-12-01\",//new Date(registrationDate).toISOString().split(\"T\")[0],//\n    \"name\": msg.data.businessPartner.name,//\"Ram Enterprises\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1280,
        "wires": [
            [
                "7d59d61db454c5c2",
                "d3de26f5ad795525"
            ]
        ]
    },
    {
        "id": "d3de26f5ad795525",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "name": "addBusinessDetails",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 1280,
        "wires": [
            [
                "2b620af111c0fc35"
            ]
        ]
    },
    {
        "id": "2b620af111c0fc35",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "addBusinessDetails",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1280,
        "wires": []
    },
    {
        "id": "6597f3ac51b0af31",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "approveVclReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${BASE_URL}/api/virtual-credit-line/${msg.vclAccountNumber}/approve`\nmsg.method = \"PUT\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1906.6666717529297,
        "y": 1315.0000677108765,
        "wires": [
            [
                "1ba75a349acdefa8"
            ]
        ]
    },
    {
        "id": "1ba75a349acdefa8",
        "type": "http request",
        "z": "e8842e93c37e68d3",
        "d": true,
        "name": "approveVcl",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2216.6666717529297,
        "y": 1315.0000677108765,
        "wires": [
            [
                "c6915eea16a205aa",
                "d0a0ed332341bef7"
            ]
        ]
    },
    {
        "id": "c6915eea16a205aa",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "approveVcl",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2536.6666717529297,
        "y": 1315.0000677108765,
        "wires": []
    },
    {
        "id": "3e9e3c20e266386d",
        "type": "function",
        "z": "e8842e93c37e68d3",
        "name": "mockCreateClient",
        "func": "msg.payload = {\n    clientId: 2762,\n    leadId: 1707\n}\n\nconsole.log(\"mock\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1140,
        "wires": [
            [
                "ca3b93f4132c427c"
            ]
        ]
    },
    {
        "id": "7d59d61db454c5c2",
        "type": "debug",
        "z": "e8842e93c37e68d3",
        "name": "debug 339",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 1320,
        "wires": []
    },
    {
        "id": "228993283d56c854",
        "type": "inject",
        "z": "09338278a6827f06",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "93905e3b32148be1"
            ]
        ]
    },
    {
        "id": "93905e3b32148be1",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "Set env variables",
        "func": "\n// let v8 = global.get(\"v8\");\n// const totalHeapSize = v8.getHeapStatistics().total_available_size;\n// let totalHeapSizeInMB = (totalHeapSize / 1024 / 1024).toFixed(2)\n// node.warn(\"V8 Total Heap Size \"+totalHeapSize+\" bytes\");\n\nconst ENV_VARIABLES = new Map();\n\nENV_VARIABLES.set('PAYLATER_URL', \"https://actyv-platform-paylater-service-v1.qa.actyv.com\")\nENV_VARIABLES.set('GO_URL', \"https://actyv-platform-go-service.qa.actyv.com\")\nENV_VARIABLES.set('ADMIN_URL', \"https://actyv-platform-admin-service.qa.actyv.com\")\n\nENV_VARIABLES.set('BUSINESS_IDENTIFIER', \"ABBCB2066P\")\nENV_VARIABLES.set('BUSINESS_TYPE', \"ENTERPRISE\")\nENV_VARIABLES.set('BANK_KEY', \"msl\")\nENV_VARIABLES.set('X_ACTYV_API_CONFIG_KEY', \"8HhkIWzVMSnSgvlhxr\")\nENV_VARIABLES.set('BANK_UNIQUE_IDENTIFIER', \"AASCA2089A\")\nENV_VARIABLES.set('BASE_URL', \"https://iifl-atlas-uat.finfluxtrial.io\")\nENV_VARIABLES.set('tenant_id', \"iifl-qa\")\nENV_VARIABLES.set('BANK_PRODUCT_KEY', \"axis-sabari-product\")\n\nENV_VARIABLES.set('BNPL_ENTERPRISE_USER', \"surajkumar@aplapollo.com\")\nENV_VARIABLES.set('BNPL_BANK_USER', \"vivekanand.t@sgfinserv.in\")\nENV_VARIABLES.set('BNPL_USER_PASSWORD', \"890ioP@12\")\nENV_VARIABLES.set('IIFL_USER', \"demoUser2\")\nENV_VARIABLES.set('IIFL_USER_PASSWORD', \"fc895Tbr2i&w@\")\n\nglobal.set('envVariables', ENV_VARIABLES)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 100,
        "wires": [
            [
                "eb5e3cc61a2702c1"
            ]
        ]
    },
    {
        "id": "10b875fbb12ea8ee",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "AuthenticateIIFLUserReq",
        "func": "const IIFL_USER = env.get('IIFL_USER')\nconst IIFL_USER_PASSWORD = env.get('IIFL_USER_PASSWORD')\nconst IIFL_URL = env.get('IIFL_URL');\n\n\nmsg.url = `${IIFL_URL}/api/auth/login`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": IIFL_USER_PASSWORD,\n        \"userName\": IIFL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 380,
        "wires": [
            [
                "a8d7d1c972276370"
            ]
        ]
    },
    {
        "id": "a8d7d1c972276370",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "AuthenticateIIFLUser",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 480,
        "y": 380,
        "wires": [
            [
                "eea2d5dd45010ea8",
                "8b892fbcda46021a"
            ]
        ]
    },
    {
        "id": "eea2d5dd45010ea8",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "saveIIFLToken",
        "func": "flow.set(\"iiflToken\", msg.payload.accessToken)\nconsole.log({token:msg.payload})\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 380,
        "wires": [
            [
                "7855873c45c3a33b"
            ]
        ]
    },
    {
        "id": "7855873c45c3a33b",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getBankProductKeyReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\n\nmsg.url = `${GO_URL}/bank-application-config/key/${BANK_PRODUCT_KEY}`\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 480,
        "wires": [
            [
                "cda5824aef9f6d83"
            ]
        ]
    },
    {
        "id": "cda5824aef9f6d83",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "getBankProductKeyReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 480,
        "wires": [
            [
                "6ceb7c49590b5b78",
                "ed50a1baf6cf2c41"
            ]
        ]
    },
    {
        "id": "6ceb7c49590b5b78",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "bankProductConfig",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 480,
        "wires": []
    },
    {
        "id": "ed50a1baf6cf2c41",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getPendingBankApplicationsReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\n\nmsg.bankId = msg.payload.bank\nmsg.enterpriseId = msg.payload.allowedEnterprises[0]\n\nmsg.url = `${GO_URL}/bank-application?bankID=${msg.bankId}&enterpriseID=${msg.enterpriseId}`\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 600,
        "wires": [
            [
                "ac24ab74f66e7a9c"
            ]
        ]
    },
    {
        "id": "ac24ab74f66e7a9c",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "getPendingBankApplications",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 600,
        "wires": [
            [
                "6d2568904f1f711e",
                "18a39e7851d7744b"
            ]
        ]
    },
    {
        "id": "6d2568904f1f711e",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "pendingBankApplications",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 600,
        "wires": []
    },
    {
        "id": "18a39e7851d7744b",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "mockBankApplication",
        "func": "msg.payload = [\n    {\n        \"_id\": \"63ff1b2f723b070cae7c09c0\",\n        \"createdOn\": \"Tue, 21 Feb 2023 11:32:41 GMT\",\n        \"createdBy\": \"63750a1995a6a16f696d2f7b\",\n        \"updatedOn\": \"Tue, 21 Feb 2023 11:32:42 GMT\",\n        \"isDeleted\": false,\n        \"bankApplicationDocumentConfigKey\": \"63cfbc85edee8f7eee6f3d6e\",\n        \"bankName\": \"Axis Bank Limited\",\n        \"productFamily\": \"PAYLATER\",\n        \"productType\": \"PAYLATER\",\n        \"status\": \"DOCUMENT_CAPTURE\",\n        \"businessPartnerName\": \"Shri Durga Metalex\",\n        \"businessPartnerID\": \"63750a19ca608a344ae556d6\",\n        \"productGranularity\": \"product\",\n        \"bankProductConfigId\": \"63cfbe250c729962c86ec8a7\",\n        \"bankId\": \"63c8fa075f1c5afda77bae5e\",\n        \"bankApplicationLabel\": \"Continue Bank Application\",\n        \"bankApplicationURL\": \"www.google.com\",\n        \"enterpriseId\": \"638c73f16ea52ce57470c1a9\",\n        \"approvedLimit\": null,\n        \"availableLimit\": null\n    }\n]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 680,
        "wires": [
            [
                "72b57cd0da748ed6"
            ]
        ]
    },
    {
        "id": "72b57cd0da748ed6",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "LoopOverBankApplication",
        "func": "\nfor(let bankApplication of msg.payload){\n    // console.log({bankApplication})\n    node.send({\n        businessPartnerId: bankApplication.businessPartnerID,\n        bankId: bankApplication.bankId,\n        enterpriseId: bankApplication.enterpriseId,\n        bankProductConfigId: bankApplication.bankProductConfigId,\n        bankApplicationId : bankApplication._id,\n        dataPartDone: \"false\"\n    })\n}\n\n// return msg;\n\n/**\n *  \"_id\": \"63f4abd94f0acc5aa73d9e46\",\n        \"createdOn\": \"Tue, 21 Feb 2023 11:32:41 GMT\",\n        \"createdBy\": \"63750a1995a6a16f696d2f7b\",\n        \"updatedOn\": \"Tue, 21 Feb 2023 11:32:42 GMT\",\n        \"isDeleted\": false,\n        \"bankApplicationDocumentConfigKey\": \"63cfbc85edee8f7eee6f3d6e\",\n        \"bankName\": \"Axis Bank Limited\",\n        \"productFamily\": \"PAYLATER\",\n        \"productType\": \"PAYLATER\",\n        \"status\": \"DOCUMENT_CAPTURE\",\n        \"businessPartnerName\": \"Shri Durga Metalex\",\n        \"businessPartnerID\": \"63750a19ca608a344ae556d6\",\n        \"productGranularity\": \"product\",\n        \"bankProductConfigId\": \"63cfbe250c729962c86ec8a7\",\n        \"bankId\": \"63c8fa075f1c5afda77bae5e\",\n        \"bankApplicationLabel\": \"Continue Bank Application\",\n        \"bankApplicationURL\": \"www.google.com\",\n        \"enterpriseId\": \"638c73f16ea52ce57470c1a9\",\n        \"approvedLimit\": null,\n        \"availableLimit\": null\n */",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 680,
        "wires": [
            [
                "0684f8dc42bd19e4",
                "a460b00268816abf"
            ]
        ]
    },
    {
        "id": "0684f8dc42bd19e4",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "bankApplication",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 680,
        "wires": []
    },
    {
        "id": "a460b00268816abf",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getDealerCodeReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/business-relationship/${msg.businessPartnerId}/${msg.enterpriseId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${enterpriseToken}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 740,
        "wires": [
            [
                "beb4a2357a741554"
            ]
        ]
    },
    {
        "id": "beb4a2357a741554",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "getDealerCode",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 520,
        "y": 740,
        "wires": [
            [
                "25bfa163c9eda5fd",
                "07c2e0c61982a2c1"
            ]
        ]
    },
    {
        "id": "25bfa163c9eda5fd",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "debug 260",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 740,
        "wires": []
    },
    {
        "id": "146cc0a34b284216",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "debug 261",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 100,
        "wires": []
    },
    {
        "id": "8b892fbcda46021a",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "debug 262",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 340,
        "wires": []
    },
    {
        "id": "cfc98e75d3b550c6",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getClientIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/find-field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.vclId = msg.payload[0].value\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflClientId\",\n   \n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 860,
        "wires": [
            [
                "2bb24f48cecef4ae"
            ]
        ]
    },
    {
        "id": "2bb24f48cecef4ae",
        "type": "http request",
        "z": "09338278a6827f06",
        "d": true,
        "name": "getClientId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 860,
        "wires": [
            [
                "762e11096983c174",
                "d5169b5159bd5674"
            ]
        ]
    },
    {
        "id": "762e11096983c174",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "getClientId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 860,
        "wires": []
    },
    {
        "id": "d5169b5159bd5674",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getLeadIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${env.get(\"GO_URL\")}/field-value/find-field-value`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.clientId = msg.payload[0].value\n\nmsg.payload = {\n    \"key\": \"iiflLeadId\",\n    \n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 920,
        "wires": [
            [
                "7508a4c1907c9bcf"
            ]
        ]
    },
    {
        "id": "7508a4c1907c9bcf",
        "type": "http request",
        "z": "09338278a6827f06",
        "d": true,
        "name": "getLeadId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 920,
        "wires": [
            [
                "4d924d6fe14c308d",
                "3af5c33b137c8005"
            ]
        ]
    },
    {
        "id": "4d924d6fe14c308d",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "saveLeadId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 920,
        "wires": []
    },
    {
        "id": "3af5c33b137c8005",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getNatchIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/find-field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\n// msg.eSignId = msg.payload[0].value\nmsg.leadId = msg.payload[0].value\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflNachId\",\n    \n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1060,
        "wires": [
            [
                "1865d612ac68a70e"
            ]
        ]
    },
    {
        "id": "1865d612ac68a70e",
        "type": "http request",
        "z": "09338278a6827f06",
        "d": true,
        "name": "getNatchId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 490,
        "y": 1060,
        "wires": [
            [
                "efb7a0b1dc693a96",
                "bbb151e5a4e5a6e7"
            ]
        ]
    },
    {
        "id": "efb7a0b1dc693a96",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "saveEsignId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1060,
        "wires": []
    },
    {
        "id": "bbb151e5a4e5a6e7",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getNatchStatusReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\nmsg.nachId = msg.payload[0].value\n\nmsg.url = `${IIFL_URL}/api/leads/${msg.leadId}/nach/${msg.nachId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1280,
        "wires": [
            [
                "074093fa43c9f38f"
            ]
        ]
    },
    {
        "id": "074093fa43c9f38f",
        "type": "http request",
        "z": "09338278a6827f06",
        "d": true,
        "name": "getNatchStatus",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 460,
        "y": 1280,
        "wires": [
            [
                "ee0bd04a9553f430",
                "4f7fd2cbb351d2a0"
            ]
        ]
    },
    {
        "id": "ee0bd04a9553f430",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "getNatchStatus",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 1280,
        "wires": []
    },
    {
        "id": "4f7fd2cbb351d2a0",
        "type": "switch",
        "z": "09338278a6827f06",
        "name": "",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "COMPLETED_SUCCESSFULLY",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 210,
        "y": 1360,
        "wires": [
            [
                "c0d43dab98f06fbe"
            ]
        ]
    },
    {
        "id": "07c2e0c61982a2c1",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "getVCLIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/find-field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflVclId\",\n   \n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 800,
        "wires": [
            [
                "1efc1171ceaec18b"
            ]
        ]
    },
    {
        "id": "1efc1171ceaec18b",
        "type": "http request",
        "z": "09338278a6827f06",
        "d": true,
        "name": "getVCLId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 480,
        "y": 800,
        "wires": [
            [
                "1c094f567c7ad1e7",
                "cfc98e75d3b550c6"
            ]
        ]
    },
    {
        "id": "1c094f567c7ad1e7",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "getVCLId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 800,
        "wires": []
    },
    {
        "id": "6ed78d090be39040",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "createTenorAndRateSpreadReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\n\nmsg.vcl = msg.payload\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms`\nmsg.method = \"POST\"\nmsg.payload = {\n    \"loanProductID\": \"BNPL\",\n    \"bankID\": msg.bankId,\n    \"loanID\": msg.loanId,\n    \"fromDuration\": \"P1Y2M3DT4H5M6S\",\n    \"toDuration\": \"P1Y2M3DT4H5M6S\",\n    \"benchmarkRateID\": msg.benchmark,//\"b7802e04-2416-4365-ab07-44ac283d1b8a\",\n    \"bankSpread\": \"\",\n    \"variableSpread\": msg.vcl.rateOfInterest,\n    \"actyvSpread\": 1,\n    \"additionalCashbackCodes\": [\n        \"UYUS\",\n        \"CSY+23\"\n    ],\n    \"bankMaxAllowedRate\": 9.008,\n    \"doesActyvSpreadBreachThreshold\": false,\n    \"actyvSpreadExceedingThreshold\": 1.234,\n    \"validFrom\": \"2022-11-31 00:00:00.000000+00\",\n    \"ValidTill\": \"2024-11-31 00:00:00.000000+00\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 2100,
        "wires": [
            [
                "ce44db861ab36ffe"
            ]
        ]
    },
    {
        "id": "ce44db861ab36ffe",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "createTenorAndRateSpread",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 540,
        "y": 2100,
        "wires": [
            [
                "9471ec1bb4551452"
            ]
        ]
    },
    {
        "id": "9471ec1bb4551452",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "createTenorAndRateSpread",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 2100,
        "wires": []
    },
    {
        "id": "eb5e3cc61a2702c1",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst ENTERPRISE_USER_EMAIL = env.get('ENTERPRISE_USER_EMAIL')\nconst ENTERPRISE_USER_PASSWORD = env.get('ENTERPRISE_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": ENTERPRISE_USER_PASSWORD,\n    \"email\": ENTERPRISE_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 200,
        "wires": [
            [
                "2bdf5baca6206272"
            ]
        ]
    },
    {
        "id": "2bdf5baca6206272",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "AuthenticateEnterpriseUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 200,
        "wires": [
            [
                "940d5fd65cdcbe2d"
            ]
        ]
    },
    {
        "id": "940d5fd65cdcbe2d",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "saveEnterpriseToken",
        "func": "flow.set(\"enterpriseToken\",msg.payload.idToken)\n// console.log(msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 200,
        "wires": [
            [
                "31c49ad126435858"
            ]
        ]
    },
    {
        "id": "31c49ad126435858",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "AuthenticateBankUserReq",
        "func": "\nconst BANK_USER_EMAIL = env.get('BANK_USER_EMAIL')\nconst BANK_USER_PASSWORD = env.get('BANK_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": BANK_USER_PASSWORD,\n    \"email\": BANK_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 280,
        "wires": [
            [
                "a7e37a1c0bbc3fcf"
            ]
        ]
    },
    {
        "id": "a7e37a1c0bbc3fcf",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "AuthenticateBankUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 480,
        "y": 280,
        "wires": [
            [
                "28cd229840c45eb0"
            ]
        ]
    },
    {
        "id": "28cd229840c45eb0",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "saveBankToken",
        "func": "flow.set(\"bankToken\",msg.payload.idToken)\n// console.log(msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 280,
        "wires": [
            [
                "10b875fbb12ea8ee"
            ]
        ]
    },
    {
        "id": "fad752574aec8141",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "initiateEsign",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 450,
        "y": 1700,
        "wires": [
            [
                "264006cba8faf137",
                "633a1f9d4e7be4a4"
            ]
        ]
    },
    {
        "id": "432ba4a9f478531d",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "initiateEsignReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${IIFL_URL}/api/leads/${msg.leadId}/esign/init`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload =\n{\n    \"clientId\": msg.clientId,\n    \"esignKey\": \"bl-esign\",\n    \"signingType\": \"ELECTRONIC\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1700,
        "wires": [
            [
                "fad752574aec8141"
            ]
        ]
    },
    {
        "id": "264006cba8faf137",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "initiateEsign",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1700,
        "wires": []
    },
    {
        "id": "633a1f9d4e7be4a4",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "saveEsignIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/service`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    enterpriseid: msg.enterpriseId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflEsignId\",\n    \"value\": msg.payload.esignId,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"enterpriseId\": msg.enterpriseId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1760,
        "wires": [
            [
                "09de1d4437b77f54"
            ]
        ]
    },
    {
        "id": "09de1d4437b77f54",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "saveEsignId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 1760,
        "wires": [
            [
                "ead9568c8d24a7c8"
            ]
        ]
    },
    {
        "id": "ead9568c8d24a7c8",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "saveEsignId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1760,
        "wires": []
    },
    {
        "id": "c0d43dab98f06fbe",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "generateLeadDocReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${IIFL_URL}/api/leads/${msg.leadId}/document/generate/IIFL%20Loan%20Agreement`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {\n   \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1440,
        "wires": [
            [
                "72e8f0cbef3d5cfd"
            ]
        ]
    },
    {
        "id": "72e8f0cbef3d5cfd",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "generateLeadDoc",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 1440,
        "wires": [
            [
                "ed2c443f0e7ae541",
                "cc121330eaa61751"
            ]
        ]
    },
    {
        "id": "ed2c443f0e7ae541",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "generateLeadDoc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 1440,
        "wires": []
    },
    {
        "id": "cc121330eaa61751",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "downloadLeadDocReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nmsg.docId = msg.payload.id \n// msg.docId = 3049\nmsg.url = `${IIFL_URL}/api/document/download/${msg.docId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {\n   \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1520,
        "wires": [
            [
                "d69e614c9ca0b2ea"
            ]
        ]
    },
    {
        "id": "d69e614c9ca0b2ea",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "downloadLeadDoc",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 1520,
        "wires": [
            [
                "087d311fb27e74d8",
                "ead6b7246d569355"
            ]
        ]
    },
    {
        "id": "087d311fb27e74d8",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "downloadLeadDoc",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 1520,
        "wires": []
    },
    {
        "id": "ead6b7246d569355",
        "type": "function",
        "z": "09338278a6827f06",
        "name": "uploadFileReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\n\nconst token = flow.get(\"enterpriseToken\")\n\nmsg.headers = {\n    \"content-type\": 'multipart/form-data',\n    Authorization: `Bearer ${token}`\n};\n\nmsg.url = `${ADMIN_URL}/api/file/upload`\nmsg.method = \"POST\"\nmsg.payload = {\n    \"file\": {\n        \"value\": msg.payload,\n        \"options\": {\n            \"filename\": 'IIFL Loan document'\n        }\n    },\n    \"filename\": 'IIFL Loan document'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1620,
        "wires": [
            [
                "ebdddf7ce6535da3"
            ]
        ]
    },
    {
        "id": "ebdddf7ce6535da3",
        "type": "http request",
        "z": "09338278a6827f06",
        "name": "uploadFile",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 410,
        "y": 1620,
        "wires": [
            [
                "cac10bececfaf851",
                "432ba4a9f478531d"
            ]
        ]
    },
    {
        "id": "cac10bececfaf851",
        "type": "debug",
        "z": "09338278a6827f06",
        "name": "uploadFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 1620,
        "wires": []
    },
    {
        "id": "0e8998edac209abd",
        "type": "inject",
        "z": "6aa904d67d2907b2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 100,
        "wires": [
            [
                "2f78549a2c7adca0"
            ]
        ]
    },
    {
        "id": "234c2c522a2ab078",
        "type": "http request",
        "z": "6aa904d67d2907b2",
        "name": "readFile",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 720,
        "y": 100,
        "wires": [
            [
                "776d5a708946d663",
                "5dd52f5fd4298809"
            ]
        ]
    },
    {
        "id": "21a274423118fe71",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 43",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 600,
        "wires": []
    },
    {
        "id": "f9987901c674f1f7",
        "type": "file",
        "z": "6aa904d67d2907b2",
        "name": "",
        "filename": "/Users/shravanpm/Downloads/pdf.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "binary",
        "x": 890,
        "y": 480,
        "wires": [
            [
                "21a274423118fe71"
            ]
        ]
    },
    {
        "id": "ce898b0786d6ad9c",
        "type": "base64",
        "z": "6aa904d67d2907b2",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 330,
        "y": 200,
        "wires": [
            [
                "386d9f3fc10af4c7"
            ]
        ]
    },
    {
        "id": "577860b78f0201be",
        "type": "function",
        "z": "6aa904d67d2907b2",
        "name": "detectMimeType",
        "func": "const LOCAL_PATH = `/Users/shravanpm/Downloads/`\n\nconst signatures = {\n    JVBERi0: \"application/pdf\",\n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"application/vnd.openxmlformats-officedocument.\",\n    PK: \"application/zip\",\n};\n\nlet filePath;\nlet fileName;\nlet extension;\n\nconst base64String = msg.payload;\n\nfor (let ext in signatures) {\n    const base64Sig = base64String.slice(0, ext.length)\n    if (base64Sig === ext) {\n        fileName = msg.fileId\n        extension = getExtension(ext)\n        filePath = `${LOCAL_PATH}/${fileName}.${extension}\n        `\n    }\n}\n\n\nmsg.filePath = filePath\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "2f78549a2c7adca0",
        "type": "function",
        "z": "6aa904d67d2907b2",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\n\n// const fileId = \"5efaaa6b-0471-40d1-9f0f-b1729296faf4-AADHAR_BACK\"\n// const fileId = \"1f4f03e2-e977-43fe-82b5-1aca2adaf8a0-MISCELLANEOUS_DOCUMENT_ADDRESS_PROOF_FORM\"\n// const fileId = \"222eedef-cde8-4aab-8cc7-8debb609e64b-BANK_STATEMENT\"\nconst fileId = \"222eedef-cde8-4aab-8cc7-8debb609e64b-BANK_STATEMENT\"\nmsg.fileId = fileId\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/file/read/${fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 100,
        "wires": [
            [
                "234c2c522a2ab078"
            ]
        ]
    },
    {
        "id": "12aa7f41388a1b6b",
        "type": "file",
        "z": "6aa904d67d2907b2",
        "name": "",
        "filename": "/Users/shravanpm/Downloads/test.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 730,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "f5cb07199db75a98",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 66",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 300,
        "wires": []
    },
    {
        "id": "776d5a708946d663",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 67",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 40,
        "wires": []
    },
    {
        "id": "cba73039553b3be5",
        "type": "function",
        "z": "6aa904d67d2907b2",
        "name": "function 27",
        "func": "// msg.payload = msg.payload.split(\"\\n\")[0]\nconsole.log(msg.payload.length)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 660,
        "wires": [
            [
                "12aa7f41388a1b6b"
            ]
        ]
    },
    {
        "id": "fa52ab0b5c6facea",
        "type": "file in",
        "z": "6aa904d67d2907b2",
        "name": "",
        "filename": "payload",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 300,
        "y": 560,
        "wires": [
            [
                "f962312e4d8dab3d"
            ]
        ]
    },
    {
        "id": "f962312e4d8dab3d",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 68",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 560,
        "wires": []
    },
    {
        "id": "8a31929f15a5b734",
        "type": "function",
        "z": "6aa904d67d2907b2",
        "name": "function 29",
        "func": "const fs = global.get(\"fs\");\nconst pdf = global.get(\"pdf\")\nconst scissors = global.get(\"scissors\")\n\n\n// var pdfOp = scissors(\"/Users/shravanpm/Downloads/bus oct 2021.pdf\")\n\n// console.log({pdfOp})\n\n\n\nconst PDFDocument = pdf.PDFDocument;\n\n// // console.log(PDFDocument.copyPages,\"dcdcc\")\n\n\n\nasync function splitPdf(pathToPdf) {\ntry {\n    const docmentAsBytes = await fs.promises.readFile(pathToPdf);\n\n    // Load your PDFDocument\n    const pdfDoc = await PDFDocument.load(docmentAsBytes, { ignoreEncryption: true })\n    // console.log({pdfDoc})\n    \n\n    const numberOfPages = pdfDoc.getPages().length;\n    // console.log({numberOfPages})\n    const subDocument = await PDFDocument.create();\n    let res = subDocument.copyPages(pdfDoc, [1])\n    console.log({res})\n    // console.log(subDocument.copyPages(pdfDoc, [1]), \"jdslfjls\")\n\n    for (let i = 0; i < 2; i++) {\n\n      // Create a new \"sub\" document\n    //   const subDocument = await PDFDocument.create();\n      // console.log(subDocument.copyPages(pdfDoc,[i]),\"jdslfjls\")\n      // copy the page at current index\n      // const [copiedPage] = await subDocument.copyPages(pdfDoc, [i])\n      // subDocument.addPage(copiedPage);\n      // const pdfBytes = await subDocument.save()\n      // await writePdfBytesToFile(`file-${i + 1}.pdf`, pdfBytes);\n\n    }\n  } catch (error) {\n    console.log({error})\n  };\n}\n\nfunction writePdfBytesToFile(fileName, pdfBytes) {\n  return fs.promises.writeFile(fileName, pdfBytes);\n}\n\n(async () => {\n  await splitPdf(\"/Users/shravanpm/Downloads/bus oct 2021.pdf\");\n})();\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 300,
        "wires": [
            [
                "f5cb07199db75a98"
            ]
        ]
    },
    {
        "id": "55326f0876262081",
        "type": "inject",
        "z": "6aa904d67d2907b2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 380,
        "wires": [
            [
                "ee8516c1c1260445"
            ]
        ]
    },
    {
        "id": "386d9f3fc10af4c7",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 70",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 240,
        "wires": []
    },
    {
        "id": "28a27f4bf063cf0d",
        "type": "file in",
        "z": "6aa904d67d2907b2",
        "name": "read file",
        "filename": "/Users/shravanpm/Downloads/bus oct 2021.pdf",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "hex",
        "allProps": false,
        "x": 200,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "5dd52f5fd4298809",
        "type": "zip",
        "z": "6aa904d67d2907b2",
        "name": "",
        "mode": "compress",
        "filename": "/Users/shravanpm/Downloads/text/test.zip",
        "compressionlevel": "0",
        "outasstring": false,
        "x": 800,
        "y": 180,
        "wires": [
            [
                "28f057098e31844c"
            ]
        ]
    },
    {
        "id": "28f057098e31844c",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 71",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 180,
        "wires": []
    },
    {
        "id": "ee8516c1c1260445",
        "type": "function",
        "z": "6aa904d67d2907b2",
        "name": "base64string",
        "func": "msg.payload = \"\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "d1720175299174b7",
        "type": "inject",
        "z": "6aa904d67d2907b2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 600,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "793e3dfb52bfedb6",
        "type": "file in",
        "z": "6aa904d67d2907b2",
        "name": "read file",
        "filename": "/Users/shravanpm/Downloads/bus oct 2021.pdf",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 480,
        "y": 800,
        "wires": [
            [
                "57ea66c790d55da1",
                "c04a643ed361e831"
            ]
        ]
    },
    {
        "id": "6c6075c0b6dba9d1",
        "type": "inject",
        "z": "6aa904d67d2907b2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 800,
        "wires": [
            [
                "793e3dfb52bfedb6"
            ]
        ]
    },
    {
        "id": "57ea66c790d55da1",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 73",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 720,
        "wires": []
    },
    {
        "id": "8f452b2328d44191",
        "type": "function",
        "z": "6aa904d67d2907b2",
        "name": "function 30",
        "func": "const JSZip = global.get(\"jszip\")\nconst fs = global.get('fs');\n\nconst zip = new JSZip();\n\ntry {\n    console.log(\"hjgsghjad\")\n    const pdfData = fs.readFileSync('/Users/shravanpm/Downloads/bus oct 2021.pdf');\n    zip.file(\"PDFFile.pdf\", pdfData);\n    // console.log({test})\n    // zip.file(\"Textfile.txt\", \"Hello NodeJS\\n\");\n\n    // const images = [\"coding-science.jpg\", \"programming-languages.jpg\"];\n    // const img = zip.folder(\"images\");\n\n    // for (const image of images) {\n    //     const imageData = fs.readFileSync(image);\n    //     img.file(image, imageData);\n    // }\n\n    let result = zip.generateNodeStream({ type: 'nodebuffer', streamFiles: true })\n        .pipe(fs.createWriteStream('sample.zip'))\n        .on('finish', function (res) {\n            \n            \n            console.log(\"sample.zip written.\");\n        });\n\n        // console.log({result})\n\n    const test = fs.readFileSync('sample.zip');\n    // node.send({payload:test})\n    msg.payload = test\n    console.log({ test })\n} catch (err) {\n    console.error(err)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "c04a643ed361e831",
        "type": "zip",
        "z": "6aa904d67d2907b2",
        "name": "",
        "mode": "compress",
        "filename": "",
        "compressionlevel": 6,
        "outasstring": false,
        "x": 780,
        "y": 800,
        "wires": [
            [
                "27e8896d7b824b64",
                "7729f1690ab76186"
            ]
        ]
    },
    {
        "id": "27e8896d7b824b64",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 74",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 706,
        "wires": []
    },
    {
        "id": "0decd3ca114017e7",
        "type": "debug",
        "z": "6aa904d67d2907b2",
        "name": "debug 75",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 1000,
        "wires": []
    },
    {
        "id": "77b481c203099e40",
        "type": "file",
        "z": "6aa904d67d2907b2",
        "name": "",
        "filename": "filePath",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "base64",
        "x": 400,
        "y": 1000,
        "wires": [
            [
                "0decd3ca114017e7"
            ]
        ]
    },
    {
        "id": "7729f1690ab76186",
        "type": "base64",
        "z": "6aa904d67d2907b2",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 490,
        "y": 880,
        "wires": [
            [
                "91cf7de891c0b1ee"
            ]
        ]
    },
    {
        "id": "91cf7de891c0b1ee",
        "type": "function",
        "z": "6aa904d67d2907b2",
        "name": "detectMimeType",
        "func": "// const LOCAL_PATH = env.get(\"LOCAL_PATH\")\nconst LOCAL_PATH = \"/Users/shravanpm/Downloads\"\n\nconst signatures = {\n    JVBERi0: \"application/pdf\",\n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"application/vnd.openxmlformats-officedocument.\",\n    PK: \"application/zip\",\n};\n\nlet filePath;\nlet fileName;\nlet extension;\n\nconst base64String = msg.payload;\n\nfor (let ext in signatures) {\n    const base64Sig = base64String.slice(0, ext.length)\n    if (base64Sig === ext) {\n        fileName = msg.fileId\n        extension = getExtension(ext)\n        filePath = `${LOCAL_PATH}/${\"fileName\"}.${\"zip\"}`\n    }\n}\n\n\nmsg.filePath = filePath\n\nconsole.log(fileName)\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 880,
        "wires": [
            [
                "77b481c203099e40"
            ]
        ]
    },
    {
        "id": "563227598a60c241",
        "type": "inject",
        "z": "84b812933a436af8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 460,
        "y": 360,
        "wires": [
            [
                "f500b3761004fa36"
            ]
        ]
    },
    {
        "id": "1f373ffc44f09238",
        "type": "http request",
        "z": "84b812933a436af8",
        "name": "readFile",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 840,
        "y": 360,
        "wires": [
            [
                "be27695051af519a"
            ]
        ]
    },
    {
        "id": "8ab9d6b38ac30338",
        "type": "debug",
        "z": "84b812933a436af8",
        "name": "debug 43",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 660,
        "wires": []
    },
    {
        "id": "fc69e978e3bcd95e",
        "type": "file",
        "z": "84b812933a436af8",
        "name": "write file",
        "filename": "filePath",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "base64",
        "x": 620,
        "y": 660,
        "wires": [
            [
                "8ab9d6b38ac30338"
            ]
        ]
    },
    {
        "id": "eab6a95d143141c8",
        "type": "function",
        "z": "84b812933a436af8",
        "name": "detectMimeType",
        "func": "// const LOCAL_PATH = env.get(\"LOCAL_PATH\")\nconst LOCAL_PATH = \"/Users/shravanpm/Downloads\"\n\nconst signatures = {\n    JVBERi0: \"application/pdf\",\n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"xlsx/xlsx\",\n    PK: \"application/zip\",\n};\n\nlet filePath;\nlet fileName;\nlet extension;\n\nconst base64String = msg.payload;\n\nfor (let ext in signatures) {\n    const base64Sig = base64String.slice(0, ext.length)\n    if (base64Sig === ext) {\n        fileName = \"docsss\"\n        extension = getExtension(ext)\n        filePath = `${LOCAL_PATH}/${\"fileName\"}.${\"pdf\"}`\n    }\n}\n\n\nmsg.filePath = filePath\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "f500b3761004fa36",
        "type": "function",
        "z": "84b812933a436af8",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\n\n// const fileId = \"5efaaa6b-0471-40d1-9f0f-b1729296faf4-AADHAR_BACK\"\nconst fileId = \"1f4f03e2-e977-43fe-82b5-1aca2adaf8a0-MISCELLANEOUS_DOCUMENT_ADDRESS_PROOF_FORM\"\n// const fileId = \"222eedef-cde8-4aab-8cc7-8debb609e64b-BANK_STATEMENT\"\n\nmsg.fileId = fileId\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/file/read/${fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 360,
        "wires": [
            [
                "1f373ffc44f09238"
            ]
        ]
    },
    {
        "id": "be27695051af519a",
        "type": "zip",
        "z": "84b812933a436af8",
        "name": "",
        "mode": "compress",
        "filename": "test.zip",
        "compressionlevel": 6,
        "outasstring": false,
        "x": 380,
        "y": 520,
        "wires": [
            [
                "108bfe5156f6cc24"
            ]
        ]
    },
    {
        "id": "108bfe5156f6cc24",
        "type": "base64",
        "z": "84b812933a436af8",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 270,
        "y": 600,
        "wires": [
            [
                "eab6a95d143141c8"
            ]
        ]
    },
    {
        "id": "70438d11b1e56c39",
        "type": "debug",
        "z": "84b812933a436af8",
        "name": "debug 76",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 460,
        "wires": []
    },
    {
        "id": "c10b4d098657f711",
        "type": "base64",
        "z": "84b812933a436af8",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 630,
        "y": 480,
        "wires": [
            [
                "70438d11b1e56c39"
            ]
        ]
    },
    {
        "id": "366b6f99fb1fcec0",
        "type": "inject",
        "z": "84b812933a436af8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 900,
        "wires": [
            [
                "27238a568feea36e"
            ]
        ]
    },
    {
        "id": "7c54786e2c6ca074",
        "type": "http request",
        "z": "84b812933a436af8",
        "name": "readFile",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 620,
        "y": 900,
        "wires": [
            [
                "83c776182b1939b9",
                "0950989ba9efded9"
            ]
        ]
    },
    {
        "id": "27238a568feea36e",
        "type": "function",
        "z": "84b812933a436af8",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\n\n// const fileId = \"5efaaa6b-0471-40d1-9f0f-b1729296faf4-AADHAR_BACK\"\n// const fileId = \"1f4f03e2-e977-43fe-82b5-1aca2adaf8a0-MISCELLANEOUS_DOCUMENT_ADDRESS_PROOF_FORM\"\n// const fileId = \"8e79976d-26b1-4e18-a458-244b3b0ed4a9-BANK_STATEMENT\"\nconst fileId = \"4c21b525-3709-4d23-8fb2-1a9b8efabee2-AADHAR_FRONT\"\nmsg.fileId = fileId\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/file/read/${fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 900,
        "wires": [
            [
                "7c54786e2c6ca074",
                "32a47838ddfe72e2"
            ]
        ]
    },
    {
        "id": "83c776182b1939b9",
        "type": "debug",
        "z": "84b812933a436af8",
        "name": "debug 77",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 900,
        "wires": []
    },
    {
        "id": "15c33e8fe19e62a8",
        "type": "function",
        "z": "84b812933a436af8",
        "name": "function 31",
        "func": "const JSZip = global.get(\"jszip\")\nconst fs = global.get('fs');\n\nconst zip = new JSZip();\n\ntry {\n    console.log(\"hjgsghjad\")\n    // const pdfData = fs.readFileSync('/Users/shravanpm/Downloads/bus oct 2021.pdf');\n    const pdfData  = msg.payload\n    \n    zip.file(\"PDFFile.pdf\", pdfData);\n    console.log({pdfData})\n    // zip.file(\"Textfile.txt\", \"Hello NodeJS\\n\");\n\n    // const images = [\"coding-science.jpg\", \"programming-languages.jpg\"];\n    // const img = zip.folder(\"images\");\n\n    // for (const image of images) {\n    //     const imageData = fs.readFileSync(image);\n    //     img.file(image, imageData);\n    // }\n\n    let result = zip.generateNodeStream({ type: 'nodebuffer', streamFiles: true })\n        // .pipe(fs.createWriteStream('sample.zip'))\n        .pipe(fs.createWriteStream('PDFFile.pdf'))\n        .on('finish', function (res) {\n            \n            \n            console.log(\"sample.zip written.\");\n        });\n\n        // console.log({result})\n\n    const test = fs.readFileSync('sample.zip');\n    // node.send({payload:test})\n    msg.payload = test\n    console.log({ test })\n} catch (err) {\n    console.error(err)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1000,
        "wires": [
            [
                "eef43beeeb4982dd"
            ]
        ]
    },
    {
        "id": "a3d778801f791f9d",
        "type": "debug",
        "z": "84b812933a436af8",
        "name": "debug 78",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 1000,
        "wires": []
    },
    {
        "id": "eef43beeeb4982dd",
        "type": "base64",
        "z": "84b812933a436af8",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 510,
        "y": 1000,
        "wires": [
            [
                "a3d778801f791f9d",
                "7290765312faeb0d"
            ]
        ]
    },
    {
        "id": "0950989ba9efded9",
        "type": "file",
        "z": "84b812933a436af8",
        "name": "write file",
        "filename": "/Users/shravanpm/Downloads/fileName.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "binary",
        "x": 560,
        "y": 1100,
        "wires": [
            [
                "fa8436ffe7cf3ed1"
            ]
        ]
    },
    {
        "id": "7290765312faeb0d",
        "type": "function",
        "z": "84b812933a436af8",
        "name": "detectMimeType",
        "func": "// const LOCAL_PATH = env.get(\"LOCAL_PATH\")\nconst LOCAL_PATH = \"/Users/shravanpm/Downloads\"\n\nconst signatures = {\n    JVBERi0: \"application/pdf\",\n    \n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"xlsx/xlsx\",\n    PK: \"application/zip\",\n};\n\nlet filePath;\nlet fileName;\nlet extension;\n\nconst base64String = msg.payload;\n\nfor (let ext in signatures) {\n    const base64Sig = base64String.slice(0, ext.length)\n    if (base64Sig === ext) {\n        fileName = \"docsss\"\n        extension = getExtension(ext)\n        filePath = `${LOCAL_PATH}/${\"fileName\"}.${extension}`\n    }\n}\n\n\nmsg.filePath = filePath\n\nconsole.log({filePath,extension})\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1100,
        "wires": [
            [
                "0950989ba9efded9"
            ]
        ]
    },
    {
        "id": "fa8436ffe7cf3ed1",
        "type": "debug",
        "z": "84b812933a436af8",
        "name": "debug 79",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 1100,
        "wires": []
    },
    {
        "id": "e48f244b873111e5",
        "type": "file in",
        "z": "84b812933a436af8",
        "name": "",
        "filename": "",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 440,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "33f190cf03adce07",
        "type": "inject",
        "z": "84b812933a436af8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 1260,
        "wires": [
            [
                "f527386241d0196a"
            ]
        ]
    },
    {
        "id": "43bd688c23c1969f",
        "type": "debug",
        "z": "84b812933a436af8",
        "name": "debug 225",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 1380,
        "wires": []
    },
    {
        "id": "f527386241d0196a",
        "type": "file in",
        "z": "84b812933a436af8",
        "name": "read",
        "filename": "/Users/shravanpm/Downloads/Holiday list.pdf",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 430,
        "y": 1260,
        "wires": [
            [
                "c0661b1558d6d168"
            ]
        ]
    },
    {
        "id": "c0661b1558d6d168",
        "type": "base64",
        "z": "84b812933a436af8",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 630,
        "y": 1260,
        "wires": [
            [
                "33dddb0822c29145"
            ]
        ]
    },
    {
        "id": "33dddb0822c29145",
        "type": "file",
        "z": "84b812933a436af8",
        "name": "write file",
        "filename": "/Users/shravanpm/Downloads/gfccg.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 380,
        "y": 1380,
        "wires": [
            [
                "43bd688c23c1969f"
            ]
        ]
    },
    {
        "id": "32a47838ddfe72e2",
        "type": "debug",
        "z": "84b812933a436af8",
        "name": "debug 249",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "url",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 840,
        "wires": []
    },
    {
        "id": "d188a7237d9a16df",
        "type": "inject",
        "z": "c458c3f61cf5894d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "f62adde18ea51a16"
            ]
        ]
    },
    {
        "id": "75a4f7593309a5e5",
        "type": "http request",
        "z": "c458c3f61cf5894d",
        "name": "readFile",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 540,
        "y": 120,
        "wires": [
            [
                "2cd4df085beffc92",
                "b6eb09c25ae2391d"
            ]
        ]
    },
    {
        "id": "f62adde18ea51a16",
        "type": "function",
        "z": "c458c3f61cf5894d",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\n\n// const fileId = \"5efaaa6b-0471-40d1-9f0f-b1729296faf4-AADHAR_BACK\"\nconst fileId = \"1f4f03e2-e977-43fe-82b5-1aca2adaf8a0-MISCELLANEOUS_DOCUMENT_ADDRESS_PROOF_FORM\"\n// const fileId = \"222eedef-cde8-4aab-8cc7-8debb609e64b-BANK_STATEMENT\"\n\nmsg.fileId = fileId\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/file/read/${fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 120,
        "wires": [
            [
                "75a4f7593309a5e5"
            ]
        ]
    },
    {
        "id": "2cd4df085beffc92",
        "type": "debug",
        "z": "c458c3f61cf5894d",
        "name": "debug 83",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 120,
        "wires": []
    },
    {
        "id": "b6eb09c25ae2391d",
        "type": "function",
        "z": "c458c3f61cf5894d",
        "name": "function 33",
        "func": "const JSZip = global.get(\"jszip\")\nconst fs = global.get('fs');\n\nconst zip = new JSZip();\n\ntry {\n    console.log(\"hjgsghjad\")\n    // const pdfData = fs.readFileSync('/Users/shravanpm/Downloads/bus oct 2021.pdf');\n    const pdfData  = msg.payload\n    \n    zip.file(\"PDFFile.pdf\", pdfData);\n    console.log({pdfData})\n    // zip.file(\"Textfile.txt\", \"Hello NodeJS\\n\");\n\n    // const images = [\"coding-science.jpg\", \"programming-languages.jpg\"];\n    // const img = zip.folder(\"images\");\n\n    // for (const image of images) {\n    //     const imageData = fs.readFileSync(image);\n    //     img.file(image, imageData);\n    // }\n\n    let result = zip.generateNodeStream({ type: 'nodebuffer', streamFiles: true })\n        // .pipe(fs.createWriteStream('sample.zip'))\n        .pipe(fs.createWriteStream('PDFFile.pdf'))\n        .on('finish', function (res) {\n            \n            \n            console.log(\"sample.zip written.\");\n        });\n\n        // console.log({result})\n\n    const test = fs.readFileSync('sample.zip');\n    // node.send({payload:test})\n    msg.payload = test\n    console.log({ test })\n} catch (err) {\n    console.error(err)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 220,
        "wires": [
            [
                "ed73b1c7b0200bd5"
            ]
        ]
    },
    {
        "id": "a27fbb9638b177c5",
        "type": "debug",
        "z": "c458c3f61cf5894d",
        "name": "debug 84",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 220,
        "wires": []
    },
    {
        "id": "ed73b1c7b0200bd5",
        "type": "base64",
        "z": "c458c3f61cf5894d",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 430,
        "y": 220,
        "wires": [
            [
                "a27fbb9638b177c5",
                "44faad76ee4176c8"
            ]
        ]
    },
    {
        "id": "44faad76ee4176c8",
        "type": "file",
        "z": "c458c3f61cf5894d",
        "name": "write file",
        "filename": "/Users/shravanpm/Downloads/fileNameTest.zip",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "base64",
        "x": 480,
        "y": 320,
        "wires": [
            [
                "0cae38af04a7bcda"
            ]
        ]
    },
    {
        "id": "bda931c547488d6f",
        "type": "function",
        "z": "c458c3f61cf5894d",
        "name": "detectMimeType",
        "func": "// const LOCAL_PATH = env.get(\"LOCAL_PATH\")\nconst LOCAL_PATH = \"/Users/shravanpm/Downloads\"\n\nconst signatures = {\n    JVBERi0: \"application/pdf\",\n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"xlsx/xlsx\",\n    PK: \"application/zip\",\n};\n\nlet filePath;\nlet fileName;\nlet extension;\n\nconst base64String = msg.payload;\n\nfor (let ext in signatures) {\n    const base64Sig = base64String.slice(0, ext.length)\n    if (base64Sig === ext) {\n        fileName = \"docsss\"\n        extension = getExtension(ext)\n        filePath = `${LOCAL_PATH}/${\"fileName\"}.${\"pdf\"}`\n    }\n}\n\n\nmsg.filePath = filePath\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 320,
        "wires": [
            [
                "44faad76ee4176c8"
            ]
        ]
    },
    {
        "id": "0cae38af04a7bcda",
        "type": "debug",
        "z": "c458c3f61cf5894d",
        "name": "debug 85",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 320,
        "wires": []
    },
    {
        "id": "84200e31b199b4cd",
        "type": "function",
        "z": "c458c3f61cf5894d",
        "name": "function 34",
        "func": "\n\nconst splitFile = global.get(\"splitFile\");\n\nsplitFile.splitFile('/Users/shravanpm/Downloads/bus oct 2021.pdf', 3)\n    .then((names) => {\n        console.log(names);\n    })\n    .catch((err) => {\n        console.log('Error: ', err);\n    });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 440,
        "wires": [
            [
                "a44d395b82ceea14"
            ]
        ]
    },
    {
        "id": "1a794ae26046a551",
        "type": "inject",
        "z": "c458c3f61cf5894d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 440,
        "wires": [
            [
                "84200e31b199b4cd"
            ]
        ]
    },
    {
        "id": "a44d395b82ceea14",
        "type": "debug",
        "z": "c458c3f61cf5894d",
        "name": "debug 86",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 440,
        "wires": []
    },
    {
        "id": "88c85528a49294de",
        "type": "e-mail",
        "z": "c458c3f61cf5894d",
        "server": "smtp-mail.outlook.com",
        "port": "587",
        "secure": false,
        "tls": true,
        "name": "mailsofshravan@gmail.com",
        "dname": "",
        "x": 600,
        "y": 540,
        "wires": []
    },
    {
        "id": "e767b703250fb0eb",
        "type": "inject",
        "z": "c458c3f61cf5894d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 540,
        "wires": [
            [
                "88c85528a49294de"
            ]
        ]
    },
    {
        "id": "fccbf73acba8d852",
        "type": "http request",
        "z": "fc1716ca544be1e5",
        "name": "readFile",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 540,
        "y": 180,
        "wires": [
            [
                "c8b238963d4eeafd"
            ]
        ]
    },
    {
        "id": "af4fe2ec79a4ef68",
        "type": "function",
        "z": "fc1716ca544be1e5",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\n\n// const fileId = \"5efaaa6b-0471-40d1-9f0f-b1729296faf4-AADHAR_BACK\"\n// const fileId = \"1f4f03e2-e977-43fe-82b5-1aca2adaf8a0-MISCELLANEOUS_DOCUMENT_ADDRESS_PROOF_FORM\"\nconst fileId = \"222eedef-cde8-4aab-8cc7-8debb609e64b-BANK_STATEMENT\"\n\nmsg.fileId = fileId\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/file/read/${fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 180,
        "wires": [
            [
                "fccbf73acba8d852"
            ]
        ]
    },
    {
        "id": "c8b238963d4eeafd",
        "type": "debug",
        "z": "fc1716ca544be1e5",
        "name": "debug 80",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 180,
        "wires": []
    },
    {
        "id": "c9a3c17e4e802aec",
        "type": "function",
        "z": "fc1716ca544be1e5",
        "name": "pdf-lib",
        "func": "const pdf = global.get('pdf')\nconst fs = global.get('fs');\nconst { PDFDocument } = pdf\n\nasync function splitFile() {\n    try {\n        const pdfBytes = fs.readFileSync('/Users/shravanpm/Downloads/traffic_pub_gen19.pdf');\n        const pdfDoc = await PDFDocument.load(pdfBytes);\n\n        const maxFileSizeInBytes = 1024 * 1024; // 1mb\n        const pageCount = pdfDoc.getPageCount();\n        let currentPageIndex = 0;\n        let currentFileSize = 0;\n        let count = 0\n        while (currentPageIndex < pageCount) {\n            let endIndex = currentPageIndex;\n            let newPdfDoc = await PDFDocument.create();\n\n            while (endIndex < pageCount) {\n                const [copiedPage] = await newPdfDoc?.copyPages(pdfDoc, [endIndex]);\n                // const [firstDonorPage] = await pdfDoc.copyPages(firstDonorPdfDoc, [0])\n                newPdfDoc.addPage(copiedPage);\n                console.log({ endIndex })\n                const pdfBytes = await newPdfDoc.save();\n                currentFileSize = pdfBytes.length;\n\n                endIndex++;\n\n                if (currentFileSize > maxFileSizeInBytes) {\n                    break;\n                }\n\n\n            }\n            count = count + 1\n            console.log({ count })\n           \n            const newPdfBytes = await newPdfDoc.save();\n\n            fs.writeFileSync(`/Users/shravanpm/Desktop/log/page${count}.pdf`, newPdfBytes);\n            currentPageIndex = endIndex;\n        }\n    } catch (error) {\n        console.log(\"error\",error)\n    };\n}\n\nsplitFile()\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 460,
        "wires": [
            [
                "84903dc9187f09d6"
            ]
        ]
    },
    {
        "id": "d50a5a9524c1d958",
        "type": "debug",
        "z": "fc1716ca544be1e5",
        "name": "debug 81",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 260,
        "wires": []
    },
    {
        "id": "0fc3dabc924f60d2",
        "type": "base64",
        "z": "fc1716ca544be1e5",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 430,
        "y": 280,
        "wires": [
            [
                "d50a5a9524c1d958",
                "1ffd5d957d54586d"
            ]
        ]
    },
    {
        "id": "ab702dd208980b3b",
        "type": "file",
        "z": "fc1716ca544be1e5",
        "name": "write file",
        "filename": "/Users/shravanpm/Downloads/fileNameTest.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 480,
        "y": 380,
        "wires": [
            [
                "aa96406e24f15f15"
            ]
        ]
    },
    {
        "id": "1ffd5d957d54586d",
        "type": "function",
        "z": "fc1716ca544be1e5",
        "name": "detectMimeType",
        "func": "// const LOCAL_PATH = env.get(\"LOCAL_PATH\")\nconst LOCAL_PATH = \"/Users/shravanpm/Downloads\"\n\nconst signatures = {\n    JVBERi0: \"application/pdf\",\n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"xlsx/xlsx\",\n    PK: \"application/zip\",\n};\n\nlet filePath;\nlet fileName;\nlet extension;\n\nconst base64String = msg.payload;\n\nfor (let ext in signatures) {\n    const base64Sig = base64String.slice(0, ext.length)\n    if (base64Sig === ext) {\n        fileName = \"docsss\"\n        extension = getExtension(ext)\n        filePath = `${LOCAL_PATH}/${\"fileName\"}.${\"txt\"}`\n    }\n}\n\n\nmsg.filePath = filePath\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 380,
        "wires": [
            [
                "ab702dd208980b3b"
            ]
        ]
    },
    {
        "id": "aa96406e24f15f15",
        "type": "debug",
        "z": "fc1716ca544be1e5",
        "name": "debug 82",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 380,
        "wires": []
    },
    {
        "id": "1877bc2695415c79",
        "type": "debug",
        "z": "fc1716ca544be1e5",
        "name": "debug 87",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "bytes",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 140,
        "y": 320,
        "wires": []
    },
    {
        "id": "bbb7817c9218b869",
        "type": "inject",
        "z": "fc1716ca544be1e5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 180,
        "wires": [
            [
                "af4fe2ec79a4ef68"
            ]
        ]
    },
    {
        "id": "753d3b8be5d37ae0",
        "type": "function",
        "z": "fc1716ca544be1e5",
        "name": "node-pdftk",
        "func": "const pdftk = global.get(\"pdftk\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "1f51b5e3e4caeae9",
        "type": "inject",
        "z": "fc1716ca544be1e5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 460,
        "wires": [
            [
                "c9a3c17e4e802aec"
            ]
        ]
    },
    {
        "id": "84903dc9187f09d6",
        "type": "debug",
        "z": "fc1716ca544be1e5",
        "name": "debug 88",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 460,
        "wires": []
    },
    {
        "id": "93f72a5ff7622e69",
        "type": "http request",
        "z": "fc1716ca544be1e5",
        "name": "readFile",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 460,
        "y": 720,
        "wires": [
            [
                "fbdf3da7701cd99c"
            ]
        ]
    },
    {
        "id": "671013b8b8947a0b",
        "type": "function",
        "z": "fc1716ca544be1e5",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\n\n// const fileId = \"5efaaa6b-0471-40d1-9f0f-b1729296faf4-AADHAR_BACK\"\n// const fileId = \"1f4f03e2-e977-43fe-82b5-1aca2adaf8a0-MISCELLANEOUS_DOCUMENT_ADDRESS_PROOF_FORM\"\nconst fileId = \"222eedef-cde8-4aab-8cc7-8debb609e64b-BANK_STATEMENT\"\n\nmsg.fileId = fileId\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/file/read/${fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 720,
        "wires": [
            [
                "93f72a5ff7622e69"
            ]
        ]
    },
    {
        "id": "c507c1ea1db4616d",
        "type": "debug",
        "z": "fc1716ca544be1e5",
        "name": "debug 227",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 820,
        "wires": []
    },
    {
        "id": "f45488b2433e0b95",
        "type": "inject",
        "z": "fc1716ca544be1e5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 720,
        "wires": [
            [
                "671013b8b8947a0b"
            ]
        ]
    },
    {
        "id": "d0851e0f7722cb8c",
        "type": "zip",
        "z": "fc1716ca544be1e5",
        "name": "Compress",
        "mode": "compress",
        "filename": "",
        "compressionlevel": "0",
        "outasstring": false,
        "x": 790,
        "y": 720,
        "wires": [
            [
                "ce3e48cb59e8aba4"
            ]
        ]
    },
    {
        "id": "50b706438450b8c4",
        "type": "file",
        "z": "fc1716ca544be1e5",
        "name": "write file",
        "filename": "/Users/shravanpm/Downloads/fileNameTest.zip",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "base64",
        "x": 400,
        "y": 820,
        "wires": [
            [
                "c507c1ea1db4616d"
            ]
        ]
    },
    {
        "id": "ce3e48cb59e8aba4",
        "type": "base64",
        "z": "fc1716ca544be1e5",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 170,
        "y": 820,
        "wires": [
            [
                "50b706438450b8c4"
            ]
        ]
    },
    {
        "id": "fbdf3da7701cd99c",
        "type": "function",
        "z": "fc1716ca544be1e5",
        "name": "function 160",
        "func": "msg.filename = \"functionName.pdf\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 720,
        "wires": [
            [
                "d0851e0f7722cb8c"
            ]
        ]
    },
    {
        "id": "bad214e123661042",
        "type": "inject",
        "z": "fc1716ca544be1e5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "0602a57e07bf064d",
        "type": "xlsx",
        "z": "fc1716ca544be1e5",
        "name": "",
        "sheets": "first",
        "multi": "one",
        "parse": "rows",
        "map": "",
        "x": 310,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "1fa43f2af3b8fb98",
        "type": "inject",
        "z": "c072707ead15851f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "0f83082e01917bc0"
            ]
        ]
    },
    {
        "id": "0f83082e01917bc0",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "Set env variables",
        "func": "\n// let v8 = global.get(\"v8\");\n// const totalHeapSize = v8.getHeapStatistics().total_available_size;\n// let totalHeapSizeInMB = (totalHeapSize / 1024 / 1024).toFixed(2)\n// node.warn(\"V8 Total Heap Size \"+totalHeapSize+\" bytes\");\n\nconst ENV_VARIABLES = new Map();\n\nENV_VARIABLES.set('PAYLATER_URL', \"https://actyv-platform-paylater-service-v1.qa.actyv.com\")\nENV_VARIABLES.set('GO_URL', \"https://actyv-platform-go-service.qa.actyv.com\")\nENV_VARIABLES.set('ADMIN_URL', \"https://actyv-platform-admin-service.qa.actyv.com\")\n\nENV_VARIABLES.set('BUSINESS_IDENTIFIER', \"ABBCB2066P\")\nENV_VARIABLES.set('BUSINESS_TYPE', \"ENTERPRISE\")\nENV_VARIABLES.set('BANK_KEY', \"msl\")\nENV_VARIABLES.set('X_ACTYV_API_CONFIG_KEY', \"8HhkIWzVMSnSgvlhxr\")\nENV_VARIABLES.set('BANK_UNIQUE_IDENTIFIER', \"AASCA2089A\")\nENV_VARIABLES.set('BASE_URL', \"https://iifl-atlas-uat.finfluxtrial.io\")\nENV_VARIABLES.set('tenant_id', \"iifl-qa\")\nENV_VARIABLES.set('BANK_PRODUCT_KEY', \"axis-sabari-product\")\n\nENV_VARIABLES.set('BNPL_ENTERPRISE_USER', \"surajkumar@aplapollo.com\")\nENV_VARIABLES.set('BNPL_BANK_USER', \"vivekanand.t@sgfinserv.in\")\nENV_VARIABLES.set('BNPL_USER_PASSWORD', \"890ioP@12\")\nENV_VARIABLES.set('IIFL_USER', \"demoUser2\")\nENV_VARIABLES.set('IIFL_USER_PASSWORD', \"fc895Tbr2i&w@\")\n\nglobal.set('envVariables', ENV_VARIABLES)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 80,
        "wires": [
            [
                "da6b74c88335821d"
            ]
        ]
    },
    {
        "id": "da6b74c88335821d",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst ENTERPRISE_USER_EMAIL = env.get('ENTERPRISE_USER_EMAIL')\nconst ENTERPRISE_USER_PASSWORD = env.get('ENTERPRISE_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": ENTERPRISE_USER_PASSWORD,\n    \"email\": ENTERPRISE_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 180,
        "wires": [
            [
                "ad7bccaa7fc38cd8"
            ]
        ]
    },
    {
        "id": "ad7bccaa7fc38cd8",
        "type": "http request",
        "z": "c072707ead15851f",
        "name": "AuthenticateEnterpriseUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 180,
        "wires": [
            [
                "21026d5b89bcb057"
            ]
        ]
    },
    {
        "id": "21026d5b89bcb057",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "saveEnterpriseToken",
        "func": "flow.set(\"enterpriseToken\",msg.payload.idToken)\n// console.log(msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 180,
        "wires": [
            [
                "5b71fdd009e07ea6"
            ]
        ]
    },
    {
        "id": "5b71fdd009e07ea6",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "AuthenticateBankUserReq",
        "func": "\nconst BANK_USER_EMAIL = env.get('BANK_USER_EMAIL')\nconst BANK_USER_PASSWORD = env.get('BANK_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": BANK_USER_PASSWORD,\n    \"email\": BANK_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 260,
        "wires": [
            [
                "9cdb752b86c8362f"
            ]
        ]
    },
    {
        "id": "9cdb752b86c8362f",
        "type": "http request",
        "z": "c072707ead15851f",
        "name": "AuthenticateBankUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 480,
        "y": 260,
        "wires": [
            [
                "aeaddacd741519ac"
            ]
        ]
    },
    {
        "id": "aeaddacd741519ac",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "saveBankToken",
        "func": "flow.set(\"bankToken\",msg.payload.idToken)\n// console.log(msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 260,
        "wires": [
            [
                "cc7886f1fef42efc"
            ]
        ]
    },
    {
        "id": "cc7886f1fef42efc",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "AuthenticateIIFLUserReq",
        "func": "const IIFL_USER = env.get('IIFL_USER')\nconst IIFL_USER_PASSWORD = env.get('IIFL_USER_PASSWORD')\nconst IIFL_URL = env.get('IIFL_URL');\n\n\nmsg.url = `${IIFL_URL}/api/auth/login`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": IIFL_USER_PASSWORD,\n        \"userName\": IIFL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 360,
        "wires": [
            [
                "877313ce26737123"
            ]
        ]
    },
    {
        "id": "877313ce26737123",
        "type": "http request",
        "z": "c072707ead15851f",
        "name": "AuthenticateIIFLUser",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 480,
        "y": 360,
        "wires": [
            [
                "aecdbf6fba687548",
                "7a2ea784a96c4105"
            ]
        ]
    },
    {
        "id": "aecdbf6fba687548",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "saveIIFLToken",
        "func": "flow.set(\"iiflToken\", msg.payload.accessToken)\nconsole.log({token:msg.payload})\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 360,
        "wires": [
            [
                "2136ac10a3d57240"
            ]
        ]
    },
    {
        "id": "7a2ea784a96c4105",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "debug 337",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 320,
        "wires": []
    },
    {
        "id": "2136ac10a3d57240",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "getBankProductKeyReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\n\nmsg.url = `${GO_URL}/bank-application-config/key/${BANK_PRODUCT_KEY}`\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 460,
        "wires": [
            [
                "9792bbd689f693ae"
            ]
        ]
    },
    {
        "id": "9792bbd689f693ae",
        "type": "http request",
        "z": "c072707ead15851f",
        "name": "getBankProductKeyReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 460,
        "wires": [
            [
                "63d14a722b073e6c",
                "a52bc54dc6055e32"
            ]
        ]
    },
    {
        "id": "63d14a722b073e6c",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "bankProductConfig",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 460,
        "wires": []
    },
    {
        "id": "a52bc54dc6055e32",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "getPendingBankApplicationsReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\n\nmsg.bankId = msg.payload.bank\nmsg.enterpriseId = msg.payload.allowedEnterprises[0]\n\nmsg.url = `${GO_URL}/bank-application?bankID=${msg.bankId}&enterpriseID=${msg.enterpriseId}`\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 580,
        "wires": [
            [
                "909c2e9d16946284"
            ]
        ]
    },
    {
        "id": "909c2e9d16946284",
        "type": "http request",
        "z": "c072707ead15851f",
        "name": "getPendingBankApplications",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 580,
        "wires": [
            [
                "d8fea977fdfee702",
                "f9214bb840246b1c"
            ]
        ]
    },
    {
        "id": "d8fea977fdfee702",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "pendingBankApplications",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 580,
        "wires": []
    },
    {
        "id": "f9214bb840246b1c",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "mockBankApplication",
        "func": "msg.payload = [\n    {\n        \"_id\": \"63ff1b2f723b070cae7c09c0\",\n        \"createdOn\": \"Tue, 21 Feb 2023 11:32:41 GMT\",\n        \"createdBy\": \"63750a1995a6a16f696d2f7b\",\n        \"updatedOn\": \"Tue, 21 Feb 2023 11:32:42 GMT\",\n        \"isDeleted\": false,\n        \"bankApplicationDocumentConfigKey\": \"63cfbc85edee8f7eee6f3d6e\",\n        \"bankName\": \"Axis Bank Limited\",\n        \"productFamily\": \"PAYLATER\",\n        \"productType\": \"PAYLATER\",\n        \"status\": \"DOCUMENT_CAPTURE\",\n        \"businessPartnerName\": \"Shri Durga Metalex\",\n        \"businessPartnerID\": \"63750a19ca608a344ae556d6\",\n        \"productGranularity\": \"product\",\n        \"bankProductConfigId\": \"63cfbe250c729962c86ec8a7\",\n        \"bankId\": \"63c8fa075f1c5afda77bae5e\",\n        \"bankApplicationLabel\": \"Continue Bank Application\",\n        \"bankApplicationURL\": \"www.google.com\",\n        \"enterpriseId\": \"638c73f16ea52ce57470c1a9\",\n        \"approvedLimit\": null,\n        \"availableLimit\": null\n    }\n]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 660,
        "wires": [
            [
                "28e71d8e924592d9"
            ]
        ]
    },
    {
        "id": "28e71d8e924592d9",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "LoopOverBankApplication",
        "func": "\nfor(let bankApplication of msg.payload){\n    // console.log({bankApplication})\n    node.send({\n        businessPartnerId: bankApplication.businessPartnerID,\n        bankId: bankApplication.bankId,\n        enterpriseId: bankApplication.enterpriseId,\n        bankProductConfigId: bankApplication.bankProductConfigId,\n        bankApplicationId : bankApplication._id,\n        dataPartDone: \"false\"\n    })\n}\n\n// return msg;\n\n/**\n *  \"_id\": \"63f4abd94f0acc5aa73d9e46\",\n        \"createdOn\": \"Tue, 21 Feb 2023 11:32:41 GMT\",\n        \"createdBy\": \"63750a1995a6a16f696d2f7b\",\n        \"updatedOn\": \"Tue, 21 Feb 2023 11:32:42 GMT\",\n        \"isDeleted\": false,\n        \"bankApplicationDocumentConfigKey\": \"63cfbc85edee8f7eee6f3d6e\",\n        \"bankName\": \"Axis Bank Limited\",\n        \"productFamily\": \"PAYLATER\",\n        \"productType\": \"PAYLATER\",\n        \"status\": \"DOCUMENT_CAPTURE\",\n        \"businessPartnerName\": \"Shri Durga Metalex\",\n        \"businessPartnerID\": \"63750a19ca608a344ae556d6\",\n        \"productGranularity\": \"product\",\n        \"bankProductConfigId\": \"63cfbe250c729962c86ec8a7\",\n        \"bankId\": \"63c8fa075f1c5afda77bae5e\",\n        \"bankApplicationLabel\": \"Continue Bank Application\",\n        \"bankApplicationURL\": \"www.google.com\",\n        \"enterpriseId\": \"638c73f16ea52ce57470c1a9\",\n        \"approvedLimit\": null,\n        \"availableLimit\": null\n */",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 660,
        "wires": [
            [
                "b1122ed4b0f22997",
                "1e56588ffd448348"
            ]
        ]
    },
    {
        "id": "b1122ed4b0f22997",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "bankApplication",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 660,
        "wires": []
    },
    {
        "id": "1e56588ffd448348",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "getDealerCodeReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/business-relationship/${msg.businessPartnerId}/${msg.enterpriseId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${enterpriseToken}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 720,
        "wires": [
            [
                "3573a8f9a609be41"
            ]
        ]
    },
    {
        "id": "3573a8f9a609be41",
        "type": "http request",
        "z": "c072707ead15851f",
        "name": "getDealerCode",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 520,
        "y": 720,
        "wires": [
            [
                "7a8b62f3fd366925",
                "789d0b1d321f81f1"
            ]
        ]
    },
    {
        "id": "7a8b62f3fd366925",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "debug 338",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 720,
        "wires": []
    },
    {
        "id": "789d0b1d321f81f1",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "getVCLIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/find-field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflVclId\",\n   \n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 780,
        "wires": [
            [
                "a87c25e67214e63e"
            ]
        ]
    },
    {
        "id": "a87c25e67214e63e",
        "type": "http request",
        "z": "c072707ead15851f",
        "d": true,
        "name": "getVCLId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 480,
        "y": 780,
        "wires": [
            [
                "4a9a80589aac2205",
                "9d9d4180d07bdbed"
            ]
        ]
    },
    {
        "id": "4a9a80589aac2205",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "getVCLId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 780,
        "wires": []
    },
    {
        "id": "9d9d4180d07bdbed",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "getClientIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/find-field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.vclId = msg.payload[0].value\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflClientId\",\n   \n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 840,
        "wires": [
            [
                "be89e7bc7688f3ae"
            ]
        ]
    },
    {
        "id": "be89e7bc7688f3ae",
        "type": "http request",
        "z": "c072707ead15851f",
        "d": true,
        "name": "getClientId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 840,
        "wires": [
            [
                "74b4d9d3a3b05ebb",
                "8925f1ba65c0f704"
            ]
        ]
    },
    {
        "id": "74b4d9d3a3b05ebb",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "getClientId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 840,
        "wires": []
    },
    {
        "id": "8925f1ba65c0f704",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "getLeadIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${env.get(\"GO_URL\")}/field-value/find-field-value`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.clientId = msg.payload[0].value\n\nmsg.payload = {\n    \"key\": \"iiflLeadId\",\n    \n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 900,
        "wires": [
            [
                "6dd423c1106576f2"
            ]
        ]
    },
    {
        "id": "6dd423c1106576f2",
        "type": "http request",
        "z": "c072707ead15851f",
        "d": true,
        "name": "getLeadId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 900,
        "wires": [
            [
                "375c0d65cde9473d",
                "aaba1ee958fa1d7b"
            ]
        ]
    },
    {
        "id": "375c0d65cde9473d",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "saveLeadId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 900,
        "wires": []
    },
    {
        "id": "aaba1ee958fa1d7b",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "getEsignIdReq",
        "func": "\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/find-field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\n\nmsg.leadId = msg.payload[0].value\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${enterpriseToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"iiflEsignId\",\n\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankApplicationId\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 960,
        "wires": [
            [
                "af1d92396a2a8a92"
            ]
        ]
    },
    {
        "id": "af1d92396a2a8a92",
        "type": "http request",
        "z": "c072707ead15851f",
        "d": true,
        "name": "getEsignId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 960,
        "wires": [
            [
                "767941538e28c76b",
                "e0e349821a76e0ac"
            ]
        ]
    },
    {
        "id": "767941538e28c76b",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "saveEsignId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 960,
        "wires": []
    },
    {
        "id": "e0e349821a76e0ac",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "getE-signStatusReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\nmsg.eSignId = msg.payload[0].value\n\nmsg.url = `${IIFL_URL}/api/leads/${msg.leadId}/esign/status/${msg.eSignId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1120,
        "wires": [
            [
                "e8747b16da196e55"
            ]
        ]
    },
    {
        "id": "e8747b16da196e55",
        "type": "http request",
        "z": "c072707ead15851f",
        "d": true,
        "name": "getE-signStatus",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 460,
        "y": 1120,
        "wires": [
            [
                "164d696c3f019bbe",
                "dfa42e03d268f3bb"
            ]
        ]
    },
    {
        "id": "164d696c3f019bbe",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "getE-signStatus",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 1120,
        "wires": []
    },
    {
        "id": "dfa42e03d268f3bb",
        "type": "switch",
        "z": "c072707ead15851f",
        "name": "",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "COMPLETED_SUCCESSFULLY",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 230,
        "y": 1180,
        "wires": [
            [
                "2e778d01ae2a24ca"
            ]
        ]
    },
    {
        "id": "2e778d01ae2a24ca",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "activateVclReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${BASE_URL}/api/virtual-credit-line/${msg.vclId}/activate`\nmsg.method = \"PUT\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1280,
        "wires": [
            [
                "4220a803cea3ed13"
            ]
        ]
    },
    {
        "id": "4220a803cea3ed13",
        "type": "http request",
        "z": "c072707ead15851f",
        "d": true,
        "name": "activateVcl",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 450,
        "y": 1280,
        "wires": [
            [
                "00407283273d4db3",
                "13dd5d5ac7d7ade7"
            ]
        ]
    },
    {
        "id": "00407283273d4db3",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "activateVcl",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1280,
        "wires": []
    },
    {
        "id": "13dd5d5ac7d7ade7",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "getVclReq",
        "func": "const envVariables = global.get('envVariables')\nconst BASE_URL = envVariables.get('BASE_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\n\n\nmsg.url = `${BASE_URL}/api/leads/${msg.leadId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 1420,
        "wires": [
            [
                "81a1897a491c88d6"
            ]
        ]
    },
    {
        "id": "81a1897a491c88d6",
        "type": "http request",
        "z": "c072707ead15851f",
        "d": true,
        "name": "getVCL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 440,
        "y": 1420,
        "wires": [
            [
                "778f5cf4f4dd4885",
                "0904cad0dbdcec41"
            ]
        ]
    },
    {
        "id": "778f5cf4f4dd4885",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "getVCL",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 1420,
        "wires": []
    },
    {
        "id": "0904cad0dbdcec41",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "createLoanTermReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\nconst bankToken = flow.get(\"bankToken\")\n\nmsg.vcl = msg.payload\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms`\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization:`Bearer ${bankToken}`,\n    bankid:msg.bankid\n}\nmsg.payload = {\n    \"bankID\": msg.bankId,\n    \"borrowerID\": msg.businessPartnerId,\n    \"enterpriseID\": msg.enterpriseId,\n    \"productType\": \"BNPL\",\n    \"rateOfInterest\": msg.payload.rateOfInterest\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1500,
        "wires": [
            [
                "303684073d99f63b"
            ]
        ]
    },
    {
        "id": "303684073d99f63b",
        "type": "http request",
        "z": "c072707ead15851f",
        "name": "createLoanTerm",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 400,
        "y": 1500,
        "wires": [
            [
                "7890ffd32d068ece",
                "15fa8c0d6b8e7ee2"
            ]
        ]
    },
    {
        "id": "7890ffd32d068ece",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "createLoanTerm",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1500,
        "wires": []
    },
    {
        "id": "15fa8c0d6b8e7ee2",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "getVclReq",
        "func": "const IIFL_URL = env.get('IIFL_URL');\n\nconst IIFLTOKEN = flow.get(\"iiflToken\")\n\nmsg.loanId = msg.payload.id\n\n\nmsg.url = `${IIFL_URL}/api/clients/${msg.clientId}/virtual-credit-line`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization: `Bearer ${IIFLTOKEN}`\n}\n\n\nmsg.payload = {}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 1580,
        "wires": [
            [
                "453993ee72d5dab0"
            ]
        ]
    },
    {
        "id": "453993ee72d5dab0",
        "type": "http request",
        "z": "c072707ead15851f",
        "d": true,
        "name": "getVCL",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 440,
        "y": 1580,
        "wires": [
            [
                "003a2bfca14ad556",
                "08bb870a7d14ac96"
            ]
        ]
    },
    {
        "id": "003a2bfca14ad556",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "getVCL",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 1580,
        "wires": []
    },
    {
        "id": "08bb870a7d14ac96",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "updateLoanTermReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\nconst actyvBankToken = flow.get(\"actyvBankToken\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.vcl = msg.payload\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/service/update`\nmsg.method = \"PATCH\"\n\nmsg.headers = {\n    Authorization : `Bearer ${actyvBankToken}`,\n    bankid: msg.bankId,\n    \"x-actyv-api-config\":X_ACTYV_API_CONFIG_KEY\n    \n}\n\nmsg.payload = {\n    \"loanTermsID\": msg.loanId,\n    \"approvedLimit\": msg.vcl.availableLimit,\n    \"validTill\": msg.virtualCreditLines[0].expiryDate,\n    \"bankProvidedLoanCodes\": msg.clientId,\n    \"roi\": msg.vcl.rateOfInterest,\n   \n    \"loanGrantStatus\": \"APPROVED\",\n    \"crnNumber\": msg.virtualCreditLines[0].accountNo,//msg.clientId,\n    \"awaitingBalanceRefresh\": true,\n    \"businessType\": \"VENDOR\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1660,
        "wires": [
            [
                "a39268ab66cb6bfd"
            ]
        ]
    },
    {
        "id": "a39268ab66cb6bfd",
        "type": "http request",
        "z": "c072707ead15851f",
        "name": "updateLoanTerm",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 410,
        "y": 1660,
        "wires": [
            [
                "2e4929ed23f08776",
                "89fade42183290f5"
            ]
        ]
    },
    {
        "id": "2e4929ed23f08776",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "updateLoanTerm",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1660,
        "wires": []
    },
    {
        "id": "89fade42183290f5",
        "type": "function",
        "z": "c072707ead15851f",
        "name": "createBankDistributorReq",
        "func": "const X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst enterpriseToken = flow.get(\"enterpriseToken\")\nmsg.url = `${env.get(\"GO_URL\")}/business-relationship/service`\nmsg.method = \"POST\"\nmsg.headers = {\n    \"x-actyv-api-config\": X_ACTYV_API_CONFIG_KEY,\n    Authorization : `Bearer ${enterpriseToken}`\n}\n\nmsg.payload = {\n    \"businessId\": msg.businessPartnerId,\n    \"parentBusinessId\": msg.bankId,\n    \"identifierByParent\": msg.vclId,\n    \"bankAccountNumber\": \"string\",\n    \"bankIFSC\": \"string\",\n    \"bankName\": \"string\",\n    \"relationType\": \"DISTRIBUTOR-BANK\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1760,
        "wires": [
            [
                "aee31f43e1c58bc1"
            ]
        ]
    },
    {
        "id": "aee31f43e1c58bc1",
        "type": "http request",
        "z": "c072707ead15851f",
        "name": "createBankDistributor",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 540,
        "y": 1760,
        "wires": [
            [
                "9bff150159647b75"
            ]
        ]
    },
    {
        "id": "9bff150159647b75",
        "type": "debug",
        "z": "c072707ead15851f",
        "name": "debug 263",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1760,
        "wires": []
    },
    {
        "id": "96d98bf5611b99e7",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "getBusinsessPartnerReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\n// console.log({ X_ACTYV_API_CONFIG_KEY, GO_URL })\nconst row = msg.payload\n\nmsg.url = `${GO_URL}/business-partner/service/XX${row[\"Pan Card\"]}XXX`\nmsg.method = 'GET'\nmsg.headers = {};\nmsg.headers['x-actyv-api-config-key'] = X_ACTYV_API_CONFIG_KEY;\n\nmsg.row = row\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1160,
        "wires": [
            [
                "9fa3adf21a3e09dd"
            ]
        ]
    },
    {
        "id": "9fa3adf21a3e09dd",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "getBusinessPartner",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 470,
        "y": 1160,
        "wires": [
            [
                "2d97946698b6174d",
                "b5b1dcf3cdea65e1"
            ]
        ]
    },
    {
        "id": "2d97946698b6174d",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "getBusinessPartner",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1160,
        "wires": []
    },
    {
        "id": "b5b1dcf3cdea65e1",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "getBankProductConfigReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\n\nflow.set('businessPartnerId', msg.payload._id)\nmsg.businessPartnerId = msg.payload._id\n\nmsg.url = `${GO_URL}/bank-application-config/key/${BANK_PRODUCT_KEY}`\nmsg.method = 'GET'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1280,
        "wires": [
            [
                "3adc56c34d64ba36"
            ]
        ]
    },
    {
        "id": "3adc56c34d64ba36",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "getBankProductConfig",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 460,
        "y": 1280,
        "wires": [
            [
                "2b2bff84df2281fb",
                "8c0e426c5fece3fe"
            ]
        ]
    },
    {
        "id": "2b2bff84df2281fb",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "getAllBankApplicationReq",
        "func": "const GO_URL = env.get('GO_URL')\n\nconst businessPartnerId = flow.get('businessPartnerId') || \"\"\n\nflow.set('bankProductConfigId', msg.payload.id)\nconst bankId = msg.payload.bank\nmsg.bankId = bankId\nmsg.enterpriseId = msg.payload.allowedEnterprises[0]\n\nmsg.url = `${GO_URL}/bank-application?bankID=${bankId}&businessPartner=${businessPartnerId}&bankProductConfigKey=${msg.payload.id}`\nconsole.log(\"URL\",msg.url)\nmsg.method = 'GET'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1380,
        "wires": [
            [
                "3f3b20a915cc4d0e"
            ]
        ]
    },
    {
        "id": "8c0e426c5fece3fe",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "getBankProduct",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 1280,
        "wires": []
    },
    {
        "id": "3f3b20a915cc4d0e",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "getAllBankApplication",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 460,
        "y": 1380,
        "wires": [
            [
                "8d91d1144fa961c7",
                "f7b8aff814cbb834"
            ]
        ]
    },
    {
        "id": "8d91d1144fa961c7",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "updateBankApplicationStatusReq",
        "func": "const GO_URL = env.get('GO_URL')\n\nconst token = flow.get(\"token\")\n\nmsg.url = `${GO_URL}/bank-application/decision/update`\nmsg.method = 'POST'\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.payload = {\n    remarks: msg.row[\"Reason For rejection\"], // actual message\n    // remarks: \"APPROVE\", // actual message\n    decision: {\n        label: msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? \"Approve\" : \"Reject\",\n        value: msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? \"APPROVE\" : \"REJECT\",\n        // value: false ? \"APPROVE\" : \"REJECT\",\n        variableName: \"bankapprover_action\",\n        actionType: \"DECISION\",\n    },\n    bankApplicationId: msg.payload[0]._id || \"63fc9febc7d9bb697685ab4a\",\n    correctionItems: {\n        documentIds: [],\n    },\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1560,
        "wires": [
            [
                "801fd995f2e8ff63"
            ]
        ]
    },
    {
        "id": "f7b8aff814cbb834",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "getAllBankApplications",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 1380,
        "wires": []
    },
    {
        "id": "801fd995f2e8ff63",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "updateBankApplicationStatus",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 490,
        "y": 1560,
        "wires": [
            [
                "9f0213676e1804f9",
                "d7eb43486e56b9c9"
            ]
        ]
    },
    {
        "id": "9f0213676e1804f9",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "debug 235",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1500,
        "wires": []
    },
    {
        "id": "d7eb43486e56b9c9",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "createLoanTermReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst bankAccount = flow.get(\"bankAccount\") || {}\n\nconst bankDetails = flow.get('bankDetails') || {}\nconst businessPartnerId = flow.get('businessPartnerId')\n\n\nconst enterpriseID = msg.enterpriseId\nconst bankId = msg.bankId\n\nconst row = msg.row\n\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.headers = {\n        Authorization: `Bearer ${actyvToken}`\n}\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms`\nmsg.method = 'POST'\n\nmsg.payload = {\n        bankID: bankId,\n        borrowerID: businessPartnerId,\n        enterpriseID,\n        productType: \"BNPL\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1700,
        "wires": [
            [
                "0456f1f1bb30bb5f"
            ]
        ]
    },
    {
        "id": "0456f1f1bb30bb5f",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "createLoanTerm",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 460,
        "y": 1700,
        "wires": [
            [
                "45e2ae4877c62511",
                "411a7c42864ac576"
            ]
        ]
    },
    {
        "id": "45e2ae4877c62511",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "debug 236",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 1700,
        "wires": []
    },
    {
        "id": "411a7c42864ac576",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "updateLoanTermReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst row = msg.row\n\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.headers = {\n        Authorization: `Bearer ${actyvToken}`,\n        \"x-actyv-api-config\":X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/service/update`\nmsg.method = 'PATCH',\n\nmsg.payload = {\n        loanTermsID: msg.payload.id,\n        approvedLimit: msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? row[\"Sanction amount\"] : 0,\n        // loanAmount: row[\"Loan Accepted Amount\"],\n        loanAmount: 0,\n        crnNumber: row[\"Dealer Code\"],\n        validTill: msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? calculateValidTill(row[\"Updated Date\"]) : \"\",\n        loanGrantStatus: msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? \"APPROVED\" : \"REJECTED\",\n        bankProvidedLoanCodes: msg.row[\"Loan Account No\"]\n}\n\nfunction calculateValidTill(inputDate){\n        let date = inputDate\n        let split = date.split(\"/\")\n        let addOneYear = Number(split[split.length - 1]) + 1\n        split[split.length - 1] = addOneYear\n        let joined = split.join('-')\n        return joined\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1820,
        "wires": [
            [
                "5e037c3cb5e2feb0"
            ]
        ]
    },
    {
        "id": "5e037c3cb5e2feb0",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "updateLoanTerm",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 470,
        "y": 1820,
        "wires": [
            [
                "d813b4aabd7040bc"
            ]
        ]
    },
    {
        "id": "d813b4aabd7040bc",
        "type": "switch",
        "z": "c8388b64545e95b6",
        "name": "",
        "property": "row[\"Loan Approved (Y/N)\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "N",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Y",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 1820,
        "wires": [
            [
                "924d4ff38e8b161d"
            ],
            [
                "bdb757d73d66b370"
            ]
        ]
    },
    {
        "id": "924d4ff38e8b161d",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "debug 237",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 1800,
        "wires": []
    },
    {
        "id": "bdb757d73d66b370",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "createTernorAndRateSpreadReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst bankAccount = flow.get(\"bankAccount\") || {}\nconst bankDetails = flow.get('bankDetails') || {}\nconst benchmarkRateID = flow.get(\"benchmarkRateID\") || \"\"\n\nconsole.log(\"benchmarkRateID\", benchmarkRateID)\n\nconst bankId = msg.bankId\n\nconst row = msg.row\n\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.headers = {\n        Authorization: `Bearer ${actyvToken}`,\n        bankid:bankId\n}\n\nmsg.url = `${PAYLATER_URL}/v1/tenor-and-rate-spread`\nmsg.method = 'POST'\nmsg.payload = {\n        bankID: bankId,\n        loanID: msg.payload.id,\n        fromDuration: \"P0D\",\n        benchmarkRateID: benchmarkRateID,\n        toDuration: \"P45D\",\n        loanProductID: \"BNPL\",\n        bankSpread: row[\"ROI\"],\n        actyvSpread: 1,\n        additionalCashbackCodes: []\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1920,
        "wires": [
            [
                "2e506a1a40e1bddb"
            ]
        ]
    },
    {
        "id": "2e506a1a40e1bddb",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "createTenorAndRateSpread",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 480,
        "y": 1920,
        "wires": [
            [
                "bca40386f64a4687",
                "702410267a4fd5a9"
            ]
        ]
    },
    {
        "id": "bca40386f64a4687",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "setTenorAndRateSpreadId",
        "func": "flow.set(\"tenorAndRateSpreadId\",msg.payload.id)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1920,
        "wires": [
            [
                "103d024432c5abf3"
            ]
        ]
    },
    {
        "id": "702410267a4fd5a9",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "createBusinessRelationship(D-B)Req",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst bankAccount = flow.get(\"bankAccount\") || {}\nconst bankDetails = flow.get('bankDetails') || {}\n\nconst {  bankAccountNo,\n        bankIfsc,\n        bankName, } = bankAccount\n\nconst enterpriseId = msg.enterpriseId\nconst bankId = msg.bankId\nconst businessPartnerId = flow.get('businessPartnerId') || \"\"\n\nconst row = msg.row\n\nmsg.url = `${GO_URL}/business-relationship/service`\nmsg.method = 'POST'\nmsg.headers = {};\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = {\n        businessId: businessPartnerId,\n        parentBusinessId: enterpriseId,\n        identifierByParent: row[\"Dealer Code\"],\n        bankAccountNumber: bankAccountNo,\n        bankIFSC: bankIfsc,\n        bankName: bankName,\n        relationType: \"DISTRIBUTOR-BANK\"\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 2060,
        "wires": [
            [
                "7e77bd149a2b15a3"
            ]
        ]
    },
    {
        "id": "103d024432c5abf3",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "debug 238",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 1920,
        "wires": []
    },
    {
        "id": "7e77bd149a2b15a3",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "createBusinessRelationship(D-B)",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 500,
        "y": 2060,
        "wires": [
            [
                "b16584432ce9a7c9"
            ]
        ]
    },
    {
        "id": "b16584432ce9a7c9",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "createBusinessRelationship(D-B)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 2060,
        "wires": []
    },
    {
        "id": "64a93ca2489e5e51",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "Loop",
        "func": "\n\nfor(let row of msg.payload){\n\nnode.send({\n    payload:row,\n    isComplete : \"false\"\n});\n}\n\nmsg.isComplete = \"true\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 1020,
        "wires": [
            [
                "3b6efcdb3409acdf"
            ]
        ]
    },
    {
        "id": "3b6efcdb3409acdf",
        "type": "switch",
        "z": "c8388b64545e95b6",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 1020,
        "wires": [
            [],
            [
                "96d98bf5611b99e7"
            ]
        ]
    },
    {
        "id": "bc182e6c9cb87c64",
        "type": "node-red-contrib-graph-oauth-login",
        "z": "c8388b64545e95b6",
        "name": "",
        "scope": "https://graph.microsoft.com/.default",
        "redirecturi": "",
        "code": "",
        "encoding": false,
        "logintype": "Application",
        "refreshtimer": "10",
        "x": 130,
        "y": 420,
        "wires": [
            [
                "0a60278894a31394"
            ]
        ]
    },
    {
        "id": "a8de946bf9850971",
        "type": "inject",
        "z": "c8388b64545e95b6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "0a60278894a31394",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "Get All Messages",
        "func": "let data=msg.payload;\nflow.set(\"token\",msg.at);\n// let userID=\"User Id from microsoft Graph\"\n\nlet userID = env.get(\"OUTLOOKUSERID\")\nlet sender =\"from:gargayush456@gmail.com\"\n//2023 - 03 - 31T04: 53: 15.736Z\nconst date = moment().toISOString().split(\"T\")[0].split(\"-\")\nconst today = `${date[2]}/${date[1]}/${date[0]}`\nconsole.log({token:msg.at})\n\n// msg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages?$search=\"from:ramu.bugudi@actyv.com\"`\nmsg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages?$search=\"received:${today} AND from:mshravan142@gmail.com\"`\n// msg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages?$filter=Subject in 'lead push' and importance eq 'normal'&$orderby=subject,importance,receivedDateTime desc`\nmsg.method=\"GET\";\nmsg.headers={\n    // \"Authorization\":`${data.access_token}`\n    \"Authorization\": `${msg.at}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 370,
        "y": 420,
        "wires": [
            [
                "113e28cbd1472770"
            ]
        ]
    },
    {
        "id": "113e28cbd1472770",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 390,
        "y": 500,
        "wires": [
            [
                "9c73c8d7b5a7fbfb"
            ]
        ]
    },
    {
        "id": "9e07c5b5a40947a6",
        "type": "inject",
        "z": "c8388b64545e95b6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 200,
        "wires": [
            [
                "701ea1cfddbf0260"
            ]
        ]
    },
    {
        "id": "7e2fafd53187b004",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "Searching Attachment",
        "func": "let data = msg.payload;\nlet token=flow.get(\"token\");\nflow.set(\"msg\",data);\nlet userID = env.get(\"OUTLOOKUSERID\")\n// msg.url = `https://graph.microsoft.com/v1.0/users/1870cd49-a831-4b52-ba5e-b680441f9f70/messages/${data.id}/attachments`\nmsg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages/${data.id}/attachments`\n\nmsg.method = \"GET\";\nmsg.headers = {\n    // \"Authorization\": `${token.access_token}`\n    \"Authorization\": `${token}`\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 640,
        "wires": [
            [
                "2e3c729878e92353"
            ]
        ]
    },
    {
        "id": "2e3c729878e92353",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 640,
        "wires": [
            [
                "83673e1b9559aace",
                "e29c88dec3870a8d"
            ]
        ]
    },
    {
        "id": "83673e1b9559aace",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "debug 245",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 640,
        "wires": []
    },
    {
        "id": "9c73c8d7b5a7fbfb",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "each Msg",
        "func": "// let data=msg.payload;\nlet data = msg.payload.value;\n\n// console.log({valubhchnve:msg.value})\n\n\n// let parsedData = msg.payload.value\n// console.log(\"dsfd\", parsedData)\nfor (let index = 0; index < data.length; index++) {\n    // console.log(\"dhvhsgav\",data[index])\n    node.send({payload:data[index]});\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 500,
        "wires": [
            [
                "7e2fafd53187b004"
            ]
        ]
    },
    {
        "id": "f69b26a2f9d52e38",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "debug 246",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 880,
        "wires": []
    },
    {
        "id": "44a8720b112fbbc7",
        "type": "book",
        "z": "c8388b64545e95b6",
        "name": "",
        "raw": false,
        "x": 150,
        "y": 880,
        "wires": [
            [
                "70f911c713eeadbe"
            ]
        ]
    },
    {
        "id": "70f911c713eeadbe",
        "type": "sheet",
        "z": "c8388b64545e95b6",
        "name": "",
        "sheetName": "Sheet1",
        "x": 290,
        "y": 880,
        "wires": [
            [
                "0578820f894f482b"
            ]
        ]
    },
    {
        "id": "0578820f894f482b",
        "type": "sheet-to-json",
        "z": "c8388b64545e95b6",
        "name": "",
        "raw": "false",
        "range": "",
        "header": "default",
        "blankrows": false,
        "x": 490,
        "y": 880,
        "wires": [
            [
                "f69b26a2f9d52e38",
                "64a93ca2489e5e51"
            ]
        ]
    },
    {
        "id": "e29c88dec3870a8d",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "function 162",
        "func": "let data=msg.payload;\n\nmsg.payload = data.value[0].contentBytes.toString();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 740,
        "wires": [
            [
                "f9d25bef865b2f3e"
            ]
        ]
    },
    {
        "id": "f9d25bef865b2f3e",
        "type": "base64",
        "z": "c8388b64545e95b6",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 760,
        "y": 740,
        "wires": [
            [
                "44a8720b112fbbc7"
            ]
        ]
    },
    {
        "id": "26bf47bca542c04f",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 280,
        "wires": [
            [
                "bc182e6c9cb87c64"
            ]
        ]
    },
    {
        "id": "2fb5df234f8e402e",
        "type": "http request",
        "z": "c8388b64545e95b6",
        "name": "AuthenticateBNPLUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 280,
        "wires": [
            [
                "26bf47bca542c04f"
            ]
        ]
    },
    {
        "id": "701ea1cfddbf0260",
        "type": "function",
        "z": "c8388b64545e95b6",
        "name": "AuthenticateBNPLUserReq",
        "func": "// const envVariables = global.get('envVariables')\nconst BNPL_USER = env.get('BNPL_USER')\nconst BNPL_USER_PASSWORD = env.get('BNPL_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": BNPL_USER_PASSWORD,\n    \"email\": BNPL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 280,
        "wires": [
            [
                "2fb5df234f8e402e",
                "5d1860af97196436"
            ]
        ]
    },
    {
        "id": "5d1860af97196436",
        "type": "debug",
        "z": "c8388b64545e95b6",
        "name": "debug 247",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 200,
        "wires": []
    },
    {
        "id": "4a5967710ee356b2",
        "type": "comment",
        "z": "c8388b64545e95b6",
        "name": "hardcoded bank applicationId",
        "info": "",
        "x": 320,
        "y": 1520,
        "wires": []
    },
    {
        "id": "25d026dd81300a48",
        "type": "inject",
        "z": "fb44a60890b22361",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "ceafe6cf5c347561"
            ]
        ]
    },
    {
        "id": "ceafe6cf5c347561",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "getAllBanks",
        "func": "\nconst BANK_USER_EMAIL = env.get('BANK_USER_EMAIL')\nconst BANK_USER_PASSWORD = env.get('BANK_USER_PASSWORD')\nconst GO_URL = env.get('GO_URL');\n\n\nmsg.url = `${GO_URL}/bank`;\nmsg.method = \"GET\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 260,
        "wires": [
            [
                "41c027f4dc64517c"
            ]
        ]
    },
    {
        "id": "41c027f4dc64517c",
        "type": "http request",
        "z": "fb44a60890b22361",
        "name": "getAllBanks",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 260,
        "wires": [
            [
                "2fbc26ce0fb1ac68",
                "c57db240c8a8a052"
            ]
        ]
    },
    {
        "id": "2fbc26ce0fb1ac68",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "getAllBanks",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 240,
        "wires": []
    },
    {
        "id": "c57db240c8a8a052",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "loopThroughBanks",
        "func": "\n\nfor(let bank of msg.payload.slice(0,1)){\n    node.send({\n        payload : bank,\n        isComplete: false\n    })\n}\n\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 400,
        "wires": [
            [
                "0a378c55c3a7cd38"
            ]
        ]
    },
    {
        "id": "0a378c55c3a7cd38",
        "type": "switch",
        "z": "fb44a60890b22361",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 400,
        "wires": [
            [
                "3424132fec3ff5b1"
            ],
            []
        ]
    },
    {
        "id": "3424132fec3ff5b1",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "getAllMandates",
        "func": "\nconst PAYMENT_SERVICE_URL = env.get('PAYMENT_SERVICE_URL');\n\n\nmsg.url = `${PAYMENT_SERVICE_URL}/api/actyv/getMandatesOfBusiness`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \"bankID\": msg.payload._id\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 480,
        "wires": [
            [
                "5ea885f2f9647d6a"
            ]
        ]
    },
    {
        "id": "5ea885f2f9647d6a",
        "type": "http request",
        "z": "fb44a60890b22361",
        "name": "getAllMandates",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 400,
        "y": 480,
        "wires": [
            [
                "c74236687d651b6a",
                "79069a5a2e6acc7e"
            ]
        ]
    },
    {
        "id": "c74236687d651b6a",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "getAllMandates",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 480,
        "wires": []
    },
    {
        "id": "79069a5a2e6acc7e",
        "type": "switch",
        "z": "fb44a60890b22361",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 600,
        "wires": [
            [
                "2acfa6886ee66adb"
            ],
            [
                "0dda985c763b82c0"
            ]
        ]
    },
    {
        "id": "2acfa6886ee66adb",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "No mandates",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 560,
        "wires": []
    },
    {
        "id": "0dda985c763b82c0",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "loopThroughMandates",
        "func": "let mandates = msg.payload.filter((mandate) => mandate.businessPartnerID.length>20)\nfor(let mandate of mandates.slice(0,1)){\n    if (mandate.businessPartnerID.length === 24){\n        node.send({\n            ...msg,\n            payload: mandate,\n            actyvMandateID: mandate.id,\n            businessPartnerID: mandate.businessPartnerID,\n            bankID: mandate.bankID,\n            borrowerID: mandate.businessPartnerID,\n            isComplete: false\n        });\n    }\n}\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "_",
                "module": "lodash"
            }
        ],
        "x": 320,
        "y": 640,
        "wires": [
            [
                "11e903e61b2a6cb3"
            ]
        ]
    },
    {
        "id": "11e903e61b2a6cb3",
        "type": "switch",
        "z": "fb44a60890b22361",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 640,
        "wires": [
            [
                "56560921c7bf5fb0"
            ],
            [
                "a1626fa44001beb1"
            ]
        ]
    },
    {
        "id": "a1626fa44001beb1",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "fetchAllDrawdowns",
        "func": "const actyvToken = flow.get(\"actyvToken\")\nconst PAYLATER_URL = env.get('PAYLATER_URL');\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY');\n\n\n\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown/service/fetch`;\nmsg.headers = {\n    // Authorization: `Bearer ${actyvToken}`,\n    // actyventityid: \"63d1139e9afdf78f2da3743d\",\n    \"x-actyv-api-config-key\":X_ACTYV_API_CONFIG_KEY\n}\nmsg.method = \"POST\"\nmsg.payload = {\n    \"bankID\": msg.bankID,\n    // \"borrowerID\": msg.borrowerID,\n    \"drawdownStatus\": \"paid\",\n    // \"beforeDueDate\": moment().local().add(2, \"day\").toISOString().split(\"T\")[0],\n    // \"afterDueDate\": moment().local().add(1, \"day\").toISOString().split(\"T\")[0],\n    \"beforeDueDate\": \"2023-03-30\",\n    \"afterDueDate\": \"2023-03-01\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 190,
        "y": 740,
        "wires": [
            [
                "471d5a3cc3c26396"
            ]
        ]
    },
    {
        "id": "471d5a3cc3c26396",
        "type": "http request",
        "z": "fb44a60890b22361",
        "name": "fetchAllDrawdowns",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 410,
        "y": 740,
        "wires": [
            [
                "7bb20d29083e9546",
                "80179c50bd824f35"
            ]
        ]
    },
    {
        "id": "7bb20d29083e9546",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "fetchAllDrawdowns",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 740,
        "wires": []
    },
    {
        "id": "80179c50bd824f35",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "loopThroughDrawdown",
        "func": "\nfor(let drawdown of msg.payload.slice(0,1)){\n    node.send({\n        ...msg,\n        payload: {},\n        drawdown,\n        isComplete: false\n    });\n}\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 840,
        "wires": [
            [
                "7a52557f863c59c4"
            ]
        ]
    },
    {
        "id": "7a52557f863c59c4",
        "type": "switch",
        "z": "fb44a60890b22361",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 840,
        "wires": [
            [
                "860bab8216ec179f"
            ],
            [
                "d24b43f1348529e4",
                "6054f663b92c4d4b"
            ]
        ]
    },
    {
        "id": "d24b43f1348529e4",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "getBP_UsersReq",
        "func": "\nconst ACTYV_ENTITY_USER_EMAIL = env.get('ACTYV_ENTITY_USER_EMAIL')\nconst ACTYV_ENTITY_USER_PASSWORD = env.get('ACTYV_ENTITY_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst borrowerID = msg.borrowerID\n\nmsg.headers = {\n    \"x-actyv-api-config-key\":X_ACTYV_API_CONFIG_KEY\n}\nmsg.url = `${ADMIN_URL}/api/business-partner-user/get/all/${borrowerID}`;\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 940,
        "wires": [
            [
                "b1ad0296dc4e7809"
            ]
        ]
    },
    {
        "id": "b1ad0296dc4e7809",
        "type": "http request",
        "z": "fb44a60890b22361",
        "name": "getBP_Users",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 450,
        "y": 940,
        "wires": [
            [
                "03c2e8c74ca76523",
                "7fb79b6551955f01"
            ]
        ]
    },
    {
        "id": "03c2e8c74ca76523",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "getBP_Users",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 940,
        "wires": []
    },
    {
        "id": "7fb79b6551955f01",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "sendSmsReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL');\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst dueDate = msg.drawdown.dueDate.split(\"T\")[0]\nconst amount = msg.drawdown.disbursedAmount - msg.drawdown.paidDisbursedAmount\n\nmsg.headers = {\n    \"x-actyv-api-config-key\":X_ACTYV_API_CONFIG_KEY\n}\nmsg.url = `${ADMIN_URL}/api/user/sms/send`;\nmsg.method = \"POST\"\nmsg.payload = {\n    // \"phone\": msg.payload[0].mobile,\n    \"phone\": [\"+919747442344\",\"+918590375447\"],\n    \"message\": `Repayment of Rs.${amount} for your BNPL drawdown is due on ${dueDate} and will be paid using your mandate. Please maintain sufficient balance. -Actyv`,\n    \"templateId\": \"1107168060079334572\"\n}\n\n\nreturn msg;\n/*\n1107168006902413160\n\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1040,
        "wires": [
            [
                "a2226ab405647522"
            ]
        ]
    },
    {
        "id": "a2226ab405647522",
        "type": "http request",
        "z": "fb44a60890b22361",
        "name": "sendSmsReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 460,
        "y": 1040,
        "wires": [
            [
                "301abd30620e578f"
            ]
        ]
    },
    {
        "id": "301abd30620e578f",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "sendSmsReq",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 1040,
        "wires": []
    },
    {
        "id": "7302daebdb2f7e93",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "getAllMandates",
        "func": "\nconst PAYMENT_SERVICE_URL = env.get('PAYMENT_SERVICE_URL');\n\n\nmsg.url = `${PAYMENT_SERVICE_URL}/api/actyv/getMandatesOfBusiness`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \"enterpriseID\": msg.payload._id\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 1820,
        "wires": [
            [
                "c41a36766be156e6"
            ]
        ]
    },
    {
        "id": "c41a36766be156e6",
        "type": "http request",
        "z": "fb44a60890b22361",
        "name": "getAllMandates",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 460,
        "y": 1820,
        "wires": [
            [
                "aa43a560862afae9",
                "2d28c36f3d122dbd"
            ]
        ]
    },
    {
        "id": "aa43a560862afae9",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "getAllMandates",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 1820,
        "wires": []
    },
    {
        "id": "2d28c36f3d122dbd",
        "type": "switch",
        "z": "fb44a60890b22361",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 170,
        "y": 2040,
        "wires": [
            [
                "a44e725116255005"
            ],
            [
                "9de2cad43b0fc875"
            ]
        ]
    },
    {
        "id": "a44e725116255005",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "No mandates",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 2000,
        "wires": []
    },
    {
        "id": "9de2cad43b0fc875",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "loopThroughMandates",
        "func": "\nfor(let mandate of msg.payload){\n    if (mandate.businessPartnerID){\n        node.send({\n            ...msg,\n            payload: mandate,\n            actyvMandateID: mandate.id,\n            businessPartnerID: mandate.businessPartnerID,\n            enterpriseID: mandate.enterpriseID,\n            borrowerID: mandate.businessPartnerID,\n            isComplete: false\n        });\n    }\n}\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 2080,
        "wires": [
            [
                "8ba144eca31e1494"
            ]
        ]
    },
    {
        "id": "8ba144eca31e1494",
        "type": "switch",
        "z": "fb44a60890b22361",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 2080,
        "wires": [
            [],
            [
                "d0a1654345b9c696"
            ]
        ]
    },
    {
        "id": "d0a1654345b9c696",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "fetchAllInvoices",
        "func": "const actyvToken = flow.get(\"actyvToken\")\nconst PAYLATER_URL = env.get('PAYLATER_URL');\n// const PAYLATER_URL = \"http://localhost:3000\";\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY');\n\nconst {\n    enterpriseID,\n    borrowerID\n} = msg\n// const dueDate = moment().add(1, \"day\").toISOString().split(\"T\")[0]\nconst dueDate = \"2023-02-14\"\nmsg.url = `${PAYLATER_URL}/v1/invoices/service?enterpriseID=${enterpriseID}&dueDate=2023-02-14&distributorID=${borrowerID}`;\nmsg.headers = {\n    \"x-actyv-api-config-key\":X_ACTYV_API_CONFIG_KEY\n}\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 180,
        "y": 2180,
        "wires": [
            [
                "646e2447d3ab2529"
            ]
        ]
    },
    {
        "id": "646e2447d3ab2529",
        "type": "http request",
        "z": "fb44a60890b22361",
        "name": "fetchAllInvoices",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 420,
        "y": 2180,
        "wires": [
            [
                "eaf7a0c0eb3d94c3",
                "b1e0f0f2eb5e05d5"
            ]
        ]
    },
    {
        "id": "eaf7a0c0eb3d94c3",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "fetchAllInvoices",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 2180,
        "wires": []
    },
    {
        "id": "5f0c4794df7ad75a",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "getAllEnterprises",
        "func": "const GO_URL = env.get('GO_URL');\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${GO_URL}/enterprise/service`;\nmsg.method = \"GET\"\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1580,
        "wires": [
            [
                "9578bc9138a274a0"
            ]
        ]
    },
    {
        "id": "9578bc9138a274a0",
        "type": "http request",
        "z": "fb44a60890b22361",
        "name": "getAllEnterprises",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 1580,
        "wires": [
            [
                "2d59708f75d77c2a",
                "7d5016b5f9820c40"
            ]
        ]
    },
    {
        "id": "2d59708f75d77c2a",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "getAllEnterprises",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 1560,
        "wires": []
    },
    {
        "id": "7d5016b5f9820c40",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "loopThroughEnterprise",
        "func": "\n\nfor(let enterprise of msg.payload.slice(0,1)){\n    node.send({\n        payload : enterprise,\n        isComplete: false\n    })\n}\n\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 1700,
        "wires": [
            [
                "ab3268faa9b93db3"
            ]
        ]
    },
    {
        "id": "ab3268faa9b93db3",
        "type": "switch",
        "z": "fb44a60890b22361",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 1700,
        "wires": [
            [],
            [
                "7302daebdb2f7e93"
            ]
        ]
    },
    {
        "id": "b1e0f0f2eb5e05d5",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "loopThroughInvoices",
        "func": "console.log({before:msg.payload})\nmsg.payload = msg.payload.filter((invoice) => !invoice.loanDrawdown)\nconsole.log({ before: msg.payload })\n\nfor(let invoice of msg.payload.slice(0,1)){\n    node.send({\n        ...msg,\n        payload: {},\n        invoice,\n        isComplete: false\n    });\n}\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 2300,
        "wires": [
            [
                "645ff04d529e9fea"
            ]
        ]
    },
    {
        "id": "645ff04d529e9fea",
        "type": "switch",
        "z": "fb44a60890b22361",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 2300,
        "wires": [
            [],
            [
                "cde0c14bd7259f1c",
                "604a3763385cc703"
            ]
        ]
    },
    {
        "id": "604a3763385cc703",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "getBP_UsersReq",
        "func": "\nconst ACTYV_ENTITY_USER_EMAIL = env.get('ACTYV_ENTITY_USER_EMAIL')\nconst ACTYV_ENTITY_USER_PASSWORD = env.get('ACTYV_ENTITY_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst borrowerID = msg.borrowerID\n\nmsg.headers = {\n    \"x-actyv-api-config-key\":X_ACTYV_API_CONFIG_KEY\n}\nmsg.url = `${ADMIN_URL}/api/business-partner-user/get/all/${borrowerID}`;\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 2400,
        "wires": [
            [
                "b3bdbe27dc6b23a2"
            ]
        ]
    },
    {
        "id": "b3bdbe27dc6b23a2",
        "type": "http request",
        "z": "fb44a60890b22361",
        "name": "getBP_Users",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 2400,
        "wires": [
            [
                "5861068dfc9e4173",
                "4cc649ba1de1e951"
            ]
        ]
    },
    {
        "id": "5861068dfc9e4173",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "getBP_Users",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 2400,
        "wires": []
    },
    {
        "id": "4cc649ba1de1e951",
        "type": "function",
        "z": "fb44a60890b22361",
        "name": "sendSmsReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL');\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst dueDate = msg.invoice.dueDate.split(\"T\")[0]\nconst amount = msg.invoice.amount\nconst invoiceNo = msg.invoice.finalInvoiceNo\nconsole.log({ nbr: msg.payload[0].mobile})\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\nmsg.url = `${ADMIN_URL}/api/user/sms/send`;\nmsg.method = \"POST\"\nmsg.payload = {\n    // \"phone\": msg.payload[0].mobile,\n    \"phone\": \"+919747442344\",\n    \"message\": `Your invoice ${invoiceNo} of Rs.${amount} is due on ${dueDate} and will be paid using your mandate. Please maintain sufficient balance. -Actyv`,\n    \"templateId\": \"1107168060088252646\",\n    // \"entityId\": \"1101387620000035571\",\n    // \"messageType\": \"Transactional\"\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 2500,
        "wires": [
            [
                "a64f3212f7b061a0"
            ]
        ]
    },
    {
        "id": "a64f3212f7b061a0",
        "type": "http request",
        "z": "fb44a60890b22361",
        "name": "sendSmsReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 440,
        "y": 2500,
        "wires": [
            [
                "09cc1dd216a3443b"
            ]
        ]
    },
    {
        "id": "09cc1dd216a3443b",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "sendSmsReq",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 2500,
        "wires": []
    },
    {
        "id": "cde0c14bd7259f1c",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "Invoice",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 2280,
        "wires": []
    },
    {
        "id": "a82158089e4d1cf4",
        "type": "inject",
        "z": "fb44a60890b22361",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1480,
        "wires": [
            [
                "5f0c4794df7ad75a"
            ]
        ]
    },
    {
        "id": "860bab8216ec179f",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "drawdowns completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 800,
        "wires": []
    },
    {
        "id": "56560921c7bf5fb0",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "mandates completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 600,
        "wires": []
    },
    {
        "id": "6054f663b92c4d4b",
        "type": "debug",
        "z": "fb44a60890b22361",
        "name": "drawdown",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 880,
        "wires": []
    },
    {
        "id": "593dd79ce35ad075",
        "type": "inject",
        "z": "fb44a60890b22361",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 06 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1420,
        "wires": [
            [
                "5f0c4794df7ad75a"
            ]
        ]
    },
    {
        "id": "fe7e46daf12f9d42",
        "type": "inject",
        "z": "2659280b75890366",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 80,
        "wires": [
            [
                "ddc477c43f610f97"
            ]
        ]
    },
    {
        "id": "ddc477c43f610f97",
        "type": "function",
        "z": "2659280b75890366",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst CKPL_ENTERPRISE_ADMIN_EMAIL = env.get('CKPL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": CKPL_ENTERPRISE_ADMIN_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 160,
        "wires": [
            [
                "b20057e3af625311"
            ]
        ]
    },
    {
        "id": "b20057e3af625311",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "AuthenticateEnterpriseUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 480,
        "y": 160,
        "wires": [
            [
                "78147953ae503396"
            ]
        ]
    },
    {
        "id": "78147953ae503396",
        "type": "function",
        "z": "2659280b75890366",
        "name": "saveEnterpriseToken",
        "func": "flow.set(\"enterpriseToken\",msg.payload.idToken)\nconsole.log({enterpriseToken:msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 160,
        "wires": [
            [
                "424115e178180516"
            ]
        ]
    },
    {
        "id": "424115e178180516",
        "type": "function",
        "z": "2659280b75890366",
        "name": "AuthenticateBankUserReq",
        "func": "\nconst AXIS_BANK_ADMIN_EMAIL = env.get('AXIS_BANK_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": PASSWORD,\n    \"email\": AXIS_BANK_ADMIN_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 240,
        "wires": [
            [
                "f239c3ec3c688aa2"
            ]
        ]
    },
    {
        "id": "f239c3ec3c688aa2",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "AuthenticateBankUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 460,
        "y": 240,
        "wires": [
            [
                "6aa483a499a0b08e"
            ]
        ]
    },
    {
        "id": "6aa483a499a0b08e",
        "type": "function",
        "z": "2659280b75890366",
        "name": "saveBankToken",
        "func": "flow.set(\"bankToken\",msg.payload.idToken)\n// console.log({bankToken:msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 240,
        "wires": [
            [
                "df37a096241c2a90"
            ]
        ]
    },
    {
        "id": "df37a096241c2a90",
        "type": "function",
        "z": "2659280b75890366",
        "name": "AuthenticateActyvUserReq",
        "func": "\nconst ACTYV_ENTITY_USER_EMAIL = env.get('ACTYV_ENTITY_USER_EMAIL')\nconst ACTYV_ENTITY_USER_PASSWORD = env.get('ACTYV_ENTITY_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": ACTYV_ENTITY_USER_PASSWORD,\n    \"email\": ACTYV_ENTITY_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 310,
        "wires": [
            [
                "938b5a82c1a6f8f5"
            ]
        ]
    },
    {
        "id": "938b5a82c1a6f8f5",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "AuthenticateActyvUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 460,
        "y": 310,
        "wires": [
            [
                "bc251b5e754eadde"
            ]
        ]
    },
    {
        "id": "bc251b5e754eadde",
        "type": "function",
        "z": "2659280b75890366",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\n// console.log({bankToken:msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 310,
        "wires": [
            [
                "7c5e8649ab4534c7"
            ]
        ]
    },
    {
        "id": "7c5e8649ab4534c7",
        "type": "function",
        "z": "2659280b75890366",
        "name": "getAllBanks",
        "func": "\nconst BANK_USER_EMAIL = env.get('BANK_USER_EMAIL')\nconst BANK_USER_PASSWORD = env.get('BANK_USER_PASSWORD')\nconst GO_URL = env.get('GO_URL');\n\n\nmsg.url = `${GO_URL}/bank`;\nmsg.method = \"GET\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 400,
        "wires": [
            [
                "46dbd0c48fbeec28"
            ]
        ]
    },
    {
        "id": "46dbd0c48fbeec28",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "getAllBanks",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 400,
        "wires": [
            [
                "f7b2a665c1057e7d",
                "5c2862deb50d9ac5"
            ]
        ]
    },
    {
        "id": "f7b2a665c1057e7d",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "getAllBanks",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 380,
        "wires": []
    },
    {
        "id": "5c2862deb50d9ac5",
        "type": "function",
        "z": "2659280b75890366",
        "name": "loopThroughBanks",
        "func": "\n\nfor(let bank of msg.payload){\n    node.send({\n        payload : bank,\n        isComplete: false\n    })\n}\n\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 560,
        "wires": [
            [
                "384311afc1483c64"
            ]
        ]
    },
    {
        "id": "384311afc1483c64",
        "type": "switch",
        "z": "2659280b75890366",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 580,
        "wires": [
            [
                "ab8faed087d4253b"
            ],
            []
        ]
    },
    {
        "id": "ab8faed087d4253b",
        "type": "function",
        "z": "2659280b75890366",
        "name": "getAllMandates",
        "func": "\nconst PAYMENT_SERVICE_URL = env.get('PAYMENT_SERVICE_URL');\n\n\nmsg.url = `${PAYMENT_SERVICE_URL}/api/actyv/getMandatesOfBusiness`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \"bankID\": msg.payload._id\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 200,
        "wires": [
            [
                "838d1dd3923a5811"
            ]
        ]
    },
    {
        "id": "838d1dd3923a5811",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "getAllMandates",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1540,
        "y": 200,
        "wires": [
            [
                "af757f306facacf9",
                "0c9f6483819ab9d5"
            ]
        ]
    },
    {
        "id": "af757f306facacf9",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "getAllMandates",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1780,
        "y": 200,
        "wires": []
    },
    {
        "id": "0c9f6483819ab9d5",
        "type": "switch",
        "z": "2659280b75890366",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1250,
        "y": 320,
        "wires": [
            [
                "924d7a107a303287"
            ],
            [
                "2a57f9890255dbe9"
            ]
        ]
    },
    {
        "id": "924d7a107a303287",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "No mandates",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 280,
        "wires": []
    },
    {
        "id": "2a57f9890255dbe9",
        "type": "function",
        "z": "2659280b75890366",
        "name": "loopThroughMandates",
        "func": "\nfor(let mandate of msg.payload){\n    if (mandate.businessPartnerID.length>20){\n        node.send({\n            ...msg,\n            payload: mandate,\n            actyvMandateID: mandate.id,\n            businessPartnerID: mandate.businessPartnerID,\n            bankID: mandate.bankID,\n            borrowerID: mandate.businessPartnerID,\n            isComplete: false\n        });\n    }\n}\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 360,
        "wires": [
            [
                "1318ca93b4258351"
            ]
        ]
    },
    {
        "id": "1318ca93b4258351",
        "type": "switch",
        "z": "2659280b75890366",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1690,
        "y": 360,
        "wires": [
            [],
            [
                "ae57edd78f0bdfe4"
            ]
        ]
    },
    {
        "id": "ae57edd78f0bdfe4",
        "type": "function",
        "z": "2659280b75890366",
        "name": "fetchAllDrawdowns",
        "func": "const actyvToken = flow.get(\"actyvToken\")\nconst PAYLATER_URL = env.get('PAYLATER_URL');\n\n\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown/fetch`;\nmsg.headers = {\n    Authorization: `Bearer ${actyvToken}`,\n    actyventityid: \"63d1139e9afdf78f2da3743d\"\n}\nmsg.method = \"POST\"\nmsg.payload = {\n    \"bankID\": msg.bankID,\n    // \"borrowerID\": msg.borrowerID,\n    \"drawdownStatus\": \"paid\",\n    // \"beforeDueDate\": moment().local().add(2, \"day\").toISOString().split(\"T\")[0],\n    // \"afterDueDate\": moment().local().add(1, \"day\").toISOString().split(\"T\")[0],\n    \"beforeDueDate\": \"2023-03-30\",\n    \"afterDueDate\": \"2023-03-01\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1270,
        "y": 460,
        "wires": [
            [
                "bb3a2660bb6f4213"
            ]
        ]
    },
    {
        "id": "bb3a2660bb6f4213",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "fetchAllDrawdowns",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1510,
        "y": 460,
        "wires": [
            [
                "a1a643b91992c22d",
                "8b0a5fd1415d3b5c"
            ]
        ]
    },
    {
        "id": "a1a643b91992c22d",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "fetchAllDrawdowns",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 460,
        "wires": []
    },
    {
        "id": "8b0a5fd1415d3b5c",
        "type": "function",
        "z": "2659280b75890366",
        "name": "loopThroughDrawdown",
        "func": "\nfor(let drawdown of msg.payload.slice(0,1)){\n    node.send({\n        ...msg,\n        payload: {},\n        drawdown:drawdown,\n        isComplete: false\n    });\n}\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 560,
        "wires": [
            [
                "0b131ee2afd11ce8"
            ]
        ]
    },
    {
        "id": "0b131ee2afd11ce8",
        "type": "switch",
        "z": "2659280b75890366",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1510,
        "y": 560,
        "wires": [
            [],
            [
                "6b423e35ceaf2abc",
                "cb4421e404053567"
            ]
        ]
    },
    {
        "id": "6b423e35ceaf2abc",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "debug 288",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 600,
        "wires": []
    },
    {
        "id": "cb4421e404053567",
        "type": "function",
        "z": "2659280b75890366",
        "name": "raiseMandate",
        "func": "\nconst PAYMENT_SERVICE_URL = env.get('PAYMENT_SERVICE_URL');\nconst dueDate = msg.drawdown.dueDate.split(\"T\")[0]\nmsg.url = `${PAYMENT_SERVICE_URL}/api/actyv/chargeMandateByActyvMandateID`;\nmsg.method = \"PUT\"\nmsg.payload = {\n    \"actyvMandateID\": msg.actyvMandateID,\n    \"presentmentDate\": dueDate,\n    \"amount\": msg.drawdown.disbursedAmount - msg.drawdown.paidDisbursedAmount\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1260,
        "y": 700,
        "wires": [
            [
                "c2ea2b34c5f14313"
            ]
        ]
    },
    {
        "id": "c2ea2b34c5f14313",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "raiseMandate",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1500,
        "y": 700,
        "wires": [
            [
                "27844f896312c2ae"
            ]
        ]
    },
    {
        "id": "27844f896312c2ae",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "raiseMandate",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1740,
        "y": 700,
        "wires": []
    },
    {
        "id": "3044180646315674",
        "type": "inject",
        "z": "2659280b75890366",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1220,
        "y": 820,
        "wires": [
            [
                "f05899e682425089"
            ]
        ]
    },
    {
        "id": "f05899e682425089",
        "type": "function",
        "z": "2659280b75890366",
        "name": "function 168",
        "func": "const date = moment().add(0, \"day\").toISOString().split(\"T\")[0]\nmsg.payload = date\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1450,
        "y": 820,
        "wires": [
            [
                "a2063ebca045d0a7"
            ]
        ]
    },
    {
        "id": "a2063ebca045d0a7",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "debug 289",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 820,
        "wires": []
    },
    {
        "id": "fe279328b0b8a2eb",
        "type": "function",
        "z": "2659280b75890366",
        "name": "getAllEnterprises",
        "func": "const GO_URL = env.get('GO_URL');\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${GO_URL}/enterprise/service`;\nmsg.method = \"GET\"\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1020,
        "wires": [
            [
                "67cf776f7ced2556"
            ]
        ]
    },
    {
        "id": "67cf776f7ced2556",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "getAllEnterprises",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 1020,
        "wires": [
            [
                "6e7f81b3b1b6e9d3",
                "86a2e8065fcd4b52"
            ]
        ]
    },
    {
        "id": "6e7f81b3b1b6e9d3",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "getAllBanks",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 1000,
        "wires": []
    },
    {
        "id": "86a2e8065fcd4b52",
        "type": "function",
        "z": "2659280b75890366",
        "name": "loopThroughEnterprise",
        "func": "\n\nfor(let enterprise of msg.payload.slice(0,1)){\n    node.send({\n        payload : enterprise,\n        isComplete: false\n    })\n}\n\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 1140,
        "wires": [
            [
                "d040082ff0219404"
            ]
        ]
    },
    {
        "id": "d040082ff0219404",
        "type": "switch",
        "z": "2659280b75890366",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 1140,
        "wires": [
            [],
            [
                "7f4709b8740c4637"
            ]
        ]
    },
    {
        "id": "7f4709b8740c4637",
        "type": "function",
        "z": "2659280b75890366",
        "name": "getAllMandates",
        "func": "\nconst PAYMENT_SERVICE_URL = env.get('PAYMENT_SERVICE_URL');\n\n\nmsg.url = `${PAYMENT_SERVICE_URL}/api/actyv/getMandatesOfBusiness`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \"enterpriseID\": msg.payload._id\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1240,
        "wires": [
            [
                "c772cb04202a792d"
            ]
        ]
    },
    {
        "id": "c772cb04202a792d",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "getAllMandates",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 480,
        "y": 1240,
        "wires": [
            [
                "c8bebcf17caf4851",
                "9fdb821383dc5368"
            ]
        ]
    },
    {
        "id": "c8bebcf17caf4851",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "getAllMandates",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 1240,
        "wires": []
    },
    {
        "id": "9fdb821383dc5368",
        "type": "function",
        "z": "2659280b75890366",
        "name": "mockMandates",
        "func": "msg.payload = [\n    {\n        \"id\": \"222f3a88-fbfc-4169-b3a2-65b01fbcf726\",\n        \"createdAt\": \"2023-03-27T10:31:15.132Z\",\n        \"mandateConfigID\": \"d3d7126d-cdbe-4cbb-98cc-acec9c271f65\",\n        \"bankID\": null,\n        \"enterpriseID\": \"638c73f16ea52ce57470c1a9\",\n        \"businessPartnerID\": \"638ca85f7bc8de661c102a02\",\n        \"mandateType\": \"E_MANDATE\",\n        \"emailAddress\": \"thoufique@gmail.com\",\n        \"mobileNumber\": \"8248885227\",\n        \"accountHolderName\": \"Mohamed Thoufique\",\n        \"bankCode\": \"HDFC\",\n        \"bankAccountNumber\": \"501000007654321\",\n        \"accountType\": \"SAVINGS\",\n        \"ifsc\": \"HDFC0000786\",\n        \"branchName\": \"Coimbatore\",\n        \"amount\": \"500\",\n        \"frequency\": \"ANYTIME\",\n        \"validFrom\": \"2045-12-31\",\n        \"validTill\": \"2044-06-26\",\n        \"mandateVerificationResource\": \"https://uat21.qchk.in/QuickZip/MandateDetails.aspx?ID=44a1e633b414a4c6c0f8ea173e6be878\",\n        \"status\": \"Success\",\n        \"umrn\": \"\",\n        \"pgMandateID\": \"900014032760114916\"\n    }\n]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 1340,
        "wires": [
            [
                "075bcaa4ac160561"
            ]
        ]
    },
    {
        "id": "075bcaa4ac160561",
        "type": "switch",
        "z": "2659280b75890366",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 1340,
        "wires": [
            [
                "6508146c3996a36a"
            ],
            [
                "97ab2a0a909c7f71"
            ]
        ]
    },
    {
        "id": "6508146c3996a36a",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "No mandates",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 1320,
        "wires": []
    },
    {
        "id": "97ab2a0a909c7f71",
        "type": "function",
        "z": "2659280b75890366",
        "name": "loopThroughMandates",
        "func": "\nfor(let mandate of msg.payload){\n    if (mandate.businessPartnerID){\n        node.send({\n            ...msg,\n            payload: mandate,\n            actyvMandateID: mandate.id,\n            businessPartnerID: mandate.businessPartnerID,\n            enterpriseID: mandate.enterpriseID,\n            borrowerID: mandate.businessPartnerID,\n            isComplete: false\n        });\n    }\n}\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1500,
        "wires": [
            [
                "0ee394a69e035551"
            ]
        ]
    },
    {
        "id": "0ee394a69e035551",
        "type": "switch",
        "z": "2659280b75890366",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 630,
        "y": 1500,
        "wires": [
            [],
            [
                "407df09095233670"
            ]
        ]
    },
    {
        "id": "407df09095233670",
        "type": "function",
        "z": "2659280b75890366",
        "name": "fetchAllInvoices",
        "func": "const actyvToken = flow.get(\"actyvToken\")\n// const PAYLATER_URL = env.get('PAYLATER_URL');\nconst PAYLATER_URL = \"http://localhost:3000\";\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY');\n\nconst {\n    enterpriseID,\n    borrowerID\n} = msg\n// const dueDate = moment().add(1, \"day\").toISOString().split(\"T\")[0]\nconst dueDate = \"2023-02-14\"\nmsg.url = `${PAYLATER_URL}/v1/invoices/service?enterpriseID=${enterpriseID}&dueDate=${dueDate}&distributorID=${borrowerID}`;\nmsg.headers = {\n    \"x-actyv-api-config-key\":X_ACTYV_API_CONFIG_KEY\n}\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 200,
        "y": 1600,
        "wires": [
            [
                "dfb96d76d12ce601"
            ]
        ]
    },
    {
        "id": "dfb96d76d12ce601",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "fetchAllInvoices",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 440,
        "y": 1600,
        "wires": [
            [
                "cdda61491ee42028",
                "a31451c4bf2c9a56"
            ]
        ]
    },
    {
        "id": "cdda61491ee42028",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "fetchAllInvoices",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 1600,
        "wires": []
    },
    {
        "id": "a31451c4bf2c9a56",
        "type": "function",
        "z": "2659280b75890366",
        "name": "loopThroughInvoices",
        "func": "console.log({before:msg.payload})\nmsg.payload = msg.payload.filter((invoice) => !invoice.loanDrawdown)\nconsole.log({ before: msg.payload })\n\nfor(let invoice of msg.payload.slice(0,1)){\n    node.send({\n        ...msg,\n        payload: {},\n        invoice,\n        isComplete: false\n    });\n}\n\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1720,
        "wires": [
            [
                "b192f30d00a1b06f"
            ]
        ]
    },
    {
        "id": "b192f30d00a1b06f",
        "type": "switch",
        "z": "2659280b75890366",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 1720,
        "wires": [
            [],
            [
                "235b934d1cce0224",
                "41a2789bfb2fdd3b"
            ]
        ]
    },
    {
        "id": "4b746b685a347774",
        "type": "function",
        "z": "2659280b75890366",
        "name": "getBP_UsersReq",
        "func": "\nconst ACTYV_ENTITY_USER_EMAIL = env.get('ACTYV_ENTITY_USER_EMAIL')\nconst ACTYV_ENTITY_USER_PASSWORD = env.get('ACTYV_ENTITY_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst borrowerID = msg.borrowerID\n\nmsg.headers = {\n    \"x-actyv-api-config-key\":X_ACTYV_API_CONFIG_KEY\n}\nmsg.url = `${ADMIN_URL}/api/business-partner-user/get/all/${borrowerID}`;\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 2040,
        "wires": [
            [
                "912f23a563a40f04"
            ]
        ]
    },
    {
        "id": "235b934d1cce0224",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "Invoice",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "invoice",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 1700,
        "wires": []
    },
    {
        "id": "912f23a563a40f04",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "getBP_Users",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 490,
        "y": 2040,
        "wires": [
            [
                "a3c96420b941deb3"
            ]
        ]
    },
    {
        "id": "a3c96420b941deb3",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "getBP_Users",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 2040,
        "wires": []
    },
    {
        "id": "1d148b034d587a7f",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "raiseMandate",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 460,
        "y": 1820,
        "wires": [
            [
                "db485f54dc25d498"
            ]
        ]
    },
    {
        "id": "41a2789bfb2fdd3b",
        "type": "function",
        "z": "2659280b75890366",
        "name": "raiseMandate",
        "func": "\nconst PAYMENT_SERVICE_URL = env.get('PAYMENT_SERVICE_URL');\nconst dueDate = msg.invoice.dueDate.split(\"T\")[0]\nconst amount = msg.invoice.amount\n\nmsg.url = `${PAYMENT_SERVICE_URL}/api/actyv/chargeMandateByActyvMandateID`;\nmsg.method = \"PUT\"\nmsg.payload = {\n    \"actyvMandateID\": \"809e2b5b-0e79-460f-a813-1de73614459c\",//msg.actyvMandateID,\n    \"presentmentDate\": \"2023-04-02\",//dueDate\n    \"amount\": 1\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 220,
        "y": 1820,
        "wires": [
            [
                "1d148b034d587a7f",
                "d27a0f9787d2d856"
            ]
        ]
    },
    {
        "id": "db485f54dc25d498",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "raiseMandate",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 1820,
        "wires": []
    },
    {
        "id": "6177e81f5172af11",
        "type": "inject",
        "z": "2659280b75890366",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 163,
        "y": 674,
        "wires": [
            [
                "ef57e15480854020"
            ]
        ]
    },
    {
        "id": "ef57e15480854020",
        "type": "function",
        "z": "2659280b75890366",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst CKPL_ENTERPRISE_ADMIN_EMAIL = env.get('CKPL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": CKPL_ENTERPRISE_ADMIN_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 233,
        "y": 754,
        "wires": [
            [
                "341ddf0cbdb44ec8"
            ]
        ]
    },
    {
        "id": "341ddf0cbdb44ec8",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "AuthenticateEnterpriseUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 523,
        "y": 754,
        "wires": [
            [
                "e26cb16a15c51506"
            ]
        ]
    },
    {
        "id": "e26cb16a15c51506",
        "type": "function",
        "z": "2659280b75890366",
        "name": "saveEnterpriseToken",
        "func": "flow.set(\"enterpriseToken\",msg.payload.idToken)\nconsole.log({enterpriseToken:msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 823,
        "y": 754,
        "wires": [
            [
                "5891659a1da30ef4"
            ]
        ]
    },
    {
        "id": "5891659a1da30ef4",
        "type": "function",
        "z": "2659280b75890366",
        "name": "AuthenticateBankUserReq",
        "func": "\nconst AXIS_BANK_ADMIN_EMAIL = env.get('AXIS_BANK_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": PASSWORD,\n    \"email\": AXIS_BANK_ADMIN_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 223,
        "y": 834,
        "wires": [
            [
                "83d0281f41991134"
            ]
        ]
    },
    {
        "id": "83d0281f41991134",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "AuthenticateBankUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 503,
        "y": 834,
        "wires": [
            [
                "93573a86f18238a5"
            ]
        ]
    },
    {
        "id": "93573a86f18238a5",
        "type": "function",
        "z": "2659280b75890366",
        "name": "saveBankToken",
        "func": "flow.set(\"bankToken\",msg.payload.idToken)\n// console.log({bankToken:msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 803,
        "y": 834,
        "wires": [
            [
                "dcfd7a1df92c698b"
            ]
        ]
    },
    {
        "id": "dcfd7a1df92c698b",
        "type": "function",
        "z": "2659280b75890366",
        "name": "AuthenticateActyvUserReq",
        "func": "\nconst ACTYV_ENTITY_USER_EMAIL = env.get('ACTYV_ENTITY_USER_EMAIL')\nconst ACTYV_ENTITY_USER_PASSWORD = env.get('ACTYV_ENTITY_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": ACTYV_ENTITY_USER_PASSWORD,\n    \"email\": ACTYV_ENTITY_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 223,
        "y": 904,
        "wires": [
            [
                "6743e756c25cdba3"
            ]
        ]
    },
    {
        "id": "6743e756c25cdba3",
        "type": "http request",
        "z": "2659280b75890366",
        "name": "AuthenticateActyvUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 503,
        "y": 904,
        "wires": [
            [
                "e99a658115621f16"
            ]
        ]
    },
    {
        "id": "e99a658115621f16",
        "type": "function",
        "z": "2659280b75890366",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\n// console.log({bankToken:msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 803,
        "y": 904,
        "wires": [
            [
                "fe279328b0b8a2eb"
            ]
        ]
    },
    {
        "id": "d27a0f9787d2d856",
        "type": "debug",
        "z": "2659280b75890366",
        "name": "debug 296",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 1900,
        "wires": []
    },
    {
        "id": "0177d6a97fbe107b",
        "type": "inject",
        "z": "32607aaaf853d8ed",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 390,
        "y": 300,
        "wires": [
            [
                "7a16a0a765ad49fb"
            ]
        ]
    },
    {
        "id": "7a16a0a765ad49fb",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "Set env variables",
        "func": "\n\n\nconst ENV_VARIABLES = new Map();\n\nENV_VARIABLES.set('PAYLATER_URL',\"https://actyv-platform-paylater-service-v1.qa.actyv.com\")\nENV_VARIABLES.set('GO_URL',\"https://actyv-platform-go-service.qa.actyv.com/api\")\nENV_VARIABLES.set('ADMIN_URL',\"https://actyv-platform-admin-service.qa.actyv.com\")\n\nENV_VARIABLES.set('BUSINESS_IDENTIFIER',\"ABBCB2066P\")\nENV_VARIABLES.set('BUSINESS_TYPE',\"ENTERPRISE\")\nENV_VARIABLES.set('BANK_KEY',\"msl\")\nENV_VARIABLES.set('X_ACTYV_API_CONFIG_KEY',\"8HhkIWzVMSnSgvlhxr\")\n\nglobal.set('envVariables',ENV_VARIABLES)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 300,
        "wires": [
            [
                "b36f7c054f8a278d"
            ]
        ]
    },
    {
        "id": "b36f7c054f8a278d",
        "type": "SFTP-main",
        "z": "32607aaaf853d8ed",
        "path": "/",
        "method": "list",
        "remoteFilePath": "/sftpdir/test/shravan",
        "remoteFilePathType": "str",
        "localFilePath": "C:\\Users\\Ayush Rarg\\OneDrive - actyv.ai\\Desktop\\node-red",
        "localFilePathType": "str",
        "server": "e890793010d7a406",
        "outputs": 1,
        "debug": false,
        "name": "lisitng the files from sftp",
        "x": 880,
        "y": 300,
        "wires": [
            [
                "dbcae6d835b6fba5"
            ]
        ]
    },
    {
        "id": "799e620e57672d0e",
        "type": "SFTP-main",
        "z": "32607aaaf853d8ed",
        "path": "/",
        "method": "get",
        "remoteFilePath": "payload",
        "remoteFilePathType": "msg",
        "localFilePath": "/Users/shravanpm/Desktop/node-red",
        "localFilePathType": "str",
        "server": "e890793010d7a406",
        "outputs": 1,
        "debug": false,
        "name": "get a single file from sftp",
        "x": 1480,
        "y": 300,
        "wires": [
            [
                "80292021a81a8a72",
                "9023b9050b196e17"
            ]
        ]
    },
    {
        "id": "cbc7edc577363bf0",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "mapJsonFromXLSX",
        "func": "\nconst bankDetails = flow.get('bankDetails') || {}\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n// msg.payload = msg.payload.splice(7,1)\n// return msg\n\nif (msg.payload.length > 0) {\n\n    for (let row of msg.payload.splice(7,msg.payload.length)) {\n        await sleep(500)\n        node.send({\n            switchCondition: handleSwitchCondition(row[\"F\"]),\n            bankDetails: bankDetails,\n            payload: {\n                \"sr.No\" : row[\"MATURITY REPORT\"],\n                \"Dealer Name\":row[\"B\"],\n                \"Account No\":row[\"C\"],\n                \"Dealer Code\":row[\"D\"],\n                \"Transaction Date\":row[\"E\"],\n                \"Particular\": row[\"F\"],\n                \"Invoice Date\": row[\"G\"],\n                \"Transaction Amount\": row[\"H\"],\n                \"Outstanding Amount\": row[\"I\"],\n                \"Outstanding Days\": row[\"J\"],\n                \"Credit Period\": row[\"K\"],\n                \"Maturity Date\": row[\"L\"],\n                \"Overdue Amount\": row[\"M\"],\n                \"Overdue Days\": row[\"N\"],\n                \"Availed Adhoc\": row[\"M\"],\n            }\n        }           \n        )\n    }\n\n}\n\nfunction handleSwitchCondition(payload){\n    // console.log(\"ssss\", payload)\n    if (payload?.includes(\"INTEREST\")){\n        return \"INTEREST\"\n    } else if ((!payload?.includes(\"Total\"))&&payload){\n        return \"PRINCIPAL\"\n    } else if (payload?.includes(\"Sub Total\")){\n        return \"null\"\n    }\n    console.log(\"ssss\",payload)\n    return \"null\"\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 640,
        "wires": [
            [
                "47df4b46f74630a4"
            ]
        ]
    },
    {
        "id": "98f3ca10d90eba99",
        "type": "alafile in",
        "z": "32607aaaf853d8ed",
        "name": "",
        "filename": "",
        "format": "xls",
        "columns": "*",
        "headers": true,
        "x": 380,
        "y": 640,
        "wires": [
            [
                "20ead5358e4fb136"
            ]
        ]
    },
    {
        "id": "110afad24fd8188c",
        "type": "SFTP-main",
        "z": "32607aaaf853d8ed",
        "g": "330045778eef98cf",
        "path": "/",
        "method": "put",
        "remoteFilePath": "successPath",
        "remoteFilePathType": "msg",
        "localFilePath": "localPath",
        "localFilePathType": "msg",
        "server": "e890793010d7a406",
        "outputs": 1,
        "debug": false,
        "name": "move to success folder",
        "x": 710,
        "y": 500,
        "wires": [
            [
                "9572b589acd33875"
            ]
        ]
    },
    {
        "id": "dd9a74d8f33afc5b",
        "type": "debug",
        "z": "32607aaaf853d8ed",
        "g": "330045778eef98cf",
        "name": "Deleted file from SFTP existing directory",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 500,
        "wires": []
    },
    {
        "id": "9572b589acd33875",
        "type": "SFTP-main",
        "z": "32607aaaf853d8ed",
        "g": "330045778eef98cf",
        "path": "/",
        "method": "delete",
        "remoteFilePath": "remotePath",
        "remoteFilePathType": "msg",
        "localFilePath": "filepath",
        "localFilePathType": "msg",
        "server": "e890793010d7a406",
        "outputs": 1,
        "debug": false,
        "name": "delete from existing folder",
        "x": 980,
        "y": 500,
        "wires": [
            [
                "dd9a74d8f33afc5b"
            ]
        ]
    },
    {
        "id": "dbcae6d835b6fba5",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "function 13",
        "func": "const sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\n// for(let i=0;i<1;i++){\n//     sleep(2000)\n    \n//     node.send({payload:[msg.payload[i]],fileName:msg.payload[i]});\n// }\nmsg.payload = [msg.payload[0]]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 300,
        "wires": [
            [
                "799e620e57672d0e"
            ]
        ]
    },
    {
        "id": "f41781cc386e8d2b",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "Interest",
        "func": "msg.data = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 820,
        "wires": [
            [
                "872e5b6050425464"
            ]
        ]
    },
    {
        "id": "47df4b46f74630a4",
        "type": "switch",
        "z": "32607aaaf853d8ed",
        "name": "",
        "property": "switchCondition",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "INTEREST",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PRINCIPAL",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "null",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 370,
        "y": 1020,
        "wires": [
            [
                "f41781cc386e8d2b"
            ],
            [
                "cb8071afc688c24c"
            ],
            []
        ]
    },
    {
        "id": "c3615a78be027ad0",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "updateDrawdownTablePaidPrincipalReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\n\nmsg.method = \"PATCH\";\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown`\nmsg.payload = {\n    // requestUniqueCode: msg.data[\"Particular\"],\n    requestUniqueCode: \"ACTY3891670570284214\",\n    // drawdownStatus:\"paid\"\n    paidDisbursedAmount: Number(msg.data[\"Transaction Amount\"]) - Number(msg.data[\"Outstanding Amount\"])\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "b95b9dfb8ac1cb5a",
        "type": "debug",
        "z": "32607aaaf853d8ed",
        "name": "updatedAccruedInterest",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 820,
        "wires": []
    },
    {
        "id": "80292021a81a8a72",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "g": "330045778eef98cf",
        "name": "setRemotePath",
        "func": "msg.filename = msg.payload[0].split('.')[0] // filename without extension\n// msg.filename = \"/Users/shravanpm/Downloads/Lead Push and Response Format\"// filename without extension\n\nconst folderPath = msg.payload[0].split(\"/\")\nconst fileName = folderPath[folderPath.length - 1]\n\nflow.set('filename', fileName) // filename with extension\n\nconsole.log({ fileName:msg.filename })\n\n// msg.filepath = `/Users/ramu/Desktop/node-red/${fileName}`\nmsg.successPath = `/sftpdir/test/ramu/success`\n// msg.localPath = `/Users/ramu/Desktop/node-red/${fileName}`\nmsg.remotePath = `/sftpdir/test/ramu/limits/${fileName}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 500,
        "wires": [
            [
                "98f3ca10d90eba99"
            ]
        ]
    },
    {
        "id": "ace7545bd12b8317",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "updateDrawdownTableForPaidInterestReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\n\nmsg.method = \"PATCH\";\nmsg.url=`${PAYLATER_URL}/v1/loan-drawdown`\nmsg.payload = {\n    requestUniqueCode: \"ACTY3891670570284214\",\n    // requestUniqueCode: msg.data[\"Particular\"].split(\"_INTEREST\")[0]\n    // drawdownStatus:\"paid\"\n    paidInterestAmount: Number(msg.data[\"Transaction Amount\"]) - Number(msg.data[\"Outstanding Amount\"])\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 820,
        "wires": [
            [
                "6acf99389fd7fbfc"
            ]
        ]
    },
    {
        "id": "6acf99389fd7fbfc",
        "type": "http request",
        "z": "32607aaaf853d8ed",
        "name": "updateDrawdownTableForPaidInterest",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1380,
        "y": 820,
        "wires": [
            [
                "b95b9dfb8ac1cb5a"
            ]
        ]
    },
    {
        "id": "ece700ce6aca5da4",
        "type": "http request",
        "z": "32607aaaf853d8ed",
        "name": "updateDrawdownTablePaidPrincipal",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1420,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "872e5b6050425464",
        "type": "debug",
        "z": "32607aaaf853d8ed",
        "name": "ReadInterestAccrued",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 680,
        "wires": []
    },
    {
        "id": "e11bb2e7db832689",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "cb8071afc688c24c",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "Principal",
        "func": "msg.data = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1200,
        "wires": [
            [
                "4b34b927572725de",
                "5d88bda11b1b4e6d",
                "c3615a78be027ad0"
            ]
        ]
    },
    {
        "id": "5d88bda11b1b4e6d",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "getDrawdownTableReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\n\nlet requestUniqueCode;\n\n// if (msg.switchCondition ===\"PRINCIPAL\"){\n//     requestUniqueCode = msg.payload.Particular\n// }else{\n//     requestUniqueCode = msg.payload.Particular.split(\"_INTEREST\")[0];\n// }\n\n// msg.url = `${PAYLATER_URL}/v1/loan-drawdown/findByRequestUniqueCode/${requestUniqueCode}`;\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown/findByRequestUniqueCode/${\"ACTY3891670570284214\"}`;\n\nmsg.method = \"GET\";\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1380,
        "wires": [
            [
                "b848bcdf2d10f8fe"
            ]
        ]
    },
    {
        "id": "b848bcdf2d10f8fe",
        "type": "http request",
        "z": "32607aaaf853d8ed",
        "name": "getDrawdownTable",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1230,
        "y": 1380,
        "wires": [
            [
                "096a7f9675e7d91e"
            ]
        ]
    },
    {
        "id": "90484c43d60fc018",
        "type": "comment",
        "z": "32607aaaf853d8ed",
        "name": "Updating drawdown table with paid disbursed amount",
        "info": "",
        "x": 900,
        "y": 980,
        "wires": []
    },
    {
        "id": "630f77cd34f8be1a",
        "type": "comment",
        "z": "32607aaaf853d8ed",
        "name": "checking for data mismatching",
        "info": "",
        "x": 870,
        "y": 1140,
        "wires": []
    },
    {
        "id": "096a7f9675e7d91e",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "verifyData",
        "func": "msg.data ={}\nmsg.data[\"Outstanding Amount\"] = -10;\nmsg.drawdown = msg.payload\nlet outstandingAmount = msg.payload.disbursedAmount - msg.payload.paidDisbursedAmount;\nif (outstandingAmount == msg.data[\"Outstanding Amount\"]){\n    msg.status = \"true\";\n}else{\n    msg.status = \"false\";\n}\nmsg.outstandingAmount = outstandingAmount\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 1380,
        "wires": [
            [
                "21dcbfc85e2eaad2"
            ]
        ]
    },
    {
        "id": "e36ed238b4b8d742",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "update drawdownStatusToPaidReq",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\n\nmsg.method = \"PATCH\";\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown`\nmsg.payload = {\n    // requestUniqueCode: msg.data[\"Particular\"],\n    requestUniqueCode: \"ACTY3891670570284214\",\n    drawdownStatus:\"paid\"\n    \n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 1200,
        "wires": [
            [
                "31f97649ea0b362d"
            ]
        ]
    },
    {
        "id": "4b34b927572725de",
        "type": "switch",
        "z": "32607aaaf853d8ed",
        "name": "",
        "property": "payload[\"Outstanding Amount\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 930,
        "y": 1200,
        "wires": [
            [
                "e36ed238b4b8d742"
            ]
        ]
    },
    {
        "id": "e6739a22c85d8f52",
        "type": "debug",
        "z": "32607aaaf853d8ed",
        "name": "debug 36",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1740,
        "y": 1200,
        "wires": []
    },
    {
        "id": "21dcbfc85e2eaad2",
        "type": "switch",
        "z": "32607aaaf853d8ed",
        "name": "",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1610,
        "y": 1380,
        "wires": [
            [],
            [
                "39f38dc0dd9c546e"
            ]
        ]
    },
    {
        "id": "39f38dc0dd9c546e",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "raiseAnExcemptionReq",
        "func": "const envVariables = global.get('envVariables')\nconst ADMIN_URL = envVariables.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = envVariables.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\n\nmsg.payload = {\n\n    \"from\": \"paylater@actyv.com\",\n    // \"to\": \"sunil.pn@actyv.com\",\n    \"to\":\"shravan.pm@actyv.com\",\n    \"subject\": `Number mismatch on ${msg.drawdown.id} in outstanding amount`,\n\n    \"html\": `<html>For drawdown id ${msg.drawdown.id} is outstanding amount by axis is ${msg.data[\"Outstanding Amount\"]}</html>`,\n    \"priority\": \"high\"\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1540,
        "wires": [
            [
                "de4c7acfda0fa6a1"
            ]
        ]
    },
    {
        "id": "31f97649ea0b362d",
        "type": "http request",
        "z": "32607aaaf853d8ed",
        "name": "update drawdownStatusToPaid",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1490,
        "y": 1200,
        "wires": [
            [
                "e6739a22c85d8f52"
            ]
        ]
    },
    {
        "id": "9522f24524fb9327",
        "type": "debug",
        "z": "32607aaaf853d8ed",
        "name": "debug 41",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 1540,
        "wires": []
    },
    {
        "id": "de4c7acfda0fa6a1",
        "type": "http request",
        "z": "32607aaaf853d8ed",
        "name": "raiseAnExcemption",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1330,
        "y": 1540,
        "wires": [
            [
                "9522f24524fb9327"
            ]
        ]
    },
    {
        "id": "f3f26bc87968e203",
        "type": "comment",
        "z": "32607aaaf853d8ed",
        "name": "Remove hardcoded data",
        "info": "get drawdown table\nverify data\nraise an exception",
        "x": 990,
        "y": 1300,
        "wires": []
    },
    {
        "id": "ef48006a4270b357",
        "type": "comment",
        "z": "32607aaaf853d8ed",
        "name": "Remove hardcoded data",
        "info": "get drawdown table\nverify data\nraise an exception",
        "x": 1250,
        "y": 980,
        "wires": []
    },
    {
        "id": "c2ebfbaddb14d4c4",
        "type": "comment",
        "z": "32607aaaf853d8ed",
        "name": "Remove hardcoded data",
        "info": "set status to paid",
        "x": 1210,
        "y": 1160,
        "wires": []
    },
    {
        "id": "450f726c782e918b",
        "type": "comment",
        "z": "32607aaaf853d8ed",
        "name": "Updating drawdown table with paid interest amount",
        "info": "",
        "x": 1343.333251953125,
        "y": 753.3333129882812,
        "wires": []
    },
    {
        "id": "6cb76dd8e54476f9",
        "type": "comment",
        "z": "32607aaaf853d8ed",
        "name": "Error handling",
        "info": "Send an email if any error occurs",
        "x": 350,
        "y": 1720,
        "wires": []
    },
    {
        "id": "a6ee841ca781c1fe",
        "type": "catch",
        "z": "32607aaaf853d8ed",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 340,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "0bc96a00af49cf5e",
        "type": "debug",
        "z": "32607aaaf853d8ed",
        "name": "error",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 1780,
        "wires": []
    },
    {
        "id": "6a91f185cef02482",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "sendEmailReq",
        "func": "const envVariables = global.get('envVariables')\nconst ADMIN_URL = envVariables.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = envVariables.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\n\nmsg.payload = {\n    // \"from\": \"ramu.bugudi@actyv.com\",\n    \"from\": \"shravan.pm@actyv.com\",\n    \"to\": \"ramu.bugudi@actyv.com\",\n    \"subject\": `Error occured - ${msg.error.message}`,\n    // \"html\": `${msg.error}`,\n    \"html\": `\n    <html>\n        <body>\n            <p></p>\n            <p><b>FLOW NAME:</b> ${env.get(\"NR_FLOW_NAME\")} <b>FLOW ID:</b> ${env.get(\"NR_FLOW_ID\")} <b>PATH:</b> ${env.get(\"NR_NODE_PATH\")}</p>\n            <p>${msg.error.message}</p>\n            <p>Name: ${msg.error.source.name} - Type: ${msg.error.source.type}</p>\n            <p>Stacktrace: ${msg.error.stack}</p>\n        </body>\n    </html>`,\n    \"priority\": \"high\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1780,
        "wires": [
            [
                "739bdbd50c70d749"
            ]
        ]
    },
    {
        "id": "739bdbd50c70d749",
        "type": "http request",
        "z": "32607aaaf853d8ed",
        "name": "sendEmail",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 790,
        "y": 1780,
        "wires": [
            [
                "0bc96a00af49cf5e"
            ]
        ],
        "info": "Get bank product config id"
    },
    {
        "id": "36961446534ea717",
        "type": "status",
        "z": "32607aaaf853d8ed",
        "name": "",
        "scope": null,
        "x": 340,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "118101764de9dc3f",
        "type": "debug",
        "z": "32607aaaf853d8ed",
        "name": "debug 290",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 580,
        "wires": []
    },
    {
        "id": "9023b9050b196e17",
        "type": "debug",
        "z": "32607aaaf853d8ed",
        "name": "debug 291",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 200,
        "wires": []
    },
    {
        "id": "20ead5358e4fb136",
        "type": "function",
        "z": "32607aaaf853d8ed",
        "name": "function 169",
        "func": "console.log({payload:msg.payload})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 600,
        "wires": [
            [
                "118101764de9dc3f"
            ]
        ]
    },
    {
        "id": "39201cadacee673b",
        "type": "inject",
        "z": "dca724589f9513c8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 100,
        "wires": [
            [
                "4b8e2322be805f7d"
            ]
        ]
    },
    {
        "id": "a61b989e4e5260f3",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "setFlowVariable",
        "func": "const bankAccount = {\n    \"enterpriseId\": \"635f75f6d988fd561700d1d2\",\n    \"bankAccountNo\": \"SFS564\",\n    \"bankIfsc\": \"565\",\n    \"bankName\": \"Sbi\"\n}\nflow.set('bankAccount', bankAccount)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 100,
        "wires": [
            [
                "7dc315ff5b6e1ce9"
            ]
        ]
    },
    {
        "id": "4b8e2322be805f7d",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "Set env variables",
        "func": "\n\n\nconst ENV_VARIABLES = new Map();\n\nENV_VARIABLES.set('PAYLATER_URL', env.get(\"PAYLATER_URL\"))\nENV_VARIABLES.set('GO_URL', env.get(\"GO_URL\"))\nENV_VARIABLES.set('ADMIN_URL', env.get(\"ADMIN_URL\"))\n\nENV_VARIABLES.set('BUSINESS_IDENTIFIER', env.get(\"BUSINESS_IDENTIFIER\"))\nENV_VARIABLES.set('BUSINESS_TYPE', env.get(\"BUSINESS_TYPE\"))\nENV_VARIABLES.set('BANK_KEY', env.get(\"BANK_KEY\"))\nENV_VARIABLES.set('BANK_PRODUCT_KEY', env.get(\"BANK_PRODUCT_KEY\"))\nENV_VARIABLES.set('X_ACTYV_API_CONFIG_KEY', env.get(\"X_ACTYV_API_CONFIG_KEY\"))\nENV_VARIABLES.set('EMAIL', env.get(\"EMAIL\"))\nENV_VARIABLES.set('PASSWORD', env.get(\"PASSWORD\"))\nENV_VARIABLES.set('CONFIG_KEY', env.get(\"CONFIG_KEY\"))\nENV_VARIABLES.set('BANK_UNIQUE_IDENTIFIER', env.get(\"BANK_UNIQUE_IDENTIFIER\"))\n\nglobal.set('envVariables',ENV_VARIABLES)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 100,
        "wires": [
            [
                "a61b989e4e5260f3"
            ]
        ]
    },
    {
        "id": "678e876b30242c50",
        "type": "SFTP-main",
        "z": "dca724589f9513c8",
        "path": "/",
        "method": "list",
        "remoteFilePath": "/sftpdir/test/shravan",
        "remoteFilePathType": "str",
        "localFilePath": "C:\\Users\\Ayush Rarg\\OneDrive - actyv.ai\\Desktop\\node-red",
        "localFilePathType": "str",
        "server": "e890793010d7a406",
        "outputs": 1,
        "debug": false,
        "name": "lisitng the files from sftp",
        "x": 547.142822265625,
        "y": 332.8571472167969,
        "wires": [
            [
                "ce8c4300bdce8901"
            ]
        ]
    },
    {
        "id": "266ef574ee62cbe9",
        "type": "SFTP-main",
        "z": "dca724589f9513c8",
        "path": "/",
        "method": "get",
        "remoteFilePath": "payload",
        "remoteFilePathType": "msg",
        "localFilePath": "/Users/shravanpm/Desktop/node-red",
        "localFilePathType": "str",
        "server": "e890793010d7a406",
        "outputs": 1,
        "debug": false,
        "name": "get a single file from sftp",
        "x": 1187.142822265625,
        "y": 332.8571472167969,
        "wires": [
            [
                "45b8eb1406dfc508",
                "0d6c2523e13c9b4f"
            ]
        ]
    },
    {
        "id": "2ed0fe15d86cf75f",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "mapJsonFromXLSX",
        "func": "// console.log(\"agsdvghasvd\",msg.payload)\n// return\nconst bankDetails = flow.get('bankDetails') || {}\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n// msg.payload = msg.payload.splice(7,1)\n// return msg\nlet startIndex;\nfor (let i = 0; i < msg.payload.length - 1; i++) {\n    if (msg.payload[i][\"A\"] === \"DEALER UTILIZATION REPORT\") {\n        startIndex = i;\n        break;\n    }\n\n};\nconsole.log({length:msg.payload.length,startIndex})\nfor (let i = startIndex + 2; i < msg.payload.length; i++) {\n  \n    let obj = {\n        \"SR NO.\":msg.payload[i][\"A\"],\n        \"IM NAME\":msg.payload[i][\"B\"],\n        \"DEALER NAME\":msg.payload[i]['C'],\n        \"DEALER ACCOUNT NO.\":msg.payload[i][\"D\"],\n        \"DEALER CODE\":msg.payload[i][\"E\"],\n        \"SANCTION LIMIT\":msg.payload[i][\"F\"],\n        \"DRAWING POWER\":msg.payload[i][\"G\"],\n        \"LIMIT UTILIZED\":msg.payload[i][\"H\"],\n        \"LIMIT AVAILABLE\":msg.payload[i][\"I\"],\n        \"LIMIT EXPIRY DATE\":msg.payload[i][\"J\"],\n        \"ADHOC SANCTION LIMIT\":msg.payload[i][\"K\"],\n        \"ADHOC LIMIT UTILIZED\":msg.payload[i][\"L\"],\n        \"ADHOC LIMIT AVAILABLE\":msg.payload[i][\"M\"],\n        \"ADHOC EXPIRY DATE\":msg.payload[i][\"N\"],\n        \"TOTAL LIMIT AVAILABLE\":msg.payload[i][\"O\"],\n        \"ACCOUNT STATUS\":msg.payload[i][\"P\"],\n        \"OVERDUE DAYS\":msg.payload[i][\"Q\"],\n        \"TOTAL OVERDUE AMOUNT\":msg.payload[i][\"R\"],\n        \"BRANCH CODE\":msg.payload[i][\"S\"],\n        \"SME CENTER\":msg.payload[i][\"T\"]\n    }\n    console.log({obj})\n    if(obj[\"DEALER CODE\"]){\n        node.send({ payload: {},row:obj });\n    }\n   \n}\n\nfunction handleSwitchCondition(payload) {\n    // console.log(\"ssss\", payload)\n    if (payload?.includes(\"INTEREST\")) {\n        return \"INTEREST\"\n    } else if ((!payload?.includes(\"Total\")) && payload) {\n        return \"PRINCIPAL\"\n    } else if (payload?.includes(\"Sub Total\")) {\n        return \"null\"\n    }\n    console.log(\"ssss\", payload)\n    return \"dd\"\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 680,
        "wires": [
            [
                "93256fb3260804af"
            ]
        ]
    },
    {
        "id": "999d35f0f287ef43",
        "type": "alafile in",
        "z": "dca724589f9513c8",
        "name": "",
        "filename": "",
        "format": "xls",
        "columns": "*",
        "headers": true,
        "x": 110,
        "y": 680,
        "wires": [
            [
                "2ed0fe15d86cf75f"
            ]
        ]
    },
    {
        "id": "ce8c4300bdce8901",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "function 14",
        "func": "const sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nfor(let i=0;i<msg.payload.length;i++){\n    sleep(2000)\n    \n    node.send({payload:[msg.payload[i]],fileName:msg.payload[i]});\n}\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 847.142822265625,
        "y": 332.8571472167969,
        "wires": [
            [
                "266ef574ee62cbe9"
            ]
        ]
    },
    {
        "id": "921a2dacbec97d1b",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "Interest",
        "func": "msg.data = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 2840,
        "wires": [
            []
        ]
    },
    {
        "id": "25609547d9f83b87",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "Principal",
        "func": "msg.data = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 3040,
        "wires": [
            []
        ]
    },
    {
        "id": "88e82ceaa468076f",
        "type": "switch",
        "z": "dca724589f9513c8",
        "name": "",
        "property": "switchCondition",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "INTEREST",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PRINCIPAL",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "null",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 270,
        "y": 2940,
        "wires": [
            [
                "921a2dacbec97d1b"
            ],
            [
                "25609547d9f83b87",
                "bc96a999377a7616"
            ],
            []
        ]
    },
    {
        "id": "e06aa5902caf6875",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "update drawdown table",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\n\n\nmsg.method = \"PATCH\";\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown`\nmsg.payload = {\n    requestUniqueCode: \"ACTY3891670570284214\",\n    // drawdownStatus:\"paid\"\n    paidDisbursedAmount: Number(msg.data[\"Transaction Amount\"]) - Number(msg.data[\"Outstanding Amount\"])\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 3040,
        "wires": [
            [
                "37ecbfa040739388"
            ]
        ]
    },
    {
        "id": "1944c0e378678edc",
        "type": "debug",
        "z": "dca724589f9513c8",
        "name": "debug 37",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 2840,
        "wires": []
    },
    {
        "id": "4022dc8aa82d94a8",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "updateDrawdownTableForPaidInterest",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\n\nmsg.method = \"PATCH\";\nmsg.url=`${PAYLATER_URL}/v1/loan-drawdown`;\nmsg.payload = {\n    requestUniqueCode: \"ACTY3891670570284214\",\n    // drawdownStatus:\"paid\"\n    paidInterestAmount: Number(msg.data[\"Transaction Amount\"]) - Number(msg.data[\"Outstanding Amount\"])\n}\n\nreturn msg;\n\n/**\n *  \"sr.No\" : row[\"MATURITY REPORT\"],\n                \"Dealer Name\":row[\"B\"],\n                \"Account No\":row[\"C\"],\n                \"Dealer Code\":row[\"D\"],\n                \"Transaction Date\":row[\"E\"],\n                \"Particular\": row[\"F\"],\n                \"Invoice Date\": row[\"G\"],\n                \"Transaction Amount\": row[\"H\"],\n                \"Outstanding Amount\": row[\"I\"],\n                \"Outstanding Days\": row[\"J\"],\n                \"Credit Period\": row[\"K\"],\n                \"Maturity Date\": row[\"L\"],\n                \"Overdue Amount\": row[\"M\"],\n                \"Overdue Days\": row[\"N\"],\n                \"Availed Adhoc\": row[\"M\"],\n */",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 2840,
        "wires": [
            [
                "31fcfa5cda73aadb"
            ]
        ]
    },
    {
        "id": "31fcfa5cda73aadb",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1170,
        "y": 2840,
        "wires": [
            [
                "1944c0e378678edc"
            ]
        ]
    },
    {
        "id": "37ecbfa040739388",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1130,
        "y": 3040,
        "wires": [
            []
        ]
    },
    {
        "id": "84336a1f98cf2e12",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 3040,
        "wires": [
            []
        ]
    },
    {
        "id": "bc96a999377a7616",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "Principal",
        "func": "msg.data = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 3200,
        "wires": [
            [
                "fd418f453d1d3553"
            ]
        ]
    },
    {
        "id": "f93dfd3d1d88bd22",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "update drawdown table",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\n\n\n\nlet requestUniqueCode;\n\nif (msg.switchCondition ===\"PRINCIPAL\"){\n    requestUniqueCode = msg.payload.Particular\n}else{\n    requestUniqueCode = msg.payload.Particular.split(\"_INTEREST\")[0];\n}\n\n// msg.url = `${PAYLATER_URL}/v1/loan-drawdown/findByRequestUniqueCode/${requestUniqueCode}`;\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown/findByRequestUniqueCode/${\"ACTY3891670570284214\"}`;\n\nmsg.method = \"GET\";\n// msg.payload = {\n//     // requestUniqueCode,\n//     requestUniqueCode:\"ACTY3891670570284214\",\n//     drawdownStatus:\"paid\"\n// }\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 3360,
        "wires": [
            [
                "a0efbc6ef573121f"
            ]
        ]
    },
    {
        "id": "a0efbc6ef573121f",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 730,
        "y": 3360,
        "wires": [
            [
                "7024f21bc61f1edc"
            ]
        ]
    },
    {
        "id": "9c4c9ac90eead4c2",
        "type": "comment",
        "z": "dca724589f9513c8",
        "name": "Updating drawdown table with paid disbursed amount",
        "info": "",
        "x": 780,
        "y": 2980,
        "wires": []
    },
    {
        "id": "b536446b9b83ed4a",
        "type": "comment",
        "z": "dca724589f9513c8",
        "name": "checking for data mismatching",
        "info": "",
        "x": 750,
        "y": 3140,
        "wires": []
    },
    {
        "id": "7024f21bc61f1edc",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "verifyData",
        "func": "let outstandingAmount = msg.payload.disbursedAmount - msg.payload.paidDisbursedAmount;\nif (outstandingAmount == msg.data[\"Outstanding Amount\"]){\n    msg.status = \"true\";\n}else{\n    msg.status = \"false\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 3360,
        "wires": [
            [
                "31ddd51cb35b6fb8"
            ]
        ]
    },
    {
        "id": "1a9c99bef5094fbf",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "update drawdownStatus to paid",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\n\n\nmsg.method = \"PATCH\";\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown`\nmsg.payload = {\n    // requestUniqueCode: msg.data[\"Particular\"],\n    requestUniqueCode: \"ACTY3891670570284214\",\n    drawdownStatus:\"paid\"\n    \n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 3100,
        "wires": [
            [
                "1bb7f50f46b83ae1"
            ]
        ]
    },
    {
        "id": "fd418f453d1d3553",
        "type": "switch",
        "z": "dca724589f9513c8",
        "name": "",
        "property": "payload[\"Outstanding Amount\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 3200,
        "wires": [
            [
                "1a9c99bef5094fbf"
            ],
            [
                "f93dfd3d1d88bd22"
            ]
        ]
    },
    {
        "id": "75fbe8b11a3be1ad",
        "type": "debug",
        "z": "dca724589f9513c8",
        "name": "debug 39",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 3100,
        "wires": []
    },
    {
        "id": "31ddd51cb35b6fb8",
        "type": "switch",
        "z": "dca724589f9513c8",
        "name": "",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 3360,
        "wires": [
            [],
            [
                "db9fbf5382199d92"
            ]
        ]
    },
    {
        "id": "db9fbf5382199d92",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "raiseAnExcemption",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 3440,
        "wires": [
            []
        ]
    },
    {
        "id": "1bb7f50f46b83ae1",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1310,
        "y": 3100,
        "wires": [
            [
                "75fbe8b11a3be1ad"
            ]
        ]
    },
    {
        "id": "9e89c0628dae798d",
        "type": "SFTP-main",
        "z": "dca724589f9513c8",
        "g": "c61f6fd5ccf5ede8",
        "path": "/",
        "method": "put",
        "remoteFilePath": "successPath",
        "remoteFilePathType": "msg",
        "localFilePath": "localPath",
        "localFilePathType": "msg",
        "server": "e890793010d7a406",
        "outputs": 1,
        "debug": false,
        "name": "move to success folder",
        "x": 417.142822265625,
        "y": 532.8571472167969,
        "wires": [
            [
                "ce2076e6cdd3b758"
            ]
        ]
    },
    {
        "id": "ab60355897d8a01d",
        "type": "debug",
        "z": "dca724589f9513c8",
        "g": "c61f6fd5ccf5ede8",
        "name": "Deleted file from SFTP existing directory",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1057.142822265625,
        "y": 532.8571472167969,
        "wires": []
    },
    {
        "id": "ce2076e6cdd3b758",
        "type": "SFTP-main",
        "z": "dca724589f9513c8",
        "g": "c61f6fd5ccf5ede8",
        "path": "/",
        "method": "delete",
        "remoteFilePath": "remotePath",
        "remoteFilePathType": "msg",
        "localFilePath": "filepath",
        "localFilePathType": "msg",
        "server": "e890793010d7a406",
        "outputs": 1,
        "debug": false,
        "name": "delete from existing folder",
        "x": 697.142822265625,
        "y": 532.8571472167969,
        "wires": [
            [
                "ab60355897d8a01d"
            ]
        ]
    },
    {
        "id": "45b8eb1406dfc508",
        "type": "function",
        "z": "dca724589f9513c8",
        "g": "c61f6fd5ccf5ede8",
        "name": "setRemotePath",
        "func": "msg.filename = msg.payload[0].split('.')[0] // filename without extension\n\nconst folderPath = msg.payload[0].split(\"/\")\nconst fileName = folderPath[folderPath.length - 1]\nflow.set('filename', fileName) // filename with extension\n\n// msg.filepath = `/Users/ramu/Desktop/node-red/${fileName}`\nmsg.successPath = `/sftpdir/test/ramu/success`\nmsg.localPath = `/Users/ramu/Desktop/node-red/${fileName}`\nmsg.remotePath = `/sftpdir/test/ramu/limits/${fileName}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 117.142822265625,
        "y": 532.8571472167969,
        "wires": [
            [
                "999d35f0f287ef43"
            ]
        ]
    },
    {
        "id": "68c517589c1028ab",
        "type": "comment",
        "z": "dca724589f9513c8",
        "name": "Error handling",
        "info": "Send an email if any error occurs",
        "x": 150,
        "y": 2680,
        "wires": []
    },
    {
        "id": "0ce2a8fe5841fb80",
        "type": "catch",
        "z": "dca724589f9513c8",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 140,
        "y": 2740,
        "wires": [
            []
        ]
    },
    {
        "id": "714716f08e83f963",
        "type": "debug",
        "z": "dca724589f9513c8",
        "name": "error",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 2740,
        "wires": []
    },
    {
        "id": "2976d18eebf42b2b",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "sendEmailReq",
        "func": "const envVariables = global.get('envVariables')\nconst ADMIN_URL = envVariables.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = envVariables.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\n\nmsg.payload = {\n    // \"from\": \"ramu.bugudi@actyv.com\",\n    \"from\": \"shravan.pm@actyv.com\",\n    \"to\": \"ramu.bugudi@actyv.com\",\n    \"subject\": `Error occured - ${msg.error.message}`,\n    // \"html\": `${msg.error}`,\n    \"html\": `\n    <html>\n        <body>\n            <p></p>\n            <p><b>FLOW NAME:</b> ${env.get(\"NR_FLOW_NAME\")} <b>FLOW ID:</b> ${env.get(\"NR_FLOW_ID\")} <b>PATH:</b> ${env.get(\"NR_NODE_PATH\")}</p>\n            <p>${msg.error.message}</p>\n            <p>Name: ${msg.error.source.name} - Type: ${msg.error.source.type}</p>\n            <p>Stacktrace: ${msg.error.stack}</p>\n        </body>\n    </html>`,\n    \"priority\": \"high\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 2740,
        "wires": [
            [
                "552cbcbbc04b435a"
            ]
        ]
    },
    {
        "id": "552cbcbbc04b435a",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "sendEmail",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 590,
        "y": 2740,
        "wires": [
            [
                "714716f08e83f963"
            ]
        ],
        "info": "Get bank product config id"
    },
    {
        "id": "e682d706b627bcce",
        "type": "status",
        "z": "dca724589f9513c8",
        "name": "",
        "scope": null,
        "x": 140,
        "y": 2800,
        "wires": [
            []
        ]
    },
    {
        "id": "7e334742249167d9",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "fetchLoanTermByCrn",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\n\n\nmsg.data = {...msg.payload}\nmsg.method = \"POST\";\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/fetchByCrnNumber`;\nmsg.payload= {\n    \"crnNumber\": msg.payload[\"DEALER CODE\"]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 2520,
        "wires": [
            [
                "884fddf5f4fccb30"
            ]
        ]
    },
    {
        "id": "884fddf5f4fccb30",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 910,
        "y": 2520,
        "wires": [
            [
                "48b30d999aef9395",
                "4ee1e97a1a06e2c9"
            ]
        ]
    },
    {
        "id": "48b30d999aef9395",
        "type": "debug",
        "z": "dca724589f9513c8",
        "name": "Loan terms",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 2600,
        "wires": []
    },
    {
        "id": "4ee1e97a1a06e2c9",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "updateLoanTerm",
        "func": "const envVariables = global.get('envVariables')\nconst PAYLATER_URL = envVariables.get('PAYLATER_URL')\n\n\n\nmsg.method = \"PATCH\";\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/update`;\nmsg.payload = {\n    \"crnNumber\": msg.data[\"DEALER CODE\"],\n    \"loanTermsID\": msg.payload.id,\n    \"loanAmount\": msg.data[\"LIMIT UTILIZED\"],\n    // \"loanAmount\": msg.data[\"SANCTION LIMIT\"] - msg.data[\"LIMIT AVAILABLE\"],\n    // \"validTill\": msg.data[\"LIMIT EXPIRY DATE\"]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 2620,
        "wires": [
            [
                "6b07b4ce4103694a"
            ]
        ]
    },
    {
        "id": "6b07b4ce4103694a",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 410,
        "y": 2620,
        "wires": [
            [
                "ecd5f3fa104b371f"
            ]
        ]
    },
    {
        "id": "ecd5f3fa104b371f",
        "type": "debug",
        "z": "dca724589f9513c8",
        "name": "End",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 2620,
        "wires": []
    },
    {
        "id": "1b1fd2ad6c842595",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "getBusinsessPartnerReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\n// console.log({ X_ACTYV_API_CONFIG_KEY, GO_URL })\nconst row = msg.payload\n\nmsg.url = `${GO_URL}/business-partner/service/XX${row[\"Pan Card\"]}XXX`\nmsg.method = 'GET'\nmsg.headers = {};\nmsg.headers['x-actyv-api-config-key'] = X_ACTYV_API_CONFIG_KEY;\n\nmsg.row = row\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 780,
        "wires": [
            [
                "73f3cacc7fea8209"
            ]
        ]
    },
    {
        "id": "73f3cacc7fea8209",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "getBusinessPartner",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 550,
        "y": 780,
        "wires": [
            [
                "a14d4a7ae5e51feb",
                "b32ad76e4d0ff5e4"
            ]
        ]
    },
    {
        "id": "a14d4a7ae5e51feb",
        "type": "debug",
        "z": "dca724589f9513c8",
        "name": "getBusinessPartner",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 780,
        "wires": []
    },
    {
        "id": "b32ad76e4d0ff5e4",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "getAllBankApplicationReq",
        "func": "const GO_URL = env.get('GO_URL')\n\nconst businessPartnerId = msg.payload._id\nmsg.businessPartnerId = msg.payload._id\n\n// flow.set('bankProductConfigId', msg.payload.id)\nconst bankId = msg.bankId\n\n\nmsg.url = `${GO_URL}/bank-application?bankID=${bankId}&businessPartner=${businessPartnerId}&bankProductConfigKey=${msg.payload.id}`\n// console.log(\"URL\",msg.url)\nmsg.method = 'GET'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1000,
        "wires": [
            [
                "194f5c0af91ddc45"
            ]
        ]
    },
    {
        "id": "194f5c0af91ddc45",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "getAllBankApplication",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 540,
        "y": 1000,
        "wires": [
            [
                "d6f3fe1d5b19ba16",
                "b87577c002b43b0d"
            ]
        ]
    },
    {
        "id": "b87577c002b43b0d",
        "type": "debug",
        "z": "dca724589f9513c8",
        "name": "getAllBankApplications",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 1000,
        "wires": []
    },
    {
        "id": "d6f3fe1d5b19ba16",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "updateBankApplicationStatusReq",
        "func": "const GO_URL = env.get('GO_URL')\n\nconst token = flow.get(\"enterpriseToken\")\n\nmsg.url = `${GO_URL}/bank-application/decision/update`\nmsg.method = 'POST'\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.payload = {\n    remarks: \"approved\",//msg.row[\"Reason For rejection\"], // actual message\n    // remarks: \"APPROVE\", // actual message\n    decision: {\n        label: \"approved\",//msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? \"Approve\" : \"Reject\",\n        value: \"approved\",//msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? \"APPROVE\" : \"REJECT\",\n        // value: false ? \"APPROVE\" : \"REJECT\",\n        variableName: \"bankapprover_action\",\n        actionType: \"DECISION\",\n    },\n    bankApplicationId: msg.payload[0]._id || \"63fc9febc7d9bb697685ab4a\",\n    correctionItems: {\n        documentIds: [],\n    },\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1100,
        "wires": [
            [
                "515f570cee9bf6eb"
            ]
        ]
    },
    {
        "id": "515f570cee9bf6eb",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "updateBankApplicationStatus",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 610,
        "y": 1100,
        "wires": [
            [
                "197ed52dfe16f25c"
            ]
        ]
    },
    {
        "id": "197ed52dfe16f25c",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "createLoanTermReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\nconst bankToken = flow.get(\"bankToken\")\n\n\nconst bankAccount = flow.get(\"bankAccount\") || {}\n\nconst bankDetails = flow.get('bankDetails') || {}\n// const businessPartnerId = flow.get('businessPartnerId')\nconst businessPartnerId = \"\"\n\n\nconst enterpriseID = msg.enterpriseId\nconst bankId = msg.bankId\n\nconst row = msg.row\n\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.headers = {\n        Authorization: `Bearer ${actyvToken}`,\n        bankid: msg.bankid\n}\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms`\nmsg.method = 'POST'\n\nmsg.payload = {\n        bankID: bankId,\n        borrowerID: businessPartnerId,\n        enterpriseID,\n        productType: \"BNPL\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1100,
        "wires": [
            [
                "c31c4989580066b9"
            ]
        ]
    },
    {
        "id": "c31c4989580066b9",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "createLoanTerm",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 200,
        "y": 1200,
        "wires": [
            [
                "e432d21ed567ca10"
            ]
        ]
    },
    {
        "id": "e432d21ed567ca10",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "updateLoanTermReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst row = msg.row\n\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.headers = {\n        Authorization: `Bearer ${actyvToken}`,\n        \"x-actyv-api-config\":X_ACTYV_API_CONFIG_KEY,\n}\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/service/update`\nmsg.method = 'PATCH',\n\nmsg.payload = {\n        loanTermsID: msg.payload.id,\n        approvedLimit: msg.row[\"SANCTION LIMIT\"],\n        // loanAmount: row[\"Loan Accepted Amount\"],\n        loanAmount: 0,\n        crnNumber: row[\"DEALER ACCOUNT NO.\"],\n        validTill: msg.row[\"LIMIT EXPIRY DATE\"] ,\n        loanGrantStatus: \"APPROVED\",\n       \n}\n\nfunction calculateValidTill(inputDate){\n        let date = inputDate\n        let split = date.split(\"/\")\n        let addOneYear = Number(split[split.length - 1]) + 1\n        split[split.length - 1] = addOneYear\n        let joined = split.join('-')\n        return joined\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1200,
        "wires": [
            [
                "a87981adfddb275e"
            ]
        ]
    },
    {
        "id": "a87981adfddb275e",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "updateLoanTerm",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 810,
        "y": 1200,
        "wires": [
            [
                "21e5858a53aeb17c"
            ]
        ]
    },
    {
        "id": "21e5858a53aeb17c",
        "type": "switch",
        "z": "dca724589f9513c8",
        "name": "",
        "property": "row[\"Loan Approved (Y/N)\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "N",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Y",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 1300,
        "wires": [
            [],
            [
                "78e4e46049ef0bcc"
            ]
        ]
    },
    {
        "id": "78e4e46049ef0bcc",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "createTernorAndRateSpreadReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst bankAccount = flow.get(\"bankAccount\") || {}\nconst bankDetails = flow.get('bankDetails') || {}\nconst benchmarkRateID = flow.get(\"benchmarkRateID\") || \"\"\n\nconsole.log(\"benchmarkRateID\", benchmarkRateID)\n\nconst bankId = msg.bankId\n\nconst row = msg.row\n\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.headers = {\n        Authorization: `Bearer ${actyvToken}`,\n        bankid:bankId\n}\n\nmsg.url = `${PAYLATER_URL}/v1/tenor-and-rate-spread`\nmsg.method = 'POST'\nmsg.payload = {\n        bankID: bankId,\n        loanID: msg.payload.id,\n        fromDuration: \"P0D\",\n        benchmarkRateID: benchmarkRateID,\n        toDuration: \"P45D\",\n        loanProductID: \"BNPL\",\n        bankSpread: row[\"ROI\"],\n        actyvSpread: 1,\n        additionalCashbackCodes: []\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1320,
        "wires": [
            [
                "d9ae4454cfe8bd3e"
            ]
        ]
    },
    {
        "id": "d9ae4454cfe8bd3e",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "createTenorAndRateSpread",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 800,
        "y": 1320,
        "wires": [
            [
                "3a6394a23a6bc801"
            ]
        ]
    },
    {
        "id": "3a6394a23a6bc801",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "createBusinessRelationship(D-B)Req",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst bankAccount = flow.get(\"bankAccount\") || {}\nconst bankDetails = flow.get('bankDetails') || {}\n\nconst {  bankAccountNo,\n        bankIfsc,\n        bankName, } = bankAccount\n\nconst enterpriseId = msg.enterpriseId\nconst bankId = msg.bankId\nconst businessPartnerId = flow.get('businessPartnerId') || \"\"\n\nconst row = msg.row\n\nmsg.url = `${GO_URL}/business-relationship/service`\nmsg.method = 'POST'\nmsg.headers = {};\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = {\n        businessId: businessPartnerId,\n        parentBusinessId: enterpriseId,\n        identifierByParent: row[\"Dealer Code\"],\n        bankAccountNumber: bankAccountNo,\n        bankIFSC: bankIfsc,\n        bankName: bankName,\n        relationType: \"DISTRIBUTOR-BANK\"\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1420,
        "wires": [
            [
                "08c54125f4a6e061"
            ]
        ]
    },
    {
        "id": "08c54125f4a6e061",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "createBusinessRelationship(D-B)",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 740,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "7dc315ff5b6e1ce9",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "getBankProductConfigReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\n\nflow.set('businessPartnerId', msg.payload._id)\nmsg.businessPartnerId = msg.payload._id\n\nmsg.url = `${GO_URL}/bank-application-config/key/${BANK_PRODUCT_KEY}`\nmsg.method = 'GET'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 200,
        "wires": [
            [
                "df74436e240c815a"
            ]
        ]
    },
    {
        "id": "df74436e240c815a",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "getBankProductConfig",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 580,
        "y": 200,
        "wires": [
            [
                "6b22819cf3564460",
                "f0acb4faa80693b8"
            ]
        ]
    },
    {
        "id": "6b22819cf3564460",
        "type": "debug",
        "z": "dca724589f9513c8",
        "name": "getBankProduct",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 60,
        "wires": []
    },
    {
        "id": "f0acb4faa80693b8",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "function 170",
        "func": "msg.bankId = msg.payload.bank\nmsg.enterpriseId = msg.payload.allowedEnterprises[0]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 200,
        "wires": [
            [
                "8e44ba1cebb310a1"
            ]
        ]
    },
    {
        "id": "8e44ba1cebb310a1",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst ENTERPRISE_USER_EMAIL = env.get('ENTERPRISE_USER_EMAIL')\nconst ENTERPRISE_USER_PASSWORD = env.get('ENTERPRISE_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": ENTERPRISE_USER_PASSWORD,\n    \"email\": ENTERPRISE_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 260,
        "wires": [
            [
                "470ab6de2bb07b8d"
            ]
        ]
    },
    {
        "id": "470ab6de2bb07b8d",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "AuthenticateEnterpriseUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 580,
        "y": 260,
        "wires": [
            [
                "f90879aa6accee3b"
            ]
        ]
    },
    {
        "id": "f90879aa6accee3b",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "saveEnterpriseToken",
        "func": "flow.set(\"enterpriseToken\",msg.payload.idToken)\n// console.log(msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 260,
        "wires": [
            [
                "27bbfaf0ca473c52"
            ]
        ]
    },
    {
        "id": "27bbfaf0ca473c52",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "AuthenticateBankUserReq",
        "func": "\nconst BANK_USER_EMAIL = env.get('BANK_USER_EMAIL')\nconst BANK_USER_PASSWORD = env.get('BANK_USER_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": BANK_USER_PASSWORD,\n    \"email\": BANK_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 260,
        "wires": [
            [
                "a17ef445d395e297"
            ]
        ]
    },
    {
        "id": "a17ef445d395e297",
        "type": "http request",
        "z": "dca724589f9513c8",
        "name": "AuthenticateBankUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1460,
        "y": 260,
        "wires": [
            [
                "50c0c4186daf2822"
            ]
        ]
    },
    {
        "id": "50c0c4186daf2822",
        "type": "function",
        "z": "dca724589f9513c8",
        "name": "saveBankToken",
        "func": "flow.set(\"bankToken\",msg.payload.idToken)\n// console.log(msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 260,
        "wires": [
            [
                "678e876b30242c50"
            ]
        ]
    },
    {
        "id": "93256fb3260804af",
        "type": "debug",
        "z": "dca724589f9513c8",
        "name": "debug 299",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 680,
        "wires": []
    },
    {
        "id": "0d6c2523e13c9b4f",
        "type": "debug",
        "z": "dca724589f9513c8",
        "name": "debug 300",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 420,
        "wires": []
    },
    {
        "id": "15af80948e9ac06e",
        "type": "inject",
        "z": "79f42ae3a90a4604",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "7614ad5653e43821"
            ]
        ]
    },
    {
        "id": "7614ad5653e43821",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "Set env variables",
        "func": "\n// let v8 = global.get(\"v8\");\n// const totalHeapSize = v8.getHeapStatistics().total_available_size;\n// let totalHeapSizeInMB = (totalHeapSize / 1024 / 1024).toFixed(2)\n// node.warn(\"V8 Total Heap Size \"+totalHeapSize+\" bytes\");\n\nconst ENV_VARIABLES = new Map();\n\nENV_VARIABLES.set('PAYLATER_URL', \"https://actyv-platform-paylater-service-v1.qa.actyv.com\")\nENV_VARIABLES.set('GO_URL', \"https://actyv-platform-go-service.qa.actyv.com\")\nENV_VARIABLES.set('ADMIN_URL', \"https://actyv-platform-admin-service.qa.actyv.com\")\n\nENV_VARIABLES.set('BUSINESS_IDENTIFIER', \"ABBCB2066P\")\nENV_VARIABLES.set('BUSINESS_TYPE', \"ENTERPRISE\")\nENV_VARIABLES.set('BANK_KEY', \"msl\")\nENV_VARIABLES.set('X_ACTYV_API_CONFIG_KEY', \"8HhkIWzVMSnSgvlhxr\")\nENV_VARIABLES.set('BANK_UNIQUE_IDENTIFIER', \"AASCA2089A\")\nENV_VARIABLES.set('BASE_URL', \"https://iifl-atlas-uat.finfluxtrial.io\")\nENV_VARIABLES.set('tenant_id', \"iifl-qa\")\nENV_VARIABLES.set('BANK_PRODUCT_KEY', \"axis-sabari-product\")\n\nENV_VARIABLES.set('BNPL_USER', \"surajkumar@aplapollo.com\")\nENV_VARIABLES.set('BNPL_USER_PASSWORD', \"890ioP@12\")\nENV_VARIABLES.set('IIFL_USER', \"demoUser1\")\nENV_VARIABLES.set('IIFL_USER_PASSWORD', \"fc895Tbr2i&w@\")\n\nglobal.set('envVariables', ENV_VARIABLES)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 60,
        "wires": [
            [
                "5827270d43b4b34f"
            ]
        ]
    },
    {
        "id": "5827270d43b4b34f",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "AuthenticateBNPLUserReq",
        "func": "\nconst AXIS_BANK_ADMIN_EMAIL = env.get('AXIS_BANK_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": AXIS_BANK_ADMIN_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 160,
        "wires": [
            [
                "fe0316920aacfed3"
            ]
        ]
    },
    {
        "id": "fe0316920aacfed3",
        "type": "http request",
        "z": "79f42ae3a90a4604",
        "name": "AuthenticateBNPLUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 160,
        "wires": [
            [
                "f3de3f65301d35f2"
            ]
        ]
    },
    {
        "id": "f3de3f65301d35f2",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 160,
        "wires": [
            [
                "a16bca435637d56e"
            ]
        ]
    },
    {
        "id": "a16bca435637d56e",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "getBankProductKeyReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY_CKPL_AXIS = env.get('BANK_PRODUCT_KEY_CKPL_AXIS')\n\nmsg.url = `${GO_URL}/bank-application-config/key/${BANK_PRODUCT_KEY_CKPL_AXIS}`\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 300,
        "wires": [
            [
                "044365b73baabfe2",
                "aafbda910088ae42"
            ]
        ]
    },
    {
        "id": "044365b73baabfe2",
        "type": "http request",
        "z": "79f42ae3a90a4604",
        "name": "getBankProductKeyReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 300,
        "wires": [
            [
                "9c2b3ad499bbc929",
                "b5edfd435c6aeebe"
            ]
        ]
    },
    {
        "id": "9c2b3ad499bbc929",
        "type": "debug",
        "z": "79f42ae3a90a4604",
        "name": "bankProductConfig",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 300,
        "wires": []
    },
    {
        "id": "b5edfd435c6aeebe",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "getPendingBankApplicationsReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst AXIS_LEAD_PUSH_APPLICATION_STATUS = env.get(\"AXIS_LEAD_PUSH_APPLICATION_STATUS\")\nmsg.bankId = msg.payload.bank\nmsg.enterpriseId = msg.payload.allowedEnterprises[0]\n\nmsg.url = `${GO_URL}/bank-application?bankID=${msg.bankId}&enterpriseID=${msg.enterpriseId}&applicationStatus=${AXIS_LEAD_PUSH_APPLICATION_STATUS}`\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 420,
        "wires": [
            [
                "57f74692223072bb"
            ]
        ]
    },
    {
        "id": "57f74692223072bb",
        "type": "http request",
        "z": "79f42ae3a90a4604",
        "name": "getPendingBankApplications",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 420,
        "wires": [
            [
                "48891c366afe52c5",
                "d6ea866aa8624a41"
            ]
        ]
    },
    {
        "id": "48891c366afe52c5",
        "type": "debug",
        "z": "79f42ae3a90a4604",
        "name": "pendingBankApplications",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 420,
        "wires": []
    },
    {
        "id": "d6ea866aa8624a41",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "mockBankApplication",
        "func": "msg.payload = [\n    { \"_id\": \"64378d661a74df4e2b28827a\", \"createdOn\": \"Thu, 13 Apr 2023 05:04:19 GMT\", \"createdBy\": \"63930e951ab619b3fdaa5035\", \"updatedOn\": \"Thu, 13 Apr 2023 05:09:13 GMT\", \"isDeleted\": false, \"bankApplicationDocumentConfigKey\": \"642d489aebc96fa3e9daf1ae\", \"bankName\": \"IIFL Finance\", \"productFamily\": \"PAYLATER\", \"productType\": \"PAYLATER\", \"productKey\": \"cavinkare-iifl-PayLater\", \"status\": \"CREDIT_ANALYST_REVIEW\", \"businessPartnerName\": \"MC ENTERPRISES\", \"businessPartnerID\": \"63930e95390a05e1ee21d58e\", \"productGranularity\": \"product\", \"bankApplicationConfigId\": \"64363fc74516a3ea3c8b86d9\", \"bankId\": \"642d3bc0ebc96f31f3daebe9\", \"enterpriseId\": \"637670c7f8e9564da0dea656\", \"workflowTaskID\": \"b15f0e5c-d9b8-11ed-a3df-0242ac110002\", \"approvedLimit\": null, \"availableLimit\": null }\n]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 500,
        "wires": [
            [
                "75b154ea4505acb5"
            ]
        ]
    },
    {
        "id": "75b154ea4505acb5",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "LoopOverBankApplication",
        "func": "\nfor(let bankApplication of msg.payload){\n    // console.log({bankApplication})\n    node.send({\n        businessPartnerId: bankApplication.businessPartnerID,\n        bankId: bankApplication.bankId,\n        enterpriseId: bankApplication.enterpriseId,\n        bankProductConfigId: bankApplication.bankProductConfigId\n    })\n}\n\n// return msg;\n\n/**\n *  \"_id\": \"63f4abd94f0acc5aa73d9e46\",\n        \"createdOn\": \"Tue, 21 Feb 2023 11:32:41 GMT\",\n        \"createdBy\": \"63750a1995a6a16f696d2f7b\",\n        \"updatedOn\": \"Tue, 21 Feb 2023 11:32:42 GMT\",\n        \"isDeleted\": false,\n        \"bankApplicationDocumentConfigKey\": \"63cfbc85edee8f7eee6f3d6e\",\n        \"bankName\": \"Axis Bank Limited\",\n        \"productFamily\": \"PAYLATER\",\n        \"productType\": \"PAYLATER\",\n        \"status\": \"DOCUMENT_CAPTURE\",\n        \"businessPartnerName\": \"Shri Durga Metalex\",\n        \"businessPartnerID\": \"63750a19ca608a344ae556d6\",\n        \"productGranularity\": \"product\",\n        \"bankProductConfigId\": \"63cfbe250c729962c86ec8a7\",\n        \"bankId\": \"63c8fa075f1c5afda77bae5e\",\n        \"bankApplicationLabel\": \"Continue Bank Application\",\n        \"bankApplicationURL\": \"www.google.com\",\n        \"enterpriseId\": \"638c73f16ea52ce57470c1a9\",\n        \"approvedLimit\": null,\n        \"availableLimit\": null\n */",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 500,
        "wires": [
            [
                "14473f2c443feb9f",
                "b6479afe6d9945a4"
            ]
        ]
    },
    {
        "id": "14473f2c443feb9f",
        "type": "debug",
        "z": "79f42ae3a90a4604",
        "name": "bankApplication",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 500,
        "wires": []
    },
    {
        "id": "b6479afe6d9945a4",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "getBusinessPartnerDataReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\n\nmsg.url = `${GO_URL}/business-partner/data/${msg.businessPartnerId}`\n\nmsg.headers = {\n    \"x-actyv-api-config-key\" : X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 580,
        "wires": [
            [
                "1c385c62550d383e"
            ]
        ]
    },
    {
        "id": "1c385c62550d383e",
        "type": "http request",
        "z": "79f42ae3a90a4604",
        "name": "getBusinessPartnerData",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 580,
        "wires": [
            [
                "1dc3970b6e4281e0",
                "523c8dd2eff3de5e"
            ]
        ]
    },
    {
        "id": "1dc3970b6e4281e0",
        "type": "debug",
        "z": "79f42ae3a90a4604",
        "name": "businessPartnerData",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 580,
        "wires": []
    },
    {
        "id": "523c8dd2eff3de5e",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "attach bp id",
        "func": "node.send({\n    data: msg.payload,\n    businessPartnerId: msg.businessPartnerId,\n    bankId: msg.bankId,\n    enterpriseId: msg.enterpriseId,\n    bankProductConfigId: msg.bankProductConfigId,\n    dataPartDone: false\n});\n\n\nmsg.dataPartDone = true;\n\n// msg.payload = msg.payload;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 660,
        "wires": [
            [
                "074feb34f27baba7"
            ]
        ]
    },
    {
        "id": "769e306407660c6d",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "getDealerCodeReq",
        "func": "\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.url = `${env.get(\"GO_URL\")}/business-relationship/${msg.businessPartnerId}/${msg.enterpriseId}`\nmsg.method = \"GET\"\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 800,
        "wires": [
            [
                "7b529b7627a765ae"
            ]
        ]
    },
    {
        "id": "7b529b7627a765ae",
        "type": "http request",
        "z": "79f42ae3a90a4604",
        "name": "getDealerCode",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 420,
        "y": 800,
        "wires": [
            [
                "dba01a8f0388fa76",
                "bce516dfb4ec9cfa"
            ]
        ]
    },
    {
        "id": "dba01a8f0388fa76",
        "type": "debug",
        "z": "79f42ae3a90a4604",
        "name": "dealerCode",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 800,
        "wires": []
    },
    {
        "id": "074feb34f27baba7",
        "type": "switch",
        "z": "79f42ae3a90a4604",
        "name": "",
        "property": "dataPartDone",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 660,
        "wires": [
            [
                "6de85123b44cbca1"
            ],
            [
                "769e306407660c6d"
            ]
        ]
    },
    {
        "id": "bce516dfb4ec9cfa",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "Scrapping Documents of a particular Business Partner",
        "func": "let c = 0\nconst arr = msg.data.documents;\nconst businessPartnerId = msg.businessPartnerId;\nconst gst_regex = new RegExp(/^GST/);\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nconst dealerCode = msg.payload.identifierByParent\n\n// const lp = msg.LOCAL_PATH;\n\nlet documents = [\n    'AADHAAR', 'BANK_STATEMENT',\n    'ITR', 'BUSINESS_PAN',\n    'PERSONAL_PAN', 'GST',\n    'GST', 'GSTR3B_RETSUM',\n    'GSTR2A_B2B', 'GSTR2A_RETSUM',\n    'GSTR1_EXP', 'GSTR1_B2B',\n    'GSTR1_CDNR', 'GSTR1_HSNSUM',\n    'GSTR1_CDNUR', 'GSTR1_B2CL',\n    'GSTR1_CDN', 'GSTR1_NIL',\n    'GSTR1_B2CS', 'GSTR_FILES',\n    'BANK_FORM_1'\n]\n\nfor(let document of msg.data?.documents){\n    \n    \n    switch (true) {\n        case /^AADHAAR/.test(document?.documentType):\n            node.send({\n                payload: document,\n                businessPartnerId: msg.businessPartnerId,\n                bankId: msg.bankId,\n                enterpriseId: msg.enterpriseId,\n                bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                dealerCode\n            });\n            // console.log(document.documentType);\n            break\n        case /^BANK_STATEMENT/.test(document?.documentType):\n        break;\n            node.send({\n                payload: document,\n                businessPartnerId: msg.businessPartnerId,\n                bankId: msg.bankId,\n                enterpriseId: msg.enterpriseId,\n                bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",dealerCode\n            });\n            // console.log(document.documentType);\n            break;\n        case /^ITR/.test(document?.documentType):\n        break;\n            node.send({\n                payload: document,\n                businessPartnerId: msg.businessPartnerId,\n                bankId: msg.bankId,\n                enterpriseId: msg.enterpriseId,\n                bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                dealerCode\n            });\n            // console.log(document.documentType);\n            break\n        case /^BUSINESS_PAN/.test(document?.documentType):\n        break;\n            node.send({\n                payload: document,\n                businessPartnerId: msg.businessPartnerId,\n                bankId: msg.bankId,\n                enterpriseId: msg.enterpriseId,\n                bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                dealerCode\n            });\n            // console.log(document.documentType);\n            break\n        case /^PERSONAL_PAN/.test(document?.documentType):\n        break;\n            node.send({\n                payload: document,\n                businessPartnerId: msg.businessPartnerId,\n                bankId: msg.bankId,\n                enterpriseId: msg.enterpriseId,\n                bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                dealerCode\n            });\n            // console.log(document.documentType);\n            break\n        case /^GST/.test(document?.documentType):\n        break;\n            node.send({\n                payload: document,\n                businessPartnerId: msg.businessPartnerId,\n                bankId: msg.bankId,\n                enterpriseId: msg.enterpriseId,\n                bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                dealerCode\n            });\n            // console.log(document.documentType);\n            break\n        // case /GSTR3B_RETSUM/.test(document?.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode\n        //     });\n        //     // console.log(document.documentType);\n        //     break\n        // case /GSTR2A_B2B/.test(document?.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode\n        //     });\n        //     // console.log(document.documentType);\n        //     break\n        // case /GSTR2A_RETSUM/.test(document?.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode\n        //     });\n        //     // console.log(document.documentType);\n        //     break\n        // case /GSTR1_EXP/.test(document?.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode\n        //     });\n        //     // console.log(document.documentType);\n        //     break\n        // case /GSTR1_B2B/.test(document?.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode\n        //     });\n        //     // console.log(document.documentType);\n        //     break\n        // case /GSTR1_CDNR/.test(document?.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode\n        //     });\n        //     // console.log(document.documentType);\n        //     break\n        // case /GSTR1_HSNSUM/.test(document?.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode\n        //     });\n        //     // console.log(document.documentType);\n        //     break\n        // case /GSTR1_CDNUR/.test(document?.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode\n        //     });\n        //     // console.log(document.documentType);\n        //     break\n\n        // case /GSTR1_B2CL/.test(document?.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode\n        //     });\n        //     // console.log(document.documentType);\n        //     break\n\n        // case /GSTR1_CDN/.test(document.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode\n        //     });\n        //     // console.log(document.documentType);\n        //     break\n\n        // case /GSTR1_NIL/.test(document.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode\n        //     });\n        //     // console.log(document.documentType);\n        //     break\n\n        // case /GSTR1_B2CS/.test(document.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode\n        //     });\n        //     // console.log(document.documentType);\n        //     break\n\n        // case /GSTR_FILES/.test(document.documentType):\n        //     node.send({\n        //         payload: document,\n        //         businessPartnerId: msg.businessPartnerId,\n        //         bankId: msg.bankId,\n        //         enterpriseId: msg.enterpriseId,\n        //         bankProductConfigId: msg.bankProductConfigId,\n        //         transferDone: \"false\",\n        //         dealerCode\n        //     });\n        //     // console.log(document.documentType);\n        //     break\n\n        case /BANK_FORM_1/.test(document.documentType):\n            node.send({\n                payload: document,\n                businessPartnerId: msg.businessPartnerId,\n                bankId: msg.bankId,\n                enterpriseId: msg.enterpriseId,\n                bankProductConfigId: msg.bankProductConfigId,\n                transferDone: \"false\",\n                dealerCode\n            });\n            // console.log(document.documentType);\n            break\n        \n        \n\n        default: node.send({\n            payload: {\n                files:[]\n            },\n            businessPartnerId: msg.businessPartnerId,\n            bankId: msg.bankId,\n            enterpriseId: msg.enterpriseId,\n            bankProductConfigId: msg.bankProductConfigId,\n            transferDone: \"false\",\n            dealerCode\n        });\n    }\n};\n\n\nconst reqDocsFromFieldValue = []\n\nfor (let i = 0; i < msg.data.fieldValues;i++){\n    if(reqDocsFromFieldValue.includes(msg.data.fieldValues[i].key)){\n        node.send({\n            payload: msg.data.fieldValues[i].fileId,\n            businessPartnerId: msg.businessPartnerId,\n            bankId: msg.bankId,\n            enterpriseId: msg.enterpriseId,\n            bankProductConfigId: msg.bankProductConfigId,\n            transferDone: \"false\",\n            dealerCode\n        });\n    }\n}\n\n\nmsg.transferDone = \"true\";\n// msg.LOCAL_PATH = lp;\nreturn msg;\n\n/**\n    businessPartnerId: msg.businessPartnerId,\n    bankId: msg.bankId,\n    enterpriseId: msg.enterpriseId,\n    bankProductConfigId: msg.bankProductConfigId,\n */",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 880,
        "wires": [
            [
                "c6a08f66ab39b1c5"
            ]
        ]
    },
    {
        "id": "c6a08f66ab39b1c5",
        "type": "switch",
        "z": "79f42ae3a90a4604",
        "name": "",
        "property": "transferDone",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 880,
        "wires": [
            [
                "b0255c24137ffd5f"
            ],
            [
                "ec7dd8babc047235"
            ]
        ]
    },
    {
        "id": "b0255c24137ffd5f",
        "type": "debug",
        "z": "79f42ae3a90a4604",
        "name": "document part completed",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 860,
        "wires": []
    },
    {
        "id": "ec7dd8babc047235",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "sendFilesToReaderReq",
        "func": "\nfor(let file of msg?.payload?.files){\n    \nnode.send({\n    file: file,\n    businessPartnerId: msg.businessPartnerId,\n    bankId: msg.bankId,\n    enterpriseId: msg.enterpriseId,\n    bankProductConfigId: msg.bankProductConfigId,\n    dealerCode : msg.dealerCode\n})\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 980,
        "wires": [
            [
                "82a53870c976cc6a"
            ]
        ]
    },
    {
        "id": "82a53870c976cc6a",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "function 161",
        "func": "// console.log({file:msg.file})\nif(msg.file){\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 980,
        "wires": [
            [
                "d7b8e32941d26f08"
            ]
        ]
    },
    {
        "id": "e9310dd57b665272",
        "type": "debug",
        "z": "79f42ae3a90a4604",
        "name": "email send for file size lesser than limit",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 1420,
        "wires": []
    },
    {
        "id": "2ca993596c00fdd5",
        "type": "debug",
        "z": "79f42ae3a90a4604",
        "name": "email send for file size greater than limit",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1340,
        "wires": []
    },
    {
        "id": "a660903159afecd9",
        "type": "http request",
        "z": "79f42ae3a90a4604",
        "name": "sendEmail",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 1340,
        "wires": [
            [
                "2ca993596c00fdd5"
            ]
        ],
        "info": "Get bank product config id"
    },
    {
        "id": "949afc5f7d185360",
        "type": "http request",
        "z": "79f42ae3a90a4604",
        "name": "sendEmail",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 1420,
        "wires": [
            [
                "e9310dd57b665272"
            ]
        ],
        "info": "Get bank product config id"
    },
    {
        "id": "f1b7ec0b4dfdf26b",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "sendEmailReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst fs = global.get(\"fs\")\n\nlet fileName = msg.fid.split(\"-\");\nfileName = fileName[fileName.length - 1];\n\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\n\n\n\nmsg.payload = {\n    \"from\": \"ramu.bugudi@actyv.com\",\n    \"to\": \"shravan.pm@actyv.com\",\n    \"subject\": `Lead Push - Dealer Code :${msg.dealerCode}`,\n    // \"html\": `\n    // <html>\n    //     <body>\n\n    //     </body>\n    // </html>`,\n\n    \"html\": `\n    <html>\n        <body>\n            <p>\n            <strong>File Name</strong> : <strong>${fileName}</strong> Document\n            </p>\n            <p>\n            <strong>URL</strong> : <a target=\"_blank\" href= ${msg.fileUrl}>${msg.fileUrl}</a>\n            \n            </p>\n        </body>\n    </html>`,\n    \"priority\": \"high\",\n    \"attachments\": [\n        {\n            filename: `${fileName}.zip`,\n            encoding: 'base64',\n            content: msg.payload\n        }\n    ]\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1420,
        "wires": [
            [
                "949afc5f7d185360"
            ]
        ]
    },
    {
        "id": "d2d02cf6295d1c8b",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "sendEmailReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nconst fs = global.get(\"fs\")\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\n\nlet fileName = msg.fid.split(\"-\");\nfileName = fileName[fileName.length-1];\n// console.log({fileName})\n\nmsg.payload = {\n    \"from\": \"ramu.bugudi@actyv.com\",\n    \"to\": \"shravan.pm@actyv.com\",\n    // \"to\": \"ramu.bugudi@actyv.com\",\n    \"subject\": `Lead Push AXIS - Dealer Code : ${msg.dealerCode ?? \"\"}`,\n    \"html\": `\n    <html>\n        <body>\n            <p>\n            <strong>File Name</strong> : <strong>${fileName}</strong> Document\n            </p>\n            <p>\n            <strong>URL</strong> : <a target=\"_blank\" href= ${msg.fileUrl}>${msg.fileUrl}</a>\n            \n            </p>\n        </body>\n    </html>`,\n    // \"html\": `\n    // <html>\n    //     <body>\n            \n    //     </body>\n    // </html>`,\n    \"priority\": \"high\",\n    \"attachments\": [\n        {\n            filename: `${`${fileName}.zip`}`,\n            encoding: 'base64',\n            content:msg.payload\n        }\n    ]\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1340,
        "wires": [
            [
                "a660903159afecd9"
            ]
        ]
    },
    {
        "id": "9041e8ba12361dc5",
        "type": "switch",
        "z": "79f42ae3a90a4604",
        "name": "",
        "property": "fileSizeInMegaByte",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "3.15",
                "vt": "num"
            },
            {
                "t": "lte",
                "v": "3.15",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 110,
        "y": 1380,
        "wires": [
            [
                "d2d02cf6295d1c8b"
            ],
            [
                "f1b7ec0b4dfdf26b"
            ]
        ]
    },
    {
        "id": "3b589f3645b855b9",
        "type": "base64",
        "z": "79f42ae3a90a4604",
        "name": "convert buffer to base64 string",
        "action": "",
        "property": "payload",
        "x": 190,
        "y": 1260,
        "wires": [
            [
                "83d12aa6c7780197"
            ]
        ]
    },
    {
        "id": "c4fbc67eb0d7553b",
        "type": "zip",
        "z": "79f42ae3a90a4604",
        "name": "Compress",
        "mode": "compress",
        "filename": "",
        "compressionlevel": "0",
        "outasstring": false,
        "x": 610,
        "y": 1160,
        "wires": [
            [
                "3b589f3645b855b9"
            ]
        ]
    },
    {
        "id": "3a41ceecd61a6324",
        "type": "base64",
        "z": "79f42ae3a90a4604",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 380,
        "y": 1160,
        "wires": [
            [
                "c4fbc67eb0d7553b"
            ]
        ]
    },
    {
        "id": "94291135e2a16816",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "detectMimeType",
        "func": "const signatures = {\n    JVBERi0: \"application/pdf\",\n    R0lGODdh: \"image/gif\",\n    R0lGODlh: \"image/gif\",\n    iVBORw0KGgo: \"image/png\",\n    TU0AK: \"image/tiff\",\n    \"/9j/\": \"image/jpg\",\n    UEs: \"application/vnd.openxmlformats-officedocument.\",\n    PK: \"application/zip\",\n};\n\nlet filePath;\nlet fileName;\nlet extension;\nconst base64String = msg.payload;\n\nfor (let ext in signatures) {\n    const base64Sig = base64String.slice(0, ext.length)\n    if (base64Sig === ext) {\n        fileName = msg.fid\n        extension = getExtension(ext)\n        filePath = `${msg.LOCAL_PATH}/${fileName}${msg.ind}.${extension}`\n    }\n}\nlet name = msg.fid.split(\"-\")\nname = name[name.length-1]\nconsole.log({name})\nmsg.filename = `${name}.${extension}`\n\n// console.log({fun:msg.filename})\n\nmsg.filePath = filePath\n\nfunction getExtension(ext) {\n    return signatures[ext].split(\"/\")[1]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1160,
        "wires": [
            [
                "3a41ceecd61a6324"
            ]
        ]
    },
    {
        "id": "652eee24a663514d",
        "type": "base64",
        "z": "79f42ae3a90a4604",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 620,
        "y": 1080,
        "wires": [
            [
                "94291135e2a16816"
            ]
        ]
    },
    {
        "id": "da37bc80b99bc745",
        "type": "http request",
        "z": "79f42ae3a90a4604",
        "name": "read file",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "x-actyv-api-config-key",
                "valueType": "other",
                "valueValue": "8HhkIWzVMSnSgvlhxr"
            }
        ],
        "x": 440,
        "y": 1080,
        "wires": [
            [
                "652eee24a663514d"
            ]
        ]
    },
    {
        "id": "d7b8e32941d26f08",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "Setting fileID of a particular file",
        "func": "msg.fid = msg.file.fileId;\n\nmsg.method = \"GET\"\nmsg.url = `${env.get(\"GO_URL\")}/file/read/${msg.file.fileId}`;\nmsg.fileUrl = `${env.get(\"GO_URL\")}/file/read/${msg.file.fileId}`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 1080,
        "wires": [
            [
                "da37bc80b99bc745"
            ]
        ]
    },
    {
        "id": "83d12aa6c7780197",
        "type": "function",
        "z": "79f42ae3a90a4604",
        "name": "getTheFileSize",
        "func": "let fileName = msg.fid.split(\"-\");\nfileName = fileName[fileName.length - 1];\nlet base64String = msg.payload\nvar fileSizeInMegaByte = Buffer.byteLength(base64String)/1024/1024\nconsole.log({fileSizeInMegaByte,fileName})\nmsg.fileSizeInMegaByte = fileSizeInMegaByte\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1260,
        "wires": [
            [
                "9041e8ba12361dc5"
            ]
        ]
    },
    {
        "id": "6de85123b44cbca1",
        "type": "debug",
        "z": "79f42ae3a90a4604",
        "name": "completed loop over bank Applications",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 640,
        "wires": []
    },
    {
        "id": "aafbda910088ae42",
        "type": "debug",
        "z": "79f42ae3a90a4604",
        "name": "debug 340",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 260,
        "wires": []
    },
    {
        "id": "9c67530aec4acef6",
        "type": "inject",
        "z": "f5c81779c63cb9e6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 200,
        "wires": [
            [
                "3a32d5b5986feb77"
            ]
        ]
    },
    {
        "id": "3a32d5b5986feb77",
        "type": "function",
        "z": "f5c81779c63cb9e6",
        "name": "",
        "func": "msg.url = \"https://ewpportalfrontendadapter.services.tatacapital.com/rest/ewpPortal/v1.0/sap/setLimit\"\nmsg.headers = {\n    Authorization: \"Basic OTY1ODMzMWM6bTJ1YXQ=\",\n    \"ConversationID\": \"123345678\",\n    \"SourceName\": \"EWP\",\n    \"Content-Type\": \"application/xml\"\n}\n\nmsg.method = \"GET\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 200,
        "wires": [
            [
                "577be50984ba5e6c"
            ]
        ]
    },
    {
        "id": "577be50984ba5e6c",
        "type": "http request",
        "z": "f5c81779c63cb9e6",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 200,
        "wires": [
            [
                "af3a2dc5caa13a8b"
            ]
        ]
    },
    {
        "id": "af3a2dc5caa13a8b",
        "type": "debug",
        "z": "f5c81779c63cb9e6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 280,
        "wires": []
    },
    {
        "id": "f136b1bd5e3ff6e1",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "fetch new tenors",
        "func": "const PAYLATER_URL = env.get(\"PAYLATER_URL\")\nconst token = flow.get(\"token\") || \"\"\nconst [first, second] = new Date().toISOString().split(\"T\")\n// const ISO8601_FORMAT_TODAY = `${first} ${second.split(\".\")[0]}`\nconst ISO8601_FORMAT_TODAY = `${first} 00:00:00+00`\n\nconst payload = {\n    // validFrom: \"2023-03-24 06:40:52+00\",//ISO8601_FORMAT_TODAY\n    validFrom: ISO8601_FORMAT_TODAY\n};\n\n\nmsg.url = `${PAYLATER_URL}/v1/tenor-and-rate-spread/fetch`\nmsg.method = 'POST',\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.payload = payload\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 215,
        "y": 306,
        "wires": [
            [
                "6df3c8a5077375d0"
            ]
        ]
    },
    {
        "id": "6df3c8a5077375d0",
        "type": "http request",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 475,
        "y": 306,
        "wires": [
            [
                "81d6d82b791ca7b5",
                "7c36f0c21d6b54b6"
            ]
        ]
    },
    {
        "id": "7c36f0c21d6b54b6",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "New Tenors",
        "func": "const newTenors = msg.payload\n\nmsg.newTenors = newTenors;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 195,
        "y": 406,
        "wires": [
            [
                "c058c8b2ea81fa66",
                "454c2515831305c3"
            ]
        ]
    },
    {
        "id": "454c2515831305c3",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "fetch old tenors",
        "func": "const PAYLATER_URL = env.get(\"PAYLATER_URL\")\nconst token = flow.get(\"token\")\n\n\nconst ISO8601_FORMAT_YESTERDAY = moment().subtract(1, \"days\").toDate();\nconst [first, second] = ISO8601_FORMAT_YESTERDAY.toISOString().split(\"T\")\n\nconst ISO8601_FORMAT_YESTERDAY_FORMAT = `${first} 23:59:59+00`\nlet count = 1\n\n// for (let row of msg.newTenors) {\n//     count += 1\n//     node.send({\n//         ...msg,\n//         count,\n//         newSpreadId: row.id,\n//         payload: {\n//             // \"loanID\": row.loanID,\n//             // \"bankID\": row.bankID,\n//             // \"benchmarkRateID\": row.benchmarkRateID,\n//             \"validTill\": ISO8601_FORMAT_YESTERDAY_FORMAT,\n//         },\n//         isComplete: false,\n//     })\n// }\n\n\nmsg.url = `${PAYLATER_URL}/v1/tenor-and-rate-spread/fetch`\nmsg.method = 'POST',\n  \nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.payload = {\n    // \"loanID\": row.loanID,\n    // \"bankID\": row.bankID,\n    // \"benchmarkRateID\": row.benchmarkRateID,\n    \"validTill\": ISO8601_FORMAT_YESTERDAY_FORMAT,\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 205,
        "y": 609,
        "wires": [
            [
                "0cc7747b0ab512dc"
            ]
        ]
    },
    {
        "id": "0cc7747b0ab512dc",
        "type": "http request",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 450,
        "y": 600,
        "wires": [
            [
                "fa9e5449c87c4f95",
                "68759d4015fca344"
            ]
        ]
    },
    {
        "id": "3368d5c78145f0a1",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "fetch bnpl preference by spread id",
        "func": "const PAYLATER_URL = env.get(\"PAYLATER_URL\")\nconst token = flow.get(\"token\")\n\n// console.log(msg.payload.id,\"New tenors\")\nmsg.defaultSpreadId = msg.payload.id\n// By using above id fetch BNPL preference and Update with newSpreadId\nmsg.url = `${PAYLATER_URL}/v1/bnpl-preference/fetch`\nmsg.method = 'POST',\nmsg.payload = {\n    defaultSpreadID: msg.payload.id\n}\n\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 260,
        "y": 820,
        "wires": [
            [
                "2b94e3431c03db78"
            ]
        ]
    },
    {
        "id": "2b94e3431c03db78",
        "type": "http request",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 530,
        "y": 820,
        "wires": [
            [
                "0f0750d084463e6f",
                "13cea92a2354b3df"
            ]
        ]
    },
    {
        "id": "d5e442e17f0e9f12",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst EMAIL = \"surajkumar@aplapollo.com\"\n// const EMAIL = \"deepakgoyal@aplapollo.com\"\nconst PASSWORD = \"890ioP@12\"\n\nflow.set(\"arr\", [])\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": EMAIL,\n    \"password\": PASSWORD\n};\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 316,
        "y": 202,
        "wires": [
            [
                "c214f9da08c184a7"
            ]
        ]
    },
    {
        "id": "c214f9da08c184a7",
        "type": "http request",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 496,
        "y": 202,
        "wires": [
            [
                "f644a0351c6b4ddb"
            ]
        ]
    },
    {
        "id": "f644a0351c6b4ddb",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "setToken",
        "func": "flow.set('token', msg.payload.idToken);\nconsole.log({token:msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 666,
        "y": 202,
        "wires": [
            [
                "f136b1bd5e3ff6e1"
            ]
        ]
    },
    {
        "id": "13cea92a2354b3df",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "update bnpl preference by new spread id",
        "func": "// const arr = flow.get(\"arr\")\n// if (msg.payload[0]?.id){\n// arr.push(msg.payload[0]?.id)\n// }\n\n\n// flow.set('arr', arr)\n// console.log(flow.get('arr'))\n\n// if(msg.payload){\n//     console.log(msg.payload[0]?.id, \"HELLO\")\n// }\n\n// console.log(msg.payload[0]?.id)\n\nconst PAYLATER_URL = env.get(\"PAYLATER_URL\")\n\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\n// By using above id fetch BNPL preference and Update with newSpreadId\n\nmsg.url = `${PAYLATER_URL}/v1/bnpl-preference/service`\nmsg.method = 'PATCH',\n    msg.payload = {\n        // @ts-ignore\n        bnplPreferenceID: msg.payload.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt))[0]?.id,\n        // bnplPreferenceID: msg.payload[0]?.id,\n        defaultSpreadID: msg.newSpreadId\n    }\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n\nif (msg.payload?.bnplPreferenceID){\n    console.log(msg.payload.bnplPreferenceID)\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 280,
        "y": 900,
        "wires": [
            [
                "676b1f80e97c7be2"
            ]
        ]
    },
    {
        "id": "676b1f80e97c7be2",
        "type": "http request",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 550,
        "y": 900,
        "wires": [
            [
                "a2bae1419e0dbb70"
            ]
        ]
    },
    {
        "id": "81d6d82b791ca7b5",
        "type": "debug",
        "z": "ad42c8b5ca08905f",
        "name": "new tenors",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 695,
        "y": 306,
        "wires": []
    },
    {
        "id": "d63f4b334ac134db",
        "type": "debug",
        "z": "ad42c8b5ca08905f",
        "name": "debug 284",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 520,
        "wires": []
    },
    {
        "id": "0f0750d084463e6f",
        "type": "debug",
        "z": "ad42c8b5ca08905f",
        "name": "matched BNPL",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 820,
        "wires": []
    },
    {
        "id": "a2bae1419e0dbb70",
        "type": "debug",
        "z": "ad42c8b5ca08905f",
        "name": "debug 287",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 900,
        "wires": []
    },
    {
        "id": "e3e77f04ab4da2f1",
        "type": "http in",
        "z": "ad42c8b5ca08905f",
        "name": "update-tenor",
        "url": "/api/update-tenor",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 60,
        "wires": [
            [
                "3da127987697f73d"
            ]
        ]
    },
    {
        "id": "3da127987697f73d",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "checkTheHeaders",
        "func": "const X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nif(msg.req.headers[\"x-actyv-api-config-key\"]===X_ACTYV_API_CONFIG_KEY){\n    msg.isKeyPresent = true\n}else{\n    msg.isKeyPresent = false\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 60,
        "wires": [
            [
                "9f85fa8b8e54a3a2"
            ]
        ]
    },
    {
        "id": "9f85fa8b8e54a3a2",
        "type": "switch",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "property": "isKeyPresent",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 60,
        "wires": [
            [
                "1cb6167b24084f8d"
            ],
            [
                "d5e442e17f0e9f12"
            ]
        ]
    },
    {
        "id": "1cb6167b24084f8d",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "func": "msg.payload = {\n    \"statusCode\": 403,\n    \"message\": \"Unauthorized\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 60,
        "wires": [
            [
                "ab0589c4aafbb6d0"
            ]
        ]
    },
    {
        "id": "ab0589c4aafbb6d0",
        "type": "http response",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1010,
        "y": 60,
        "wires": []
    },
    {
        "id": "fa9e5449c87c4f95",
        "type": "debug",
        "z": "ad42c8b5ca08905f",
        "name": "old tenors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 600,
        "wires": []
    },
    {
        "id": "1b632f1545e941a0",
        "type": "inject",
        "z": "ad42c8b5ca08905f",
        "name": "7 AM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 01 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "d9b4a1ba7f8b5a66",
        "type": "inject",
        "z": "ad42c8b5ca08905f",
        "name": "7 PM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 13 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "d8307768fbea396c",
        "type": "inject",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 120,
        "wires": [
            [
                "d5e442e17f0e9f12"
            ]
        ]
    },
    {
        "id": "cd07e3aedc252418",
        "type": "inject",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 195,
        "y": 1011,
        "wires": [
            [
                "eb335f58f6138938"
            ]
        ]
    },
    {
        "id": "eb335f58f6138938",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "fetch old tenors",
        "func": "const PAYLATER_URL = env.get(\"PAYLATER_URL\")\nconst token = flow.get(\"token\")\n\nconst ISO8601_FORMAT_YESTERDAY = moment().subtract(1, \"days\").toDate();\nconst [first, second] = ISO8601_FORMAT_YESTERDAY.toISOString().split(\"T\")\n\nconst ISO8601_FORMAT_YESTERDAY_FORMAT = `${first} 23:59:59+00`\n\nconst payload = {\n    \"validTill\": ISO8601_FORMAT_YESTERDAY_FORMAT,\n}\n\nmsg.url = `${PAYLATER_URL}/v1/tenor-and-rate-spread/fetch`\nmsg.method = 'POST',\nmsg.payload = payload\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 375,
        "y": 1011,
        "wires": [
            [
                "d7b7ccd227f5dd8c"
            ]
        ]
    },
    {
        "id": "d7b7ccd227f5dd8c",
        "type": "http request",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 585,
        "y": 1011,
        "wires": [
            [
                "8f9c604689fd2b5b"
            ]
        ]
    },
    {
        "id": "8f9c604689fd2b5b",
        "type": "debug",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 765,
        "y": 1011,
        "wires": []
    },
    {
        "id": "c058c8b2ea81fa66",
        "type": "debug",
        "z": "ad42c8b5ca08905f",
        "name": "new tenors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "newTenors",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 360,
        "wires": []
    },
    {
        "id": "68759d4015fca344",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "uniqueSortedTenors",
        "func": "// @ts-nocheck\nlet oldTenors = msg.payload.sort((a, b) => new Date(a.validTill) - new Date(b.validTill))\nlet pre = -1;\nlet cur = -1;\n\nfor(let i=1;i<oldTenors.length;i++){\n    if (oldTenors[i].benchmarkRateID !== oldTenors[i - 1].benchmarkRateID){\n        pre = cur;\n        cur = i\n    }\n}\n\n\nmsg.oldTenors = oldTenors//msg.payload\n// const uniqueSortedBenchMarks = msg.payload.filter((obj, index) => {\n//     return index === msg.payload.findIndex(o => obj.benchmarkRateID === o.benchmarkRateID)\n// })\n// .sort((a, b) => new Date(b.validTill) - new Date(a.validTill))\n\n// msg.uniqueSortedBenchMarks = uniqueSortedBenchMarks\n\n// const latestTenors = msg.payload\n//     .filter(tenor => tenor.benchmarkRateID === uniqueSortedBenchMarks[0]?.benchmarkRateID)\n\n// console.log({latestTenors: latestTenors.length,uniqueSortedBenchMarks: uniqueSortedBenchMarks,allTenors: msg.payload.length})\n// console.log({latestTenors: latestTenors.map(e => e.id)})\nmsg.payload = oldTenors\nmsg.oldTenors = oldTenors.slice(cur,oldTenors.length)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 220,
        "y": 700,
        "wires": [
            [
                "8e89c725fd55a649",
                "be254a631022f6a1"
            ]
        ]
    },
    {
        "id": "b5e5cccbb3aa2be1",
        "type": "switch",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "property": "count",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "newTenors.length",
                "vt": "msg"
            },
            {
                "t": "neq",
                "v": "newTenors.length",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 700,
        "wires": [
            [
                "d2d96811d3145aba"
            ],
            []
        ]
    },
    {
        "id": "be254a631022f6a1",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "Loop",
        "func": "const ISO8601_FORMAT_YESTERDAY = moment().subtract(1, \"days\").toDate();\nconst [first, second] = ISO8601_FORMAT_YESTERDAY.toISOString().split(\"T\")\n\nconst ISO8601_FORMAT_YESTERDAY_FORMAT = `${first} 23:59:59+00`\n\n// console.log({id: msg.newSpreadId})\nlet arr = []\nfor (let row of msg.oldTenors) {\n    const newSpreadId = msg.newTenors.filter((tenor)=>tenor.loanID == row.loanID)\n    if(newSpreadId.id){\n        arr.push(newSpreadId.id)\n    }\n   \n    node.send({\n        ...msg,\n        payload : row,\n        newSpreadId: newSpreadId[0].id\n    })\n}\n\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 290,
        "y": 760,
        "wires": [
            [
                "489f6f9325535616",
                "3368d5c78145f0a1"
            ]
        ]
    },
    {
        "id": "d2d96811d3145aba",
        "type": "debug",
        "z": "ad42c8b5ca08905f",
        "name": "Equals",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 660,
        "wires": []
    },
    {
        "id": "8e89c725fd55a649",
        "type": "debug",
        "z": "ad42c8b5ca08905f",
        "name": "updatedOldTenors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 660,
        "wires": []
    },
    {
        "id": "489f6f9325535616",
        "type": "debug",
        "z": "ad42c8b5ca08905f",
        "name": "newSpreadId",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 760,
        "wires": []
    },
    {
        "id": "5e8e26cacf6d9404",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "Loop",
        "func": "const ISO8601_FORMAT_YESTERDAY = moment().subtract(1, \"days\").toDate();\nconst [first, second] = ISO8601_FORMAT_YESTERDAY.toISOString().split(\"T\")\n\nconst ISO8601_FORMAT_YESTERDAY_FORMAT = `${first} 23:59:59+00`\nlet count = 1\n\nfor (let row of msg.newTenors) {\n    count += 1\n    node.send({\n        ...msg,\n        count,\n        newSpreadId: row.id,\n        payload: {\n            // \"loanID\": row.loanID,\n            // \"bankID\": row.bankID,\n            // \"benchmarkRateID\": row.benchmarkRateID,\n            \"validTill\": ISO8601_FORMAT_YESTERDAY_FORMAT,\n        },\n        isComplete: false,\n    })\n}\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 490,
        "y": 1260,
        "wires": [
            [
                "6f91fb43695543f3"
            ]
        ]
    },
    {
        "id": "6f91fb43695543f3",
        "type": "switch",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 285,
        "y": 1354,
        "wires": [
            [
                "e4535d66befc2dec"
            ],
            []
        ]
    },
    {
        "id": "e4535d66befc2dec",
        "type": "function",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "func": "msg.payload = {\n    \"statusCode\": 200,\n    \"message\": \"Success\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 495,
        "y": 1334,
        "wires": [
            [
                "c4d84097ef4d1b9b"
            ]
        ]
    },
    {
        "id": "c4d84097ef4d1b9b",
        "type": "http response",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 725,
        "y": 1334,
        "wires": []
    },
    {
        "id": "5b5b18f40c9f61fe",
        "type": "inject",
        "z": "ad42c8b5ca08905f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "1525bb33e5bcb3bf",
        "type": "debug",
        "z": "ad42c8b5ca08905f",
        "name": "debug 312",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 1700,
        "wires": []
    },
    {
        "id": "72f1535c4e01cc80",
        "type": "inject",
        "z": "6438b3204074b24c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 80,
        "wires": [
            [
                "de3b92af45360950"
            ]
        ]
    },
    {
        "id": "91367188f9982063",
        "type": "function",
        "z": "6438b3204074b24c",
        "name": "AuthenticateBNPLUserReq",
        "func": "const BNPL_USER = env.get('CKPL_ENTERPRISE_ADMIN_EMAIL')\nconst BNPL_USER_PASSWORD = env.get('BNPL_USER_PASSWORD')\n\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": BNPL_USER_PASSWORD,\n    \"email\": BNPL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 180,
        "wires": [
            [
                "7989beefb6945f36"
            ]
        ]
    },
    {
        "id": "7989beefb6945f36",
        "type": "http request",
        "z": "6438b3204074b24c",
        "name": "AuthenticateBNPLUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 180,
        "wires": [
            [
                "0dd7a00fa634b425"
            ]
        ]
    },
    {
        "id": "0dd7a00fa634b425",
        "type": "function",
        "z": "6438b3204074b24c",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 180,
        "wires": [
            [
                "6a1db5be94c52c6c"
            ]
        ]
    },
    {
        "id": "6a1db5be94c52c6c",
        "type": "function",
        "z": "6438b3204074b24c",
        "name": "getBankProductReq",
        "func": "\nconst GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY_CKPL_IIFL')\n\nmsg.headers = {}\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank-application-config/key/${BANK_PRODUCT_KEY}`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 280,
        "wires": [
            [
                "9de2359b39b89a57"
            ]
        ]
    },
    {
        "id": "9de2359b39b89a57",
        "type": "http request",
        "z": "6438b3204074b24c",
        "name": "getBankProduct",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 280,
        "wires": [
            [
                "d7f7cd2cac9156ff",
                "c7c8df47ce341f4b"
            ]
        ]
    },
    {
        "id": "d7f7cd2cac9156ff",
        "type": "debug",
        "z": "6438b3204074b24c",
        "name": "bankProduct",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 280,
        "wires": []
    },
    {
        "id": "c7c8df47ce341f4b",
        "type": "function",
        "z": "6438b3204074b24c",
        "name": "getAllBusinessPartnersReq",
        "func": "\nconst GO_URL = env.get('GO_URL');\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.bankId = msg.payload.bank\nmsg.enterpriseId = msg.payload.allowedEnterprises[0]\nmsg.bankProductId = msg.payload.id\n\nmsg.url = `${GO_URL}/enterprise-partner-mapping/business-partners/enterprise/${msg.enterpriseId}`;\nmsg.method = \"POST\"\n\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 400,
        "wires": [
            [
                "72106c5eb8c0e39a"
            ]
        ]
    },
    {
        "id": "72106c5eb8c0e39a",
        "type": "http request",
        "z": "6438b3204074b24c",
        "name": "getAllBusinessPartners",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 400,
        "wires": [
            [
                "16d69cc87ce26b13",
                "ce1967b18dd59af2"
            ]
        ]
    },
    {
        "id": "16d69cc87ce26b13",
        "type": "debug",
        "z": "6438b3204074b24c",
        "name": "getAllBusinessPartners",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 400,
        "wires": []
    },
    {
        "id": "ce1967b18dd59af2",
        "type": "function",
        "z": "6438b3204074b24c",
        "name": "loopOverBusinessPartners",
        "func": "\n// for (let bp of msg.payload.dropdown.slice(1, msg.payload.dropdown.length)){\nfor (let bp of msg.payload.dropdown) {\n\n    node.send({\n        ...msg,\n        payload : \"\",\n        businessPartnerId:bp.key\n    })\n}\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 500,
        "wires": [
            [
                "bf6c602c28e44871"
            ]
        ]
    },
    {
        "id": "bf6c602c28e44871",
        "type": "function",
        "z": "6438b3204074b24c",
        "name": "getBPSalesSummaryReq",
        "func": "\nconst GO_URL = env.get('GO_URL');\nconst actyvToken = flow.get(\"actyvToken\")\n\nconst { businessPartnerId,enterpriseId} = msg\n\n\nmsg.url = `${GO_URL}/business-partner-sales-summary?businessPartner=${businessPartnerId}&enterprise=${enterpriseId}`;\nmsg.method = \"GET\"\n\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 580,
        "wires": [
            [
                "fc30cea32291b95d",
                "d09296ec3612b587"
            ]
        ]
    },
    {
        "id": "fc30cea32291b95d",
        "type": "http request",
        "z": "6438b3204074b24c",
        "name": "getBPSalesSummary",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 520,
        "y": 580,
        "wires": [
            [
                "de420ade885176ca",
                "d34953e3f2771a16"
            ]
        ]
    },
    {
        "id": "de420ade885176ca",
        "type": "debug",
        "z": "6438b3204074b24c",
        "name": "getBPSalesSummary",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 560,
        "wires": []
    },
    {
        "id": "17e46cc501131fcc",
        "type": "function",
        "z": "6438b3204074b24c",
        "name": "calculateTenatativeEligibility",
        "func": "const TENURE = 365\n\n// Sales summary for last 12 month\nlet salesSummarySum = msg.payload\n    .sort((a, b) => {\n        if (b.year == a.year) {\n            return b.month - a.month\n        } else {\n            return b.year - a.year\n        }\n    })\n    .slice(0, 12)\n    .reduce((accumulater, currentValue) => accumulater + currentValue.totalSalesAmount, 0)\n\nif (msg.payload.length < 12) {\n    salesSummarySum = (salesSummarySum / msg.payload.length) * 12\n}\n\nconst tentativelimit = (salesSummarySum / 12)\nif(isNaN(salesSummarySum) || isNaN(tentativelimit)){\n    console.log({ salesSummarySum, tentativelimit, payload: msg.payload, bankProductId: msg.bankProductId,businessPartnerId: msg.businessPartnerId})\n}\n\nmsg.tentativeLimit = tentativelimit\n\nreturn msg.payload.length > 0 ? msg : null;\n// return null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 680,
        "wires": [
            [
                "85c0baf53f98da24",
                "1b29fa0a2792438f"
            ]
        ]
    },
    {
        "id": "85c0baf53f98da24",
        "type": "debug",
        "z": "6438b3204074b24c",
        "name": "tentativeLimit",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "tentativeLimit",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 680,
        "wires": []
    },
    {
        "id": "2e3fd2df11c73955",
        "type": "function",
        "z": "6438b3204074b24c",
        "name": "saveTentativeLimitReq",
        "func": "const actyvToken = flow.get(\"actyvToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/service`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`,\n    businesspartnerid: msg.businessPartnerId,\n    enterpriseid: msg.enterpriseId,\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"tentative_limit\",\n    \"value\": msg.tentativeLimit,\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankProductId,\n    \"enterpriseId\": msg.enterpriseId,\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 920,
        "wires": [
            [
                "6a542a23fcdf8089"
            ]
        ]
    },
    {
        "id": "6a542a23fcdf8089",
        "type": "http request",
        "z": "6438b3204074b24c",
        "name": "saveTentativeLimit",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 920,
        "wires": [
            [
                "32340e8506a10c9b"
            ]
        ]
    },
    {
        "id": "32340e8506a10c9b",
        "type": "debug",
        "z": "6438b3204074b24c",
        "name": "Save Field Value",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 920,
        "wires": []
    },
    {
        "id": "1fb16ce92e8e0fd6",
        "type": "http request",
        "z": "6438b3204074b24c",
        "name": "findFieldValue",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 400,
        "y": 780,
        "wires": [
            [
                "04011261ba0c9b52",
                "f6db50c23c5c9fed"
            ]
        ]
    },
    {
        "id": "1b29fa0a2792438f",
        "type": "function",
        "z": "6438b3204074b24c",
        "name": "findFieldValue",
        "func": "const actyvToken = flow.get(\"actyvToken\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/find-field-value`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"POST\"\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n}\n\nmsg.payload = {\n    \"key\": \"tentative_limit\",\n    \"businessPartnerId\": msg.businessPartnerId,\n    \"bankApplicationId\": msg.bankProductId,\n    \"enterpriseId\": msg.enterpriseId,\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 780,
        "wires": [
            [
                "1fb16ce92e8e0fd6"
            ]
        ]
    },
    {
        "id": "04011261ba0c9b52",
        "type": "debug",
        "z": "6438b3204074b24c",
        "name": "findFieldValue",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 780,
        "wires": []
    },
    {
        "id": "70bb8b62316851af",
        "type": "http request",
        "z": "6438b3204074b24c",
        "name": "updateFieldValue",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 860,
        "wires": [
            [
                "e10653e89c36f90e"
            ]
        ]
    },
    {
        "id": "d128d06d6608cd48",
        "type": "function",
        "z": "6438b3204074b24c",
        "name": "updateFieldValue",
        "func": "const bank_token = flow.get(\"bank_token\")\nmsg.url = `${env.get(\"GO_URL\")}/field-value/${msg?.payload[0]?._id}`\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.method = \"PUT\"\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n    \"Authorization\": `Bearer ${bank_token}`\n}\n\nmsg.payload = {\n    \"key\": \"tentative_limit\",\n    value: msg.tentativeLimit\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 860,
        "wires": [
            [
                "70bb8b62316851af"
            ]
        ]
    },
    {
        "id": "e10653e89c36f90e",
        "type": "debug",
        "z": "6438b3204074b24c",
        "name": "Update Field Value",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 860,
        "wires": []
    },
    {
        "id": "de3b92af45360950",
        "type": "function",
        "z": "6438b3204074b24c",
        "name": "Bank user",
        "func": "const BNPL_USER = env.get('IIFL_BANK_ADMIN_EMAIL')\nconst BNPL_USER_PASSWORD = env.get('BNPL_USER_PASSWORD')\n\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": BNPL_USER_PASSWORD,\n    \"email\": BNPL_USER\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 80,
        "wires": [
            [
                "0540eaec876fbcfb"
            ]
        ]
    },
    {
        "id": "0540eaec876fbcfb",
        "type": "http request",
        "z": "6438b3204074b24c",
        "name": "bank user",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 540,
        "y": 80,
        "wires": [
            [
                "097d12006570f774"
            ]
        ]
    },
    {
        "id": "097d12006570f774",
        "type": "function",
        "z": "6438b3204074b24c",
        "name": "saveActyvToken",
        "func": "flow.set(\"bank_token\",msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 80,
        "wires": [
            [
                "91367188f9982063"
            ]
        ]
    },
    {
        "id": "f6db50c23c5c9fed",
        "type": "switch",
        "z": "6438b3204074b24c",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 130,
        "y": 900,
        "wires": [
            [
                "d128d06d6608cd48"
            ],
            [
                "2e3fd2df11c73955"
            ]
        ]
    },
    {
        "id": "d09296ec3612b587",
        "type": "debug",
        "z": "6438b3204074b24c",
        "name": "debug 315",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 520,
        "wires": []
    },
    {
        "id": "d34953e3f2771a16",
        "type": "switch",
        "z": "6438b3204074b24c",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 570,
        "y": 620,
        "wires": [
            [
                "17e46cc501131fcc"
            ]
        ]
    },
    {
        "id": "ffdcf98353fd0a01",
        "type": "inject",
        "z": "b77a80e15cf9f8c6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 140,
        "wires": [
            [
                "5672f1ee2f229147"
            ]
        ]
    },
    {
        "id": "5672f1ee2f229147",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst AXIS_BANK_ADMIN_EMAIL = env.get('AXIS_BANK_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": AXIS_BANK_ADMIN_EMAIL,\n    \"password\": PASSWORD\n};\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 100,
        "wires": [
            [
                "e8a10e3319727002"
            ]
        ]
    },
    {
        "id": "e8a10e3319727002",
        "type": "http request",
        "z": "b77a80e15cf9f8c6",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 450,
        "y": 100,
        "wires": [
            [
                "59622b8f04324774"
            ]
        ]
    },
    {
        "id": "59622b8f04324774",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "set Bank Token",
        "func": "flow.set('bank_token', msg.payload.idToken);\n\nmsg.bank_token = msg.payload.idToken\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 100,
        "wires": [
            [
                "22dcd48ef95efe1b"
            ]
        ]
    },
    {
        "id": "22dcd48ef95efe1b",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get(\"ADMIN_URL\")\n// const ENTERPRISE_EMAIL = env.get(\"CKPL_ENTERPRISE_ADMIN_EMAIL\")\nconst ENTERPRISE_EMAIL = \"shravan.pm@actyv.com\"\nconst PASSWORD = env.get(\"PASSWORD\")\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": ENTERPRISE_EMAIL,\n    \"password\": PASSWORD\n};\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 180,
        "wires": [
            [
                "5326d44030eef0fe"
            ]
        ]
    },
    {
        "id": "5326d44030eef0fe",
        "type": "http request",
        "z": "b77a80e15cf9f8c6",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 470,
        "y": 180,
        "wires": [
            [
                "b262738495c02360",
                "08b9545c9e5ebd9d"
            ]
        ]
    },
    {
        "id": "b262738495c02360",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "set Enterprise Token",
        "func": "flow.set('ent_token', msg.payload.idToken);\n\nmsg.ent_token = msg.payload.idToken\nconsole.log({ent_token: msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 180,
        "wires": [
            [
                "7eb56e8d5bc7671c"
            ]
        ]
    },
    {
        "id": "2a2290563a82e86d",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "get all permissions",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst ENTERPRISE_EMAIL = env.get('ENTERPRISE_USER_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\n\nmsg.headers = {}\nmsg.method = \"GET\"\nmsg.url = `${ADMIN_URL}/api/permission`;\nmsg.headers[\"content-type\"] = \"application/json\"\nmsg.headers[\"Authorization\"] = `Bearer ${flow.get(\"ent_token\")}`\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 280,
        "wires": [
            [
                "2b4237e4eec825d7"
            ]
        ]
    },
    {
        "id": "2b4237e4eec825d7",
        "type": "http request",
        "z": "b77a80e15cf9f8c6",
        "name": "get all permissions",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 280,
        "wires": [
            [
                "cd1a6ce0e8f1582d",
                "cf86b0ebfcf17003"
            ]
        ]
    },
    {
        "id": "cd1a6ce0e8f1582d",
        "type": "debug",
        "z": "b77a80e15cf9f8c6",
        "name": "All permissions",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 280,
        "wires": []
    },
    {
        "id": "cf86b0ebfcf17003",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "function 178",
        "func": "let permissions = [];\n\nfor(let permission of msg.payload){\npermissions.push(permission._id)\n}\nmsg.payload = {}\nmsg.permissions = permissions\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 360,
        "wires": [
            [
                "aefb565fab23e33b"
            ]
        ]
    },
    {
        "id": "a0ac44dff80ebe80",
        "type": "inject",
        "z": "b77a80e15cf9f8c6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1160,
        "wires": [
            [
                "de1310e4c6aa48fd"
            ]
        ]
    },
    {
        "id": "de1310e4c6aa48fd",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "download multiple files from sftp",
        "func": "const Client = ssh2SftpClient;\nconst sftp = new Client();\nconst options = {\n    host: '43.204.74.60',\n    port: 22, // sftp\n    username: 'axis_sftp',\n    password: 'qjnE8hDZjT12j4fgo3gE'\n};\n\nsftp.connect(options)\n    .then(async () => {\n        const files = await sftp.list('/sftpdir/lead push');\n        console.log({files})\n        node.send({payload: files});\n        for (const file of files) {\n            if (file.type == \"-\") {\n                const remoteFile =`/sftpdir/lead push/${file.name}` // remote file dir path\n                const localFile = `/Users/shravanpm/Desktop/Enterprises/test/${file.name}`// local file dir path\n            try {\n                    await sftp.fastGet(remoteFile, localFile)\n                }\n                catch (err){\n                    console.log(err)\n                node.send({ payload: err })\n            };\n          } \n        }\n    })\n    .catch (err => {\n        node.send({payload: err})\n        console.log(err)})\n    .finally(() => {\n    sftp.end();\n});\n\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "ssh2SftpClient",
                "module": "ssh2-sftp-client"
            }
        ],
        "x": 380,
        "y": 1160,
        "wires": [
            [
                "c5fa387399307747"
            ]
        ]
    },
    {
        "id": "c5fa387399307747",
        "type": "debug",
        "z": "b77a80e15cf9f8c6",
        "name": "debug 424",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 1160,
        "wires": []
    },
    {
        "id": "49c77b722818ea7a",
        "type": "inject",
        "z": "b77a80e15cf9f8c6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1260,
        "wires": [
            [
                "9ff1e81fa55a3a1b"
            ]
        ]
    },
    {
        "id": "9ff1e81fa55a3a1b",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "upload multiple files to sftp",
        "func": "var files = fs.readdirSync('/Users/shravanpm/Desktop/Enterprises/test')\nmsg.payload = files\n\n\nconst Client = ssh2SftpClient;\nconst sftp = new Client();\nconst options = {\n    host: '43.204.74.60',\n    port: 22, // sftp\n    username: 'axis_sftp',\n    password: 'qjnE8hDZjT12j4fgo3gE'\n};\n\nsftp.connect(options)\n    .then(async () => {\n        // const files = await sftp.list('/sftpdir/lead push');\n        // console.log({files})\n        // node.send({payload: files});\n        for (const file of files) {\n            if (file !== \".DS_Store\") {\n                const remoteFile =`/sftpdir/discounting` // remote file dir path\n                const localFile = `/Users/shravanpm/Desktop/Enterprises/test/${file.name}`// local file dir path\n            try {\n                    await sftp.fastPut(remoteFile, localFile)\n                }\n                catch (err){\n                    console.log(err)\n                node.send({ payload: err })\n            };\n          } \n        }\n    })\n    .catch (err => {\n        node.send({payload: err})\n        console.log(err)})\n    .finally(() => {\n    sftp.end();\n});\n\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "ssh2SftpClient",
                "module": "ssh2-sftp-client"
            },
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 380,
        "y": 1260,
        "wires": [
            [
                "1625acdff0ebf376"
            ]
        ]
    },
    {
        "id": "1625acdff0ebf376",
        "type": "debug",
        "z": "b77a80e15cf9f8c6",
        "name": "debug 425",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1260,
        "wires": []
    },
    {
        "id": "5e185fe2a89801d7",
        "type": "inject",
        "z": "b77a80e15cf9f8c6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 1440,
        "wires": [
            [
                "c179187ca6a39d79"
            ]
        ]
    },
    {
        "id": "c179187ca6a39d79",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "function 188",
        "func": "const sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nfor(let i=0;i<10;i++){\n    node.send({...msg})\n    await sleep(10000)\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1440,
        "wires": [
            [
                "c7ce387407164eca"
            ]
        ]
    },
    {
        "id": "c7ce387407164eca",
        "type": "debug",
        "z": "b77a80e15cf9f8c6",
        "name": "debug 426",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 1440,
        "wires": []
    },
    {
        "id": "7a85711fa7576ff8",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "get roles by type",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst ENTERPRISE_EMAIL = env.get('CKPL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\n\nmsg.headers = {}\nmsg.method = \"GET\"\nmsg.url = `${ADMIN_URL}/api/role/get-all/actyv-entity`;\nmsg.headers[\"content-type\"] = \"application/json\"\nmsg.headers[\"Authorization\"] = `Bearer ${flow.get(\"ent_token\")}`\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 440,
        "wires": [
            [
                "72ebb13730b4614c"
            ]
        ]
    },
    {
        "id": "72ebb13730b4614c",
        "type": "http request",
        "z": "b77a80e15cf9f8c6",
        "name": "get roles by type",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 440,
        "wires": [
            [
                "32d1b7ab379ab50b",
                "820934e11427ff21"
            ]
        ]
    },
    {
        "id": "32d1b7ab379ab50b",
        "type": "debug",
        "z": "b77a80e15cf9f8c6",
        "name": "get roles by user type",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 440,
        "wires": []
    },
    {
        "id": "08b9545c9e5ebd9d",
        "type": "debug",
        "z": "b77a80e15cf9f8c6",
        "name": "Authentication",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 140,
        "wires": []
    },
    {
        "id": "2d04e10e98472179",
        "type": "inject",
        "z": "b77a80e15cf9f8c6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1100,
        "wires": [
            [
                "45b04756f7e7cc5b"
            ]
        ]
    },
    {
        "id": "45b04756f7e7cc5b",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "function 191",
        "func": "msg.payload = env.get(\"ADMIN_URL\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1100,
        "wires": [
            [
                "c192d3591ed8f1f5"
            ]
        ]
    },
    {
        "id": "c192d3591ed8f1f5",
        "type": "debug",
        "z": "b77a80e15cf9f8c6",
        "name": "debug 435",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 1100,
        "wires": []
    },
    {
        "id": "820934e11427ff21",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "get role Id",
        "func": "const ROLE_NAME = msg.roleName\n\nconst role = msg.payload.filter((r)=>r.name === ROLE_NAME)\nconst roleId = role[0]?._id || \"\"\n\nmsg.roleId = roleId\nmsg.role = role\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 520,
        "wires": [
            [
                "3ecd74d4177aa5e0"
            ]
        ]
    },
    {
        "id": "7eb56e8d5bc7671c",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "Setting User Id and role name",
        "func": "const ROLE_NAME = \"actyv_entity_role_alln\"\nconst USER_ID = \"\"\nmsg.roleName = ROLE_NAME\nmsg.userId = \"\"\nmsg.userType = \"enterprise-user\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 220,
        "wires": [
            [
                "2a2290563a82e86d"
            ]
        ]
    },
    {
        "id": "3ecd74d4177aa5e0",
        "type": "switch",
        "z": "b77a80e15cf9f8c6",
        "name": "",
        "property": "roleId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 760,
        "wires": [
            [
                "15a270ce905adc42"
            ],
            [
                "a00b97aab584e604"
            ]
        ]
    },
    {
        "id": "15a270ce905adc42",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "create role",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst ENTERPRISE_EMAIL = env.get('CKPL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/role/add`;\nmsg.headers[\"content-type\"] = \"application/json\"\nmsg.headers[\"Authorization\"] = `Bearer ${flow.get(\"ent_token\")}`\nmsg.payload = {\n    \"name\": msg.roleName,\n    \"displayName\": msg.roleName,\n    \"enterprise\": msg.enterpriseId? msg.enterpriseId : \"\",\n    \"bank\": msg.bankId? msg.bankId : \"\",\n    \"actyvEntity\": msg.actyvEntityId? msg.actyvEntityId: \"\",\n    \"permissions\": msg.permissions,\n    \"templates\": [\n    ],\n    \"userType\": msg.userType\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 540,
        "wires": [
            [
                "e87a79ba9b1b3768"
            ]
        ]
    },
    {
        "id": "e87a79ba9b1b3768",
        "type": "http request",
        "z": "b77a80e15cf9f8c6",
        "name": "create role",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 540,
        "wires": [
            [
                "3be0469fd543fbec",
                "89c8fe0a052c5f71"
            ]
        ]
    },
    {
        "id": "3be0469fd543fbec",
        "type": "debug",
        "z": "b77a80e15cf9f8c6",
        "name": "create role",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 540,
        "wires": []
    },
    {
        "id": "89c8fe0a052c5f71",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "create role-user mapping",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst ENTERPRISE_EMAIL = env.get('CKPL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/role-user-mapping`;\nmsg.headers[\"content-type\"] = \"application/json\"\nmsg.headers[\"Authorization\"] = `Bearer ${flow.get(\"ent_token\")}`\nmsg.payload = {\n    \"roleId\": msg.payload._id,\n    \"userId\": msg.userId,\n    \"businessPartnerId\": msg.businessPartnerId ? msg.businessPartnerId: \"\",\n    \"enterpriseId\": msg.enterpriseId ? msg.enterpriseId : \"\",\n    \"bankId\": msg.bankId ? msg.bankId : \"\",\n    \"actyvEntityId\": msg.actyvEntityId ? msg.actyvEntityId : \"\"\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 620,
        "wires": [
            [
                "b34c2fbcfd9d70bb"
            ]
        ]
    },
    {
        "id": "b34c2fbcfd9d70bb",
        "type": "http request",
        "z": "b77a80e15cf9f8c6",
        "name": "create role-user mapping",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 770,
        "y": 620,
        "wires": [
            [
                "044cf9d0ff16d3a5"
            ]
        ]
    },
    {
        "id": "044cf9d0ff16d3a5",
        "type": "debug",
        "z": "b77a80e15cf9f8c6",
        "name": "create role-user mapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 620,
        "wires": []
    },
    {
        "id": "a00b97aab584e604",
        "type": "function",
        "z": "b77a80e15cf9f8c6",
        "name": "create role",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst ENTERPRISE_EMAIL = env.get('CKPL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/role/${msg.roleId}`;\nmsg.headers[\"content-type\"] = \"application/json\"\nmsg.headers[\"Authorization\"] = `Bearer ${flow.get(\"ent_token\")}`\nmsg.payload = {\n    \"name\": msg.role.name,\n    \"displayName\": msg.role.displayName,\n    \"enterprise\": msg.enterpriseId? msg.enterpriseId : \"\",\n    \"bank\": msg.bankId? msg.bankId : \"\",\n    \"actyvEntity\": msg.actyvEntityId? msg.actyvEntityId: \"\",\n    \"permissions\": msg.permissions,\n    \"templates\": [\n    ],\n    \"userType\": msg.userType\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 800,
        "wires": [
            [
                "af3ad8855fc01b50"
            ]
        ]
    },
    {
        "id": "af3ad8855fc01b50",
        "type": "http request",
        "z": "b77a80e15cf9f8c6",
        "name": "create role",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 800,
        "wires": [
            [
                "c2d189d1ee071a6c"
            ]
        ]
    },
    {
        "id": "c2d189d1ee071a6c",
        "type": "debug",
        "z": "b77a80e15cf9f8c6",
        "name": "create role",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 800,
        "wires": []
    },
    {
        "id": "aefb565fab23e33b",
        "type": "debug",
        "z": "b77a80e15cf9f8c6",
        "name": "debug 465",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 360,
        "wires": []
    },
    {
        "id": "caee6a05a1789ec4",
        "type": "inject",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 400,
        "y": 180,
        "wires": [
            [
                "45a66bf6a0c19fd3"
            ]
        ]
    },
    {
        "id": "44acdb26eb29a40a",
        "type": "SFTP-main",
        "z": "5bf29b5d3a6e7fb3",
        "path": "/",
        "method": "list",
        "remoteFilePath": "/sftpdir/invoices",
        "remoteFilePathType": "str",
        "localFilePath": "C:\\Users\\Ayush Rarg\\OneDrive - actyv.ai\\Desktop\\node-red",
        "localFilePathType": "str",
        "server": "8713902662c7b8a4",
        "outputs": 1,
        "debug": false,
        "name": "lisitng the files from sftp",
        "x": 150,
        "y": 480,
        "wires": [
            [
                "e04ed38cf42c2391",
                "aa22267742bfe05c"
            ]
        ]
    },
    {
        "id": "aa0d6208e5c36a34",
        "type": "SFTP-main",
        "z": "5bf29b5d3a6e7fb3",
        "path": "/",
        "method": "get",
        "remoteFilePath": "payload",
        "remoteFilePathType": "msg",
        "localFilePath": "LOCAL_PATH",
        "localFilePathType": "env",
        "server": "8713902662c7b8a4",
        "outputs": 1,
        "debug": false,
        "name": "get a single file from sftp",
        "x": 610,
        "y": 480,
        "wires": [
            [
                "776ef2ceea9801b3",
                "9121900b816e24de"
            ]
        ]
    },
    {
        "id": "7a5d72233377e8e4",
        "type": "file in",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "filename": "filename",
        "format": "stream",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 1000,
        "y": 420,
        "wires": [
            [
                "5cd4e2d3c96108ad"
            ]
        ]
    },
    {
        "id": "2e23337669b59f84",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "setFilename",
        "func": "const folderPath = msg.payload[0].split(\"/\")\nconst fileName = folderPath[folderPath.length - 1]\nflow.set('filename', fileName)\nmsg.filename = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 420,
        "wires": [
            [
                "7a5d72233377e8e4"
            ]
        ]
    },
    {
        "id": "5cd4e2d3c96108ad",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getFilename",
        "func": "msg.filename = flow.get(\"filename\") || \"test.xlsx\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "8543a4c4b58fcb9d",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getFilename",
        "func": "const filename = flow.get(\"filename\") || \"sample.xlsx\"\n// const s3Url = `https://nodered-test.s3.ap-northeast-1.amazonaws.com/${filename}`\nconst s3Url = `https://actyv-test-bucket.s3.amazonaws.com/ftpFiles/${filename}`\n\n// Assign filename and s3Url to flow variables\nflow.set(\"filename\",filename)\nflow.set(\"s3Url\",s3Url)\n\nmsg.filename = filename;\nmsg.s3Url = s3Url;\nmsg.filepath = `/home/ec2-user/data/${filename}`\n\nconst PAYLATER_URL = env.get(\"PAYLATER_URL\")\nconst CONFIG_KEY = env.get(\"CKPL_CONFIG_KEY\")\n\nmsg.url = `${PAYLATER_URL}/v1/configuration/service/config-key/${CONFIG_KEY}`\nmsg.method = \"GET\"\nconst token = flow.get(\"ent_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"enterpriseid\"] = msg.enterpriseId\nmsg.headers[\"x-actyv-api-config-key\"] = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nreturn msg;\n\n// Right now don't check the file present in s3 or not just hardcode the path with the real file name path",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 800,
        "wires": [
            [
                "4ca6c42ea3446f2b"
            ]
        ]
    },
    {
        "id": "472c56c783df3bc2",
        "type": "comment",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Get s3 link using filename",
        "info": "",
        "x": 134.99998474121094,
        "y": 534.9999980926514,
        "wires": []
    },
    {
        "id": "62aea988a57ed9c1",
        "type": "comment",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Upload to s3",
        "info": "",
        "x": 1374.999984741211,
        "y": 514.9999980926514,
        "wires": []
    },
    {
        "id": "231882aca6bd340a",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Get env variables",
        "func": "msg.PAYLATER_URL = env.get(\"PAYLATER_URL\")\nmsg.GO_URL = env.get(\"GO_URL\")\nmsg.ADMIN_URL = env.get(\"ADMIN_URL\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 920,
        "wires": [
            [
                "aa492dd62740c861"
            ]
        ]
    },
    {
        "id": "434cac9c6be0d102",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "setDataSourceConfig",
        "func": "flow.set('dataSourceConfig',msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 920,
        "wires": [
            [
                "231882aca6bd340a"
            ]
        ]
    },
    {
        "id": "aa492dd62740c861",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "dataSourceConfigReq",
        "func": "const dataSourceConfig = flow.get(\"dataSourceConfig\") || {}\nconst body = {\n    dataSourceConfigId: dataSourceConfig.id,\n    direction: dataSourceConfig.direction,\n    fileOriginalName: `${msg.filename}`,\n    fileDestinationPath: `${msg.s3Url}`,\n    isValid: true,\n    noOfRows: null,\n    parsedOn: null,\n    parseAttempts: 0,\n    parseStatus: \"ingested\",\n    statusComment: null,\n    transmissionStatus: \"pending\",\n}\nmsg.payload = body;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 920,
        "wires": [
            [
                "1ecf16e3b972d78f",
                "bf9c98522d05d890"
            ]
        ]
    },
    {
        "id": "1ecf16e3b972d78f",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Update data source config",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 860,
        "wires": []
    },
    {
        "id": "4ca6c42ea3446f2b",
        "type": "http request",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 630,
        "y": 800,
        "wires": [
            [
                "15f2897e52a313d7",
                "434cac9c6be0d102"
            ]
        ]
    },
    {
        "id": "ce26106095553532",
        "type": "http request",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1470,
        "y": 920,
        "wires": [
            [
                "1f25d6d6b581c117",
                "bc13694782348c9d"
            ]
        ]
    },
    {
        "id": "cfc49ea3b3ec90d9",
        "type": "comment",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Invoice creation",
        "info": "",
        "x": 124.99998474121094,
        "y": 974.9999980926514,
        "wires": []
    },
    {
        "id": "7c1f199c5bbef4d1",
        "type": "http request",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 690,
        "y": 1060,
        "wires": [
            [
                "eeb046043b4c86c4"
            ]
        ]
    },
    {
        "id": "eeb046043b4c86c4",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getPendingFiles",
        "func": "\nconst pendingFiles = msg.payload.filter(\n    (item) =>\n        item.parseStatus == \"failure\" \n        ||\n        item.parseStatus == \"ingested\",\n);\nmsg.payload = pendingFiles;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1060,
        "wires": [
            [
                "08cac7b5283843b8",
                "a393457526f8ded2"
            ]
        ]
    },
    {
        "id": "08cac7b5283843b8",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "loopOverPendingFiles",
        "func": "// let pendingFiles = [...msg.payload]\n// for (let i = 0; i < pendingFiles.length; i++) {\n//     msg.payload = pendingFiles[i]\n//     node.send(msg);\n//     // console.log(\"\\n\\n\",\"sd\",i,\"\\n\\n\")\n// }\n\n// // return msg\n\n\n// for (let i = 0; i < msg.payload.length; i++) {\nfor (let i = 0; i < 1; i++) {\n    flow.set(\"fileId\", msg.payload[i].id)\n    node.send(msg,{payload: msg.payload[i]});\n    // console.log(\"\\n\\n\",\"sd\",i,\"\\n\\n\")\n}\n\n// return msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 1060,
        "wires": [
            [
                "4e0cddad5edb8207",
                "145ffd90a0dc5736"
            ]
        ]
    },
    {
        "id": "4e0cddad5edb8207",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getFlowVariables",
        "func": "const s3Url = flow.get('s3Url') || \"\"\nconst filename = flow.get('filename') || \"\"\n\nconst PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst url = msg.payload.fileDestinationPath\nconst fileId = flow.get(\"fileId\") || \"\"\n// msg.fileId = \"aff9a6b8-c94c-4b2b-bef8-2150841d234d\"\nmsg.url = `${PAYLATER_URL}/v1/file/service/patchParsingStatus/${fileId}`\nmsg.method = 'PATCH'\nconst token = flow.get(\"ent_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"enterpriseid\"] = msg.enterpriseId\nmsg.headers[\"x-actyv-api-config-key\"] = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.payload = {\n    \"parseStatus\": \"parsing\",\n    \"statusComment\": \"File parsed successfully from File Parser service\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1200,
        "wires": [
            [
                "9e98652bc73acf09"
            ]
        ]
    },
    {
        "id": "9e98652bc73acf09",
        "type": "http request",
        "z": "5bf29b5d3a6e7fb3",
        "name": "updateFileParsingStatus",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 670,
        "y": 1200,
        "wires": [
            [
                "340af3066d09a2c1",
                "9376fe9c22d5527f"
            ]
        ]
    },
    {
        "id": "c92b63da44fd9746",
        "type": "http request",
        "z": "5bf29b5d3a6e7fb3",
        "name": "File parser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 274.99998474121094,
        "y": 1414.9999980926514,
        "wires": [
            []
        ]
    },
    {
        "id": "340af3066d09a2c1",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "fileParserRequest",
        "func": "msg.filename = `${env.get('LOCAL_PATH')}/${msg.filename.split(\".\").slice(0, -1).join(\".\").trimLeft()}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1200,
        "wires": [
            [
                "55cef45f7c9eca9f"
            ]
        ]
    },
    {
        "id": "e8978861854254ea",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getOutstandingInvoices",
        "func": "// const outstandingInvoices = msg.payload.data[\"Sheet1\"][\"valid\"]\n// msg.outstandingInvoices = outstandingInvoices\n// return msg;\nconst data = msg.payload.filter((d)=>{\n    if (d.DocumentNo){\n        return d\n    }\n})\nmsg.outstandingInvoices = data\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1340,
        "wires": [
            [
                "5dc3de06a69c5386",
                "77c020c3f12969f9"
            ]
        ]
    },
    {
        "id": "77c020c3f12969f9",
        "type": "switch",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "property": "outstandingInvoices.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lte",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 1340,
        "wires": [
            [
                "7cea4f7083f289c9"
            ],
            [
                "db14297651a64868"
            ]
        ]
    },
    {
        "id": "72ec706f3b1f7889",
        "type": "http request",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Get Distributor By ERP ID",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1170,
        "y": 1360,
        "wires": [
            [
                "c925dd30e1de412b"
            ]
        ]
    },
    {
        "id": "db14297651a64868",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getDistributorByERPID",
        "func": "\nconst PAYLATER_URL = env.get('PAYLATER_URL')\n\nmsg.url = `${PAYLATER_URL}/v1/business-relationship/getByBulkDistributorERP`\nmsg.method = 'POST'\nconst token = flow.get(\"ent_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"enterpriseid\"] = msg.enterpriseId\nmsg.payload = {\n erpIDList: msg.enterpriseId \n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1360,
        "wires": [
            [
                "72ec706f3b1f7889",
                "18eeb6d042584c06"
            ]
        ]
    },
    {
        "id": "1f29d0d2158a705b",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "invoiceRawFormat",
        "func": "const sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\nconst chunkSize = 50;\nconst fileId = flow.get('fileId') || \"\"\nlet chunks = []\n\nfor (let i = 0; i < msg.payload.length; i += chunkSize) {\n    chunks.push(msg.payload.slice(i, i + chunkSize));\n\n    // do whatever\n}\n\nchunks = chunks.slice(0,2)\n// chunk the large array into multiple with (100 each)\n// loop through main array [1000 -> [[100],[100],...]\n// 100 -> push into invoiceRaw and send \n\nif (msg.payload.length > 0) {\n    let invoiceDate;\n    let actualDays;\n    let formatDueDate;\n    for (let i = 0; i < chunks.length; i++) {\n        const invoiceRaw = []\n        await sleep(250)\n\n        for (let j = 0; j < chunks[i].length; j++) {\n            let outstandingFile = chunks[i][j];\n            invoiceDate = sheetDateToJSDate(outstandingFile[\"Doc. Date\"]);\n            // let invoiceDate = \"2023-01-28\";\n\n            var date = new Date();\n            actualDays = addDays(0, invoiceDate)\n            // formatDueDate = `${new Date(actualDays).getDate()}-${new Date(actualDays).getMonth() + 1}-${new Date(actualDays).getFullYear()}`\n\n            fixDate({ ...outstandingFile, dueDate: formatDueDate, sytemDueDate: invoiceDate });\n            if (outstandingFile?.[\"DocumentNo\"]) {\n                let businessID = outstandingFile[\"New account\"] ? msg.erpIdAndBusinessIdMapping[`${outstandingFile[\"New account\"]}${outstandingFile[\"Account\"]}`] : msg.erpIdAndBusinessIdMapping[`${outstandingFile[\"Account\"]}`]\n                invoiceRaw.push({\n                    // businessID: msg.erpIdAndBusinessIdMapping[outstandingFile.RetailerCode],\n                    businessID: businessID ?? null,\n                    enterpriseID: msg.enterpriseId,\n                    fileID: fileId,\n                    // erpID: outstandingFile[\"New account\"] ? `${outstandingFile[\"New account\"]}${outstandingFile[\"Account\"]}` : `${outstandingFile[\"New account\"]}`,\n                    erpID: outstandingFile[\"New account\"] ? `${outstandingFile[\"New account\"]}` : `${outstandingFile[\"New account\"]}`,\n                    documentNo: outstandingFile[\"DocumentNo\"].toString() ?? \"\",\n                    amount: outstandingFile[\"   Amt in loc.cur.\"],\n                    dueDate: actualDays,\n                    documentDate: new Date(invoiceDate)?.toISOString(),\n                    remitTo: \"\",\n                    remitAccount: \"\",\n                    paymentTerm: \"\",\n                    rawData: JSON.parse(JSON.stringify(outstandingFile)) || {},\n                })\n            }\n        }\n        console.log({ invoiceRaw })\n        node.send({\n            payload: invoiceRaw,\n            isCompleted: \"false\",\n            invoiceDate,\n            formatDueDate,\n            actualDays,\n            length: i,\n            enterpriseId: msg.enterpriseId,\n            bankId: msg.bankId\n        })\n    }\n\n}\n\n// }\n\nfunction fixDate(invoice) {\n    let tempDocDate = new Date(invoice.postingDate);\n    let tempSystemDueDate = new Date(invoice.sytemDueDate);\n    let tempDueDate = new Date(invoice.dueDate);\n\n    tempDocDate.setTime(tempDocDate.getTime() + 1000 * 60);\n    tempDocDate.setHours(0, 0, 0);\n    tempSystemDueDate.setTime(tempSystemDueDate.getTime() + 1000 * 60);\n    tempSystemDueDate.setHours(0, 0, 0);\n    tempDueDate.setTime(tempDueDate.getTime() + 1000 * 60);\n    tempDueDate.setHours(0, 0, 0);\n\n    invoice.docDate = convertToISO(tempDocDate);\n    invoice.sytemDueDate = convertToISO(tempSystemDueDate);\n    invoice.dueDate = convertToISO(tempDueDate);\n}\n\nfunction convertToISO(date) {\n    return (\n        date.getFullYear() +\n        \"-\" +\n        (date.getMonth() + 1) +\n        \"-\" +\n        date.getDate() +\n        \" 00:00:00.000+00\"\n    );\n}\n\nfunction sliceIntoChunks(arr, chunkSize) {\n    const res = [];\n\n    for (let k = 0; k < arr.length; k += chunkSize) {\n        const chunk = arr.slice(k, k + chunkSize);\n        res.push(chunk);\n    }\n\n    return res;\n};\n\nfunction addDays(days, invoiceDate) {\n    var date = new Date(invoiceDate);\n    date.setDate(date.getDate() + days);\n    return date;\n}\n\nfunction formatDates(inputDate) {\n    const date = inputDate\n    const [day, month, year] = date.toString()?.split(\"/\")\n    const result = new Date(year, month - 1, day).toLocaleDateString('en-GB');\n    return result.split(\"/\").reverse().join(\"-\")\n}\n\nfunction sheetDateToJSDate(n) {\n    // const d = new Date(1899, 11, 30)\n    const d = new Date(1899, 11, 30)\n    d.setDate(d.getDate() + n)\n    // Rounds milliseconds to seconds\n    d.setSeconds(d.getSeconds() + Math.round(d.getMilliseconds() / 1000))\n    d.setMilliseconds(0)\n    // return `${d.getDate()}-${d.getMonth() + 1}-${d.getFullYear()}`\n    return `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`\n}\n\nmsg.isCompleted = \"true\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1780,
        "wires": [
            [
                "15c43056d3741821",
                "ed42b818da0ec289"
            ]
        ]
    },
    {
        "id": "b00e369e2f39a5c7",
        "type": "http request",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Add Invoice Raw Bulk",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1620,
        "y": 1640,
        "wires": [
            [
                "5d14e2c7eb801bb2"
            ]
        ]
    },
    {
        "id": "f76b3481add7cdbf",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "addInvoiceBulk",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.url = `${PAYLATER_URL}/v1/invoice-raw/service/bulk-insert`\nmsg.method = 'POST'\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = {\n invoiceRawDataArray: msg.payload\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 1580,
        "wires": [
            [
                "b00e369e2f39a5c7",
                "1d0a7fbf8a477abd"
            ]
        ]
    },
    {
        "id": "7af3b0b894fc94a2",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "totalInvoices",
        "func": "let totalInvoiceRawInserted = {};\ntotalInvoiceRawInserted = {\n    ...totalInvoiceRawInserted,\n    ...msg.payload,\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1700,
        "wires": [
            [
                "9f8104113af678da"
            ]
        ]
    },
    {
        "id": "9f8104113af678da",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "updateFileParsingStatus",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst fileId = flow.get(\"fileId\") || \"\";\n\nmsg.url = `${PAYLATER_URL}/v1/file/service/patchParsingStatus/${fileId}`\nmsg.method = 'PATCH'\nconst token = flow.get(\"ent_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"enterpriseid\"] = msg.enterpriseId\nmsg.headers[\"x-actyv-api-config-key\"] = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nmsg.payload = {\n    \"parseStatus\": \"aggregated\",\n    \"statusComment\": \"File parsed successfully from File Parser service\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 1700,
        "wires": [
            [
                "6b190a6ccf7ce4c5"
            ]
        ]
    },
    {
        "id": "6b190a6ccf7ce4c5",
        "type": "http request",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Update File Parsing Status",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1860,
        "y": 1700,
        "wires": [
            [
                "377c87779fc498cc",
                "b5980ae8773c4e30"
            ]
        ]
    },
    {
        "id": "7cea4f7083f289c9",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "updateFileParsingStatus",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nmsg.url = `${PAYLATER_URL}/v1/file/service/patchParsingStatus/${msg.fileId}`\nmsg.method = 'PATCH'\nconst token = flow.get(\"ent_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"x-actyv-api-config-key\"] = env.get(\"X_ACTYV_API_CONFIG_KEY\")\nmsg.payload = {\n    \"parseStatus\": \"ingested\",\n    \"statusComment\": \"File parsed successfully from File Parser service\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1300,
        "wires": [
            [
                "6d3118cc772783ac"
            ]
        ]
    },
    {
        "id": "6d3118cc772783ac",
        "type": "http request",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Update File Parsing Status",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1180,
        "y": 1300,
        "wires": [
            [
                "0f0d9ac041c444e1"
            ]
        ]
    },
    {
        "id": "57c9a54137a3a67a",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "callCopyInvoiceSP",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst fileId =flow.get('fileId') || \"\"\n\nmsg.url = `${PAYLATER_URL}/v1/invoice-raw/copy-invoices-sp/${fileId}`\nmsg.method = 'POST'\nconst token = flow.get(\"ent_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"enterpriseid\"] = msg.enterpriseId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1860,
        "wires": [
            [
                "5ea81e3f02c26d21",
                "afba504550d6ff35"
            ]
        ]
    },
    {
        "id": "5492afb8ec691487",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "updatePreviousInvoicesToPaid",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\nconst BP_TYPE = \"DISTRIBUTOR\"\n\nmsg.url = `${PAYLATER_URL}/v1/invoices/service/status/${msg.enterpriseId}?bpType=${BP_TYPE}`\nmsg.method = 'POST'\nconst token = flow.get(\"ent_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n// msg.headers[\"Authorization\"] = `Bearer ${token}`\n// msg.headers[\"enterpriseid\"] = msg.enterpriseId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 1940,
        "wires": [
            [
                "b115a5bed82f0dec"
            ]
        ]
    },
    {
        "id": "5ea81e3f02c26d21",
        "type": "http request",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Call Copy Invoice SP",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1640,
        "y": 1860,
        "wires": [
            [
                "945d1c23f160a73b",
                "5492afb8ec691487"
            ]
        ]
    },
    {
        "id": "b115a5bed82f0dec",
        "type": "http request",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Update Previous Invoices To Paid",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1680,
        "y": 1940,
        "wires": [
            [
                "945d1c23f160a73b"
            ]
        ]
    },
    {
        "id": "5860c5cb8c5667dd",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "computeNetInvoice",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nmsg.url = `${PAYLATER_URL}/v1/invoices/compute-net-invoice-amount/${msg.fileId}`\nmsg.method = 'POST'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 2040,
        "wires": [
            [
                "5289ae4f2a8e0d8a"
            ]
        ]
    },
    {
        "id": "5289ae4f2a8e0d8a",
        "type": "http request",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Compute Net Invoice",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1640,
        "y": 2040,
        "wires": [
            [
                "945d1c23f160a73b"
            ]
        ]
    },
    {
        "id": "7ad2974088fcd69b",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "updateFileParsingStatusReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst fileId = flow.get('fileId') || \"\"\n\nmsg.url = `${PAYLATER_URL}/v1/file/patchParsingStatus/${fileId}`\nmsg.method = 'PATCH'\nmsg.payload = {\n    \"parseStatus\": \"aggregated\",\n    \"statusComment\": \"File parsed successfully from File Parser service\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 2100,
        "wires": [
            [
                "58e2c3f7c238bc85"
            ]
        ]
    },
    {
        "id": "58e2c3f7c238bc85",
        "type": "http request",
        "z": "5bf29b5d3a6e7fb3",
        "name": "updateFileParsingStatus",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1650,
        "y": 2100,
        "wires": [
            [
                "945d1c23f160a73b"
            ]
        ]
    },
    {
        "id": "945d1c23f160a73b",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "debug 327",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2060,
        "y": 1940,
        "wires": []
    },
    {
        "id": "18eeb6d042584c06",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "erpIdAndBusinessIdMapping",
        "func": "msg.erpIdAndBusinessIdMapping = msg.payload\nmsg.payload = msg.outstandingInvoices\nreturn msg;\n\n// Response Type\n// {\n//   \"101104\": \"635f8ebfd988fd7c1800d8c9\"\n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1780,
        "wires": [
            [
                "1f29d0d2158a705b",
                "677846ab51f80e19"
            ]
        ]
    },
    {
        "id": "377c87779fc498cc",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2150,
        "y": 1700,
        "wires": []
    },
    {
        "id": "15c43056d3741821",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "invoiceRawFormat",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 1840,
        "wires": []
    },
    {
        "id": "ed42b818da0ec289",
        "type": "switch",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "property": "isCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 890,
        "y": 1780,
        "wires": [
            [
                "f76b3481add7cdbf",
                "7916a9ea3a8207d6"
            ],
            [
                "7af3b0b894fc94a2",
                "369d1f893387ee78"
            ]
        ]
    },
    {
        "id": "55cef45f7c9eca9f",
        "type": "alafile in",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "filename": "",
        "format": "xlsx",
        "columns": "*",
        "headers": true,
        "x": 270,
        "y": 1340,
        "wires": [
            [
                "9db84ff72964d2cd",
                "e8978861854254ea"
            ]
        ]
    },
    {
        "id": "0f0d9ac041c444e1",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Update file parsing status to ingested",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 1300,
        "wires": []
    },
    {
        "id": "5d14e2c7eb801bb2",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Add invoice bulk",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 1520,
        "wires": []
    },
    {
        "id": "afba504550d6ff35",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "debug 329",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 1820,
        "wires": []
    },
    {
        "id": "bf9c98522d05d890",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "createFileReq",
        "func": "\nconst PAYLATER_URL = env.get(\"PAYLATER_URL\")\n\nmsg.url = `${PAYLATER_URL}/v1/file/service`\nmsg.method = \"POST\"\nconst token = flow.get(\"ent_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"enterpriseid\"] = msg.enterpriseId\nmsg.headers[\"x-actyv-api-config-key\"] = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1244.999984741211,
        "y": 914.9999980926514,
        "wires": [
            [
                "4579b4696fb40a9e",
                "ce26106095553532"
            ]
        ]
    },
    {
        "id": "bc13694782348c9d",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getFileByConfigKeyReq",
        "func": "\nconst PAYLATER_URL = env.get(\"PAYLATER_URL\")\nconst CONFIG_KEY = env.get(\"CKPL_CONFIG_KEY\")\n\nmsg.url = `${PAYLATER_URL}/v1/file/config-key/${CONFIG_KEY}`\nmsg.method = \"GET\"\nconst token = flow.get(\"ent_token\") || \"\"\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.headers[\"enterpriseid\"] = msg.enterpriseId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1060,
        "wires": [
            [
                "7c1f199c5bbef4d1"
            ]
        ]
    },
    {
        "id": "e04ed38cf42c2391",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getSingleFilename",
        "func": "\nconst files = msg.payload\nlet file;\nif (files.length > 0) {\n    file = files[0]\n}\nconst s = \"13 thaprQAActyv Invoice Format.XLSX\"\nconst fileName = file.split(\".\")[-1]\n\n// msg.payload =  [file]\nmsg.payload = [`/sftpdir/invoices/OUTSTANDING_251122.xlsx`]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 480,
        "wires": [
            [
                "aa0d6208e5c36a34"
            ]
        ]
    },
    {
        "id": "7fed2a4556a37d44",
        "type": "inject",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Every 10 minutes",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "5dc3de06a69c5386",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1440,
        "wires": []
    },
    {
        "id": "c925dd30e1de412b",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "distributor Id from erpID",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 1340,
        "wires": []
    },
    {
        "id": "677846ab51f80e19",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "erpIdAndBusinessIdMapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 1720,
        "wires": []
    },
    {
        "id": "e7cfa83ca2e70958",
        "type": "inject",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1020,
        "y": 1880,
        "wires": [
            [
                "57c9a54137a3a67a"
            ]
        ]
    },
    {
        "id": "b5980ae8773c4e30",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "sleep",
        "func": "const sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\nawait sleep(5000)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 1780,
        "wires": [
            [
                "57c9a54137a3a67a"
            ]
        ]
    },
    {
        "id": "bff20954da9fa981",
        "type": "comment",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Move file to failure folder",
        "info": "Send an email if any error occurs",
        "x": 514.9999847412109,
        "y": 2434.9999980926514,
        "wires": []
    },
    {
        "id": "3e5bc4acfc23c9df",
        "type": "catch",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 464.99998474121094,
        "y": 2494.9999980926514,
        "wires": [
            []
        ]
    },
    {
        "id": "aafe38dff2875569",
        "type": "SFTP-main",
        "z": "5bf29b5d3a6e7fb3",
        "path": "/",
        "method": "put",
        "remoteFilePath": "successPath",
        "remoteFilePathType": "msg",
        "localFilePath": "localPath",
        "localFilePathType": "msg",
        "server": "8713902662c7b8a4",
        "outputs": 1,
        "debug": false,
        "name": "move to success folder",
        "x": 1254.999984741211,
        "y": 774.9999980926514,
        "wires": [
            [
                "c0b62a5ef2481a0b"
            ]
        ]
    },
    {
        "id": "09bd748f9f813586",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Deleted file from SFTP existing directory",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1844.999984741211,
        "y": 774.9999980926514,
        "wires": []
    },
    {
        "id": "c0b62a5ef2481a0b",
        "type": "SFTP-main",
        "z": "5bf29b5d3a6e7fb3",
        "path": "/",
        "method": "delete",
        "remoteFilePath": "remotePath",
        "remoteFilePathType": "msg",
        "localFilePath": "filepath",
        "localFilePathType": "msg",
        "server": "8713902662c7b8a4",
        "outputs": 1,
        "debug": false,
        "name": "delete from existing folder",
        "x": 1534.999984741211,
        "y": 774.9999980926514,
        "wires": [
            [
                "09bd748f9f813586"
            ]
        ]
    },
    {
        "id": "9121900b816e24de",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "setRemotePath",
        "func": "msg.filename = msg.payload[0].split(\".\").slice(0, -1).join(\".\") // filename without extension\n\nconst folderPath = msg.payload[0].split(\"/\")\nconst fileName = folderPath[folderPath.length - 1]\nflow.set('filename', fileName) // filename with extension\nglobal.set('filename', fileName) // filename with extension\n\n// msg.filepath = `/Users/ramu/Desktop/node-red/${fileName}`\nmsg.successPath = `${env.get(\"SFTP_SUCCESS_FOLDER\")}`\nmsg.localPath = `${env.get(\"LOCAL_PATH\")}/${fileName}`\nmsg.remotePath = `${env.get(\"REMOTE_PATH_OUT\")}/${fileName}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 600,
        "wires": [
            [
                "8543a4c4b58fcb9d"
            ]
        ]
    },
    {
        "id": "c80f0d7b534bc578",
        "type": "SFTP-main",
        "z": "5bf29b5d3a6e7fb3",
        "path": "/",
        "method": "put",
        "remoteFilePath": "failurePath",
        "remoteFilePathType": "msg",
        "localFilePath": "localPath",
        "localFilePathType": "msg",
        "server": "8713902662c7b8a4",
        "outputs": 1,
        "debug": false,
        "name": "move to failure folder",
        "x": 864.9999847412109,
        "y": 2494.9999980926514,
        "wires": [
            [
                "2f9a79a69db4041f"
            ]
        ]
    },
    {
        "id": "c82282802c214df8",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Deleted file from SFTP existing directory",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 864.9999847412109,
        "y": 2594.9999980926514,
        "wires": []
    },
    {
        "id": "2f9a79a69db4041f",
        "type": "SFTP-main",
        "z": "5bf29b5d3a6e7fb3",
        "path": "/",
        "method": "delete",
        "remoteFilePath": "remotePath",
        "remoteFilePathType": "msg",
        "localFilePath": "filepath",
        "localFilePathType": "msg",
        "server": "8713902662c7b8a4",
        "outputs": 1,
        "debug": false,
        "name": "delete from existing folder",
        "x": 534.9999847412109,
        "y": 2594.9999980926514,
        "wires": [
            [
                "c82282802c214df8"
            ]
        ]
    },
    {
        "id": "3075dba0f42b4ec0",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "setRemotePath",
        "func": "const fileName = global.get('filename') // filename with extension\n\nmsg.failurePath = `${env.get(\"SFTP_FAILURE_FOLDER\")}`\nmsg.localPath = `${env.get(\"LOCAL_PATH\")}/${fileName}`\nmsg.remotePath = `${env.get(\"REMOTE_PATH_OUT\")}/${fileName}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 644.9999847412109,
        "y": 2494.9999980926514,
        "wires": [
            [
                "eb6a02edbec33c8d"
            ]
        ]
    },
    {
        "id": "eb6a02edbec33c8d",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "debug 330",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 784.9999847412109,
        "y": 2414.9999980926514,
        "wires": []
    },
    {
        "id": "1ecee91eb0ac1ff7",
        "type": "comment",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Error handling",
        "info": "Send an email if any error occurs",
        "x": 434.99998474121094,
        "y": 2814.9999980926514,
        "wires": []
    },
    {
        "id": "0234ce105d3f54a5",
        "type": "catch",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 424.99998474121094,
        "y": 2874.9999980926514,
        "wires": [
            []
        ]
    },
    {
        "id": "40ef5ac3332a61b0",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "error",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1074.999984741211,
        "y": 2874.9999980926514,
        "wires": []
    },
    {
        "id": "68d8437f36701beb",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "sendEmailReq",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY\n};\nmsg.method = \"POST\";\n\nmsg.payload = {\n    // \"from\": \"ramu.bugudi@actyv.com\",\n    \"from\": \"shravan.pm@actyv.com\",\n    \"to\": \"ramu.bugudi@actyv.com\",\n    \"subject\": `Error occured - ${msg.error.message}`,\n    // \"html\": `${msg.error}`,\n    \"html\": `\n    <html>\n        <body>\n            <p></p>\n            <p><b>FLOW NAME:</b> ${env.get(\"NR_FLOW_NAME\")} <b>FLOW ID:</b> ${env.get(\"NR_FLOW_ID\")} <b>PATH:</b> ${env.get(\"NR_NODE_PATH\")}</p>\n            <p>${msg.error.message}</p>\n            <p>Name: ${msg.error.source.name} - Type: ${msg.error.source.type}</p>\n            <p>Stacktrace: ${msg.error.stack}</p>\n        </body>\n    </html>`,\n    \"priority\": \"high\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 644.9999847412109,
        "y": 2874.9999980926514,
        "wires": [
            [
                "b94aeb03438674d6"
            ]
        ]
    },
    {
        "id": "b94aeb03438674d6",
        "type": "http request",
        "z": "5bf29b5d3a6e7fb3",
        "name": "sendEmail",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 874.9999847412109,
        "y": 2874.9999980926514,
        "wires": [
            [
                "40ef5ac3332a61b0"
            ]
        ],
        "info": "Get bank product config id"
    },
    {
        "id": "145ffd90a0dc5736",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 1120,
        "wires": []
    },
    {
        "id": "098856cdba207396",
        "type": "comment",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Delete from local folder aswell",
        "info": "Send an email if any error occurs",
        "x": 1164.999984741211,
        "y": 2534.9999980926514,
        "wires": []
    },
    {
        "id": "f3e2458006d36bef",
        "type": "http request",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getEnterprise",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 750,
        "y": 360,
        "wires": [
            [
                "a09ad89d2ab1f626"
            ]
        ]
    },
    {
        "id": "ea2b4fdbe724e032",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getEnterpriseReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst BUSINESS_UNIQUE_IDENTIFIER = env.get(\"CKPL_BUSINESS_UNIQUE_IDENTIFIER\")\nconst BUSINESS_TYPE = \"ENTERPRISE\"\nmsg.headers = {}\nmsg.method = \"GET\"\nconst token = flow.get(\"ent_token\") || \"\"\nmsg.url = `${PAYLATER_URL}/v1/business/service/getByIdentifier/${BUSINESS_UNIQUE_IDENTIFIER}/${BUSINESS_TYPE}`;\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n// msg.headers[\"Authorization\"] = `Bearer ${token}`\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 360,
        "wires": [
            [
                "f3e2458006d36bef"
            ]
        ]
    },
    {
        "id": "a09ad89d2ab1f626",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Save Enterprise ID",
        "func": "const enterpriseId = msg.payload?.id\n\nmsg.enterpriseId = enterpriseId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 360,
        "wires": [
            [
                "44acdb26eb29a40a",
                "e285fb1701e1102a"
            ]
        ]
    },
    {
        "id": "9677ee12dbec87a4",
        "type": "amazon s3 out",
        "z": "5bf29b5d3a6e7fb3",
        "aws": "5d210162c7877d54",
        "bucket": "actyv-test-bucket",
        "filename": "",
        "localFilename": "",
        "region": "ap-south-1",
        "name": "Upload to s3",
        "x": 1390,
        "y": 420,
        "wires": []
    },
    {
        "id": "588f059fa9101cae",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst ENTERPRISE_EMAIL = env.get('CKPL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": ENTERPRISE_EMAIL,\n    \"password\": PASSWORD\n};\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 220,
        "wires": [
            [
                "897496fe32f2794f"
            ]
        ]
    },
    {
        "id": "897496fe32f2794f",
        "type": "http request",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 770,
        "y": 220,
        "wires": [
            [
                "d0f1274f88feedf0"
            ]
        ]
    },
    {
        "id": "d0f1274f88feedf0",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "set Enterprise Token",
        "func": "flow.set('ent_token', msg.payload.idToken);\n\nmsg.ent_token = msg.payload.idToken\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 220,
        "wires": [
            [
                "cc12235f4f617a1a"
            ]
        ]
    },
    {
        "id": "c8c1b6d1a2b6339d",
        "type": "inject",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 564.9999847412109,
        "y": 74.99999809265137,
        "wires": [
            [
                "625ade66ce5480a6"
            ]
        ]
    },
    {
        "id": "573140683dde2427",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 874.9999847412109,
        "y": 74.99999809265137,
        "wires": []
    },
    {
        "id": "625ade66ce5480a6",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst PAYLATER_URL = env.get('PAYLATER_URL')\nconst GO_URL = env.get('GO_URL')\nconst ENTERPRISE_EMAIL = env.get('APL_PIPES_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst CONFIG_KEY = env.get('CONFIG_KEY')\nconst APL_PIPES_CONFIG_KEY = env.get('APL_PIPES_CONFIG_KEY')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\nconst MSL_BANK_ADMIN_EMAIL = env.get('MSL_BANK_ADMIN_EMAIL')\nconst MSL_BANK_KEY = env.get('MSL_BANK_KEY')\nconst CKPL_CONFIG_KEY = env.get('CKPL_CONFIG_KEY')\nconst AXIS_BANK_KEY = env.get('AXIS_BANK_KEY')\n\nmsg.payload = {\n    ADMIN_URL, PAYLATER_URL, GO_URL,\n    ENTERPRISE_EMAIL,\n    PASSWORD,\n    CONFIG_KEY,\n    APL_PIPES_CONFIG_KEY,\n    X_ACTYV_API_CONFIG_KEY,\n    MSL_BANK_ADMIN_EMAIL,\n    MSL_BANK_KEY,\n    CKPL_CONFIG_KEY,\n    AXIS_BANK_KEY\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 714.9999847412109,
        "y": 74.99999809265137,
        "wires": [
            [
                "573140683dde2427"
            ]
        ]
    },
    {
        "id": "15f2897e52a313d7",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getFileName",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 800,
        "wires": []
    },
    {
        "id": "1f25d6d6b581c117",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "createFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 920,
        "wires": []
    },
    {
        "id": "9376fe9c22d5527f",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "updateFileParsingStatus",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 1160,
        "wires": []
    },
    {
        "id": "7916a9ea3a8207d6",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Switch False",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 1680,
        "wires": []
    },
    {
        "id": "369d1f893387ee78",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Switch True",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 1840,
        "wires": []
    },
    {
        "id": "a393457526f8ded2",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getFileByConfigKey",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1020,
        "wires": []
    },
    {
        "id": "45a66bf6a0c19fd3",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Authenticate",
        "func": "const ADMIN_URL = env.get('ADMIN_URL')\nconst AXIS_BANK_ADMIN_EMAIL = env.get('AXIS_BANK_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\n\nmsg.headers = {}\nmsg.method = \"POST\"\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.headers[\"content-type\"] = \"application/json\"\n\nmsg.payload = {\n    \"email\": AXIS_BANK_ADMIN_EMAIL,\n    \"password\": PASSWORD\n};\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 140,
        "wires": [
            [
                "581f1e2128f3a24b"
            ]
        ]
    },
    {
        "id": "581f1e2128f3a24b",
        "type": "http request",
        "z": "5bf29b5d3a6e7fb3",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 750,
        "y": 140,
        "wires": [
            [
                "53c2d13dda9cd05b"
            ]
        ]
    },
    {
        "id": "53c2d13dda9cd05b",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "set Bank Token",
        "func": "flow.set('bank_token', msg.payload.idToken);\n\nmsg.bank_token = msg.payload.idToken\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 140,
        "wires": [
            [
                "588f059fa9101cae"
            ]
        ]
    },
    {
        "id": "cc12235f4f617a1a",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getBankReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_KEY = env.get(\"BANK_KEY\")\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank/key/${BANK_KEY}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 300,
        "wires": [
            [
                "8858784f82b89311"
            ]
        ]
    },
    {
        "id": "8858784f82b89311",
        "type": "http request",
        "z": "5bf29b5d3a6e7fb3",
        "name": "getBankReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 770,
        "y": 300,
        "wires": [
            [
                "1b9cb532519299e5"
            ]
        ]
    },
    {
        "id": "1b9cb532519299e5",
        "type": "function",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Save Bank ID",
        "func": "const bankId = msg.payload?._id\nmsg.bankId = bankId\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 300,
        "wires": [
            [
                "ea2b4fdbe724e032"
            ]
        ]
    },
    {
        "id": "1d0a7fbf8a477abd",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "Add invoice bulk req",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1404.999984741211,
        "y": 1494.9999980926514,
        "wires": []
    },
    {
        "id": "4579b4696fb40a9e",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "createFile Req",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1584.999984741211,
        "y": 854.9999980926514,
        "wires": []
    },
    {
        "id": "776ef2ceea9801b3",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "debug 331",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 854.9999847412109,
        "y": 474.99999809265137,
        "wires": []
    },
    {
        "id": "aa22267742bfe05c",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "debug 332",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 560,
        "wires": []
    },
    {
        "id": "e285fb1701e1102a",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "debug 333",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1154.999984741211,
        "y": 334.99999809265137,
        "wires": []
    },
    {
        "id": "9db84ff72964d2cd",
        "type": "debug",
        "z": "5bf29b5d3a6e7fb3",
        "name": "debug 334",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 434.99998474121094,
        "y": 1434.9999980926514,
        "wires": []
    },
    {
        "id": "c08deda24fa318b3",
        "type": "inject",
        "z": "a29923d1b01e690c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "d6e005c9863988e6"
            ]
        ]
    },
    {
        "id": "452ebc12894bc21c",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "AuthenticateActyvUserReq",
        "func": "// const envVariables = global.get('envVariables')\nconst ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\nconst EMAIL = ENV_VARIABLES.ADMIN_EMAIL;\nconst PASSWORD = ENV_VARIABLES.ADMIN_PASSWORD\n\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 180,
        "wires": [
            [
                "a887550dc244ce38"
            ]
        ]
    },
    {
        "id": "a887550dc244ce38",
        "type": "http request",
        "z": "a29923d1b01e690c",
        "name": "AuthenticateActyvUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 560,
        "y": 180,
        "wires": [
            [
                "ae29762669bb49f2"
            ]
        ]
    },
    {
        "id": "ae29762669bb49f2",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 180,
        "wires": [
            [
                "b0c56964a2981737"
            ]
        ]
    },
    {
        "id": "2bed794a8fb63428",
        "type": "node-red-contrib-graph-oauth-login",
        "z": "a29923d1b01e690c",
        "name": "",
        "scope": "https://graph.microsoft.com/.default",
        "redirecturi": "",
        "code": "",
        "encoding": false,
        "logintype": "Application",
        "refreshtimer": "10",
        "x": 170,
        "y": 580,
        "wires": [
            [
                "8f2ae5ca02812d70"
            ]
        ]
    },
    {
        "id": "8f2ae5ca02812d70",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "Get All Messages",
        "func": "let data=msg.payload;\nflow.set(\"token\",msg.at);\n// let userID=\"User Id from microsoft Graph\"\n\nlet userID = env.get(\"OUTLOOKUSERID\")\n// let sender =\"rahul.jain@actyv.com\"\nlet sender =\"ramu.bugudi@actyv.com\"\n//2023 - 03 - 31T04: 53: 15.736Z\nconst date = moment().toISOString().split(\"T\")[0].split(\"-\")\nconst today = `${date[0]}/${date[1]}/${date[2]}`//\"2023/04/04\"\nconst subject = \"Corporate Wise Maturity Report for the Corporate CAVINKARE PRIVATE LTD PHYSICAL SBB:CPLPCFCLB\"\nconst folderId = \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABT4dnQAAA=\"\nconsole.log({token:msg.at})\nconsole.log({today})\n\n// msg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages?$search=\"received:${today} AND from:${sender} AND subject:${subject}\"`\n// msg.url = `https://graph.microsoft.com/v1.0/users/${userID}/mailFolders/${folderId}/messages?$search=\"received:${today} AND from:${sender} AND subject:${subject}\"`\n// msg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages?$search=\"received:${today} AND from:${sender}\"`\nmsg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages?$search=\"subject:${subject} AND from:${sender} AND received:${today}\"`\nmsg.method=\"GET\";\nmsg.headers={\n    // \"Authorization\":`${data.access_token}`\n    \"Authorization\": `${msg.at}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 410,
        "y": 580,
        "wires": [
            [
                "8c765ed0e19aadb6",
                "d5f518b08ac874c5"
            ]
        ]
    },
    {
        "id": "8c765ed0e19aadb6",
        "type": "http request",
        "z": "a29923d1b01e690c",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 130,
        "y": 660,
        "wires": [
            [
                "88064390ccace136",
                "a6b95c291b2a40a9"
            ]
        ]
    },
    {
        "id": "d5f518b08ac874c5",
        "type": "debug",
        "z": "a29923d1b01e690c",
        "name": "debug 319",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 580,
        "wires": []
    },
    {
        "id": "88064390ccace136",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "each Msg",
        "func": "// let data=msg.payload;\nlet data = msg.payload.value;\n\n// console.log({valubhchnve:msg.value})\n\n\n// let parsedData = msg.payload.value\n// console.log(\"dsfd\", parsedData)\nfor (let index = 0; index < data.length; index++) {\n    // console.log(\"dhvhsgav\",data[index])\n    node.send({payload:data[index]});\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 660,
        "wires": [
            [
                "ade913f4bbfac2ce"
            ]
        ]
    },
    {
        "id": "a6b95c291b2a40a9",
        "type": "debug",
        "z": "a29923d1b01e690c",
        "name": "debug 320",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 700,
        "wires": []
    },
    {
        "id": "ade913f4bbfac2ce",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "Searching Attachment",
        "func": "let data = msg.payload;\nlet token=flow.get(\"token\");\nflow.set(\"msg\",data);\nlet userID = env.get(\"OUTLOOKUSERID\")\n// msg.url = `https://graph.microsoft.com/v1.0/users/1870cd49-a831-4b52-ba5e-b680441f9f70/messages/${data.id}/attachments`\nmsg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages/${data.id}/attachments`\n\nmsg.method = \"GET\";\nmsg.headers = {\n    // \"Authorization\": `${token.access_token}`\n    \"Authorization\": `${token}`\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 660,
        "wires": [
            [
                "452241cf6557f306"
            ]
        ]
    },
    {
        "id": "452241cf6557f306",
        "type": "http request",
        "z": "a29923d1b01e690c",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 750,
        "y": 660,
        "wires": [
            [
                "082908735ce97502",
                "819d68efa1c0be0a"
            ]
        ]
    },
    {
        "id": "082908735ce97502",
        "type": "debug",
        "z": "a29923d1b01e690c",
        "name": "debug 321",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 660,
        "wires": []
    },
    {
        "id": "819d68efa1c0be0a",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "function 177",
        "func": "let data=msg.payload;\n\nmsg.payload = data.value[0].contentBytes.toString();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 760,
        "wires": [
            [
                "c18fe70ae0c39cbe"
            ]
        ]
    },
    {
        "id": "c18fe70ae0c39cbe",
        "type": "base64",
        "z": "a29923d1b01e690c",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 290,
        "y": 760,
        "wires": [
            [
                "e084b1a55c9e380f"
            ]
        ]
    },
    {
        "id": "e084b1a55c9e380f",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "read xls",
        "func": "let data = xlsx.read(msg.payload, { type: \"buffer\" })\nconst wsname = data.SheetNames[0];\nconst ws = data.Sheets[wsname];\nconst payload = xlsx.utils.sheet_to_json(ws);\nmsg.payload = payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "xlsx",
                "module": "xlsx"
            }
        ],
        "x": 470,
        "y": 760,
        "wires": [
            [
                "7043eac116654ff5",
                "8265dad1b39c7f79"
            ]
        ]
    },
    {
        "id": "7043eac116654ff5",
        "type": "debug",
        "z": "a29923d1b01e690c",
        "name": "xls to json",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 760,
        "wires": []
    },
    {
        "id": "8265dad1b39c7f79",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "mapJsonFromXLSX",
        "func": "// console.log(\"agsdvghasvd\",msg.payload)\n// return\nlet data = msg.payload\nconst bankDetails = flow.get('bankDetails') || {}\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n// msg.payload = msg.payload.splice(7,1)\n// return msg\n\nlet keys = {\n    __EMPTY: \"Sr No.\",\n    __EMPTY_1: \"DEALER NAME\",\n    __EMPTY_2: \"ACCOUNT NO\",\n    __EMPTY_3: \"DEALER CODE\",\n    __EMPTY_4: \"TRANSACTION DATE\",\n    __EMPTY_5: \"PARTICULARS\",\n    __EMPTY_6: \"INVOICE DATE\",\n    __EMPTY_7: \"TRANSACTION AMOUNT\",\n    __EMPTY_8: \"OUTSTANDING AMOUNT\",\n    __EMPTY_9: \"OUTSTANDING DAYS\",\n    __EMPTY_10: \"CREDIT PERIOD\",\n    __EMPTY_11: \"MATURITY DATE\",\n    __EMPTY_12: \"OVERDUE AMOUNT\",\n    __EMPTY_13: \"OVERDUE DAYS\",\n    __EMPTY_14: \"AVAILED ADHOC\",\n}\n\nlet filteredData = data.filter((d) => d[\"__EMPTY_5\"]?.includes(\"ACTY\"))\nfilteredData.forEach((d) => {\n    for (let key in d) {\n        d[keys[key]] = d[key]\n        delete d[key]\n    }\n    // d[\"Sr No.\"] = d[\"__EMPTY\"],\n    // delete d[\"__EMPTY\"]\n})\n\n// msg.payload = filteredData\nfor(let row of filteredData){\n    if(row.PARTICULARS.includes(\"INTEREST\")){\n        node.send({\n            ...msg,\n            row,\n            payload: {},\n            dataType: \"interest\"\n        })\n    }else{\n        node.send({\n            ...msg,\n            row,\n            payload: {},\n            dataType: \"principal\"\n        })\n    }\n    \n}\n// return msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 860,
        "wires": [
            [
                "0bf7156326538a9e",
                "0eb9e17be74f46cd"
            ]
        ]
    },
    {
        "id": "0bf7156326538a9e",
        "type": "debug",
        "z": "a29923d1b01e690c",
        "name": "formated output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 860,
        "wires": []
    },
    {
        "id": "a96980578f36b617",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "updateDrawdown",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst actyvToken = flow.get(\"actyvToken\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\n\n// flow.set('bankProductConfigId', msg.payload.id)\nconst actyvEntityId = msg.actyvEntityId\n\n\nmsg.url = `${PAYLATER_URL}/api/`\n// console.log(\"URL\",msg.url)\nmsg.method = 'PATCH'\nmsg.headers = {\n    Authorization: `Bearer ${actyvToken}`,\n    actyventityid: actyvEntityId\n}\nmsg.payload = {\n    \"requestUniqueCode\": msg.row.PARTICULARS.slice(1, -1),\n    // \"dueDate\": changeDateFormat(msg.row[\"MATURITY DATE\"])\n    drawdownStatus: msg.row[\"OUTSTANDING AMOUNT\"] == 0 ? \"closed\" : \"\"\n}\n\nfunction changeDateFormat(date) {\n    let newDate = date.split(\"/\")\n    return `${newDate[2] - newDate[1] - newDate[0]}`\n}\nif (msg.row[\"OUTSTANDING AMOUNT\"] === 0) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1120,
        "wires": [
            [
                "abbcc1097f32c7a5"
            ]
        ]
    },
    {
        "id": "abbcc1097f32c7a5",
        "type": "http request",
        "z": "a29923d1b01e690c",
        "d": true,
        "name": "updateDrawdown",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 390,
        "y": 1120,
        "wires": [
            [
                "54b235eac729701a"
            ]
        ]
    },
    {
        "id": "54b235eac729701a",
        "type": "debug",
        "z": "a29923d1b01e690c",
        "name": "updateDrawdown",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1120,
        "wires": []
    },
    {
        "id": "b9bae2daa830b015",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "AuthenticateBankUserReq",
        "func": "\nconst BANK_USER_EMAIL = env.get('BANK_USER_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": PASSWORD,\n    \"email\": BANK_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 360,
        "wires": [
            [
                "8204daf628d1136c"
            ]
        ]
    },
    {
        "id": "8204daf628d1136c",
        "type": "http request",
        "z": "a29923d1b01e690c",
        "name": "AuthenticateBankUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 540,
        "y": 360,
        "wires": [
            [
                "a896148cb23019db"
            ]
        ]
    },
    {
        "id": "a896148cb23019db",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "saveBankToken",
        "func": "flow.set(\"bankToken\",msg.payload.idToken)\n// console.log({bankToken: msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 360,
        "wires": [
            [
                "81379ccc8e833a1d"
            ]
        ]
    },
    {
        "id": "81379ccc8e833a1d",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "getBankProductKeyReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\n\nmsg.url = `${GO_URL}/bank-application-config/key/${BANK_PRODUCT_KEY}`\nmsg.method = \"GET\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 460,
        "wires": [
            [
                "559d6e7393e9ecfa"
            ]
        ]
    },
    {
        "id": "559d6e7393e9ecfa",
        "type": "http request",
        "z": "a29923d1b01e690c",
        "name": "getBankProductKeyReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 460,
        "wires": [
            [
                "2da0d4cb882fbf6a",
                "c23c71e7a7e023f0"
            ]
        ]
    },
    {
        "id": "c23c71e7a7e023f0",
        "type": "debug",
        "z": "a29923d1b01e690c",
        "name": "bankProductConfig",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 420,
        "wires": []
    },
    {
        "id": "2da0d4cb882fbf6a",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "save bank id",
        "func": "msg.bankId = msg.payload.bank\nmsg.bankApplicationConfigId = msg.payload.id\nmsg.enterpriseId = msg.payload?.allowedEnterprises[0]?.id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 460,
        "wires": [
            [
                "2bed794a8fb63428"
            ]
        ]
    },
    {
        "id": "0eb9e17be74f46cd",
        "type": "switch",
        "z": "a29923d1b01e690c",
        "name": "",
        "property": "dataType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "interest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "principal",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 110,
        "y": 980,
        "wires": [
            [
                "16771f3ae41aedaf",
                "421181908d394e41"
            ],
            [
                "a96980578f36b617",
                "787cfd9e57cba4ee"
            ]
        ]
    },
    {
        "id": "16771f3ae41aedaf",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "updateDrawdown",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst actyvToken = flow.get(\"actyvToken\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\n\n\n// flow.set('bankProductConfigId', msg.payload.id)\nconst actyvEntityId = msg.actyvEntityId\n\n\nmsg.url = `${PAYLATER_URL}/api/`\n// console.log(\"URL\",msg.url)\nmsg.method = 'PATCH'\nmsg.headers = {\n    Authorization: `Bearer ${actyvToken}`,\n    actyventityid : actyvEntityId\n}\nmsg.payload = {\n    \"requestUniqueCode\": msg.row.PARTICULARS.slice(1,-1),\n    // \"dueDate\": changeDateFormat(msg.row[\"MATURITY DATE\"])\n    drawdownStatus: msg.row[\"OUTSTANDING AMOUNT\"]==0?\"closed\":\"\"\n}\n\nfunction changeDateFormat(date){\n    let newDate = date.split(\"/\")\n    return `${newDate[2]-newDate[1]-newDate[0]}`\n}\nif (msg.row[\"OUTSTANDING AMOUNT\"] === 0){\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 940,
        "wires": [
            [
                "6dbab91f92d63cf4"
            ]
        ]
    },
    {
        "id": "6dbab91f92d63cf4",
        "type": "http request",
        "z": "a29923d1b01e690c",
        "d": true,
        "name": "updateDrawdown",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 570,
        "y": 940,
        "wires": [
            [
                "126832a20ce44b3e"
            ]
        ]
    },
    {
        "id": "126832a20ce44b3e",
        "type": "debug",
        "z": "a29923d1b01e690c",
        "name": "updateDrawdown",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 940,
        "wires": []
    },
    {
        "id": "d6e005c9863988e6",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "Setting Global Variables",
        "func": "const ENV_VARIABLES = {\n    \"ADMIN_EMAIL\": \"darkhorse@gmail.com\",\n    \"ADMIN_PASSWORD\": \"User@123\",\n    \"ACTYV_ENTITY_URL\": \"https://actyv1-platform.qa.actyv.com\"\n}\n\nglobal.set(\"ENV_VARIABLES\", ENV_VARIABLES);\n\n// msg.payload = `${XLSX_FILE_PATH}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 100,
        "wires": [
            [
                "452ebc12894bc21c"
            ]
        ]
    },
    {
        "id": "b0c56964a2981737",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "Getting Actyv User",
        "func": "const ADMIN_URL = env.get('ADMIN_URL');\nconst ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\nconst ACTYV_ENTITY_URL = ENV_VARIABLES['ACTYV_ENTITY_URL']\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow.get(\"actyvToken\")}`,\n}\n\nmsg.url = `${ADMIN_URL}/api/user/getCurrentUser?url=${ACTYV_ENTITY_URL}`;\nmsg.method = \"GET\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 280,
        "wires": [
            [
                "4d66d53a0e162c22"
            ]
        ]
    },
    {
        "id": "4d66d53a0e162c22",
        "type": "subflow:0cbd918f05921aae",
        "z": "a29923d1b01e690c",
        "name": "getActyvUser",
        "x": 420,
        "y": 280,
        "wires": [
            [
                "2be25477cb5b3218"
            ]
        ]
    },
    {
        "id": "2be25477cb5b3218",
        "type": "function",
        "z": "a29923d1b01e690c",
        "name": "save actyv_entity_id",
        "func": "flow.set(\"actyvEntityId\", msg.payload.actyvEntityId);\nmsg.actyvEntityId = msg.payload.actyvEntityId\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 280,
        "wires": [
            [
                "b9bae2daa830b015"
            ]
        ]
    },
    {
        "id": "421181908d394e41",
        "type": "debug",
        "z": "a29923d1b01e690c",
        "name": "row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 980,
        "wires": []
    },
    {
        "id": "787cfd9e57cba4ee",
        "type": "debug",
        "z": "a29923d1b01e690c",
        "name": "Principal",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "row",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 1040,
        "wires": []
    },
    {
        "id": "4285b3ad93f2d6ab",
        "type": "node-red-contrib-graph-oauth-login",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "scope": "https://graph.microsoft.com/.default",
        "redirecturi": "",
        "code": "",
        "encoding": false,
        "logintype": "Application",
        "refreshtimer": "10",
        "x": 230,
        "y": 420,
        "wires": [
            [
                "d002e29b719484d0"
            ]
        ]
    },
    {
        "id": "d002e29b719484d0",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "Get All Messages",
        "func": "let data=msg.payload;\nconst ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\nflow.set(\"token\",msg.at);\n// let userID=\"User Id from microsoft Graph\"\n\nlet userID = ENV_VARIABLES.OUTLOOK_USER_ID\n// let sender =\"rahul.jain@actyv.com\"\nlet sender =\"ramu.bugudi@actyv.com\"\n//2023 - 03 - 31T04: 53: 15.736Z\nconst date = moment().toISOString().split(\"T\")[0].split(\"-\")\nconst today = `${date[0]}/${date[1]}/${date[2]}`//\"2023/04/26\"\nconst subject = \"Corporate Wise Utilization Report for the Corporate\"\n// const folderId = \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABT4dnQAAA=\"\n// const folderId = \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABT4dnQAAA=\"\nconst folderId = ENV_VARIABLES.AXIS_READ_FOLDER_ID\nconsole.log({token:msg.at})\n\n\n// msg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages?$search=\"received:${today} AND from:${sender} AND subject:${subject}\"`\nmsg.url = `https://graph.microsoft.com/v1.0/users/${userID}/mailFolders/${folderId}/messages?$search=\"received:${today} AND from:${sender} AND subject:${subject}\"`\n// msg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages?$search=\"received:${today} AND from:${sender} AND subject:${subject}\"`\nmsg.method=\"GET\";\nmsg.headers={\n    // \"Authorization\":`${data.access_token}`\n    \"Authorization\": `${msg.at}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 470,
        "y": 420,
        "wires": [
            [
                "fec9e3ea96fbd84d"
            ]
        ]
    },
    {
        "id": "fec68c4dc60abca5",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "each Msg",
        "func": "// let data=msg.payload;\nlet data = msg.payload.value;\n\n// console.log({valubhchnve:msg.value})\n\n\n// let parsedData = msg.payload.value\n// console.log(\"dsfd\", parsedData)\nfor (let index = 0; index < data.length; index++) {\n    // console.log(\"dhvhsgav\",data[index])\n    node.send({payload:data[index]});\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 500,
        "wires": [
            [
                "6e310564c94954df"
            ]
        ]
    },
    {
        "id": "6e310564c94954df",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "Searching Attachment",
        "func": "const ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\n\nlet data = msg.payload;\nlet token=flow.get(\"token\");\nflow.set(\"msg\",data);\nlet userID = ENV_VARIABLES.OUTLOOK_USER_ID\n// msg.url = `https://graph.microsoft.com/v1.0/users/1870cd49-a831-4b52-ba5e-b680441f9f70/messages/${data.id}/attachments`\nmsg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages/${data.id}/attachments`\n\nmsg.method = \"GET\";\nmsg.headers = {\n    // \"Authorization\": `${token.access_token}`\n    \"Authorization\": `${token}`\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 500,
        "wires": [
            [
                "b7a40fff1ba56615"
            ]
        ]
    },
    {
        "id": "ddf94dcbdb27c29f",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "debug 304",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 500,
        "wires": []
    },
    {
        "id": "490a5249fd37c90c",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "function 174",
        "func": "let data=msg.payload;\nmsg.emailId = data.value[0].id\nmsg.payload = data.value[0].contentBytes.toString();\nlet userID = env.get(\"OUTLOOKUSERID\")\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 600,
        "wires": [
            [
                "a75aa3751c6d6719"
            ]
        ]
    },
    {
        "id": "a75aa3751c6d6719",
        "type": "base64",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 400,
        "y": 600,
        "wires": [
            [
                "9d21364ccac450e9"
            ]
        ]
    },
    {
        "id": "9d21364ccac450e9",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "read xls",
        "func": "let data = xlsx.read(msg.payload, { type: \"buffer\" })\nconst wsname = data.SheetNames[0];\nconst ws = data.Sheets[wsname];\nconst payload = xlsx.utils.sheet_to_json(ws);\nmsg.payload = payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "xlsx",
                "module": "xlsx"
            }
        ],
        "x": 580,
        "y": 600,
        "wires": [
            [
                "752b5363ecdd4d7d",
                "be632d80dce035fc"
            ]
        ]
    },
    {
        "id": "be632d80dce035fc",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "mapJsonFromXLSX",
        "func": "// console.log(\"agsdvghasvd\",msg.payload)\n// return\nconst bankDetails = flow.get('bankDetails') || {}\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n// msg.payload = msg.payload.splice(7,1)\n// return msg\nlet startIndex;\nfor (let i = 0; i < msg.payload.length - 1; i++) {\n    if (msg.payload[i][\"__EMPTY\"] === \"DEALER UTILIZATION REPORT\") {\n        startIndex = i;\n        break;\n    }\n\n};\nconsole.log({length:msg.payload.length,startIndex})\n\nlet filteredArr = []\nfor (let i = startIndex + 2; i < msg.payload.length; i++) {\n\n    let obj = {\n        \"SR NO.\": msg.payload[i][\"__EMPTY\"],\n        \"IM NAME\": msg.payload[i][\"__EMPTY_1\"],\n        \"DEALER NAME\": msg.payload[i]['__EMPTY_2'],\n        \"DEALER ACCOUNT NO.\": msg.payload[i][\"__EMPTY_3\"],\n        \"DEALER CODE\": msg.payload[i][\"__EMPTY_4\"],\n        \"SANCTION LIMIT\": msg.payload[i][\"__EMPTY_5\"],\n        \"DRAWING POWER\": msg.payload[i][\"__EMPTY_6\"],\n        \"LIMIT UTILIZED\": msg.payload[i][\"__EMPTY_7\"],\n        \"LIMIT AVAILABLE\": msg.payload[i][\"__EMPTY_8\"],\n        \"LIMIT EXPIRY DATE\": msg.payload[i][\"__EMPTY_9\"],\n        \"ADHOC SANCTION LIMIT\": msg.payload[i][\"__EMPTY_10\"],\n        \"ADHOC LIMIT UTILIZED\": msg.payload[i][\"__EMPTY_11\"],\n        \"ADHOC LIMIT AVAILABLE\": msg.payload[i][\"__EMPTY_12\"],\n        \"ADHOC EXPIRY DATE\": msg.payload[i][\"__EMPTY_13\"],\n        \"TOTAL LIMIT AVAILABLE\": msg.payload[i][\"__EMPTY_14\"],\n        \"ACCOUNT STATUS\": msg.payload[i][\"__EMPTY_15\"],\n        \"OVERDUE DAYS\": msg.payload[i][\"__EMPTY_16\"],\n        \"TOTAL OVERDUE AMOUNT\": msg.payload[i][\"__EMPTY_17\"],\n        \"BRANCH CODE\": msg.payload[i][\"__EMPTY_18\"],\n        \"SME CENTER\": msg.payload[i][\"__EMPTY_19\"]\n    }\n    \n    if(obj[\"DEALER CODE\"]){\n        // node.send({ payload: {},row:obj,isComplete:false });\n        // await sleep(1000)\n        filteredArr.push({ payload: {}, row: obj, isComplete: false })\n    }\n   \n}\n\nfor(let [key,row] of filteredArr.entries()){\n    node.send({\n        ...msg,\n        row: row.row,\n        isComplete: false,\n        isFileProcesCompleted: key == filteredArr.length-1?true: false\n    })\n    // await sleep(250)\n}\n\nawait sleep(filteredArr.length* 2000)\nmsg.isComplete = true\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 714,
        "wires": [
            [
                "3aec3290079ad86c"
            ]
        ]
    },
    {
        "id": "7904035913fdf65c",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "getAllBankApplicationReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY = env.get(\"BANK_PRODUCT_KEY\")\nconst businessPartnerId = msg.payload._id\nmsg.businessPartnerId = msg.payload._id\n\n// flow.set('bankProductConfigId', msg.payload.id)\nconst bankId = msg.bankId\n\n\nmsg.url = `${GO_URL}/bank-application?businessPartner=${businessPartnerId}&bankProductConfigKey=${BANK_PRODUCT_KEY}`\n// console.log(\"URL\",msg.url)\nmsg.method = 'GET'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 2320,
        "wires": [
            [
                "230b4b69f3a5010a"
            ]
        ]
    },
    {
        "id": "230b4b69f3a5010a",
        "type": "http request",
        "z": "58e110d7c2bbe19a",
        "name": "getAllBankApplication",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 500,
        "y": 2320,
        "wires": [
            [
                "03941bd2f8593542",
                "331c598d8ea31648"
            ]
        ]
    },
    {
        "id": "03941bd2f8593542",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "updateBankApplicationStatusReq",
        "func": "const GO_URL = env.get('GO_URL')\n\nconst token = flow.get(\"enterpriseToken\")\n\nmsg.url = `${GO_URL}/bank-application/decision/update`\nmsg.method = 'POST'\nmsg.headers = {}\nmsg.headers[\"Authorization\"] = `Bearer ${token}`\nmsg.payload = {\n    remarks: \"approved\",//msg.row[\"Reason For rejection\"], // actual message\n    // remarks: \"APPROVE\", // actual message\n    decision: {\n        label: \"approved\",//msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? \"Approve\" : \"Reject\",\n        value: \"approved\",//msg.row[\"Loan Approved (Y/N)\"] === 'Y' ? \"APPROVE\" : \"REJECT\",\n        // value: false ? \"APPROVE\" : \"REJECT\",\n        variableName: \"bankapprover_action\",\n        actionType: \"DECISION\",\n    },\n    bankApplicationId: msg.payload[0]._id || \"63fc9febc7d9bb697685ab4a\",\n    correctionItems: {\n        documentIds: [],\n    },\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 2420,
        "wires": [
            [
                "fb5939c5afd1c1b2"
            ]
        ]
    },
    {
        "id": "331c598d8ea31648",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "getAllBankApplications",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 2320,
        "wires": []
    },
    {
        "id": "fb5939c5afd1c1b2",
        "type": "http request",
        "z": "58e110d7c2bbe19a",
        "name": "updateBankApplicationStatus",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 570,
        "y": 2420,
        "wires": [
            [
                "61dd7c71d0984db5"
            ]
        ]
    },
    {
        "id": "61dd7c71d0984db5",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "createLoanTermReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst BANK_PRODUCT_KEY = env.get('BANK_PRODUCT_KEY')\nconst bankToken = flow.get(\"bankToken\")\n\n\nconst bankAccount = flow.get(\"bankAccount\") || {}\n\nconst bankDetails = flow.get('bankDetails') || {}\n// const businessPartnerId = flow.get('businessPartnerId')\nconst businessPartnerId = \"\"\n\n\nconst enterpriseID = msg.enterpriseId\nconst bankId = msg.bankId\n\nconst row = msg.row\n\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.headers = {\n        Authorization: `Bearer ${actyvToken}`,\n        bankid: msg.bankid\n}\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms`\nmsg.method = 'POST'\n\nmsg.payload = {\n        bankID: bankId,\n        borrowerID: businessPartnerId,\n        enterpriseID,\n        productType: \"BNPL\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 2420,
        "wires": [
            [
                "f85b0b1fb1b9ae9e"
            ]
        ]
    },
    {
        "id": "f85b0b1fb1b9ae9e",
        "type": "http request",
        "z": "58e110d7c2bbe19a",
        "name": "createLoanTerm",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 160,
        "y": 2520,
        "wires": [
            [
                "60385acb908b5e5a"
            ]
        ]
    },
    {
        "id": "60385acb908b5e5a",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "updateLoanTermReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst row = msg.row\n\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.headers = {\n        Authorization: `Bearer ${actyvToken}`,\n        \"x-actyv-api-config\":X_ACTYV_API_CONFIG_KEY,\n}\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/service/update`\nmsg.method = 'PATCH',\n\nmsg.payload = {\n        loanTermsID: msg.payload.id,\n        approvedLimit: msg.row[\"SANCTION LIMIT\"],\n        // loanAmount: row[\"Loan Accepted Amount\"],\n        loanAmount: 0,\n        crnNumber: row[\"DEALER ACCOUNT NO.\"],\n        validTill: msg.row[\"LIMIT EXPIRY DATE\"] ,\n        loanGrantStatus: \"APPROVED\",\n       \n}\n\nfunction calculateValidTill(inputDate){\n        let date = inputDate\n        let split = date.split(\"/\")\n        let addOneYear = Number(split[split.length - 1]) + 1\n        split[split.length - 1] = addOneYear\n        let joined = split.join('-')\n        return joined\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 2520,
        "wires": [
            [
                "97a6865c039defe1"
            ]
        ]
    },
    {
        "id": "97a6865c039defe1",
        "type": "http request",
        "z": "58e110d7c2bbe19a",
        "name": "updateLoanTerm",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 770,
        "y": 2520,
        "wires": [
            [
                "b30fb00bc40550be"
            ]
        ]
    },
    {
        "id": "b30fb00bc40550be",
        "type": "switch",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "property": "row[\"Loan Approved (Y/N)\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "N",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Y",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 110,
        "y": 2620,
        "wires": [
            [],
            [
                "4412b32cc685f2b8"
            ]
        ]
    },
    {
        "id": "4412b32cc685f2b8",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "createTernorAndRateSpreadReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\n\nconst bankAccount = flow.get(\"bankAccount\") || {}\nconst bankDetails = flow.get('bankDetails') || {}\nconst benchmarkRateID = flow.get(\"benchmarkRateID\") || \"\"\n\nconsole.log(\"benchmarkRateID\", benchmarkRateID)\n\nconst bankId = msg.bankId\n\nconst row = msg.row\n\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.headers = {\n        Authorization: `Bearer ${actyvToken}`,\n        bankid:bankId\n}\n\nmsg.url = `${PAYLATER_URL}/v1/tenor-and-rate-spread`\nmsg.method = 'POST'\nmsg.payload = {\n        bankID: bankId,\n        loanID: msg.payload.id,\n        fromDuration: \"P0D\",\n        benchmarkRateID: benchmarkRateID,\n        toDuration: \"P45D\",\n        loanProductID: \"BNPL\",\n        bankSpread: row[\"ROI\"],\n        actyvSpread: 1,\n        additionalCashbackCodes: []\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 2640,
        "wires": [
            [
                "10065b73f9d9074f"
            ]
        ]
    },
    {
        "id": "10065b73f9d9074f",
        "type": "http request",
        "z": "58e110d7c2bbe19a",
        "name": "createTenorAndRateSpread",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 760,
        "y": 2640,
        "wires": [
            [
                "f341fb982a076b6e"
            ]
        ]
    },
    {
        "id": "f341fb982a076b6e",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "createBusinessRelationship(D-B)Req",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst bankAccount = flow.get(\"bankAccount\") || {}\nconst bankDetails = flow.get('bankDetails') || {}\n\nconst {  bankAccountNo,\n        bankIfsc,\n        bankName, } = bankAccount\n\nconst enterpriseId = msg.enterpriseId\nconst bankId = msg.bankId\nconst businessPartnerId = flow.get('businessPartnerId') || \"\"\n\nconst row = msg.row\n\nmsg.url = `${GO_URL}/business-relationship/service`\nmsg.method = 'POST'\nmsg.headers = {};\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\nmsg.payload = {\n        businessId: businessPartnerId,\n        parentBusinessId: enterpriseId,\n        identifierByParent: row[\"Dealer Code\"],\n        bankAccountNumber: bankAccountNo,\n        bankIFSC: bankIfsc,\n        bankName: bankName,\n        relationType: \"DISTRIBUTOR-BANK\"\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 2740,
        "wires": [
            [
                "2b7a4402b57ca58d"
            ]
        ]
    },
    {
        "id": "2b7a4402b57ca58d",
        "type": "http request",
        "z": "58e110d7c2bbe19a",
        "name": "createBusinessRelationship(D-B)",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 700,
        "y": 2740,
        "wires": [
            []
        ]
    },
    {
        "id": "752b5363ecdd4d7d",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "xls to json",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 600,
        "wires": []
    },
    {
        "id": "e9b9e70af8f3d48b",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "get BP by Dealer code",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_PRODUCT_KEY = env.get(\"BANK_PRODUCT_KEY\")\nconst actyvToken = flow.get(\"actyvToken\")\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\")\nconst businessPartnerId = msg.payload._id\nmsg.businessPartnerId = msg.payload._id\nconst dealerCode = msg.row[\"DEALER CODE\"]\n// flow.set('bankProductConfigId', msg.payload.id)\nconst bankId = msg.bankId\n\n\nmsg.url = `${GO_URL}/business-relationship/getByIdentifierByParent/${dealerCode}`\n// console.log(\"URL\",msg.url)\nmsg.method = 'GET'\nmsg.headers = {\n    Authorization: `Bearer ${actyvToken}`,\n    \"x-actyv-api-config\": X_ACTYV_API_CONFIG_KEY,\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 2220,
        "wires": [
            [
                "8efffbbb6180b6e8"
            ]
        ]
    },
    {
        "id": "8efffbbb6180b6e8",
        "type": "http request",
        "z": "58e110d7c2bbe19a",
        "name": "get BP by Dealer code",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 500,
        "y": 2220,
        "wires": [
            [
                "8f2eedaf0b09c6bd",
                "7904035913fdf65c"
            ]
        ]
    },
    {
        "id": "8f2eedaf0b09c6bd",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "get BP by Dealer code",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 2220,
        "wires": []
    },
    {
        "id": "768781467d84d04e",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "getLoanTermByCrnReq",
        "func": "\nconst PAYLATER_URL = env.get('PAYLATER_URL');\nconst actyvToken = flow.get(\"actyToken\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/fetchByCrnNumber`;\nmsg.method = \"POST\";\nmsg.headers = {\n    Authorization : `Bearer ${actyvToken}`,\n    actyventityid: flow.get(\"actyvEntityId\")\n}\nmsg.crnNumber = msg.payload.identifierByParent\nmsg.payload = { \n    crnNumber: `${msg.row[\"DEALER CODE\"]}`\n    // crnNumber:\"SGFLTD101104\"\n    }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 820,
        "wires": [
            [
                "5f7bc3963ace71b2"
            ]
        ]
    },
    {
        "id": "32e164b43b538e4a",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "getLoanTermReq",
        "func": "msg.loanID = msg.payload.id\n// msg.loanID = \"1e035bf2-00b2-4ac3-80d6-2c405461a5e5\"\n\nconst PAYLATER_URL = env.get('PAYLATER_URL');\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/service/fetch`;\nmsg.method = \"POST\";\nmsg.headers = {\n    Authorization: `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\" : env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"actyventityid\": flow.get(\"actyvEntityId\")\n}\nmsg.payload = {\n    // crnNumber: msg.payload.identifierByParent\n    \"loanTermsID\": msg.loanID,\n    \"toMask\": false\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1034,
        "wires": [
            [
                "20cb1a7a87f650e3"
            ]
        ]
    },
    {
        "id": "41d36fea836cc51a",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "get loan term",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 1034,
        "wires": []
    },
    {
        "id": "e2076f4aa23eda49",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "get loan term id",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 820,
        "wires": []
    },
    {
        "id": "ab4fc70a19b44dff",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "validate Data against bank",
        "func": "let approvedLimitChanged = false;\nlet loanAmountChanged = false;\nconst dataMismatch = flow.get(\"dataMismatch\")\nif (+msg.payload[0].loanAmount !== msg.row[\"LIMIT UTILIZED\"]){\n    loanAmountChanged = true\n}\n\nif (+msg.payload[0].approvedLimit !== +msg.row[\"SANCTION LIMIT\"]){\napprovedLimitChanged = true\n}\nlet excemption\nif(approvedLimitChanged && loanAmountChanged){\nexcemption = {\n    approvedLimitChanged: true,\n    loanAmountChanged: true,\n    newApprovedLimit: +msg.row[\"SANCTION LIMIT\"],\n    newLoanAmount: msg.row[\"LIMIT UTILIZED\"],\n    oldApprovedLimit: +msg.payload[0].approvedLimit ,\n    oldLoanAmount: +msg.payload[0].loanAmount\n}\n}else if(approvedLimitChanged){\n    excemption = {\n        approvedLimitChanged: true,\n        loanAmountChanged: false,\n        newApprovedLimit: +msg.row[\"SANCTION LIMIT\"],\n        newLoanAmount: msg.row[\"LIMIT UTILIZED\"],\n        oldApprovedLimit: +msg.payload[0].approvedLimit,\n        oldLoanAmount: +msg.payload[0].loanAmount\n    }\n}else if(loanAmountChanged){\n    excemption = {\n        approvedLimitChanged: false,\n        loanAmountChanged: true,\n        newApprovedLimit: +msg.row[\"SANCTION LIMIT\"],\n        newLoanAmount: msg.row[\"LIMIT UTILIZED\"],\n        oldApprovedLimit: +msg.payload[0].approvedLimit,\n        oldLoanAmount: +msg.payload[0].loanAmount\n    }\n}\nif(excemption){\n    excemption.dealerCode = msg.row[\"DEALER CODE\"]\n    excemption.dealerName = msg.row[\"DEALER NAME\"]\n    msg.mismatchData = true\n    msg.excemption = excemption\n    dataMismatch.push(excemption)\n    flow.set(\"dataMismatch\",dataMismatch)\n    return msg\n}\nmsg.excemption = excemption\nmsg.mismatchData = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1134,
        "wires": [
            [
                "f011fb858dd78b4f",
                "2e451bcd73842751"
            ]
        ]
    },
    {
        "id": "f011fb858dd78b4f",
        "type": "switch",
        "z": "58e110d7c2bbe19a",
        "name": "Mismatch Data",
        "property": "mismatchData",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 220,
        "y": 1234,
        "wires": [
            [
                "2163a192fb7cf582"
            ],
            [
                "14bde1eba7a5ae1e"
            ]
        ]
    },
    {
        "id": "2163a192fb7cf582",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "No mismatch",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 1194,
        "wires": []
    },
    {
        "id": "14bde1eba7a5ae1e",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "updateLoanTermReq",
        "func": "\n// msg.loanID = \"1e035bf2-00b2-4ac3-80d6-2c405461a5e5\"\nconst { approvedLimitChanged, loanAmountChanged, newApprovedLimit,newLoanAmount} = msg.excemption\nconst PAYLATER_URL = env.get('PAYLATER_URL');\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/service/update`;\nmsg.method = \"PATCH\";\nmsg.headers = {\n    Authorization: `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\" : env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"actyventityid\": flow.get(\"actyvEntityId\")\n}\n\nmsg.payload = {}\nmsg.payload[\"loanTermsID\"] = msg.loanID\n\nif(approvedLimitChanged){\n   \n    msg.payload[\"approvedLimit\"] = newApprovedLimit\n}\n\nif(loanAmountChanged){\n    msg.payload[\"loanAmount\"] = newLoanAmount\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1334,
        "wires": [
            [
                "76bad9db67d9feee",
                "6897d8c5c1fbe470"
            ]
        ]
    },
    {
        "id": "83ee3024943c99f7",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "updateLoanTermReq",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 1334,
        "wires": []
    },
    {
        "id": "76bad9db67d9feee",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "updateLoanTerm",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 1294,
        "wires": []
    },
    {
        "id": "3aec3290079ad86c",
        "type": "switch",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 714,
        "wires": [
            [],
            [
                "9321259058ca947c",
                "768781467d84d04e"
            ]
        ]
    },
    {
        "id": "9321259058ca947c",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "Formated output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "row",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 734,
        "wires": []
    },
    {
        "id": "7025c2857ad9a772",
        "type": "switch",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "201",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "201",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 900,
        "wires": [
            [
                "8dd4d441b097a5e8"
            ],
            [
                "32e164b43b538e4a"
            ]
        ]
    },
    {
        "id": "8dd4d441b097a5e8",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "debug 423",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 874,
        "wires": []
    },
    {
        "id": "552c740ac3aaf64d",
        "type": "inject",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 60,
        "wires": [
            [
                "86572e061bcba84e"
            ]
        ]
    },
    {
        "id": "86572e061bcba84e",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "Setting Global Variables",
        "func": "\n\n/*----------------------------    QA  ---------------------------*/\n\nlet userID = env.get(\"OUTLOOKUSERID\")\n\nconst ENV_VARIABLES = {\n    \"ADMIN_EMAIL\": \"darkhorse@gmail.com\",\n    \"ADMIN_PASSWORD\": \"User@123\",\n    \"ACTYV_ENTITY_URL\": \"https://actyv1-platform.qa.actyv.com\",\n    \"ACTYV_ENTITY_KEY\": \"dark_horse\",\n    \"AXIS_READ_FOLDER_ID\": \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABT4dnQAAA=\",\n    \"AXIS_SUCCESS_FOLDER_ID\":\"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIwAAA=\",\n    \"AXIS_FAILURE_FOLDER_ID\":\"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIxAAA=\",\n    \"OUTLOOK_USER_ID\": userID\n}\n\nglobal.set(\"ENV_VARIABLES\", ENV_VARIABLES);\n\n// msg.payload = `${XLSX_FILE_PATH}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 60,
        "wires": [
            [
                "d68d3b232bfdf014"
            ]
        ]
    },
    {
        "id": "d68d3b232bfdf014",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "AuthenticateActyvUserReq",
        "func": "// const envVariables = global.get('envVariables')\nconst ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\nconst EMAIL = ENV_VARIABLES.ADMIN_EMAIL;\nconst PASSWORD = ENV_VARIABLES.ADMIN_PASSWORD\n\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 160,
        "wires": [
            [
                "19671b49cbe0c54a"
            ]
        ]
    },
    {
        "id": "857713a26fa62a06",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 160,
        "wires": [
            [
                "5525cd4a60bfc75a"
            ]
        ]
    },
    {
        "id": "19671b49cbe0c54a",
        "type": "subflow:0cbd918f05921aae",
        "z": "58e110d7c2bbe19a",
        "name": "AuthenticateActyvUser",
        "x": 520,
        "y": 160,
        "wires": [
            [
                "857713a26fa62a06"
            ]
        ]
    },
    {
        "id": "2e451bcd73842751",
        "type": "switch",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "property": "isFileProcesCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 1134,
        "wires": [
            [
                "ee6191f86fef6fbc",
                "ee518b85da8c3a6f"
            ]
        ]
    },
    {
        "id": "ee6191f86fef6fbc",
        "type": "delay",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 660,
        "y": 1134,
        "wires": [
            [
                "3b50d9437f0e4f13",
                "94ef83dedd2331d9"
            ]
        ]
    },
    {
        "id": "3b50d9437f0e4f13",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "setPayloadOfDataMismatch",
        "func": "msg.payload = flow.get(\"dataMismatch\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1134,
        "wires": [
            [
                "a49e4a2fe67e5d13"
            ]
        ]
    },
    {
        "id": "a49e4a2fe67e5d13",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "sendEmailReq",
        "func": "const ADMIN_URL = env.get(\"ADMIN_URL\");\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\");\n\nconst formatAmount = (amount) => {\n    return new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(+amount)\n}\n\nconst dataMismatch = msg.payload;\n// const date = moment().toISOString().split(\"T\")[0]\nconst date = new Date().toLocaleDateString();\nlet table = ``;\nfor (const data of dataMismatch) {\n    table += `\\n<tr>\n<td>${data.dealerName}</td>\n<td>${data.dealerCode}</td>\n<td>${formatAmount(data.oldLoanAmount)}</td>\n<td>${formatAmount(data.newLoanAmount)}</td>\n<td>${data.loanAmountChanged ? \"Y\" : \"N\"}</td>\n<td>${formatAmount(data.oldApprovedLimit)}</td>\n<td>${formatAmount(data.newApprovedLimit)}</td>\n<td>${data.approvedLimitChanged ? \"Y\" : \"N\"}</td>\n<tr/>`;\n}\nconsole.log({ table });\nmsg.url = `${ADMIN_URL}/api/user/sendemail`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n};\nmsg.method = \"POST\";\n\nmsg.payload = {\n    \"from\": \"ramu.bugudi@actyv.com\",\n    \"to\" : \"shravan.pm@actyv.com\",\n    subject: `Utilization Report Updates On - ${date}`,\n    html: `\n    <html>\n        <head>\n            <style>\n                table, th, td {\n                border: 1px solid #000000;\n                border-collapse: collapse;\n                padding: .5rem;\n                text-align: center\n                }\n            </style>\n        </head>\n        <body>\n           <table>\n                <tr>\n                    <th>Dealer Name</th>\n                    <th>Dealer Code</th>\n                    <th>Old Loan Amount</th>\n                    <th>New Loan Amount</th>\n                    <th>Loan Amount Changed</th>\n                    <th>Old Approved Limit</th>\n                    <th>New Approved Limit</th>\n                    <th>Approved Limit Changed</th>\n                </tr>\n                <tbody>\n                    ${table}\n                </tbody>\n           </table>\n        </body>\n    </html>`,\n    priority: \"low\",\n    attachments: [],\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1080,
        "y": 1134,
        "wires": [
            [
                "2bafd0186cebbb11"
            ]
        ]
    },
    {
        "id": "55b4f19d481ccdb2",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "email send",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 1134,
        "wires": []
    },
    {
        "id": "ee518b85da8c3a6f",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 1094,
        "wires": []
    },
    {
        "id": "1ef3df6b573d46f2",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "list down folders",
        "func": "let userID = env.get(\"OUTLOOKUSERID\")\nlet token = flow.get(\"token\");\nconst folderId =\"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABT4dnQAAA=\"\nconst failureFolderId = \"AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIxAAA=\"\nconst successFailureFolderId ='AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABq9RIwAAA='\nmsg.url = `https://graph.microsoft.com/v1.0/users/${userID}/mailFolders/${folderId}/childFolders`\nmsg.headers = {\n    // \"Authorization\": `${token.access_token}`\n    \"Authorization\": `${token}`\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 560,
        "wires": [
            [
                "aa3c6aa71b018cd5"
            ]
        ]
    },
    {
        "id": "5154c889a4725030",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "debug 471",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 560,
        "wires": []
    },
    {
        "id": "aa3c6aa71b018cd5",
        "type": "http request",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1150,
        "y": 560,
        "wires": [
            [
                "5154c889a4725030"
            ]
        ]
    },
    {
        "id": "94ef83dedd2331d9",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "moveEmail",
        "func": "let data = msg.payload;\nconst ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\nlet token=flow.get(\"token\");\nflow.set(\"msg\",data);\nlet userID = env.get(\"OUTLOOKUSERID\")\nconst emailId = msg.emailId\nconst successFolderId = ENV_VARIABLES.AXIS_SUCCESS_FOLDER_ID\nconst destinationFolderId = 'AAMkADI0ZDA4NDRjLTJiZTUtNDNhYi1hMjdhLWYxZTU5OTk1MGVjYQAuAAAAAABciA1DSjuZTIWvWP0Rjt6MAQCexDRA8fPORbf8g-S2zYR4AABT4dnQAAA='\n// msg.url = `https://graph.microsoft.com/v1.0/users/1870cd49-a831-4b52-ba5e-b680441f9f70/messages/${data.id}/attachments`\nmsg.url = `https://graph.microsoft.com/v1.0/users/${userID}/messages/${emailId}/move`\n\nmsg.method = \"POST\";\nmsg.headers = {\n    // \"Authorization\": `${token.access_token}`\n    \"Authorization\": `${token}`\n}\nmsg.payload={\n    destinationId: successFolderId\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1194,
        "wires": [
            [
                "ea5fe63f3d588221"
            ]
        ]
    },
    {
        "id": "b39d9d18942cb747",
        "type": "debug",
        "z": "58e110d7c2bbe19a",
        "name": "Mail moved to successfull",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 1194,
        "wires": []
    },
    {
        "id": "5525cd4a60bfc75a",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "getAllActyvUsers",
        "func": "\n\nconst GO_URL = env.get('GO_URL');\nconst BANK_KEY = env.get(\"BANK_KEY\")\n\nmsg.url = `${GO_URL}/actyv-entity`;\nmsg.method = \"GET\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 320,
        "wires": [
            [
                "2598f5e89b23d950"
            ]
        ]
    },
    {
        "id": "fb6a32ba1a59be19",
        "type": "function",
        "z": "58e110d7c2bbe19a",
        "name": "saveActyvId",
        "func": "// msg.bankId = msg.payload._id\nflow.set(\"dataMismatch\",[])\nconst ENV_VARIABLES = global.get(\"ENV_VARIABLES\")\nconst actyvKey = ENV_VARIABLES.ACTYV_ENTITY_KEY\nconst actyvEntity = msg.payload.filter((actyv)=>actyv.key === actyvKey)\nflow.set(\"actyvEntityId\", actyvEntity._id);\nmsg.actyvEntityId = actyvEntity._id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 320,
        "wires": [
            [
                "4285b3ad93f2d6ab"
            ]
        ]
    },
    {
        "id": "2598f5e89b23d950",
        "type": "subflow:0cbd918f05921aae",
        "z": "58e110d7c2bbe19a",
        "name": "getAllActyvUsers",
        "x": 470,
        "y": 320,
        "wires": [
            [
                "fb6a32ba1a59be19"
            ]
        ]
    },
    {
        "id": "fec9e3ea96fbd84d",
        "type": "subflow:0cbd918f05921aae",
        "z": "58e110d7c2bbe19a",
        "name": "getAllMessages",
        "x": 220,
        "y": 500,
        "wires": [
            [
                "fec68c4dc60abca5"
            ]
        ]
    },
    {
        "id": "b7a40fff1ba56615",
        "type": "subflow:0cbd918f05921aae",
        "z": "58e110d7c2bbe19a",
        "name": "",
        "x": 810,
        "y": 500,
        "wires": [
            [
                "ddf94dcbdb27c29f",
                "490a5249fd37c90c"
            ]
        ]
    },
    {
        "id": "5f7bc3963ace71b2",
        "type": "subflow:0cbd918f05921aae",
        "z": "58e110d7c2bbe19a",
        "name": "getLoanTermByCrn",
        "x": 530,
        "y": 820,
        "wires": [
            [
                "e2076f4aa23eda49",
                "7025c2857ad9a772"
            ]
        ]
    },
    {
        "id": "20cb1a7a87f650e3",
        "type": "subflow:0cbd918f05921aae",
        "z": "58e110d7c2bbe19a",
        "name": "getLoanTerm",
        "x": 510,
        "y": 1034,
        "wires": [
            [
                "41d36fea836cc51a",
                "ab4fc70a19b44dff"
            ]
        ]
    },
    {
        "id": "2bafd0186cebbb11",
        "type": "subflow:0cbd918f05921aae",
        "z": "58e110d7c2bbe19a",
        "name": "sendEmail",
        "x": 1270,
        "y": 1134,
        "wires": [
            [
                "55b4f19d481ccdb2"
            ]
        ]
    },
    {
        "id": "ea5fe63f3d588221",
        "type": "subflow:0cbd918f05921aae",
        "z": "58e110d7c2bbe19a",
        "name": "moveEmail",
        "x": 1050,
        "y": 1194,
        "wires": [
            [
                "b39d9d18942cb747"
            ]
        ]
    },
    {
        "id": "6897d8c5c1fbe470",
        "type": "subflow:0cbd918f05921aae",
        "z": "58e110d7c2bbe19a",
        "name": "updateLoanTermReq",
        "x": 540,
        "y": 1334,
        "wires": [
            [
                "83ee3024943c99f7"
            ]
        ]
    },
    {
        "id": "e0bf9d14259b9b06",
        "type": "inject",
        "z": "e546fa9119a2d093",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 227,
        "y": 59,
        "wires": [
            [
                "df8e198da0ebc60b"
            ]
        ]
    },
    {
        "id": "b09e2be75d66aaca",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Setting Payload For Fetching INITIATED Status Files",
        "func": "const actyvToken = flow.get(\"actyvToken\")\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/fileInfoBySeedingStatus/INITIATED`;\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"actyventityid\": msg.actyvEntityId\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'GET';\nmsg.logger = \"seeding files fetched in Initiated State\"\nmsg.loggerNewLine = true\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 500,
        "wires": [
            [
                "5dab9d89b353d4d2"
            ]
        ]
    },
    {
        "id": "498e5fbddfcc0b2e",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Looping and Segregating Files",
        "func": "const files = msg.payload.fileInfo.filter((file) => file.seedingType == \"GO_SEEDING\");\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nfor (const file of files.slice(0,1)) {\n    // if (file.seedingType == \"GO_SEEDING\" && file.fileName === \"Format_File_GO_Seeding (5) (2).xlsx\") {\n    if (file.seedingType == \"GO_SEEDING\") {\n        node.send({\n            ...file,\n            ...msg,\n            payload: file.fileId,\n            seedingType: file.seedingType,\n            isComplete: false,\n            logger : \"fileId for go seeding\"\n        })\n        sleep(200000)\n    }\n}\nmsg.isComplete= true\nmsg.logger = \"No file found for Go seeding\"\nreturn msg\n// ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 332,
        "y": 598,
        "wires": [
            [
                "cabd415e2637b5ed"
            ]
        ]
    },
    {
        "id": "1666bcf93e867d64",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\nflow.set(\"succeededRows\", [])\nflow.set(\"failedRows\", []) \n\nflow.set(\"succeeded_Create_BP\", [])\nflow.set(\"failed_Create_BP\", []) \n\nmsg.fileId = msg.payload\nconsole.log(msg.fileId);\nconsole.log(msg.seedingType);\nmsg.method = \"GET\"\nmsg.headers = {\n    fileType: \"xlsx\"\n}\nmsg.url = `${GO_URL}/file/read/${msg.fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 660,
        "wires": [
            [
                "ced4d6ce57f9f491"
            ]
        ]
    },
    {
        "id": "adc8c04ff63a117e",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "Fetch initiated files",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 500,
        "wires": []
    },
    {
        "id": "1c2d45d01b8c13e7",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "Read file",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 722,
        "y": 658,
        "wires": []
    },
    {
        "id": "a867f55c5fb80885",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "read xls",
        "func": "let data = xlsx.read(msg.payload, { type: \"buffer\" })\nconst wsname = data.SheetNames[0];\nconst ws = data.Sheets[wsname];\nconst payload = xlsx.utils.sheet_to_json(ws);\nmsg.seedingData = payload.filter((d) => d[\"Business Partner GST\"] !== undefined || d[\"Business Partner GST\"] !== null)\nmsg.completedSeeding = [],\nmsg.failedSeeding = []\nmsg.anchored = false;\nif(msg.enterpriseId){\n    msg.anchored = true\n}\nmsg.payload = payload\nmsg.numOfRows = msg.seedingData.length\n\nmsg.logger = \"read xlsx\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "xlsx",
                "module": "xlsx"
            }
        ],
        "x": 182,
        "y": 798,
        "wires": [
            [
                "be0589ce70e0a39f"
            ]
        ]
    },
    {
        "id": "c4db36834c14531e",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "xlsx to json",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "seedingData",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 492,
        "y": 798,
        "wires": []
    },
    {
        "id": "df8e198da0ebc60b",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst EMAIL = env.get('APL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 120,
        "wires": [
            [
                "0e6c83ba439c5028"
            ]
        ]
    },
    {
        "id": "2c554d1002c9b51f",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "saveEnterpriseToken",
        "func": "flow.set(\"enterpriseToken\",msg.payload.idToken)\n// console.log({enterpriseToken: msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 887,
        "y": 119,
        "wires": [
            [
                "8a45dda3fe26f2c9"
            ]
        ]
    },
    {
        "id": "8a45dda3fe26f2c9",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "AuthenticateBankUserReq",
        "func": "\nconst BANK_USER_EMAIL = env.get('MSL_BANK_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": PASSWORD,\n    \"email\": BANK_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 200,
        "wires": [
            [
                "aae9ce20174c5146"
            ]
        ]
    },
    {
        "id": "17c5e02652352e73",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "saveBankToken",
        "func": "flow.set(\"bankToken\",msg.payload.idToken)\n// console.log({bankToken: msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 200,
        "wires": [
            [
                "a5c4109a405840ce"
            ]
        ]
    },
    {
        "id": "599ddb5185b52d26",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "Authentication",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 807,
        "y": 59,
        "wires": []
    },
    {
        "id": "e3b0f924830058a9",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "checkAnchoredOrNot",
        "property": "anchored",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 222,
        "y": 1058,
        "wires": [
            [],
            [
                "327147837ffdd34d"
            ]
        ]
    },
    {
        "id": "1b088336f46fee88",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "fetchEnterpriseConfig",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 1160,
        "wires": []
    },
    {
        "id": "327147837ffdd34d",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "fetchEnterpriseConfig",
        "func": "const enterpriseToken = flow.get(\"enterpriseToken\")\nconst enterpriseId = msg.enterpriseId\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\")\n}\nmsg.url = `${env.get(\"GO_URL\")}/enterprise-seeding-config/${enterpriseId}`;\nmsg.method = 'GET';\nmsg.logger = `fetch enterprise config with enterprise id= #${enterpriseId}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 1160,
        "wires": [
            [
                "e8ccce1359042d37"
            ]
        ]
    },
    {
        "id": "d0e4a8cbb0bee82b",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "enterpriseConfigExistOrNot",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 242,
        "y": 1358,
        "wires": [
            [
                "52c0a8b0d6b49b52"
            ],
            [
                "49206254cc73a6dd"
            ]
        ]
    },
    {
        "id": "49206254cc73a6dd",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "checkEnterpriseConfig",
        "func": "const {\n    canCreateBusinessPartner = false,\n    canCreateBusinessPartnerUser = false,\n} = msg.payload.result;\nif (\n    [canCreateBusinessPartner, canCreateBusinessPartnerUser].includes(\n        true\n    )\n) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 202,
        "y": 1598,
        "wires": [
            [
                "1042ce34dbcca2df"
            ]
        ]
    },
    {
        "id": "1042ce34dbcca2df",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Loop",
        "func": "const sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nfor(let [key,row] of msg.seedingData.entries()){\n    node.send({\n        ...msg,\n        row,\n        isCompleted : false,\n        isFileProcessingCompleted: key == msg.seedingData.length-1? true:false\n    })\n    await sleep(500)\n}\nawait sleep(30000)\nmsg.isCompleted = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 472,
        "y": 1598,
        "wires": [
            [
                "fed9d667c968802e",
                "501ad3e1b1e1d2a6"
            ]
        ]
    },
    {
        "id": "f5d1d3106405c5fd",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "check number of rows",
        "property": "seedingData.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "100",
                "vt": "num"
            },
            {
                "t": "lte",
                "v": "100",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 222,
        "y": 878,
        "wires": [
            [
                "9436f57b7da1b1f5"
            ],
            [
                "189f21f856959645"
            ]
        ]
    },
    {
        "id": "501ad3e1b1e1d2a6",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "checkLoopCompletedOrNot",
        "property": "isCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 225,
        "y": 1702,
        "wires": [
            [],
            [
                "cfbd66f0387ad638",
                "a4a59a70594d2bdb"
            ]
        ]
    },
    {
        "id": "e94a5d2c9372c375",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "postBusinessPartner",
        "func": "const enterpriseToken = flow.get(\"enterpriseToken\")\n\nconst {row,enterpriseId} = msg\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${enterpriseToken}`\n}\nmsg.url = `${env.get(\"GO_URL\")}/business-partner`;\n// msg.url = `http://localhost:4003/api/business-partner`;\nmsg.method = 'POST';\n\nconst DEFAULT_PASSWORD = env.get(\"DEFAULT_PASSWORD\")\nconsole.log({DEFAULT_PASSWORD})\nmsg.payload = {\n    \n  \"gstin\": row[\"Business Partner GST\"],\n  \"businessName\": row[\"Business Partner Company Name\"],\n  \"applicantMobile\": row[\"Business Partner Phone\"].toString().includes[\"+91\"] ? row[\"Business Partner Phone\"].toString().replace(\"+91\",\"\") : `${row[\"Business Partner Phone\"]}`,\n  \"applicantEmail\": row[\"Business Partner Email\"],\n  \"password\": DEFAULT_PASSWORD,\n  \"inviteId\": \"\",\n  \"registerAsAnchor\": \"\",\n  \"firstName\": row[\"Primary User First Name\"], //?\n  \"lastName\": row[\"Primary User Last Name\"] || \".\", //?\n  \"isConsentAccepted\": true,\n  \"autoConfirmUser\": true,\n  \"origin\": \"seed\",\n  \"stateCode\": \"\" //?\n\n}\nmsg.logger = \"Post business partner\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 2180,
        "wires": [
            [
                "b8c9fd84adb2b23b"
            ]
        ]
    },
    {
        "id": "02563913595c8420",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "postBusinessPartner",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 2180,
        "wires": []
    },
    {
        "id": "7121a0935db5e1da",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "statusOfCreate_BP",
        "property": "payload.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "SUCCESS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 195,
        "y": 2262,
        "wires": [
            [
                "0e87bbbae3d39be8"
            ],
            [
                "5b57e25f459be7ee"
            ]
        ]
    },
    {
        "id": "cfbd66f0387ad638",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "debug 347",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 635,
        "y": 1702,
        "wires": []
    },
    {
        "id": "5b57e25f459be7ee",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "createEnterprise_BP_mapping",
        "func": "const enterpriseToken = flow.get(\"enterpriseToken\")\nconst succeededRows = flow.get(\"succeededRows\") ||[]\n\n\n\n\nconst {row,enterpriseId} = msg\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\")\n}\nmsg.url = `${env.get(\"GO_URL\")}/enterprise-partner-mapping/create`;\n\nmsg.completedSeeding.push({\n  businessPartnerId: msg.payload.businessPartnerId,\n  applicantEmail: msg.row[\"Business Partner Email\"]\n})\n\nsucceededRows.push({\n  businessPartnerId: msg.payload.businessPartnerId,\n  applicantEmail: msg.row[\"Business Partner Email\"]\n})\nflow.set(\"succeededRows\",succeededRows)\nflow.set(\"succeeded_Create_BP\", succeededRows)\nmsg.businessPartnerId = msg.payload.businessPartnerId\nmsg.method = 'POST';\nmsg.payload = {\n  enterpriseId,\n  businessPartnerId: msg.payload.businessPartnerId\n\n}\nmsg.logger = \"createEnterprise_BP_mapping\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 2340,
        "wires": [
            [
                "fbf5667c343c6d54"
            ]
        ]
    },
    {
        "id": "509751be8aeea77a",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "createEnterprise_BP_mapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 835,
        "y": 2282,
        "wires": []
    },
    {
        "id": "0b6bb8acb1f968ea",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 552,
        "y": 698,
        "wires": [
            [
                "ee24e8ec553f0aa3"
            ],
            [
                "a867f55c5fb80885"
            ]
        ]
    },
    {
        "id": "0e87bbbae3d39be8",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\n\n\n \n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if(failedRow.length === 0){\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         createBusinessPartnerFailed: `${msg.payload}`,\n   \n//     })\n// }else{\n//     failedRows.forEach((row) =>{\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"])\n//         {\n//            row.createBusinessPartnerFailed = `${msg.payload}`\n//         }\n        \n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: msg.row[\"Business Partner Email\"],\n    message: `${JSON.stringify(msg.payload)}`,\n\n})\n\n\n\nflow.set(\"failedRows\",failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 2242,
        "wires": [
            [
                "5fc9afe39c6f467e"
            ]
        ]
    },
    {
        "id": "1a9dbdc2bb2c9637",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 760,
        "y": 1160,
        "wires": [
            [
                "1b088336f46fee88",
                "d0e4a8cbb0bee82b"
            ]
        ]
    },
    {
        "id": "a1b92df428d60333",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 780,
        "y": 2180,
        "wires": [
            [
                "02563913595c8420"
            ]
        ]
    },
    {
        "id": "c907f40394b1f4a9",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 780,
        "y": 2340,
        "wires": [
            [
                "9a093fad6c8238e9"
            ]
        ]
    },
    {
        "id": "7ffa8402c9794289",
        "type": "inject",
        "z": "e546fa9119a2d093",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 4260,
        "wires": [
            [
                "dde8ceef453d0b0b"
            ]
        ]
    },
    {
        "id": "4a7147ea3a7dea6f",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "debug 348",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 4160,
        "wires": []
    },
    {
        "id": "fed9d667c968802e",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "debug 407",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "row",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 652,
        "y": 1538,
        "wires": []
    },
    {
        "id": "e5400f391d80fdd1",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 920,
        "y": 500,
        "wires": [
            [
                "adc8c04ff63a117e"
            ]
        ]
    },
    {
        "id": "dde8ceef453d0b0b",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Get business partner",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\nconst pan = \"09GXAPS2000A1ZC\"\n\nmsg.url = `${GO_URL}/business-partner/service/${pan}`;\nmsg.method = \"GET\"\nmsg.headers = {}\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 4160,
        "wires": [
            [
                "ffcaea250546173c"
            ]
        ]
    },
    {
        "id": "ffcaea250546173c",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "Get bp by pan",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 660,
        "y": 4160,
        "wires": [
            [
                "4a7147ea3a7dea6f"
            ]
        ]
    },
    {
        "id": "be0589ce70e0a39f",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 322,
        "y": 798,
        "wires": [
            [
                "c4db36834c14531e"
            ]
        ]
    },
    {
        "id": "cabd415e2637b5ed",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 592,
        "y": 598,
        "wires": [
            [
                "8b348c13ee890acf"
            ],
            [
                "1666bcf93e867d64"
            ]
        ]
    },
    {
        "id": "8b348c13ee890acf",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 782,
        "y": 578,
        "wires": [
            [
                "7a21faa3dbe8fe56"
            ]
        ]
    },
    {
        "id": "7a21faa3dbe8fe56",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "Files completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 942,
        "y": 578,
        "wires": []
    },
    {
        "id": "9436f57b7da1b1f5",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Logger",
        "func": "msg.logger = \"No of rows greater than 100 not processing the file\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 542,
        "y": 858,
        "wires": [
            [
                "a7b4b7f37f487762"
            ]
        ]
    },
    {
        "id": "a7b4b7f37f487762",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 702,
        "y": 858,
        "wires": [
            [
                "f3cfb2008f9d3d43",
                "1a888a31497d0c99"
            ]
        ]
    },
    {
        "id": "f3cfb2008f9d3d43",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "File is not processed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 882,
        "y": 858,
        "wires": []
    },
    {
        "id": "52c0a8b0d6b49b52",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Logger",
        "func": "msg.logger = \"Enterprise config is not exist for the user so the file is not processed\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 502,
        "y": 1318,
        "wires": [
            [
                "de9e5fb279d04080"
            ]
        ]
    },
    {
        "id": "de9e5fb279d04080",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 662,
        "y": 1318,
        "wires": [
            [
                "83c042c231109a0f",
                "edc53a96bd8511df"
            ]
        ]
    },
    {
        "id": "83c042c231109a0f",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "No enterprise config",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 842,
        "y": 1318,
        "wires": []
    },
    {
        "id": "189f21f856959645",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Logger",
        "func": "msg.logger = `file processing started for #${msg.seedingData.length} rows`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 182,
        "y": 958,
        "wires": [
            [
                "b363553936fedc11"
            ]
        ]
    },
    {
        "id": "b363553936fedc11",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 402,
        "y": 958,
        "wires": [
            [
                "e3b0f924830058a9"
            ]
        ]
    },
    {
        "id": "e82a8a7a2d3508a9",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "getEnterpriseReq",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get('X_ACTYV_API_CONFIG_KEY')\n\nconst BUSINESS_UNIQUE_IDENTIFIER = env.get(\"APL_BUSINESS_UNIQUE_IDENTIFIER\")\nconst BUSINESS_TYPE = \"ENTERPRISE\"\nmsg.headers = {}\nmsg.method = \"GET\"\nconst token = flow.get(\"ent_token\") || \"\"\nmsg.url = `${PAYLATER_URL}/v1/business/service/getByIdentifier/${BUSINESS_UNIQUE_IDENTIFIER}/${BUSINESS_TYPE}`;\nmsg.headers[\"x-actyv-api-config-key\"] = X_ACTYV_API_CONFIG_KEY\n// msg.headers[\"Authorization\"] = `Bearer ${token}`\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 3780,
        "wires": [
            [
                "0dd4938bf7689bd2"
            ]
        ]
    },
    {
        "id": "0dd4938bf7689bd2",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "getEnterprise",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 330,
        "y": 3780,
        "wires": [
            [
                "233413f10345bae4"
            ]
        ]
    },
    {
        "id": "233413f10345bae4",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Save Enterprise ID",
        "func": "const enterpriseId = msg.payload?.id\n\nmsg.enterpriseID = enterpriseId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 3780,
        "wires": [
            [
                "6d8db7b9ed6d541f"
            ]
        ]
    },
    {
        "id": "7c155cb9d8e9d185",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Get business partner",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nmsg.url = `${GO_URL}/business-partner/service/${msg.row[\"Business Partner GST\"]}`;\nmsg.method = \"GET\"\nmsg.headers = {}\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n}\nmsg.logger = `Get business partner by gst #${msg.row[\"Business Partner GST\"]}`\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 4020,
        "wires": [
            [
                "4101ee709037eb1e",
                "bc27f7fce469169d"
            ]
        ]
    },
    {
        "id": "4101ee709037eb1e",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "Get bp by pan",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 440,
        "y": 4020,
        "wires": [
            [
                "d8e919b509ed612d"
            ]
        ]
    },
    {
        "id": "bc27f7fce469169d",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "debug 416",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 3940,
        "wires": []
    },
    {
        "id": "d8e919b509ed612d",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 600,
        "y": 4020,
        "wires": [
            [
                "eaead67be5d2f72d"
            ]
        ]
    },
    {
        "id": "eaead67be5d2f72d",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 4020,
        "wires": [
            [
                "e7508477f52e4037",
                "aa65224710aaa0d3"
            ],
            []
        ]
    },
    {
        "id": "e7508477f52e4037",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "Business partner not found",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 3960,
        "wires": []
    },
    {
        "id": "36e576e9e99482da",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Get business relation with erpId",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\nconst businessPartnerId = msg.payload?._id\nmsg.businessPartnerId = businessPartnerId\nmsg.url = `${GO_URL}/business-relationship/service/getByIdentifierByParent/${msg.row[\"Business Partner Customer No\"]}`;\nmsg.method = \"GET\"\nmsg.headers = {}\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n}\nmsg.logger = `Get business relation with erpId #${msg.row[\"Business Partner Customer No\"]}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 4080,
        "wires": [
            [
                "0e24bcd44d3bab09"
            ]
        ]
    },
    {
        "id": "0e24bcd44d3bab09",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "Get business relation with erpId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1070,
        "y": 4080,
        "wires": [
            [
                "af9e22de4ac90763"
            ]
        ]
    },
    {
        "id": "c93ebd1cd71806bb",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Format sales summary",
        "func": "\n\nconst salesSummary = []\nconst {businessPartnerId,enterpriseId} = msg\nfor(let key in msg.row){\n    if (key.includes(\"Transaction History\")){\n        let monthSplit = key.split(\"M\")\n        \n        let month = monthSplit[monthSplit.length-1]\n        if (msg.row[key]){\n            salesSummary.push(\n                {\n                    \"businessPartner\": businessPartnerId,\n                    \"enterprise\": enterpriseId,\n                    \"year\": +getMonthAndYear(month).split(\"-\")[0],\n                    \"month\": +getMonthAndYear(month).split(\"-\")[1],\n                    \"totalSalesAmount\": msg.row[key],\n                    \"totalSalesProjected\": msg.row[key]\n                }\n            )\n        }\n        \n    }\n}\n// msg.payload = salesSummary\nconsole.log({ \"Format sales summary\": salesSummary })\nfunction getMonthAndYear(month){\n    let date = moment().subtract(Number(month), 'months').format()\n    date = date.split(\"T\")[0]\n    console.log({date})\n    return date\n}\nfor (let [key, req] of salesSummary.entries()){\n    node.send({\n        ...msg,\n        req,\n        isComplete : false,\n        salesSummaryLoopCompleted: key == salesSummary.length - 1 ? true : false\n    })\n    console.log({req})\n}\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 465,
        "y": 2742,
        "wires": [
            [
                "cec75a724542f516"
            ]
        ]
    },
    {
        "id": "af9e22de4ac90763",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 1340,
        "y": 4080,
        "wires": [
            [
                "119119782615650e"
            ]
        ]
    },
    {
        "id": "42dad922a8fed910",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Create business relation with erpId",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nmsg.url = `${GO_URL}/business-relationship/service`;\nmsg.method = \"POST\"\nmsg.headers = {}\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n}\nconst {businessPartnerId,enterpriseId} = msg\n\nmsg.payload = {\n    \"businessId\": businessPartnerId,\n    \"parentBusinessId\": enterpriseId,\n    \"identifierByParent\": msg.row[\"Business Partner Customer No\"],\n    \"bankAccountNumber\": msg.row[\"Business Partner Account with Enterprise\"],\n    \"bankIFSC\": msg.row[\"Business Partner Bank IFSC with Enterprise\"],\n    \"bankName\": msg.row[\"Business Partner Bank Name with Enterprise\"],\n    \"relationType\": checkRelationType(msg.row[\"Business Partner Type\"]) \n}\nmsg.logger = `Create business relation with erpId #${msg.row[\"Business Partner Customer No\"]}`\n\n\nfunction checkRelationType(str){\n    if(str.toLowerCase() === \"distributor\"){\n        return \"DISTRIBUTOR-ENTERPRISE\"\n    } else if (str.toLowerCase() === \"vendor\"){\n        return \"VENDOR-ENTERPRISE\"\n    }\n    return \"\"\n}\nconsole.log(msg.payload)\nreturn msg\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 2460,
        "wires": [
            [
                "8d5d7e440ead7214"
            ]
        ]
    },
    {
        "id": "119119782615650e",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "get relation",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 4080,
        "wires": []
    },
    {
        "id": "1bc6a3d7eba9831c",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "Create business relation with erpId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 700,
        "y": 2540,
        "wires": [
            [
                "a2733fbd8e2dd18d"
            ]
        ]
    },
    {
        "id": "ba79a0f7aa57f99c",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "post business-partner-sales-summary",
        "func": "const GO_URL = env.get(\"GO_URL\")\n\nmsg.url = `${GO_URL}/business-partner-sales-summary`,\nmsg.method = \"POST\"\nmsg.payload = msg.req\nmsg.logger = `post business-partner-sales-summary with ${JSON.stringify(msg.payload)}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 515,
        "y": 2822,
        "wires": [
            [
                "f6ced56630d1966a"
            ]
        ]
    },
    {
        "id": "a2733fbd8e2dd18d",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 960,
        "y": 2540,
        "wires": [
            [
                "f831ac6f4bfb51c5",
                "f35c87837e4d8efb"
            ]
        ]
    },
    {
        "id": "f6ced56630d1966a",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "post business-partner-sales-summary",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 855,
        "y": 2822,
        "wires": [
            [
                "b5134d35c3c9bac7",
                "2e8fde7bdbbfe9d6"
            ]
        ]
    },
    {
        "id": "f831ac6f4bfb51c5",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "Create business relation with erpId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 2540,
        "wires": []
    },
    {
        "id": "b5134d35c3c9bac7",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 1145,
        "y": 2822,
        "wires": [
            [
                "26fc90d2a2b8fffb"
            ]
        ]
    },
    {
        "id": "26fc90d2a2b8fffb",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "post business-partner-sales-summary",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1415,
        "y": 2822,
        "wires": []
    },
    {
        "id": "8d5d7e440ead7214",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 460,
        "y": 2540,
        "wires": [
            [
                "1bc6a3d7eba9831c"
            ]
        ]
    },
    {
        "id": "220ce3a1ae37f47a",
        "type": "inject",
        "z": "e546fa9119a2d093",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 380,
        "y": 4320,
        "wires": [
            [
                "a8181fcf70f51691"
            ]
        ]
    },
    {
        "id": "a8181fcf70f51691",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "function 189",
        "func": "let arr = [\"Bengelaru\", \"Chennai\",\"Mumbai\",\"Guragaon\"]\n\nfor(const [key,city] of arr.entries()){\n    node.send({\n        key,city,\n        isComplete : key=== arr.length-1?true:false\n    })\n}\n\n\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 4320,
        "wires": [
            [
                "21fd6b6121ab709c"
            ]
        ]
    },
    {
        "id": "21fd6b6121ab709c",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "debug 427",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 4320,
        "wires": []
    },
    {
        "id": "6d8db7b9ed6d541f",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "getSgflBankReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_KEY = \"msl\"///env.get(\"\")\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank/key/${BANK_KEY}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 3860,
        "wires": [
            [
                "9167e551222d279b"
            ]
        ]
    },
    {
        "id": "9167e551222d279b",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "getAxisBankReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 370,
        "y": 3860,
        "wires": [
            [
                "cb428e107cf99699"
            ]
        ]
    },
    {
        "id": "cb428e107cf99699",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "function 192",
        "func": "msg.bankID = msg.payload._id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 3860,
        "wires": [
            []
        ]
    },
    {
        "id": "9a093fad6c8238e9",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "",
        "property": "payload._id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 930,
        "y": 2340,
        "wires": [
            [
                "b763ee9676185203"
            ],
            [
                "42dad922a8fed910"
            ]
        ]
    },
    {
        "id": "b763ee9676185203",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\n\n\n\n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if (failedRow.length === 0) {\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         \"createBusinessPartner-enterpriseMappingFailed\": `${msg.payload}`,\n\n//     })\n// } else {\n//     failedRows.forEach((row) => {\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"]) {\n//             row[\"createBusinessPartner-enterpriseMappingFailed\"] = `${msg.payload}`\n//         }\n\n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: msg.row[\"Business Partner Email\"],\n    \"message\": `${JSON.stringify(msg.payload)}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 2280,
        "wires": [
            [
                "bd27ebac7d0cddf6"
            ]
        ]
    },
    {
        "id": "cec75a724542f516",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            },
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 657,
        "y": 2740,
        "wires": [
            [
                "b281852bb7129630"
            ],
            [
                "ba79a0f7aa57f99c"
            ],
            []
        ]
    },
    {
        "id": "aa65224710aaa0d3",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\n\n\n\nlet failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\nif (failedRow.length === 0) {\n    failedRows.push({\n        applicantEmail: msg.row[\"Business Partner Email\"],\n        \"businessPartnerNotFound\": `${msg.payload}`,\n\n    })\n} else {\n    failedRows.forEach((row) => {\n        if (row.applicantEmail === msg.row[\"Business Partner Email\"]) {\n            row[\"businessPartnerNotFound\"] = `${msg.payload}`\n        }\n\n    })\n}\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 4000,
        "wires": [
            [
                "b3f5d80f963bf20f"
            ]
        ]
    },
    {
        "id": "feeee019e3d9fb44",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "updateStatus of file processing",
        "func": "const actyvToken = flow.get(\"actyvToken\")\n// const fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/changeStatus/${msg.fileId}`;\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/update/${msg.fileId}`;\nconst failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"actyventityid\": msg.actyvEntityId\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'PATCH';\nmsg.payload = {\n    \"fileId\": msg.fileId,\n    \"seedingStatus\": msg.numOfRows !== failedRows.length ? \"COMPLETED\" : msg.numOfRows == failedRows.length ? \"FAILED\" : \"PARTIALLY_COMPLETED\",\n    \"numOfRows\": msg.numOfRows,\n    \"successRows\": msg.numOfRows - failedRows.length,\n    \"failedRows\": failedRows.length\n}\n\n\nmsg.logger = { seedingStatusCount: { succeededRows, failedRows, success: succeededRows.length, failed: failedRows.length } }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1532,
        "y": 3938,
        "wires": [
            [
                "b88954b93c2de8a7"
            ]
        ]
    },
    {
        "id": "bd27ebac7d0cddf6",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 1287,
        "y": 2280,
        "wires": [
            [
                "26b2085abfe8c55b"
            ]
        ]
    },
    {
        "id": "b3fa911cea1b353b",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2090,
        "y": 1920,
        "wires": [
            [
                "c17feab6db29c7c0"
            ]
        ]
    },
    {
        "id": "c17feab6db29c7c0",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Logger",
        "func": "msg.logger = \"Updated file status to completed\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2300,
        "y": 1920,
        "wires": [
            [
                "439959cf506185ac"
            ]
        ]
    },
    {
        "id": "439959cf506185ac",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 2440,
        "y": 1920,
        "wires": [
            [
                "e7df2ef3681e792c"
            ]
        ]
    },
    {
        "id": "e7df2ef3681e792c",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2670,
        "y": 1920,
        "wires": []
    },
    {
        "id": "3ef8e2dd5515c8ed",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1990,
        "y": 2920,
        "wires": [
            [
                "53abdbebda81ac98"
            ]
        ]
    },
    {
        "id": "53abdbebda81ac98",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Logger",
        "func": "msg.logger = \"Updated file status to completed\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2200,
        "y": 2920,
        "wires": [
            [
                "3a57a3aa69ecc982"
            ]
        ]
    },
    {
        "id": "3a57a3aa69ecc982",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 2380,
        "y": 2920,
        "wires": [
            [
                "28231be0b600b15d"
            ]
        ]
    },
    {
        "id": "28231be0b600b15d",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2630,
        "y": 2920,
        "wires": []
    },
    {
        "id": "b281852bb7129630",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "seedingData",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 2720,
        "wires": []
    },
    {
        "id": "f209650a71f7f0ef",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "func": "const bankToken = flow.get(\"bankToken\")\n// const fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/changeStatus/${msg.fileId}`;\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/update/${msg.fileId}`;\nconst failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\") \n\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${bankToken}`,\n    \"bankid\": msg.bankID\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'PATCH';\nmsg.payload = {\n    \"fileId\": msg.fileId,\n    \"seedingStatus\": \"COMPLETED\",\n    \"numOfRows\": msg.numOfRows,\n    \"successRows\": succeededRows.length,\n    \"failedRows\": failedRows.length\n}\n\n\nmsg.logger = {seedingStatusCount: {succeededRows,failedRows,success:succeededRows.length,failed:failedRows.length}}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1920,
        "wires": [
            [
                "b3fa911cea1b353b"
            ]
        ]
    },
    {
        "id": "6b60ba1b4c9edef4",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "func": "const actyvToken = flow.get(\"actyvToken\")\n// const fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/changeStatus/${msg.fileId}`;\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/update/${msg.fileId}`;\nconst failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\") \n\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"actyventityid\": msg.actyvEntityId\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'PATCH';\nmsg.payload = {\n    \"fileId\": msg.fileId,\n    \"seedingStatus\": msg.numOfRows == failedRows.length ? \"FAILED\" : failedRows.length == 0  ?\"COMPLETED\":\"PARTIALLY_COMPLETED\",\n    \"numOfRows\": msg.numOfRows,\n    \"successRows\": msg.numOfRows - failedRows.length,\n    \"failedRows\": failedRows.length\n}\n\n\nmsg.logger = {seedingStatusCount: {succeededRows,failedRows,success:succeededRows.length,failed:failedRows.length}}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 2920,
        "wires": [
            [
                "3ef8e2dd5515c8ed"
            ]
        ]
    },
    {
        "id": "de96671cb0857770",
        "type": "function",
        "z": "e546fa9119a2d093",
        "d": true,
        "name": "Loop and Sleep",
        "func": "\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\n// msg.salesData = msg.seedingData\n// console.log(msg.seedingData,'kjdfls')\nlet seedingData = msg.seedingData\nfor (let i = 0; i < seedingData.length; i++) {\n        await sleep(500)\n        if(Object.keys(seedingData[i]).length){\n        node.send({...msg, payload: seedingData[i],salesData : [seedingData[i]] });\n        }\n    }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 4520,
        "wires": [
            [
                "120cfd898a43e17d"
            ]
        ]
    },
    {
        "id": "120cfd898a43e17d",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Get business partner",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nmsg.url = `${GO_URL}/business-partner/service/${msg.salesData[0][\"Business Partner GST\"]}`;\nmsg.method = \"GET\"\nmsg.headers = {}\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n}\nmsg.logger = `Get business partner by gst #${msg.salesData[0][\"Business Partner GST\"]}`\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 4520,
        "wires": [
            [
                "3b1aa4102347b362",
                "12aca68f64af0a91"
            ]
        ]
    },
    {
        "id": "3b1aa4102347b362",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "Get bp by pan",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 840,
        "y": 4520,
        "wires": [
            [
                "65394c7a455ae444"
            ]
        ]
    },
    {
        "id": "12aca68f64af0a91",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "debug 411",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 4440,
        "wires": []
    },
    {
        "id": "65394c7a455ae444",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 1000,
        "y": 4520,
        "wires": [
            [
                "1d2ebbc9cf692aa5"
            ]
        ]
    },
    {
        "id": "1d2ebbc9cf692aa5",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 4520,
        "wires": [
            [
                "834fd772948beb57"
            ],
            [
                "142b6316d02f21f8"
            ]
        ]
    },
    {
        "id": "834fd772948beb57",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "Business partner not found",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 4500,
        "wires": []
    },
    {
        "id": "142b6316d02f21f8",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Get business relation with erpId",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\nconst businessPartnerId = msg.payload?._id\nmsg.businessPartnerId = businessPartnerId\nmsg.url = `${GO_URL}/business-relationship/service/getByIdentifierByParent/${msg.salesData[0][\"Business Partner Customer No\"]}`;\nmsg.method = \"GET\"\nmsg.headers = {}\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n}\nmsg.logger = `Get business relation with erpId #${msg.salesData[0][\"Business Partner Customer No\"]}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 4600,
        "wires": [
            [
                "1bfa5ae67d4e8467"
            ]
        ]
    },
    {
        "id": "1bfa5ae67d4e8467",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "Get business relation with erpId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1510,
        "y": 4600,
        "wires": [
            [
                "83bac5a1692aa711",
                "73499fc124e9cea6",
                "bb63bd634bb32f19"
            ]
        ]
    },
    {
        "id": "83bac5a1692aa711",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1670,
        "y": 4520,
        "wires": [
            [
                "f81cabd698e2e5f3"
            ]
        ]
    },
    {
        "id": "73499fc124e9cea6",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Format sales summary",
        "func": "\n\nconst salesSummary = []\nconst {businessPartnerId,enterpriseId} = msg\nfor(let key in msg.salesData[0]){\n    if (key.includes(\"Transaction History\")){\n        let monthSplit = key.split(\"M\")\n        \n        let month = monthSplit[monthSplit.length-1]\n        if (msg.salesData[0][key]){\n            salesSummary.push(\n                {\n                    \"businessPartner\": businessPartnerId,\n                    \"enterprise\": enterpriseId,\n                    \"year\": +getMonthAndYear(month).split(\"-\")[0],\n                    \"month\": +getMonthAndYear(month).split(\"-\")[1],\n                    \"totalSalesAmount\": msg.salesData[0][key],\n                    \"totalSalesProjected\": msg.salesData[0][key]\n                }\n            )\n        }\n        \n    }\n}\n// msg.payload = salesSummary\nconsole.log({ \"Format sales summary\": salesSummary })\nfunction getMonthAndYear(month){\n    let date = moment().subtract(Number(month), 'months').format()\n    date = date.split(\"T\")[0]\n    console.log({date})\n    return date\n}\nfor(let req of salesSummary){\n    node.send({\n        ...msg,\n        req,\n        isComplete : false\n    })\n}\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 1160,
        "y": 4700,
        "wires": [
            [
                "3d862e366e0bcb2e"
            ]
        ]
    },
    {
        "id": "bb63bd634bb32f19",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 1780,
        "y": 4600,
        "wires": [
            [
                "3f89918e1167c802"
            ]
        ]
    },
    {
        "id": "f81cabd698e2e5f3",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Create business relation with erpId",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nmsg.url = `${GO_URL}/business-relationship/service`;\nmsg.method = \"POST\"\nmsg.headers = {}\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n}\nconst {businessPartnerId,enterpriseId} = msg\n\nmsg.payload = {\n    \"businessId\": businessPartnerId,\n    \"parentBusinessId\": enterpriseId,\n    \"identifierByParent\": msg.salesData[0][\"Business Partner Customer No\"],\n    \"bankAccountNumber\": msg.salesData[0][\"Business Partner Account with Enterprise\"],\n    \"bankIFSC\": msg.salesData[0][\"Business Partner Bank IFSC with Enterprise\"],\n    \"bankName\": msg.salesData[0][\"Business Partner Bank Name with Enterprise\"],\n    \"relationType\": \"DISTRIBUTOR-ENTERPRISE\"\n}\nmsg.logger = `Create business relation with erpId #${msg.salesData[0][\"Business Partner Customer No\"]}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 4440,
        "wires": [
            [
                "9b2603c901d0a6b2"
            ]
        ]
    },
    {
        "id": "3d862e366e0bcb2e",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1350,
        "y": 4700,
        "wires": [
            [
                "b174f9bbf2c4b925"
            ],
            [
                "881dfda74828e229"
            ]
        ]
    },
    {
        "id": "3f89918e1167c802",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "get relation",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 4600,
        "wires": []
    },
    {
        "id": "9b2603c901d0a6b2",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "Create business relation with erpId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1840,
        "y": 4440,
        "wires": [
            [
                "7a97fdefccf49618"
            ]
        ]
    },
    {
        "id": "b174f9bbf2c4b925",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "seedingData",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 4700,
        "wires": []
    },
    {
        "id": "881dfda74828e229",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "post business-partner-sales-summary",
        "func": "const GO_URL = env.get(\"GO_URL\")\n\nmsg.url = `${GO_URL}/business-partner-sales-summary`,\nmsg.method = \"POST\"\nmsg.payload = msg.req\nmsg.logger = `post business-partner-sales-summary with ${JSON.stringify(msg.payload)}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 4780,
        "wires": [
            [
                "4fc05c6668415810"
            ]
        ]
    },
    {
        "id": "7a97fdefccf49618",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 2080,
        "y": 4440,
        "wires": [
            [
                "a3ce92b0a4074d00"
            ]
        ]
    },
    {
        "id": "4fc05c6668415810",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "post business-partner-sales-summary",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1550,
        "y": 4780,
        "wires": [
            [
                "c6bc085f0665d15e"
            ]
        ]
    },
    {
        "id": "a3ce92b0a4074d00",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "Create business relation with erpId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2320,
        "y": 4440,
        "wires": []
    },
    {
        "id": "c6bc085f0665d15e",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 1840,
        "y": 4780,
        "wires": [
            [
                "bfc3c35a4a9f4d55"
            ]
        ]
    },
    {
        "id": "bfc3c35a4a9f4d55",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "post business-partner-sales-summary",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2110,
        "y": 4780,
        "wires": []
    },
    {
        "id": "b88954b93c2de8a7",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1852,
        "y": 3938,
        "wires": [
            [
                "9e35d690d7a694e1"
            ]
        ]
    },
    {
        "id": "9e35d690d7a694e1",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Logger",
        "func": "msg.logger = \"Updated file status to completed\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2062,
        "y": 3938,
        "wires": [
            [
                "084061371a64b1fd"
            ]
        ]
    },
    {
        "id": "084061371a64b1fd",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 2202,
        "y": 3938,
        "wires": [
            [
                "523da3d90bf20b72"
            ]
        ]
    },
    {
        "id": "523da3d90bf20b72",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2432,
        "y": 3938,
        "wires": []
    },
    {
        "id": "b3f5d80f963bf20f",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "fileProcessingCompleted?",
        "property": "isFileProcessingCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1242,
        "y": 3938,
        "wires": [
            [
                "feeee019e3d9fb44"
            ]
        ]
    },
    {
        "id": "b7a15878468b5deb",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "fileProcessingCompleted?",
        "property": "isFileProcessingCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1240,
        "y": 2920,
        "wires": [
            [
                "a42a36a180c145b3"
            ]
        ]
    },
    {
        "id": "174f9a2dafa9eb18",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "fileProcessingCompleted?",
        "property": "isFileProcessingCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1480,
        "y": 1920,
        "wires": [
            [
                "f209650a71f7f0ef"
            ]
        ]
    },
    {
        "id": "2e8fde7bdbbfe9d6",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "salesSummaryLoopCompleted?",
        "property": "salesSummaryLoopCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 957,
        "y": 2920,
        "wires": [
            [
                "b7a15878468b5deb"
            ]
        ]
    },
    {
        "id": "a5c4109a405840ce",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "AuthenticateActyvEntity",
        "func": "\nconst EMAIL = env.get('ACTYV_ADMIN_EMAIL')\nconst PASSWORD = env.get('DEFAULT_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 280,
        "wires": [
            [
                "3387d3186bf87414"
            ]
        ]
    },
    {
        "id": "ba4d0133e1e41285",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Getting Actyv User",
        "func": "const EMAIL = env.get(\"SGFL_EXXARO_BP_EMAIL\");\nconst PASSWORD = env.get(\"PASSWORD\");\nconst ADMIN_URL = env.get('ADMIN_URL');\nconst ACTYV_ENTITY_URL = env.get('ACTYV_ENTITY_URL')\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow.get(\"actyvToken\")}`,\n}\n\nmsg.url = `${ADMIN_URL}/api/user/getCurrentUser?url=${ACTYV_ENTITY_URL}`;\nmsg.method = \"GET\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 360,
        "wires": [
            [
                "7698b8fdc8e0f3d3",
                "7b6fb8cdc27d66b6"
            ]
        ]
    },
    {
        "id": "cc0ac189d4ca5ef0",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "save actyv_entity_id",
        "func": "flow.set(\"actyv_bp_id\", msg.payload.actyvEntityId);\nmsg.actyvEntityId = msg.payload.actyvEntityId\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 360,
        "wires": [
            [
                "b09e2be75d66aaca"
            ]
        ]
    },
    {
        "id": "be1d25612c6c470a",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\nconsole.log({actyvToken: msg.payload.idToken})\n// console.log({bankToken: msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 280,
        "wires": [
            [
                "ba4d0133e1e41285"
            ]
        ]
    },
    {
        "id": "a4a59a70594d2bdb",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "checkValidations",
        "func": "let transactionHistorys = [\n    \"Transaction History M1\",\n    \"Transaction History M2\",\n    \"Transaction History M3\",\n    \"Transaction History M4\",\n    \"Transaction History M5\",\n    \"Transaction History M6\",\n    \"Transaction History M7\",\n    \"Transaction History M8\",\n    \"Transaction History M9\",\n    \"Transaction History M10\",\n    \"Transaction History M11\",\n    \"Transaction History M12\",\n];\n\nfunction checkAllMandatoryFieldsPresentOrNot(row) {\n    if (\n        +row[\"Transaction History M1\"] >= 0 &&\n        +row[\"Transaction History M2\"] >= 0 &&\n        +row[\"Transaction History M3\"] >= 0 &&\n        +row[\"Transaction History M4\"] >= 0 &&\n        +row[\"Transaction History M5\"] >= 0 &&\n        +row[\"Transaction History M6\"] >= 0 &&\n        row[\"Business Partner Customer No\"] &&\n        row[\"Primary User First Name\"] &&\n        row[\"Primary User Last Name\"] &&\n        row[\"Business Partner Company Name\"] &&\n        validatePan(row[\"Business Partner PAN\"]) &&\n        validateGst(row[\"Business Partner GST\"]) &&\n        validatePhone(row[\"Business Partner Phone\"]) &&\n        validateEmail(row[\"Business Partner Email\"]) &&\n        row[\"Business Partner City\"] &&\n        validateDistributorType(row[\"Business Partner Type\"]) &&\n        row[\"Business Partner Account with Enterprise\"] &&\n        row[\"Business Partner Bank Name with Enterprise\"] &&\n        row[\"Business Partner Bank IFSC with Enterprise\"]\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n\n//Check email\nfunction validateEmail(email) {\n    const emailPattern = /^([a-zA-Z0-9._%+-]+)@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})$/;\n\n    if (emailPattern.test(email)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n//Check phone number\nfunction validatePhone(phone) {\n    phone = phone.toString();\n    const phoneNumber = phone.length === 10 ? phone : phone.slice(3, 13);\n    const phoneNumberPattern = /^[1-9]\\d{9}$/;\n\n    if (phoneNumberPattern.test(phoneNumber)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction validateDistributorType(type) {\n    if (type.toLowerCase() === \"distributor\" || type.toLowerCase() === \"vendor\") {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction validatePan(pan) {\n    const panPattern = /^([A-Z]{5}[0-9]{4}[A-Z]{1})$/;\n\n    if (panPattern.test(pan)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction validateGst(pan) {\n    const gstinPattern =\n        /^([0-9]{2}[a-zA-Z]{5}[0-9]{4}[a-zA-Z]{1}[1-9A-Za-z]{1}Z[0-9A-Za-z]{1})$/;\n\n    if (gstinPattern.test(pan)) {\n        return true;\n    } else {\n        return false;\n    }\n}\nlet checkAllMandatoryFieldPresent = checkAllMandatoryFieldsPresentOrNot(\n    msg.row\n);\n\nconsole.log(checkAllMandatoryFieldPresent);\nmsg.primaryChecks = false\n\nif(checkAllMandatoryFieldPresent){\n    msg.primaryChecks = true\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 195,
        "y": 1822,
        "wires": [
            [
                "ee9c32aed97e889a"
            ]
        ]
    },
    {
        "id": "ee9c32aed97e889a",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "primaryChecks",
        "property": "primaryChecks",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 445,
        "y": 1822,
        "wires": [
            [
                "93014ee47c8222b6"
            ],
            [
                "4166510eb1e4c048"
            ]
        ]
    },
    {
        "id": "b0a56869d9cbd4c8",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "fileProcessingCompleted?",
        "property": "isFileProcessingCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 900,
        "y": 1780,
        "wires": [
            [
                "5e7cecf4f0f9bfc4"
            ]
        ]
    },
    {
        "id": "92f2e37160cb4933",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "updateStatus of file processing",
        "func": "const actyvToken = flow.get(\"actyvToken\")\n// const fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/changeStatus/${msg.fileId}`;\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/update/${msg.fileId}`;\nconst failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"actyventityid\": msg.actyvEntityId\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'PATCH';\nmsg.payload = {\n    \"fileId\": msg.fileId,\n    \"seedingStatus\": msg.numOfRows == failedRows.length ? \"FAILED\" : failedRows.length == 0 ? \"COMPLETED\" : \"PARTIALLY_COMPLETED\",\n    \"numOfRows\": msg.numOfRows,\n    \"successRows\": msg.numOfRows - failedRows.length,\n    \"failedRows\": failedRows.length\n}\n\n\nmsg.logger = { seedingStatusCount: { succeededRows, failedRows, success: succeededRows.length, failed: failedRows.length } }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 1780,
        "wires": [
            [
                "3fa34986bb33a0bf"
            ]
        ]
    },
    {
        "id": "46272e4d3d66b648",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1830,
        "y": 1780,
        "wires": [
            [
                "786483640162ac65"
            ]
        ]
    },
    {
        "id": "786483640162ac65",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Logger",
        "func": "msg.logger = \"Updated file status to completed\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 1780,
        "wires": [
            [
                "7dbfa60244859bd1"
            ]
        ]
    },
    {
        "id": "7dbfa60244859bd1",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 2200,
        "y": 1780,
        "wires": [
            [
                "0baa3bb1df970075"
            ]
        ]
    },
    {
        "id": "0baa3bb1df970075",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 1780,
        "wires": []
    },
    {
        "id": "4166510eb1e4c048",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Get business relation with erpId",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\nconst businessPartnerId = msg.payload?._id\nmsg.businessPartnerId = businessPartnerId\nmsg.url = `${GO_URL}/business-relationship/service/getByIdentifierByParent/${msg.row[\"Business Partner Customer No\"]}`;\nmsg.method = \"GET\"\nmsg.headers = {}\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n}\nmsg.logger = `Get business relation with erpId #${msg.row[\"Business Partner Customer No\"]}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1920,
        "wires": [
            [
                "0d1215242c4d8d4b"
            ]
        ]
    },
    {
        "id": "15e66f026a034d17",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 820,
        "y": 1920,
        "wires": [
            [
                "593ac4854c4e5d40",
                "c31b5dbbbe04f7fd"
            ]
        ]
    },
    {
        "id": "593ac4854c4e5d40",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "get relation",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1035,
        "y": 1922,
        "wires": []
    },
    {
        "id": "c31b5dbbbe04f7fd",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 175,
        "y": 2042,
        "wires": [
            [
                "b7cb83f6c29d9116"
            ],
            [
                "e94a5d2c9372c375"
            ]
        ]
    },
    {
        "id": "b7cb83f6c29d9116",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\n\n\n\n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if (failedRow.length === 0) {\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         \"msg\": `Dealer code already exist`,\n\n//     })\n// } else {\n//     failedRows.forEach((row) => {\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"]) {\n//             row[\"msg\"] = `Dealer code already exist`\n//         }\n\n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: msg.row[\"Business Partner Email\"],\n    \"message\": `Dealer code already exist`,\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 415,
        "y": 2022,
        "wires": [
            [
                "53efd96fa6840d43"
            ]
        ]
    },
    {
        "id": "53efd96fa6840d43",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "fileProcessingCompleted?",
        "property": "isFileProcessingCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 665,
        "y": 2022,
        "wires": [
            [
                "ac62d4b2042f5ff1"
            ]
        ]
    },
    {
        "id": "1f325c146b210f0c",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "updateStatus of file processing",
        "func": "const actyvToken = flow.get(\"actyvToken\")\n// const fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/changeStatus/${msg.fileId}`;\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/update/${msg.fileId}`;\nconst failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"actyventityid\": msg.actyvEntityId\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'PATCH';\nmsg.payload = {\n    \"fileId\": msg.fileId,\n    \"seedingStatus\": msg.numOfRows == failedRows.length ? \"FAILED\" : failedRows.length == 0 ? \"COMPLETED\" : \"PARTIALLY_COMPLETED\",\n    \"numOfRows\": msg.numOfRows,\n    \"successRows\": msg.numOfRows - failedRows.length,\n    \"failedRows\": failedRows.length\n}\n\n\nmsg.logger = { seedingStatusCount: { succeededRows, failedRows, success: succeededRows.length, failed: failedRows.length } }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 2020,
        "wires": [
            [
                "05f1242293bf223b"
            ]
        ]
    },
    {
        "id": "05f1242293bf223b",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1390,
        "y": 2020,
        "wires": [
            [
                "55aa1ded1e5dfe8f"
            ]
        ]
    },
    {
        "id": "55aa1ded1e5dfe8f",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Logger",
        "func": "msg.logger = \"Updated file status to completed\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 2020,
        "wires": [
            [
                "ff3fb02d262c4fa0"
            ]
        ]
    },
    {
        "id": "ff3fb02d262c4fa0",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 1740,
        "y": 2020,
        "wires": [
            [
                "80ae4a8a64a27563"
            ]
        ]
    },
    {
        "id": "80ae4a8a64a27563",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1950,
        "y": 2020,
        "wires": []
    },
    {
        "id": "9fab704b79d471cb",
        "type": "function",
        "z": "e546fa9119a2d093",
        "d": true,
        "name": "update file Status to completed",
        "func": "const bankToken = flow.get(\"bankToken\")\n// const fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/changeStatus/${msg.fileId}`;\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/update/${msg.fileId}`;\nconst failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\") \n\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${bankToken}`,\n    \"bankid\": msg.bankID\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'PATCH';\nmsg.payload = {\n    \"fileId\": msg.fileId,\n    \"seedingStatus\": msg.numOfRows !== failedRows.length ? \"COMPLETED\" : msg.numOfRows == failedRows.length ? \"FAILED\" : \"PARTIALLY_COMPLETED\",\n    \"numOfRows\": msg.numOfRows,\n    \"successRows\": msg.numOfRows - failedRows.length,\n    \"failedRows\": failedRows.length\n}\n\n\nmsg.logger = {seedingStatusCount: {succeededRows,failedRows,success:succeededRows.length,failed:failedRows.length}}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 4940,
        "wires": [
            [
                "9c574d7deeba922d",
                "42b39b5cbd464d78"
            ]
        ]
    },
    {
        "id": "9c574d7deeba922d",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 500,
        "y": 4940,
        "wires": [
            [
                "55825cd28702f7c9"
            ]
        ]
    },
    {
        "id": "42b39b5cbd464d78",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "debug 414",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 4880,
        "wires": []
    },
    {
        "id": "55825cd28702f7c9",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 4940,
        "wires": [
            [
                "b19c864afe243719"
            ]
        ]
    },
    {
        "id": "b19c864afe243719",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Logger",
        "func": "msg.logger = \"Updated file status to completed\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 4940,
        "wires": [
            [
                "e6964c6727f182b2"
            ]
        ]
    },
    {
        "id": "e6964c6727f182b2",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 1080,
        "y": 4940,
        "wires": [
            [
                "d6413646c5225d9c"
            ]
        ]
    },
    {
        "id": "d6413646c5225d9c",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 4940,
        "wires": []
    },
    {
        "id": "5fc9afe39c6f467e",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "fileProcessingCompleted?",
        "property": "isFileProcessingCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 880,
        "y": 2240,
        "wires": [
            [
                "e061666e668d4bc2"
            ]
        ]
    },
    {
        "id": "ce76140f4088b885",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "func": "const actyvToken = flow.get(\"actyvToken\")\n// const fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/changeStatus/${msg.fileId}`;\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/update/${msg.fileId}`;\nconst failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"actyventityid\": msg.actyvEntityId\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'PATCH';\nmsg.payload = {\n    \"fileId\": msg.fileId,\n    \"seedingStatus\": msg.numOfRows == failedRows.length ? \"FAILED\" : failedRows.length == 0 ? \"COMPLETED\" : \"PARTIALLY_COMPLETED\",\n    \"numOfRows\": msg.numOfRows,\n    \"successRows\": msg.numOfRows - failedRows.length,\n    \"failedRows\": failedRows.length\n}\n\n\nmsg.logger = { seedingStatusCount: { succeededRows, failedRows, success: succeededRows.length, failed: failedRows.length } }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 2240,
        "wires": [
            [
                "72a4a5503cb01477"
            ]
        ]
    },
    {
        "id": "72a4a5503cb01477",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1650,
        "y": 2240,
        "wires": [
            [
                "ed0bbb69fad56c0b"
            ]
        ]
    },
    {
        "id": "ed0bbb69fad56c0b",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Logger",
        "func": "msg.logger = \"Updated file status to completed\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 2240,
        "wires": [
            [
                "2b1323726edea507"
            ]
        ]
    },
    {
        "id": "2b1323726edea507",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 2060,
        "y": 2240,
        "wires": [
            [
                "11e814a73b5bc56a"
            ]
        ]
    },
    {
        "id": "11e814a73b5bc56a",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2290,
        "y": 2240,
        "wires": []
    },
    {
        "id": "26b2085abfe8c55b",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "fileProcessingCompleted?",
        "property": "isFileProcessingCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1240,
        "y": 2360,
        "wires": [
            [
                "b693977a7206a995"
            ]
        ]
    },
    {
        "id": "44b988dc7383f322",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "func": "const actyvToken = flow.get(\"actyvToken\")\n// const fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/changeStatus/${msg.fileId}`;\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/update/${msg.fileId}`;\nconst failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"actyventityid\": msg.actyvEntityId\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'PATCH';\nmsg.payload = {\n    \"fileId\": msg.fileId,\n    \"seedingStatus\": msg.numOfRows == failedRows.length ? \"FAILED\" : failedRows.length == 0 ? \"COMPLETED\" : \"PARTIALLY_COMPLETED\",\n    \"numOfRows\": msg.numOfRows,\n    \"successRows\": msg.numOfRows - failedRows.length,\n    \"failedRows\": failedRows.length\n}\n\n\nmsg.logger = { seedingStatusCount: { succeededRows, failedRows, success: succeededRows.length, failed: failedRows.length } }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 2360,
        "wires": [
            [
                "70d7119c9e2908aa"
            ]
        ]
    },
    {
        "id": "70d7119c9e2908aa",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2050,
        "y": 2360,
        "wires": [
            [
                "3f32ce3a2fdd5882"
            ]
        ]
    },
    {
        "id": "3f32ce3a2fdd5882",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Logger",
        "func": "msg.logger = \"Updated file status to completed\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2280,
        "y": 2360,
        "wires": [
            [
                "97bb2be4a558319f"
            ]
        ]
    },
    {
        "id": "97bb2be4a558319f",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 2460,
        "y": 2360,
        "wires": [
            [
                "93b738c6840d59b6"
            ]
        ]
    },
    {
        "id": "93b738c6840d59b6",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2750,
        "y": 2360,
        "wires": []
    },
    {
        "id": "f35c87837e4d8efb",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "",
        "property": "payload.businessRelationship._id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 2640,
        "wires": [
            [
                "f82b2de283dd02a8"
            ],
            [
                "c93ebd1cd71806bb",
                "bf26df96d33b9db4"
            ]
        ]
    },
    {
        "id": "14c62cd44c7438e0",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "fileProcessingCompleted?",
        "property": "isFileProcessingCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1060,
        "y": 2620,
        "wires": [
            [
                "68ecf7dd9463d9de"
            ]
        ]
    },
    {
        "id": "0c8472e1c2754138",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "func": "const actyvToken = flow.get(\"actyvToken\")\n// const fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/changeStatus/${msg.fileId}`;\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/update/${msg.fileId}`;\nconst failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"actyventityid\": msg.actyvEntityId\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'PATCH';\nmsg.payload = {\n    \"fileId\": msg.fileId,\n    \"seedingStatus\": msg.numOfRows == failedRows.length ? \"FAILED\" : failedRows.length == 0 ? \"COMPLETED\" : \"PARTIALLY_COMPLETED\",\n    \"numOfRows\": msg.numOfRows,\n    \"successRows\": msg.numOfRows - failedRows.length,\n    \"failedRows\": failedRows.length\n}\n\n\nmsg.logger = { seedingStatusCount: { succeededRows, failedRows, success: succeededRows.length, failed: failedRows.length } }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 2620,
        "wires": [
            [
                "04997395592591cc"
            ]
        ]
    },
    {
        "id": "04997395592591cc",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1790,
        "y": 2620,
        "wires": [
            [
                "69bfab826ce6ba31"
            ]
        ]
    },
    {
        "id": "69bfab826ce6ba31",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Logger",
        "func": "msg.logger = \"Updated file status to completed\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 2620,
        "wires": [
            [
                "7e18767096187f3e"
            ]
        ]
    },
    {
        "id": "7e18767096187f3e",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 2200,
        "y": 2620,
        "wires": [
            [
                "0dd37fa650b39b69"
            ]
        ]
    },
    {
        "id": "0dd37fa650b39b69",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2430,
        "y": 2620,
        "wires": []
    },
    {
        "id": "f82b2de283dd02a8",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\n\n\n \n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if(failedRow.length === 0){\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         createRelationshipFailed: `${msg.payload}`,\n   \n//     })\n// }else{\n//     failedRows.forEach((row) =>{\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"])\n//         {\n//            row.createRelationshipFailed = `${msg.payload}`\n//         }\n        \n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: msg.row[\"Business Partner Email\"],\n    message: `${JSON.stringify(msg.payload)}`,\n\n})\n\n\n\nflow.set(\"failedRows\",failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 2620,
        "wires": [
            [
                "14c62cd44c7438e0"
            ]
        ]
    },
    {
        "id": "7ecc4277f27f4582",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst EMAIL = env.get('APL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 3260,
        "wires": [
            [
                "dc581c7f53f25e0e"
            ]
        ]
    },
    {
        "id": "dc581c7f53f25e0e",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "AuthenticateEnterpriseUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 560,
        "y": 3260,
        "wires": [
            [
                "5c3ce43ffed679c8"
            ]
        ]
    },
    {
        "id": "d59732377e31ef0c",
        "type": "inject",
        "z": "e546fa9119a2d093",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 209,
        "y": 3197,
        "wires": [
            [
                "7ecc4277f27f4582"
            ]
        ]
    },
    {
        "id": "ea1385f36dff4eb7",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "debug 439",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 170,
        "y": 3360,
        "wires": []
    },
    {
        "id": "5c3ce43ffed679c8",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "",
        "property": "payload.email",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 350,
        "y": 3320,
        "wires": [
            [
                "ea1385f36dff4eb7"
            ]
        ]
    },
    {
        "id": "bf26df96d33b9db4",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "switch",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 2680,
        "wires": []
    },
    {
        "id": "edc53a96bd8511df",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\n\n\n\n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if (failedRow.length === 0) {\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         \"businessPartnerNotFound\": `${msg.payload}`,\n\n//     })\n// } else {\n//     failedRows.forEach((row) => {\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"]) {\n//             row[\"businessPartnerNotFound\"] = `${msg.payload}`\n//         }\n\n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: \"ALL\",\n    message : `Enterprise config not present for enterprise`\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1380,
        "wires": [
            [
                "aa371e31c94ba768"
            ]
        ]
    },
    {
        "id": "aa371e31c94ba768",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "fileProcessingCompleted?",
        "property": "isFileProcessingCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 960,
        "y": 1380,
        "wires": [
            [
                "df318a7241d5d249"
            ]
        ]
    },
    {
        "id": "f54573c8e07c6db4",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "updateStatus of file processing",
        "func": "const actyvToken = flow.get(\"actyvToken\")\n// const fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/changeStatus/${msg.fileId}`;\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/update/${msg.fileId}`;\nconst failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"actyventityid\": msg.actyvEntityId\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'PATCH';\nmsg.payload = {\n    \"fileId\": msg.fileId,\n    \"seedingStatus\": \"FAILED\", \n    \"numOfRows\": msg.numOfRows,\n    \"successRows\": msg.numOfRows - failedRows.length,\n    \"failedRows\": failedRows.length\n}\n\n\nmsg.logger = { seedingStatusCount: { succeededRows, failedRows, success: succeededRows.length, failed: failedRows.length } }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 1380,
        "wires": [
            [
                "cc5c94ac308d8e87"
            ]
        ]
    },
    {
        "id": "cc5c94ac308d8e87",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1710,
        "y": 1380,
        "wires": [
            [
                "4753eb2465459322"
            ]
        ]
    },
    {
        "id": "4753eb2465459322",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Logger",
        "func": "msg.logger = \"Updated file status to completed\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 1380,
        "wires": [
            [
                "82597cb8f6ad61f9"
            ]
        ]
    },
    {
        "id": "82597cb8f6ad61f9",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 2080,
        "y": 1380,
        "wires": [
            [
                "e845e82c02017205"
            ]
        ]
    },
    {
        "id": "e845e82c02017205",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2290,
        "y": 1380,
        "wires": []
    },
    {
        "id": "3fa34986bb33a0bf",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 1600,
        "y": 1780,
        "wires": [
            [
                "46272e4d3d66b648"
            ]
        ]
    },
    {
        "id": "1a888a31497d0c99",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\n\n\n\n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if (failedRow.length === 0) {\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         \"businessPartnerNotFound\": `${msg.payload}`,\n\n//     })\n// } else {\n//     failedRows.forEach((row) => {\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"]) {\n//             row[\"businessPartnerNotFound\"] = `${msg.payload}`\n//         }\n\n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: \"ALL\",\n    message: `Limit exceeded for file processing`\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 940,
        "wires": [
            [
                "a6694226e665343d"
            ]
        ]
    },
    {
        "id": "a6694226e665343d",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "fileProcessingCompleted?",
        "property": "isFileProcessingCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 860,
        "y": 940,
        "wires": [
            [
                "084455f820cf5507"
            ]
        ]
    },
    {
        "id": "b5e15e8337dac8e3",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "updateStatus of file processing",
        "func": "const actyvToken = flow.get(\"actyvToken\")\n// const fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/changeStatus/${msg.fileId}`;\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/update/${msg.fileId}`;\nconst failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"actyventityid\": msg.actyvEntityId\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'PATCH';\nmsg.payload = {\n    \"fileId\": msg.fileId,\n    \"seedingStatus\": msg.numOfRows == failedRows.length ? \"FAILED\" : failedRows.length == 0 ? \"COMPLETED\" : \"PARTIALLY_COMPLETED\",\n    \"numOfRows\": msg.numOfRows,\n    \"successRows\": msg.numOfRows - failedRows.length,\n    \"failedRows\": failedRows.length\n}\n\n\nmsg.logger = { seedingStatusCount: { succeededRows, failedRows, success: succeededRows.length, failed: failedRows.length } }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 940,
        "wires": [
            [
                "79cc8a2e36e6d6ad"
            ]
        ]
    },
    {
        "id": "79cc8a2e36e6d6ad",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1610,
        "y": 940,
        "wires": [
            [
                "6454b2105f41ae05"
            ]
        ]
    },
    {
        "id": "6454b2105f41ae05",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Logger",
        "func": "msg.logger = \"Updated file status to completed\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 940,
        "wires": [
            [
                "64d549aa79fe9558"
            ]
        ]
    },
    {
        "id": "64d549aa79fe9558",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 2000,
        "y": 940,
        "wires": [
            [
                "4a05326d52ba24df"
            ]
        ]
    },
    {
        "id": "4a05326d52ba24df",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2230,
        "y": 940,
        "wires": []
    },
    {
        "id": "ee24e8ec553f0aa3",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\n\n\n\n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if (failedRow.length === 0) {\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         \"businessPartnerNotFound\": `${msg.payload}`,\n\n//     })\n// } else {\n//     failedRows.forEach((row) => {\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"]) {\n//             row[\"businessPartnerNotFound\"] = `${msg.payload}`\n//         }\n\n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: \"ALL\",\n    message: `File processing failed, couldn't read file`\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 700,
        "wires": [
            [
                "f3b245b871163b01"
            ]
        ]
    },
    {
        "id": "f3b245b871163b01",
        "type": "switch",
        "z": "e546fa9119a2d093",
        "name": "fileProcessingCompleted?",
        "property": "isFileProcessingCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1020,
        "y": 700,
        "wires": [
            [
                "0e53f9d7198686d9"
            ]
        ]
    },
    {
        "id": "0965b85087176baa",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "updateStatus of file processing",
        "func": "const actyvToken = flow.get(\"actyvToken\")\n// const fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/changeStatus/${msg.fileId}`;\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/update/${msg.fileId}`;\nconst failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"actyventityid\": msg.actyvEntityId\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'PATCH';\nmsg.payload = {\n    \"fileId\": msg.fileId,\n    \"seedingStatus\": msg.numOfRows == failedRows.length ? \"FAILED\" : failedRows.length == 0 ? \"COMPLETED\" : \"PARTIALLY_COMPLETED\",\n    \"numOfRows\": msg.numOfRows,\n    \"successRows\": msg.numOfRows - failedRows.length,\n    \"failedRows\": failedRows.length\n}\n\n\nmsg.logger = { seedingStatusCount: { succeededRows, failedRows, success: succeededRows.length, failed: failedRows.length } }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 700,
        "wires": [
            [
                "9cf96b80181c5b2c"
            ]
        ]
    },
    {
        "id": "9cf96b80181c5b2c",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1770,
        "y": 700,
        "wires": [
            [
                "1c01395f2612adb1"
            ]
        ]
    },
    {
        "id": "1c01395f2612adb1",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "Logger",
        "func": "msg.logger = \"Updated file status to completed\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 700,
        "wires": [
            [
                "db06281c459b867a"
            ]
        ]
    },
    {
        "id": "db06281c459b867a",
        "type": "subflow:951a533bb3498fe6",
        "z": "e546fa9119a2d093",
        "name": "",
        "x": 2160,
        "y": 700,
        "wires": [
            [
                "2acc7c0de1daf372"
            ]
        ]
    },
    {
        "id": "2acc7c0de1daf372",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2390,
        "y": 700,
        "wires": []
    },
    {
        "id": "93014ee47c8222b6",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\n\n\n\n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if (failedRow.length === 0) {\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         \"businessPartnerNotFound\": `${msg.payload}`,\n\n//     })\n// } else {\n//     failedRows.forEach((row) => {\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"]) {\n//             row[\"businessPartnerNotFound\"] = `${msg.payload}`\n//         }\n\n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: msg.row[\"Business Partner Email\"],\n    message: `Primary check for the row failed`\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1780,
        "wires": [
            [
                "b0a56869d9cbd4c8"
            ]
        ]
    },
    {
        "id": "5e7cecf4f0f9bfc4",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "create xlsx",
        "func": "const failedRows = flow.get(\"failedRows\")\nlet seedingData = msg.seedingData\n\nfailedRows.forEach((failedRow) => {\n    seedingData.forEach((row) => {\n        if (failedRow.applicantEmail == row[\"Business Partner Email\"]) {\n            row[\"remarks\"] = JSON.stringify(failedRow[\"message\"])\n        }\n    })\n})\n\nseedingData.forEach((row) => {\n    if (!row.remarks) {\n        row.remarks = \"Success\"\n    }\n})\nconsole.log({ seedingData })\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 1780,
        "wires": [
            [
                "92f2e37160cb4933"
            ]
        ]
    },
    {
        "id": "ac62d4b2042f5ff1",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "create xlsx",
        "func": "const failedRows = flow.get(\"failedRows\")\nlet seedingData = msg.seedingData\n\nfailedRows.forEach((failedRow) => {\n    seedingData.forEach((row) => {\n        if (failedRow.applicantEmail == row[\"Business Partner Email\"]) {\n            row[\"remarks\"] = JSON.stringify(failedRow[\"message\"])\n        }\n    })\n})\n\nseedingData.forEach((row) => {\n    if (!row.remarks) {\n        row.remarks = \"Success\"\n    }\n})\nconsole.log({ seedingData })\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 2020,
        "wires": [
            [
                "1f325c146b210f0c"
            ]
        ]
    },
    {
        "id": "b693977a7206a995",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "create xlsx",
        "func": "const failedRows = flow.get(\"failedRows\")\nlet seedingData = msg.seedingData\n\nfailedRows.forEach((failedRow) => {\n    seedingData.forEach((row) => {\n        if (failedRow.applicantEmail == row[\"Business Partner Email\"]) {\n            row[\"remarks\"] = JSON.stringify(failedRow[\"message\"])\n        }\n    })\n})\n\nseedingData.forEach((row) => {\n    if (!row.remarks) {\n        row.remarks = \"Success\"\n    }\n})\nconsole.log({seedingData})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 2360,
        "wires": [
            [
                "44b988dc7383f322"
            ]
        ]
    },
    {
        "id": "68ecf7dd9463d9de",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "create xlsx",
        "func": "const failedRows = flow.get(\"failedRows\")\nlet seedingData = msg.seedingData\n\nfailedRows.forEach((failedRow) => {\n    seedingData.forEach((row) => {\n        if (failedRow.applicantEmail == row[\"Business Partner Email\"]) {\n            row[\"remarks\"] = JSON.stringify(failedRow[\"message\"])\n        }\n    })\n})\n\nseedingData.forEach((row) => {\n    if (!row.remarks) {\n        row.remarks = \"Success\"\n    }\n})\nconsole.log(seedingData)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 2620,
        "wires": [
            [
                "0c8472e1c2754138"
            ]
        ]
    },
    {
        "id": "a42a36a180c145b3",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "create xlsx",
        "func": "const failedRows = flow.get(\"failedRows\")\nlet seedingData = msg.seedingData\n\nfailedRows.forEach((failedRow)=>{\n    seedingData.forEach((row)=>{\n        if (failedRow.applicantEmail == row[\"Business Partner Email\"]){\n            row[\"remarks\"] = JSON.stringify(failedRow[\"message\"])\n        }\n    })\n})\n\nseedingData.forEach((row) => {\n    if (!row.remarks) {\n        row.remarks = \"Success\"\n    }\n})\nconsole.log({seedingData})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 2920,
        "wires": [
            [
                "6b60ba1b4c9edef4"
            ]
        ]
    },
    {
        "id": "e061666e668d4bc2",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "create xlsx",
        "func": "const failedRows = flow.get(\"failedRows\")\nlet seedingData = msg.seedingData\n\nfailedRows.forEach((failedRow) => {\n    seedingData.forEach((row) => {\n        if (failedRow.applicantEmail == row[\"Business Partner Email\"]) {\n            row[\"remarks\"] = JSON.stringify(failedRow[\"message\"])\n        }\n    })\n})\n\nseedingData.forEach((row) => {\n    if (!row.remarks) {\n        row.remarks = \"Success\"\n    }\n})\nconsole.log({ seedingData })\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 2240,
        "wires": [
            [
                "ce76140f4088b885"
            ]
        ]
    },
    {
        "id": "0e53f9d7198686d9",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "create xlsx",
        "func": "const failedRows = flow.get(\"failedRows\")\nlet seedingData = msg.seedingData\n\n\n    seedingData.forEach((row)=>{\n       \n            row[\"remarks\"] = \"File reading failed\"\n       \n    })\nseedingData.forEach((row)=>{\n    if(!row.remarks){\n        row.remarks = \"Success\"\n    }\n})\nconsole.log(seedingData)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 700,
        "wires": [
            [
                "0965b85087176baa"
            ]
        ]
    },
    {
        "id": "084455f820cf5507",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "create xlsx",
        "func": "const failedRows = flow.get(\"failedRows\")\nlet seedingData = msg.seedingData\n\n\nseedingData.forEach((row) => {\n    row[\"remarks\"] = \"File is larger than the limit\"\n})\n\nseedingData.forEach((row) => {\n    if (!row.remarks) {\n        row.remarks = \"Success\"\n    }\n})\n\nconsole.log(seedingData)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 940,
        "wires": [
            [
                "b5e15e8337dac8e3"
            ]
        ]
    },
    {
        "id": "df318a7241d5d249",
        "type": "function",
        "z": "e546fa9119a2d093",
        "name": "create xlsx",
        "func": "const failedRows = flow.get(\"failedRows\")\nlet seedingData = msg.seedingData\n\n\nseedingData.forEach((row) => {\n\n    row[\"remarks\"] = \"Enterprise seeding config is not found\"\n\n})\n\nseedingData.forEach((row) => {\n    if (!row.remarks) {\n        row.remarks = \"Success\"\n    }\n})\n\nconsole.log({ seedingData })\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 1380,
        "wires": [
            [
                "f54573c8e07c6db4"
            ]
        ]
    },
    {
        "id": "06fd0216ee156427",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "debug 467",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 2120,
        "wires": []
    },
    {
        "id": "7698b8fdc8e0f3d3",
        "type": "debug",
        "z": "e546fa9119a2d093",
        "name": "debug 468",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 400,
        "wires": []
    },
    {
        "id": "7b6fb8cdc27d66b6",
        "type": "subflow:0cbd918f05921aae",
        "z": "e546fa9119a2d093",
        "name": "getActyvUser",
        "x": 500,
        "y": 360,
        "wires": [
            [
                "cc0ac189d4ca5ef0"
            ]
        ]
    },
    {
        "id": "0e6c83ba439c5028",
        "type": "subflow:0cbd918f05921aae",
        "z": "e546fa9119a2d093",
        "name": "Authenticate enterprise",
        "x": 630,
        "y": 120,
        "wires": [
            [
                "2c554d1002c9b51f",
                "599ddb5185b52d26"
            ]
        ]
    },
    {
        "id": "aae9ce20174c5146",
        "type": "subflow:0cbd918f05921aae",
        "z": "e546fa9119a2d093",
        "name": "authentic bank user",
        "x": 590,
        "y": 200,
        "wires": [
            [
                "17c5e02652352e73"
            ]
        ]
    },
    {
        "id": "3387d3186bf87414",
        "type": "subflow:0cbd918f05921aae",
        "z": "e546fa9119a2d093",
        "name": "authenticActyvEntity",
        "x": 560,
        "y": 280,
        "wires": [
            [
                "be1d25612c6c470a"
            ]
        ]
    },
    {
        "id": "fbf5667c343c6d54",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "createEnterprise_BP_mapping",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 2340,
        "wires": [
            [
                "c907f40394b1f4a9"
            ]
        ]
    },
    {
        "id": "b8c9fd84adb2b23b",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "post Business partner",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 480,
        "y": 2180,
        "wires": [
            [
                "06fd0216ee156427",
                "a1b92df428d60333",
                "7121a0935db5e1da"
            ]
        ]
    },
    {
        "id": "0d1215242c4d8d4b",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "get business relation with erpId",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 1920,
        "wires": [
            [
                "15e66f026a034d17"
            ]
        ]
    },
    {
        "id": "e8ccce1359042d37",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "fetchEnterpriseConfig",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 520,
        "y": 1160,
        "wires": [
            [
                "1a9dbdc2bb2c9637"
            ]
        ]
    },
    {
        "id": "ced4d6ce57f9f491",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "readFileReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 350,
        "y": 660,
        "wires": [
            [
                "1c2d45d01b8c13e7",
                "0b6bb8acb1f968ea"
            ]
        ]
    },
    {
        "id": "5dab9d89b353d4d2",
        "type": "http request",
        "z": "e546fa9119a2d093",
        "name": "getInitiatedFiles",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 700,
        "y": 500,
        "wires": [
            [
                "e5400f391d80fdd1",
                "498e5fbddfcc0b2e"
            ]
        ]
    },
    {
        "id": "8909068d758dce17",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "Loop",
        "func": "const users = msg.seedingData;\nconst ENTERPRISE_ID = msg.enterpriseId;\nconst BANK_ID = msg.bankId;\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nfor (const [key,user] of users.entries()) {\n    node.send({\n        ...msg,\n        payload : user,\n        isCompleted : \"false\",\n        ENTERPRISE_ID: ENTERPRISE_ID,\n        BANK_ID: BANK_ID,\n        isFileProcessingCompleted: key == users.length - 1 ? true : false\n    })\n    await sleep(10000);\n}\n\nmsg.isCompleted = \"true\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1000,
        "wires": [
            [
                "92cd83a86e167ac3"
            ]
        ]
    },
    {
        "id": "0b1ab184397e3d7a",
        "type": "inject",
        "z": "ced2a26ef4f97d80",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 620,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "92cd83a86e167ac3",
        "type": "switch",
        "z": "ced2a26ef4f97d80",
        "name": "",
        "property": "isCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 1000,
        "wires": [
            [
                "b2b49a194d3f9b0c"
            ],
            [
                "e2da19067a74849a"
            ]
        ]
    },
    {
        "id": "b2b49a194d3f9b0c",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "Flow Done",
        "func": "const fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/changeStatus/${msg.fileId}`;\nconst flow_var = flow.get('FLOW_VARIABLES');\nconsole.log(\"request\", fetchInitiatedFiles)\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${flow_var.token}`,\n    \"bankid\": `${flow.get(\"actyv_id\")}`\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'PATCH';\nmsg.payload = {\n    \"fileId\":msg.fileId,\n    \"seedingStatus\":\"COMPLETED\"\n}\nreturn msg;\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1000,
        "wires": [
            [
                "7a2999cc4330665a",
                "0fbcc8a22c83e677"
            ]
        ]
    },
    {
        "id": "b49eb04917784a6f",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "name": "Flow Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1040,
        "wires": []
    },
    {
        "id": "689633e29f46fe1c",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "Get BP_ID",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 350,
        "y": 1180,
        "wires": [
            [
                "a0deab5d62a0c1e1"
            ]
        ]
    },
    {
        "id": "a0deab5d62a0c1e1",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "Get userId from businessPartnerId",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${flow_var.token}`\n}\n\nif (msg.statusCode === 200){\n    const data = msg.payload;\n    msg.obj.businessPartnerId = data._id;\n    msg.result[\"Business Partner ID\"] = `${msg.obj.businessPartnerId}`;\n    msg.method = 'get';\n    msg.url = `${env_var.CHECK_BP_RELATIONSHIP}/${msg.obj.businessPartnerId}/${msg.ENTERPRISE_ID}`\n    // msg.url = `${env_var.BP_USER}/${msg.obj.businessPartnerId}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1180,
        "wires": [
            [
                "2e0751502448ec7e"
            ]
        ]
    },
    {
        "id": "ed6a341b8c1b5db3",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "Get User_ID",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 1240,
        "wires": [
            [
                "274950bd79f3474f"
            ]
        ]
    },
    {
        "id": "d3e2793ff1e8a8be",
        "type": "switch",
        "z": "ced2a26ef4f97d80",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 170,
        "y": 2060,
        "wires": [
            [
                "19b29090b9a70c40"
            ],
            [
                "63747b6725757db2"
            ]
        ]
    },
    {
        "id": "8e38a2e4c49588cc",
        "type": "switch",
        "z": "ced2a26ef4f97d80",
        "name": "",
        "property": "userExists",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 1780,
        "wires": [
            [
                "63f280a67f79ac66"
            ],
            [
                "bc1963a56b571703"
            ]
        ]
    },
    {
        "id": "7ccce1a0d94ef454",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "name": "Row condition falied",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 1100,
        "wires": []
    },
    {
        "id": "628baece23ce92b3",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "Setting Global Variables",
        "func": "const ENVIRONMENT = env.get(\"ENVIRONMENT\");\nconst CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\");\n// const ROLE_ID = env.get(\"ROLE_ID\");\nconst ROLE_ID = \"638392e70882f1495a970cfb\";\nconst SLEEP_TIME = 500;\nconst MIN_INVOICE_AMOUNT_THRESHOLD = 1000;\n\nconst GO_SERVICE_URL = `https://actyv-platform-go-service.${ENVIRONMENT}.actyv.com/api`;\nconst PAYLATER_SERVICE_URL = `https://actyv-platform-paylater-service-v1.${ENVIRONMENT}.actyv.com/v1`;\nconst ADMIN_SERVICE_URL = `https://actyv-platform-admin-service.${ENVIRONMENT}.actyv.com/api`;\n\nconst ENV_VARIABLES = {\n    \"GO_SERVICE_URL\": GO_SERVICE_URL,\n    \"PAYLATER_SERVICE_URL\": PAYLATER_SERVICE_URL,\n    \"ADMIN_SERVICE_URL\": ADMIN_SERVICE_URL,\n    \"GET_BP\": `${GO_SERVICE_URL}/business-partner/service`,\n    \"BP_USER\": `${ADMIN_SERVICE_URL}/business-partner-user/get/all`,\n    \"USER\": `${ADMIN_SERVICE_URL}/user`,\n    \"ROLE_USER_MAPPING\": `${ADMIN_SERVICE_URL}/role-user-mapping`,\n    \"BP_SALES_SUMMARY\": `${GO_SERVICE_URL}/business-partner-sales-summary`,\n    \"BP_BANK_RELATIONSHIP\": `${GO_SERVICE_URL}/business-relationship`,\n    \"LOAN_TERM\": `${PAYLATER_SERVICE_URL}/loan-terms`,\n    \"BNPL_PREFERENCE\": `${PAYLATER_SERVICE_URL}/bnpl-preference`,\n    \"AUTH_URL\": `${ADMIN_SERVICE_URL}/user/authenticateUser`,\n    \"CHECK_ROLE_USER_MAPPING\": `${ADMIN_SERVICE_URL}/role-user-mapping/byBusinessPartnerId`,\n    \"GET_SALES_SUMMARY\": `${GO_SERVICE_URL}/business-partner-sales-summary`,\n    \"CHECK_BP_RELATIONSHIP\": `${GO_SERVICE_URL}/business-relationship/service`,\n    \"TENOR_AND_RATE_SPREAD\": `${PAYLATER_SERVICE_URL}/tenor-and-rate-spread`,\n    \"CONFIG_KEY\": `${CONFIG_KEY}`,\n    \"ROLE_ID\": `${ROLE_ID}`,\n    \"SLEEP_TIME\": `${SLEEP_TIME}`,\n    \"MIN_INVOICE_AMOUNT_THRESHOLD\": MIN_INVOICE_AMOUNT_THRESHOLD\n}\n\nglobal.set(\"ENV_VARIABLES\", ENV_VARIABLES);\n\n// msg.payload = `${XLSX_FILE_PATH}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 80,
        "wires": [
            [
                "b69212ec60a03b7c"
            ]
        ]
    },
    {
        "id": "c3721e6b65f3dd9c",
        "type": "switch",
        "z": "ced2a26ef4f97d80",
        "name": "",
        "property": "a",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 1120,
        "wires": [
            [
                "7ccce1a0d94ef454"
            ],
            [
                "689633e29f46fe1c"
            ]
        ]
    },
    {
        "id": "e2da19067a74849a",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "Creating  an Object which contains all info required in the flow",
        "func": "const env_var = global.get('ENV_VARIABLES');\nconst flow_var = flow.get('FLOW_VARIABLES');\nmsg.a = true;\nconst document = msg.payload;\nconsole.log(document);\n\nmsg.obj = {\n    pan: document[\"Business Partner PAN\"],\n    gst: document[\"Business Partner GST\"],\n    mobileNo: document[\"Business Partner Phone\"],\n    email: document[\"Business Partner Email\"],\n    bankIdentifierByParent: document[\"Bank CRN\"],\n    bankAccountNumber: document[\"Loan Repayment Account Number\"],\n    bankIFSC: document[\"Loan Repayment Account IFSC\"],\n    bankName: document[\"Loan Repayment Account Name\"],\n    approvedLimit: document[\"Approved Limit\"],\n    bankProvidedLoanCodes: document[\"Loan Account Number\"],\n    businessPartnerId: \"\",\n    token: \"\",\n    businessType: \"\",\n    bnpl_preference: document[\"Create BNPL Preference\"].toUpperCase()\n}\nconsole.log(\"ROIIIIIIIII\", document[\"Rate Of Interest\"]);\nif (document[\"Rate Of Interest\"] !== undefined){\n    msg.obj[\"rateOfInterest\"] = document[\"Rate Of Interest\"]; \n}\n\nif (document[\"Business Partner PAN\"] === undefined || document[\"Business Partner GST\"] === undefined || document[\"Bank CRN\"] === undefined || document[\"Loan Repayment Account Number\"] === undefined\n    || document[\"Loan Repayment Account IFSC\"] === undefined || document[\"Loan Repayment Account Name\"] === undefined || document[\"Approved Limit\"] === undefined\n   )\n{\n    msg.a = false;\n}\n\n\nmsg.result = {\n    \"Business Partner ID\" : \"\",\n    \"User ID\": \"\",\n    \"Role User Mapping\": \"\",\n    \"Business Partner Sales Summary for current month\": \"\",\n    \"Business-Relationship with Bank\": \"\",\n    \"Business-Relationship with Enterprise\": \"\",\n    \"Create Loan Term\": \"\",\n    \"Update Loan Term\": \"\",\n    \"Fetch Tenor\": \"\",\n    \"Create BNPL Preference\": \"\"\n}\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow_var.token}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\nmsg.url = env_var.GET_BP + \"/\" + msg.obj.gst;\nmsg.method = 'get';\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1120,
        "wires": [
            [
                "c3721e6b65f3dd9c"
            ]
        ]
    },
    {
        "id": "559ed709afd5f1ad",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "name": "debug 386",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 60,
        "wires": []
    },
    {
        "id": "c76119bcf864baea",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "Get userId from businessPartnerId",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\n\nconst data = msg.payload;\nmsg.userId = data[0].userId;\nmsg.result[\"User ID\"] = `${msg.userId}`\n\nmsg.obj[\"businessType\"] = msg.payload.relationType?.split(\"-\")[0];\n\nif (msg.obj.businessType === \"DISTRIBUTOR\") {\n    msg.product_type_id = msg.bankApplicationConfigId;\n}\nelse {\n    msg.product_type_id = msg.bankApplicationConfigId;\n}\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${flow_var.token}`\n}\n\nmsg.method = 'get';\nmsg.url = `${env_var.BP_USER}/${msg.obj.businessPartnerId}`\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1240,
        "wires": [
            [
                "ed6a341b8c1b5db3"
            ]
        ]
    },
    {
        "id": "2e0751502448ec7e",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "getting relationship type",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 910,
        "y": 1180,
        "wires": [
            [
                "c76119bcf864baea"
            ]
        ]
    },
    {
        "id": "63f280a67f79ac66",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "g": "28df55e7a361e197",
        "name": "Setting payload for roleUserMapping",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\n\nconst userId = msg.userId;\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow_var.token}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\n\n\n\n\nmsg.payload = {\n    userId : userId,\n    roleId: msg.roleId,\n    businessPartnerId : msg.obj.businessPartnerId,\n}\nmsg.url = env_var.ROLE_USER_MAPPING;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1760,
        "wires": [
            [
                "ed5825176bd9fc8e",
                "1c2f0496c7bc6466",
                "4b1f69abb5c8422b"
            ]
        ]
    },
    {
        "id": "ed5825176bd9fc8e",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "28df55e7a361e197",
        "name": "Payload for roleUserMapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 1740,
        "wires": []
    },
    {
        "id": "1c2f0496c7bc6466",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "g": "28df55e7a361e197",
        "name": "Role User Mapping",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 1780,
        "wires": [
            [
                "3789fb2fd858e425",
                "bc1963a56b571703"
            ]
        ]
    },
    {
        "id": "3789fb2fd858e425",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "28df55e7a361e197",
        "name": "Result of roleUserMapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 1780,
        "wires": []
    },
    {
        "id": "274950bd79f3474f",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "g": "28df55e7a361e197",
        "name": "Check if RoleUserMapping exists",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\nif(msg.statusCode === 200){\n    const data = msg.payload;\n    msg.userId = data[0].userId;\n    msg.result[\"User ID\"] = `${msg.userId}`;\n\n    msg.headers = {\n        \"Authorization\": `Bearer ${flow_var.token}`,\n        \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n    }\n\n    msg.url = `${env_var.CHECK_ROLE_USER_MAPPING}/${msg.obj.businessPartnerId}`;\n    msg.method = 'get';\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1600,
        "wires": [
            [
                "e890773239f9acac"
            ]
        ]
    },
    {
        "id": "e890773239f9acac",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "g": "28df55e7a361e197",
        "name": "Check Role User Mapping",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 830,
        "y": 1600,
        "wires": [
            [
                "d6a0411041bdb589",
                "4cb69be7e4f48182"
            ]
        ]
    },
    {
        "id": "d6a0411041bdb589",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "28df55e7a361e197",
        "name": "Checking RoleUser Mapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1600,
        "wires": []
    },
    {
        "id": "4cb69be7e4f48182",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "g": "28df55e7a361e197",
        "name": "Result of Check Role User Mapping",
        "func": "const mappings = msg.payload;\n\nvar flag = 0;\nfor (const mapping of mappings) {\n    if(mapping.userId == msg.userId && mapping.roleId == msg.roleId){\n        flag = 1;\n        break;\n    }\n};\n\nif(flag === 1){\n    msg.userExists = \"true\";\n    msg.result[\"Role User Mapping\"] = `Exists`;\n}\nelse{\n    msg.userExists = \"false\";\n}\nmsg.userExists = \"false\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1680,
        "wires": [
            [
                "3535ab03aafd4358",
                "8e38a2e4c49588cc"
            ]
        ]
    },
    {
        "id": "3535ab03aafd4358",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "28df55e7a361e197",
        "name": "Check Role User Mapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "userExists",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 1680,
        "wires": []
    },
    {
        "id": "19b29090b9a70c40",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "g": "93fe5307bc4762c3",
        "name": "Setting Payload for businessPartnerBankRelationship",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow_var.token}`\n}\n\nmsg.result[\"Business-Relationship with Bank\"] = \"No\"\n\nmsg.payload = {\n    businessId: msg.obj.businessPartnerId,\n    parentBusinessId: msg.BANK_ID,\n    identifierByParent: msg.obj.bankIdentifierByParent,\n    bankAccountNumber: msg.obj.bankAccountNumber,\n    bankIFSC: msg.obj.bankIFSC,\n    bankName: msg.obj.bankName,\n    relationType: `${msg.obj.businessType}-BANK`,\n    // relationType: `DISTRIBUTOR-BANK`,\n}\nmsg.url = env_var.BP_BANK_RELATIONSHIP;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 2040,
        "wires": [
            [
                "71f26c0e1f8fad42",
                "cef5adcc7e91d25c"
            ]
        ]
    },
    {
        "id": "71f26c0e1f8fad42",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "93fe5307bc4762c3",
        "name": "Payload for businessPartnerBankRelationship",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 2020,
        "wires": []
    },
    {
        "id": "cef5adcc7e91d25c",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "g": "93fe5307bc4762c3",
        "name": "Business Partner Bank Relationship",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 900,
        "y": 2060,
        "wires": [
            [
                "f0141033b31aea8c",
                "63747b6725757db2"
            ]
        ]
    },
    {
        "id": "bc1963a56b571703",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "g": "93fe5307bc4762c3",
        "name": "Checking if businessPartnerBankRelationship exists",
        "func": "const flow_var = flow.get(\"FLOW_VARIABLES\")\nconst env_var = global.get(\"ENV_VARIABLES\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${flow_var.token}`\n}\nmsg.url = `${env_var.CHECK_BP_RELATIONSHIP}/getByIdentifierByParent/${msg.obj.bankIdentifierByParent}`;\nmsg.method = 'get'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1960,
        "wires": [
            [
                "a140de239e0421a1"
            ]
        ]
    },
    {
        "id": "a140de239e0421a1",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "g": "93fe5307bc4762c3",
        "name": "Get Identifier By Parent - Bank",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 910,
        "y": 1960,
        "wires": [
            [
                "d2113b7ce3c1dadf",
                "d3e2793ff1e8a8be"
            ]
        ]
    },
    {
        "id": "f0141033b31aea8c",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "93fe5307bc4762c3",
        "name": "Business Partner Bank Relationship",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 2060,
        "wires": []
    },
    {
        "id": "d2113b7ce3c1dadf",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "93fe5307bc4762c3",
        "name": "Checking if businessPartnerBankRelationship exists",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 1960,
        "wires": []
    },
    {
        "id": "be07fd207670da4a",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "Setting Payload for creating loanTerm",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    actyventityid : msg.actyvEntityId\n}\n\nmsg.payload = {\n    bankID: msg.BANK_ID,\n    borrowerID: msg.obj.businessPartnerId,\n    enterpriseID: msg.ENTERPRISE_ID,\n    // productType: msg.bankApplicationConfigId\n    bankApplicationConfigID: msg.bankApplicationConfigId\n    // rateOfInterest: Number(msg.obj.rateOfInterest)\n}\nif(msg.obj[\"rateOfInterest\"]!==\"undefined\"){\n    msg.payload[\"rateOfInterest\"] = msg.obj.rateOfInterest;\n}\nmsg.url = env_var.LOAN_TERM;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 2320,
        "wires": [
            [
                "bfbeeaf036fc2740",
                "e366cbcd386837e1",
                "6734c4e3e7d72467"
            ]
        ]
    },
    {
        "id": "63818f2da050c30e",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "Setting Payload for udpating loanTerm",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    actyventityid: msg.actyvEntityId\n}\n\nconst data = msg.payload;\nmsg.loanTermId = data.id;\n\nif (msg.statusCode === 201 && msg.result[\"Create Loan Term\"] === \"\"){\n    msg.result[\"Create Loan Term\"] = `Loan Term Created: ${msg.loanTermId}`;\n}\n\nmsg.payload = {\n    loanTermsID : msg.loanTermId,\n    approvedLimit: msg.obj.approvedLimit,\n    validTill: \"20/11/2025\",\n    loanGrantStatus: \"APPROVED\",\n    crnNumber: msg.obj.bankIdentifierByParent,\n    awaitingBalanceRefresh: false,\n    businessType: msg.obj.businessType,\n    bankProvidedLoanCodes: msg.obj.bankProvidedLoanCodes\n}\nmsg.url = env_var.LOAN_TERM + \"/service/update\";\nmsg.method = 'patch';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 2420,
        "wires": [
            [
                "41316525dcc1cf41",
                "3316790d275b93bf"
            ]
        ]
    },
    {
        "id": "bfbeeaf036fc2740",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "Payload for creating loanTerm",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 2300,
        "wires": []
    },
    {
        "id": "41316525dcc1cf41",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "Payload for updating loanTerm",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 2400,
        "wires": []
    },
    {
        "id": "e366cbcd386837e1",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "Create Loan Term",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 850,
        "y": 2340,
        "wires": [
            [
                "63818f2da050c30e",
                "cd4c10d01f090c6f"
            ]
        ]
    },
    {
        "id": "3316790d275b93bf",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "Update Loan Term",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1270,
        "y": 2440,
        "wires": [
            [
                "2f3757e690577221",
                "54ca507a693f9f8e"
            ]
        ]
    },
    {
        "id": "cd4c10d01f090c6f",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "Create Loan Term",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 2340,
        "wires": []
    },
    {
        "id": "2f3757e690577221",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "Update Loan Term",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 2440,
        "wires": []
    },
    {
        "id": "63747b6725757db2",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "Checking If loanTerm exists",
        "func": "const flow_var = flow.get(\"FLOW_VARIABLES\")\nconst env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nif (msg.statusCode === 200) {\n    if (msg.result[\"Business-Relationship with Bank\"] === \"No\") {\n        msg.result[\"Business-Relationship with Bank\"] = `Created ${msg.payload._id}`;\n    }\n    else {\n        msg.result[\"Business-Relationship with Bank\"] = `Exists`;\n    }\n}\nelse {\n    msg.result[\"Business-Relationship with Bank\"] = `${msg.statusCode} Error`\n}\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${actyvToken}`\n}\nmsg.url = `${env_var.LOAN_TERM}/service/fetchByBankID`;\nmsg.payload = {\"borrowerID\" : msg.obj.businessPartnerId,\n            \"enterpriseID\": msg.ENTERPRISE_ID,\n            \"bankID\": msg.BANK_ID};\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 2220,
        "wires": [
            [
                "36da4c1579934909"
            ]
        ]
    },
    {
        "id": "36da4c1579934909",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "Fetch Loan Term ",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 830,
        "y": 2220,
        "wires": [
            [
                "bb04036c4186958e",
                "556f6a9a6eac7ea2"
            ]
        ]
    },
    {
        "id": "bb04036c4186958e",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "Check If Loan Term Exists",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 2220,
        "wires": []
    },
    {
        "id": "2015a2f8936088d2",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "setting up payload for updating loadn term if it already exists",
        "func": "msg.payload = msg.payload[0];\nif(msg.statusCode === 201){\n    msg.result[\"Create Loan Term\"] = `Exists: ${msg.payload.id}`;\n}\nelse{\n    msg.result[\"Create Loan Term\"] = `${msg.statusCode} Error`;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 2420,
        "wires": [
            [
                "63818f2da050c30e"
            ]
        ]
    },
    {
        "id": "556f6a9a6eac7ea2",
        "type": "switch",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 2360,
        "wires": [
            [
                "be07fd207670da4a"
            ],
            [
                "2015a2f8936088d2"
            ]
        ]
    },
    {
        "id": "6734c4e3e7d72467",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "4d2788302b21251a",
        "name": "Paylaod for creating loan_term",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 2360,
        "wires": []
    },
    {
        "id": "153face4af99e128",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "93fb9229bcd9bcd6",
        "name": "Create BNPL Preference",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 2680,
        "wires": []
    },
    {
        "id": "72c1569f3eeefc5c",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "93fb9229bcd9bcd6",
        "name": "Payload for creating BNPL preference",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 2640,
        "wires": []
    },
    {
        "id": "737828aa9a9921a3",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "g": "93fb9229bcd9bcd6",
        "name": "Create BNPL Preference",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1430,
        "y": 2680,
        "wires": [
            [
                "153face4af99e128",
                "68f0c291d32a5077"
            ]
        ]
    },
    {
        "id": "00baff346ee0b259",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "g": "93fb9229bcd9bcd6",
        "name": "Setting Payload for creating BNPL preference",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"businesspartnerid\": flow.get(\"actyv_bp_id\"),\n    \"bankid\": msg.BANK_ID,\n    \"actyventityid\": msg.actyvEntityId\n}\n\nmsg.DEFAULT_SPREAD_ID = msg.payload[0].id;\n\nif (msg.statusCode === 201){\n    msg.result[\"Fetch Tenor\"] = `Tenor Fetched ${msg.DEFAULT_SPREAD_ID}`\n}\nelse{\n    msg.result[\"Fetch Tenor\"] = `${msg.statusCode} Error`\n}\n\nmsg.payload = {\n    borrowerID: msg.obj.businessPartnerId,\n    bankApplicationConfigID: msg.product_type_id,\n    defaultBankID: msg.BANK_ID,\n    defaultSpreadID: msg.DEFAULT_SPREAD_ID,\n    minInvoiceAmountThreshold: env_var.MIN_INVOICE_AMOUNT_THRESHOLD\n}\nmsg.url = env_var.BNPL_PREFERENCE;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 2680,
        "wires": [
            [
                "737828aa9a9921a3",
                "72c1569f3eeefc5c",
                "71384a68d076afcc"
            ]
        ]
    },
    {
        "id": "8cf22f3bbd1217cf",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "g": "93fb9229bcd9bcd6",
        "name": "Payload For fetching TenorAndRateSpread",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nconst sleep = async (milliseconds) => {\n  await new Promise(resolve => {\n    return setTimeout(resolve, milliseconds)\n  });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n  \"Authorization\": `Bearer ${actyvToken}`,\n  \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n  actyventityid: msg.actyEntityId\n}\nif (msg.statusCode === 200) {\n  msg.result[\"Update Loan Term\"] = `Updated: ${msg.loanTermId}`;\n}\nelse {\n  msg.result[\"Update Loan Term\"] = `${msg.statusCode} Error`;\n}\n\nmsg.payload = {\n  \"bankID\": msg.BANK_ID,\n  \"loanID\": msg.loanTermId,\n}\n\nmsg.url = env_var.TENOR_AND_RATE_SPREAD + \"/fetch\";\nmsg.method = 'POST';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 2560,
        "wires": [
            [
                "035172bd95bd9f1c"
            ]
        ]
    },
    {
        "id": "035172bd95bd9f1c",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "g": "93fb9229bcd9bcd6",
        "name": "Fetching TenorAndRateSpread",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1410,
        "y": 2560,
        "wires": [
            [
                "00baff346ee0b259",
                "4893b32644bc4cdd"
            ]
        ]
    },
    {
        "id": "4893b32644bc4cdd",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "g": "93fb9229bcd9bcd6",
        "name": "fetching tenor and rate spread",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 2540,
        "wires": []
    },
    {
        "id": "35b2a98fc7a47f67",
        "type": "inject",
        "z": "ced2a26ef4f97d80",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 20,
        "wires": [
            [
                "628baece23ce92b3"
            ]
        ]
    },
    {
        "id": "b69212ec60a03b7c",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "AuthenticateBankReq",
        "func": "\nconst BANK_ADMIN_EMAIL = env.get(\"SGFL_BANK_ADMIN_EMAIL\");\nconst PASSWORD =  env.get(\"PASSWORD\");\nconst ADMIN_URL = env.get('ADMIN_URL');\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \"password\": PASSWORD,\n    \"email\": BANK_ADMIN_EMAIL\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 140,
        "wires": [
            [
                "1c37389ec219f08a"
            ]
        ]
    },
    {
        "id": "1c37389ec219f08a",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "AuthenticateBankReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 720,
        "y": 140,
        "wires": [
            [
                "a54cbe35dc37e0d5"
            ]
        ]
    },
    {
        "id": "a54cbe35dc37e0d5",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "saveBankToken",
        "func": "const env_var = global.get(\"ENV_VARIABLES\");\n\nconst FLOW_VARIABLES = {\n    token: msg.payload.idToken\n}\nflow.set(\"FLOW_VARIABLES\", FLOW_VARIABLES);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 140,
        "wires": [
            [
                "91c00a09125d94c8"
            ]
        ]
    },
    {
        "id": "ead1b5f39fc74195",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "Setting Payload For Fetching INITIATED Status Files",
        "func": "// const enterpriseToken = flow.get(\"enterpriseToken\")\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/fileInfoBySeedingStatus/INITIATED`;\nconst flow_var = flow.get('FLOW_VARIABLES');\nconst actyvToken = flow.get(\"actyvToken\")\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"actyventityid\": `${msg.actyvEntityId}`\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'GET';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 580,
        "wires": [
            [
                "2eb7b84ec8ed64ff"
            ]
        ]
    },
    {
        "id": "2eb7b84ec8ed64ff",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "INITIATED Files",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 840,
        "y": 580,
        "wires": [
            [
                "d0a309466fec4ac9",
                "cb0e4eb3422d64fa"
            ]
        ]
    },
    {
        "id": "cb0e4eb3422d64fa",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "Looping and Segregating Files",
        "func": "const files = msg.payload.fileInfo.filter((file) => file.seedingType == \"BNPL_SEEDING\");\n\n\nfor (const file of files) {\n    if (file.seedingType == \"BNPL_SEEDING\" && file.fileId ===\"9d020bd2-7d17-4da8-b403-e66727d2c495-BNPL_Seeding_File\") {\n        node.send({\n            ...file,\n            actyvEntityId: msg.actyvEntityId,\n            payload: file.fileId,\n            seedingType: file.seedingType\n        })\n    }\n}\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 640,
        "wires": [
            [
                "8d31edb69a04c80d"
            ]
        ]
    },
    {
        "id": "6c4bae7d5ec3d83c",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\n\n// msg.fileId = msg.payload\nmsg.method = \"GET\"\nmsg.headers = {\n    fileType: \"xlsx\"\n}\nmsg.url = `${GO_URL}/file/read/${msg.fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 940,
        "wires": [
            [
                "fc9c0d8ceb1002cc"
            ]
        ]
    },
    {
        "id": "fc9c0d8ceb1002cc",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "readFile",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 840,
        "y": 940,
        "wires": [
            [
                "369e7601dc76350b"
            ]
        ]
    },
    {
        "id": "369e7601dc76350b",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "read xls",
        "func": "let data = xlsx.read(msg.payload, { type: \"buffer\" })\nconst wsname = data.SheetNames[0];\nconsole.log({wsname})\nconst ws = data.Sheets[wsname];\nconsole.log({ws})\nconst payload = xlsx.utils.sheet_to_json(ws);\nmsg.seedingData = payload\nmsg.completedSeeding = [],\nmsg.failedSeeding = []\nmsg.anchored = false;\nif(msg.enterpriseId){\n    msg.anchored = true\n}\n\nmsg.numOfRows = payload.length\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "xlsx",
                "module": "xlsx"
            }
        ],
        "x": 1020,
        "y": 940,
        "wires": [
            [
                "c2c9a4824a497137",
                "8909068d758dce17"
            ]
        ]
    },
    {
        "id": "fc831be01cd64c5b",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "name": "debug 394",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 60,
        "wires": []
    },
    {
        "id": "54ca507a693f9f8e",
        "type": "switch",
        "z": "ced2a26ef4f97d80",
        "name": "",
        "property": "obj[\"bnpl_preference\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Y",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "N",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 2580,
        "wires": [
            [
                "8cf22f3bbd1217cf"
            ],
            [
                "68f0c291d32a5077"
            ]
        ]
    },
    {
        "id": "076b7da88ba72242",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "saveactyvId",
        "func": "flow.set(\"actyv_id\", msg.payload.actyvEntityId);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "d52974e3ad8c1d21",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "Getting Actyv Entity User",
        "func": "const flow_var = flow.get('FLOW_VARIABLES');\nconst EMAIL = \"anand.rastogi@actyv.com\";\nconst PASSWORD =  \"890ioP@12\";\n// const EMAIL = env.get('EMAIL')\n// const PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow_var.token}`,\n}\n\nmsg.url = `${ADMIN_URL}/api/user/getCurrentUser?url=https://actyv-platform.uat.actyv.com`;\nmsg.method = \"GET\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 260,
        "wires": [
            [
                "7acb54f0221f7bb3"
            ]
        ]
    },
    {
        "id": "7acb54f0221f7bb3",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "Getting Actyv_id",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1320,
        "y": 260,
        "wires": [
            [
                "076b7da88ba72242"
            ]
        ]
    },
    {
        "id": "d0a309466fec4ac9",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "name": "debug 396",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 580,
        "wires": []
    },
    {
        "id": "68f0c291d32a5077",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "name": "debug 397",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 2780,
        "wires": []
    },
    {
        "id": "7a2999cc4330665a",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "name": "debug 408",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 1000,
        "wires": []
    },
    {
        "id": "0fbcc8a22c83e677",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "Changing seeding Status",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 890,
        "y": 1040,
        "wires": [
            [
                "b49eb04917784a6f"
            ]
        ]
    },
    {
        "id": "91c00a09125d94c8",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "AuthenticateActyvBPUserReq",
        "func": "\nconst EMAIL = env.get(\"SGFL_EXXARO_BP_EMAIL\");\nconst PASSWORD =  env.get(\"PASSWORD\");\n// const PASSWORD =  //\"User@123\"\nconst ADMIN_URL = env.get('ADMIN_URL');\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \"password\": PASSWORD,\n    \"email\": EMAIL\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 200,
        "wires": [
            [
                "7a31c6b9438ed8ef"
            ]
        ]
    },
    {
        "id": "7a31c6b9438ed8ef",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "AuthenticateActyvBPUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 200,
        "wires": [
            [
                "75dff907d3755be5"
            ]
        ]
    },
    {
        "id": "75dff907d3755be5",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "saveActyvBPUserToken",
        "func": "const bp_token = msg.payload.idToken\nflow.set(\"bp_token\", bp_token);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 200,
        "wires": [
            [
                "e66148bc41d5fcc6",
                "c95711b327c0523e"
            ]
        ]
    },
    {
        "id": "2e7a206a0491e0c6",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "save actyv_bp_id",
        "func": "flow.set(\"actyv_bp_id\", msg.payload.businessPartnerIds[0]);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 320,
        "wires": [
            [
                "4da2fb7ad9a03110"
            ]
        ]
    },
    {
        "id": "8f57567cdf053a2f",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "Getting Actyv BPUser",
        "func": "const EMAIL = env.get(\"SGFL_EXXARO_BP_EMAIL\");\nconst PASSWORD = env.get(\"PASSWORD\");\nconst ADMIN_URL = env.get('ADMIN_URL');\nconst ACTYV_BP_URL = env.get('ACTYV_BP_URL')\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow.get(\"bp_token\")}`,\n}\n\nmsg.url = `${ADMIN_URL}/api/user/getCurrentUser?url=${ACTYV_BP_URL}`;\nmsg.method = \"GET\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 320,
        "wires": [
            [
                "56195e8afbaf671c"
            ]
        ]
    },
    {
        "id": "56195e8afbaf671c",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "Getting Actyv_id",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 660,
        "y": 320,
        "wires": [
            [
                "2e7a206a0491e0c6"
            ]
        ]
    },
    {
        "id": "c95711b327c0523e",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "getSgflBankReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_KEY = env.get(\"SGFL_BANK_KEY\")\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank/key/${BANK_KEY}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 260,
        "wires": [
            [
                "9cdeccc995eb9630"
            ]
        ]
    },
    {
        "id": "9cdeccc995eb9630",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "getAxisBankReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 630,
        "y": 260,
        "wires": [
            [
                "45df28e0674b2fe9"
            ]
        ]
    },
    {
        "id": "45df28e0674b2fe9",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "Save Axis Bank ID",
        "func": "const bankId = msg.payload?._id\n\nmsg.bankId = bankId\nflow.set(\"actyv_id\", bankId);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 260,
        "wires": [
            [
                "8f57567cdf053a2f"
            ]
        ]
    },
    {
        "id": "8d31edb69a04c80d",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "get bankApplicationConfig by bank",
        "func": "const enterpriseToken = flow.get(\"enterpriseToken\")\nconst bankId = msg.bankId\n\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/bank-application-config/bank/${bankId}`;\n\n\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'GET';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 740,
        "wires": [
            [
                "7dc907d5b63bb5b6"
            ]
        ]
    },
    {
        "id": "7dc907d5b63bb5b6",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "get bankApplicationConfig by bank",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 800,
        "y": 740,
        "wires": [
            [
                "7dc37572b6e436d4",
                "8c8c51ac618e7b73"
            ]
        ]
    },
    {
        "id": "7dc37572b6e436d4",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "name": "get bankApplicationConfig by bank",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 740,
        "wires": []
    },
    {
        "id": "8c8c51ac618e7b73",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "filter bankApplnConfig by enterpriseId",
        "func": "const {enterpriseId} = msg\nlet bankApllicationConfigs = msg.payload.filter((config)=>config.allowedEnterprises[0] == enterpriseId)\nmsg.payload = bankApllicationConfigs\nmsg.bankApplicationConfigId = bankApllicationConfigs[0]?.id || \"BNPL\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 840,
        "wires": [
            [
                "32fb25ad0371477a"
            ]
        ]
    },
    {
        "id": "c2c9a4824a497137",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "name": "debug 424",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 940,
        "wires": []
    },
    {
        "id": "e66148bc41d5fcc6",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "name": "debug 410",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 200,
        "wires": []
    },
    {
        "id": "4da2fb7ad9a03110",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "AuthenticateActyvEntity",
        "func": "\nconst EMAIL = env.get('ACTYV_ADMIN_EMAIL')\nconst PASSWORD = env.get('DEFAULT_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 380,
        "wires": [
            [
                "ee530c286dfcca2e"
            ]
        ]
    },
    {
        "id": "ee530c286dfcca2e",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "AuthenticateActyvEntity",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 750,
        "y": 380,
        "wires": [
            [
                "1bc0ffcd39360548"
            ]
        ]
    },
    {
        "id": "1bc0ffcd39360548",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\n// console.log({bankToken: msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 380,
        "wires": [
            [
                "e354b69d2df84d20"
            ]
        ]
    },
    {
        "id": "e354b69d2df84d20",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "Getting Actyv User",
        "func": "const EMAIL = env.get(\"SGFL_EXXARO_BP_EMAIL\");\nconst PASSWORD = env.get(\"PASSWORD\");\nconst ADMIN_URL = env.get('ADMIN_URL');\nconst ACTYV_ENTITY_URL = env.get('ACTYV_ENTITY_URL')\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow.get(\"actyvToken\")}`,\n}\n\nmsg.url = `${ADMIN_URL}/api/user/getCurrentUser?url=${ACTYV_ENTITY_URL}`;\nmsg.method = \"GET\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 460,
        "wires": [
            [
                "1a906c9c55a9665f"
            ]
        ]
    },
    {
        "id": "1a906c9c55a9665f",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "Getting Actyv_id",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 680,
        "y": 460,
        "wires": [
            [
                "440409b68c44efdd"
            ]
        ]
    },
    {
        "id": "440409b68c44efdd",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "save actyv_entity_id",
        "func": "flow.set(\"actyv_bp_id\", msg.payload.actyvEntityId);\nmsg.actyvEntityId = msg.payload.actyvEntityId\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 460,
        "wires": [
            [
                "ead1b5f39fc74195"
            ]
        ]
    },
    {
        "id": "71384a68d076afcc",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "name": "debug 436",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 2780,
        "wires": []
    },
    {
        "id": "4b1f69abb5c8422b",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "name": "debug 437",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 1880,
        "wires": []
    },
    {
        "id": "32fb25ad0371477a",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "Get role id",
        "func": "\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n   \n}\n\nmsg.method = 'POST';\nmsg.url = `${env.get(\"ADMIN_URL\")}/api/role/query`\nmsg.payload = {\n    \"query\": {\n        \"name\": \"paylater_bp_admin\"\n    }\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 900,
        "wires": [
            [
                "e4cf3ccf8bcff7bd"
            ]
        ]
    },
    {
        "id": "e4cf3ccf8bcff7bd",
        "type": "http request",
        "z": "ced2a26ef4f97d80",
        "name": "Get role id",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 900,
        "wires": [
            [
                "5ec9fa47879b4ae3",
                "ac1351cac65782cb"
            ]
        ]
    },
    {
        "id": "5ec9fa47879b4ae3",
        "type": "function",
        "z": "ced2a26ef4f97d80",
        "name": "set roleId",
        "func": "msg.roleId = msg.payload[0][\"_id\"]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 900,
        "wires": [
            [
                "6c4bae7d5ec3d83c"
            ]
        ]
    },
    {
        "id": "ac1351cac65782cb",
        "type": "debug",
        "z": "ced2a26ef4f97d80",
        "name": "debug 438",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 840,
        "wires": []
    },
    {
        "id": "16328c7aae8b2c65",
        "type": "inject",
        "z": "46bc40aaa70da7e7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 100,
        "wires": [
            [
                "543805b1e1f44438"
            ]
        ]
    },
    {
        "id": "543805b1e1f44438",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Setting Global Variables",
        "func": "const ENVIRONMENT = env.get(\"ENVIRONMENT\");\nconst CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\");\n// const ROLE_ID = env.get(\"ROLE_ID\");\nconst ROLE_ID = \"638392e70882f1495a970cfb\";\nconst SLEEP_TIME = 500;\nconst MIN_INVOICE_AMOUNT_THRESHOLD = 1000;\n\nconst GO_SERVICE_URL = `https://actyv-platform-go-service.${ENVIRONMENT}.actyv.com/api`;\nconst PAYLATER_SERVICE_URL = `https://actyv-platform-paylater-service-v1.${ENVIRONMENT}.actyv.com/v1`;\nconst ADMIN_SERVICE_URL = `https://actyv-platform-admin-service.${ENVIRONMENT}.actyv.com/api`;\n\nconst ENV_VARIABLES = {\n    \"GO_SERVICE_URL\": GO_SERVICE_URL,\n    \"PAYLATER_SERVICE_URL\": PAYLATER_SERVICE_URL,\n    \"ADMIN_SERVICE_URL\": ADMIN_SERVICE_URL,\n    \"GET_BP\": `${GO_SERVICE_URL}/business-partner/service`,\n    \"BP_USER\": `${ADMIN_SERVICE_URL}/business-partner-user/get/all`,\n    \"USER\": `${ADMIN_SERVICE_URL}/user`,\n    \"ROLE_USER_MAPPING\": `${ADMIN_SERVICE_URL}/role-user-mapping`,\n    \"BP_SALES_SUMMARY\": `${GO_SERVICE_URL}/business-partner-sales-summary`,\n    \"BP_BANK_RELATIONSHIP\": `${GO_SERVICE_URL}/business-relationship`,\n    \"LOAN_TERM\": `${PAYLATER_SERVICE_URL}/loan-terms`,\n    \"BNPL_PREFERENCE\": `${PAYLATER_SERVICE_URL}/bnpl-preference`,\n    \"AUTH_URL\": `${ADMIN_SERVICE_URL}/user/authenticateUser`,\n    \"CHECK_ROLE_USER_MAPPING\": `${ADMIN_SERVICE_URL}/role-user-mapping/byBusinessPartnerId`,\n    \"GET_SALES_SUMMARY\": `${GO_SERVICE_URL}/business-partner-sales-summary`,\n    \"CHECK_BP_RELATIONSHIP\": `${GO_SERVICE_URL}/business-relationship/service`,\n    \"TENOR_AND_RATE_SPREAD\": `${PAYLATER_SERVICE_URL}/tenor-and-rate-spread`,\n    \"CONFIG_KEY\": `${CONFIG_KEY}`,\n    \"ROLE_ID\": `${ROLE_ID}`,\n    \"SLEEP_TIME\": `${SLEEP_TIME}`,\n    \"MIN_INVOICE_AMOUNT_THRESHOLD\": MIN_INVOICE_AMOUNT_THRESHOLD\n}\n\nglobal.set(\"ENV_VARIABLES\", ENV_VARIABLES);\n\n// msg.payload = `${XLSX_FILE_PATH}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 160,
        "wires": [
            [
                "8ed4ebed0f9c2b2d"
            ]
        ]
    },
    {
        "id": "8ed4ebed0f9c2b2d",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "AuthenticateBankReq",
        "func": "\nconst BANK_ADMIN_EMAIL = env.get(\"SGFL_BANK_ADMIN_EMAIL\");\nconst PASSWORD =  env.get(\"PASSWORD\");\nconst ADMIN_URL = env.get('ADMIN_URL');\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \"password\": PASSWORD,\n    \"email\": BANK_ADMIN_EMAIL\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 220,
        "wires": [
            [
                "905888216dec3cb5"
            ]
        ]
    },
    {
        "id": "905888216dec3cb5",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "AuthenticateBankReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 600,
        "y": 220,
        "wires": [
            [
                "638736fb6817861e"
            ]
        ]
    },
    {
        "id": "638736fb6817861e",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "saveBankToken",
        "func": "const env_var = global.get(\"ENV_VARIABLES\");\nmsg.bankToken = msg.payload.idToken\nconst FLOW_VARIABLES = {\n    token: msg.payload.idToken\n}\nflow.set(\"FLOW_VARIABLES\", FLOW_VARIABLES);\nflow.set(\"bankToken\", msg.payload.idToken)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 220,
        "wires": [
            [
                "d729f5a5f568aa04"
            ]
        ]
    },
    {
        "id": "d729f5a5f568aa04",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "AuthenticateActyvBPUserReq",
        "func": "\nconst EMAIL = env.get(\"SGFL_EXXARO_BP_EMAIL\");\n// const PASSWORD =  env.get(\"PASSWORD\");\nconst PASSWORD =  \"User@123\"\nconst ADMIN_URL = env.get('ADMIN_URL');\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \"password\": PASSWORD,\n    \"email\": EMAIL\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 280,
        "wires": [
            [
                "3eead1e1a7017a47"
            ]
        ]
    },
    {
        "id": "3eead1e1a7017a47",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "AuthenticateActyvBPUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 280,
        "wires": [
            [
                "14c49298ad69dc43"
            ]
        ]
    },
    {
        "id": "14c49298ad69dc43",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "saveActyvBPUserToken",
        "func": "const bp_token = msg.payload.idToken\nflow.set(\"bp_token\", bp_token);\nmsg.bpToken = msg.payload.idToken\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 280,
        "wires": [
            [
                "c3b3fbedf04d9fda",
                "deee16f613d452d6"
            ]
        ]
    },
    {
        "id": "c3b3fbedf04d9fda",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "debug 440",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 280,
        "wires": []
    },
    {
        "id": "deee16f613d452d6",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "getSgflBankReq",
        "func": "const GO_URL = env.get('GO_URL')\nconst BANK_KEY = env.get(\"SGFL_BANK_KEY\")\n\nmsg.method = \"GET\"\nmsg.url = `${GO_URL}/bank/key/${BANK_KEY}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 340,
        "wires": [
            [
                "6e0c334239549676"
            ]
        ]
    },
    {
        "id": "6e0c334239549676",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "getAxisBankReq",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 510,
        "y": 340,
        "wires": [
            [
                "44911ba90652f7f4"
            ]
        ]
    },
    {
        "id": "44911ba90652f7f4",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Save Axis Bank ID",
        "func": "const bankId = msg.payload?._id\n\nmsg.BANKID = bankId\nflow.set(\"actyv_id\", bankId);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 340,
        "wires": [
            [
                "61eaaff3151c3a68"
            ]
        ]
    },
    {
        "id": "61eaaff3151c3a68",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Getting Actyv BPUser",
        "func": "const EMAIL = env.get(\"SGFL_EXXARO_BP_EMAIL\");\nconst PASSWORD = env.get(\"PASSWORD\");\nconst ADMIN_URL = env.get('ADMIN_URL');\nconst ACTYV_BP_URL = env.get('ACTYV_BP_URL')\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow.get(\"bp_token\")}`,\n}\n\nmsg.url = `${ADMIN_URL}/api/user/getCurrentUser?url=${ACTYV_BP_URL}`;\nmsg.method = \"GET\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 400,
        "wires": [
            [
                "f5db831d71a602e2"
            ]
        ]
    },
    {
        "id": "f5db831d71a602e2",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Getting Actyv_id",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 540,
        "y": 400,
        "wires": [
            [
                "3b95ad3268d173bf"
            ]
        ]
    },
    {
        "id": "3b95ad3268d173bf",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "save actyv_bp_id",
        "func": "flow.set(\"actyv_bp_id\", msg.payload.businessPartnerIds[0]);\nmsg.bpID = msg.payload.businessPartnerIds[0]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 400,
        "wires": [
            [
                "809e8cb11ff7dcbc"
            ]
        ]
    },
    {
        "id": "809e8cb11ff7dcbc",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "AuthenticateActyvEntity",
        "func": "\nconst EMAIL = env.get('ACTYV_ADMIN_EMAIL')\nconst PASSWORD = env.get('DEFAULT_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 460,
        "wires": [
            [
                "0378abafcf16d4ce"
            ]
        ]
    },
    {
        "id": "0378abafcf16d4ce",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "AuthenticateActyvEntity",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 630,
        "y": 460,
        "wires": [
            [
                "94f389375ae2063b"
            ]
        ]
    },
    {
        "id": "94f389375ae2063b",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\n// console.log({bankToken: msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 460,
        "wires": [
            [
                "0030ca8d721b5fcf"
            ]
        ]
    },
    {
        "id": "0030ca8d721b5fcf",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Getting Actyv User",
        "func": "const EMAIL = env.get(\"SGFL_EXXARO_BP_EMAIL\");\nconst PASSWORD = env.get(\"PASSWORD\");\nconst ADMIN_URL = env.get('ADMIN_URL');\nconst ACTYV_ENTITY_URL = env.get('ACTYV_ENTITY_URL')\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow.get(\"actyvToken\")}`,\n}\n\nmsg.url = `${ADMIN_URL}/api/user/getCurrentUser?url=${ACTYV_ENTITY_URL}`;\nmsg.method = \"GET\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 540,
        "wires": [
            [
                "f1955a7beaa8d39f"
            ]
        ]
    },
    {
        "id": "f1955a7beaa8d39f",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Getting Actyv_id",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 560,
        "y": 540,
        "wires": [
            [
                "84ada2eff5958aa6"
            ]
        ]
    },
    {
        "id": "84ada2eff5958aa6",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "save actyv_entity_id",
        "func": "flow.set(\"actyv_bp_id\", msg.payload.actyvEntityId);\nmsg.actyvEntityId = msg.payload.actyvEntityId\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 540,
        "wires": [
            [
                "faccf511f2eb5ca3"
            ]
        ]
    },
    {
        "id": "faccf511f2eb5ca3",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Setting Payload For Fetching INITIATED Status Files",
        "func": "// const enterpriseToken = flow.get(\"enterpriseToken\")\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/fileInfoBySeedingStatus/INITIATED`;\nconst flow_var = flow.get('FLOW_VARIABLES');\nconst bankToken = flow.get(\"bankToken\")\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${bankToken}`,\n    \"bankid\": `${msg.bankId}`\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'GET';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 660,
        "wires": [
            [
                "b34b81b67d9b927c",
                "26b95a46e75ff292"
            ]
        ]
    },
    {
        "id": "b34b81b67d9b927c",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "d": true,
        "name": "INITIATED Files",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 720,
        "y": 660,
        "wires": [
            [
                "c5ccc78c2e5da8b1",
                "512c6cc6cd744b34",
                "26b95a46e75ff292"
            ]
        ]
    },
    {
        "id": "c5ccc78c2e5da8b1",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "debug 441",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 660,
        "wires": []
    },
    {
        "id": "512c6cc6cd744b34",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Looping and Segregating Files",
        "func": "const files = msg.payload.fileInfo.filter((file) => file.seedingType == \"BNPL_SEEDING\");\n\n\nfor (const file of files) {\n    if (file.seedingType == \"BNPL_SEEDING\" && file.fileId ===\"9d020bd2-7d17-4da8-b403-e66727d2c495-BNPL_Seeding_File\") {\n        node.send({\n            ...msg,\n            ...file,\n            actyvEntityId: msg.actyvEntityId,\n            payload: file.fileId,\n            seedingType: file.seedingType\n        })\n    }\n}\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 720,
        "wires": [
            [
                "26b95a46e75ff292"
            ]
        ]
    },
    {
        "id": "26b95a46e75ff292",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "get bankApplicationConfig by bank",
        "func": "const enterpriseToken = flow.get(\"enterpriseToken\")\nconst bankId = msg.bankId\n\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/bank-application-config/bank/${bankId}`;\n\n\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'GET';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 820,
        "wires": [
            [
                "e9e14dbb606f8c2f"
            ]
        ]
    },
    {
        "id": "e9e14dbb606f8c2f",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "get bankApplicationConfig by bank",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 680,
        "y": 820,
        "wires": [
            [
                "2baeb362f96dc876",
                "481d15b8a3da8f63"
            ]
        ]
    },
    {
        "id": "2baeb362f96dc876",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "get bankApplicationConfig by bank",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 820,
        "wires": []
    },
    {
        "id": "481d15b8a3da8f63",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "filter bankApplnConfig by enterpriseId",
        "func": "const {enterpriseId} = msg\nlet bankApllicationConfigs = msg.payload.filter((config)=>config.allowedEnterprises[0] == enterpriseId)\nmsg.payload = bankApllicationConfigs\nmsg.bankApplicationConfigId = bankApllicationConfigs[0]?.id || \"BNPL\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 920,
        "wires": [
            [
                "600a825c510e0115"
            ]
        ]
    },
    {
        "id": "600a825c510e0115",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Get role id",
        "func": "\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n   \n}\n\nmsg.method = 'POST';\nmsg.url = `${env.get(\"ADMIN_URL\")}/api/role/query`\nmsg.payload = {\n    \"query\": {\n        \"name\": \"paylater_bp_admin\"\n    }\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 980,
        "wires": [
            [
                "18c9b5b0dfe32d17"
            ]
        ]
    },
    {
        "id": "18c9b5b0dfe32d17",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Get role id",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 980,
        "wires": [
            [
                "fc78a9f2b35ee4c9",
                "8985e4e51543a20a"
            ]
        ]
    },
    {
        "id": "fc78a9f2b35ee4c9",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "set roleId",
        "func": "msg.roleId = msg.payload[0][\"_id\"]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 980,
        "wires": [
            [
                "b252b6bde58d7a2c"
            ]
        ]
    },
    {
        "id": "8985e4e51543a20a",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "debug 442",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 920,
        "wires": []
    },
    {
        "id": "7526a6852c4bf63f",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\n\n// msg.fileId = msg.payload\nmsg.method = \"GET\"\nmsg.headers = {\n    fileType: \"xlsx\"\n}\nmsg.url = `${GO_URL}/file/read/${msg.fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1120,
        "wires": [
            [
                "4ec816e1243524ab"
            ]
        ]
    },
    {
        "id": "4ec816e1243524ab",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "readFile",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 740,
        "y": 1120,
        "wires": [
            [
                "37a615ce324a3f8f"
            ]
        ]
    },
    {
        "id": "37a615ce324a3f8f",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "read xls",
        "func": "let data = xlsx.read(msg.payload, { type: \"buffer\" })\nconst wsname = data.SheetNames[0];\nconsole.log({wsname})\nconst ws = data.Sheets[wsname];\nconsole.log({ws})\nconst payload = xlsx.utils.sheet_to_json(ws);\nmsg.seedingData = payload\nmsg.completedSeeding = [],\nmsg.failedSeeding = []\nmsg.anchored = false;\nif(msg.enterpriseId){\n    msg.anchored = true\n}\n\nmsg.numOfRows = payload.length\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "xlsx",
                "module": "xlsx"
            }
        ],
        "x": 920,
        "y": 1120,
        "wires": [
            [
                "1ad8afc500ea81a0"
            ]
        ]
    },
    {
        "id": "1ad8afc500ea81a0",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "debug 443",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1120,
        "wires": []
    },
    {
        "id": "dd96269dadc50da5",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Loop",
        "func": "const users = msg.seedingData;\nconst ENTERPRISE_ID = msg.enterpriseId;\nconst BANK_ID = msg.bankId;\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nfor (const user of users) {\n    node.send({\n        ...msg,\n        payload : user,\n        isCompleted : \"false\",\n        ENTERPRISE_ID: ENTERPRISE_ID,\n        BANK_ID: BANK_ID,\n    })\n    await sleep(10000);\n}\n\nmsg.isCompleted = \"true\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1300,
        "wires": [
            [
                "18fa7168290db451"
            ]
        ]
    },
    {
        "id": "18fa7168290db451",
        "type": "switch",
        "z": "46bc40aaa70da7e7",
        "name": "",
        "property": "isCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 1300,
        "wires": [
            [
                "66aba7a59ab37a2c"
            ],
            [
                "2772982c52809eab"
            ]
        ]
    },
    {
        "id": "66aba7a59ab37a2c",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Flow Done",
        "func": "const fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/changeStatus/${msg.fileId}`;\nconst flow_var = flow.get('FLOW_VARIABLES');\nconsole.log(\"request\", fetchInitiatedFiles)\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${flow_var.token}`,\n    \"bankid\": `${flow.get(\"actyv_id\")}`\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'PATCH';\nmsg.payload = {\n    \"fileId\":msg.fileId,\n    \"seedingStatus\":\"COMPLETED\"\n}\nreturn msg;\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1300,
        "wires": [
            [
                "da8f5d460633c83f",
                "0be7f023ce70bc74"
            ]
        ]
    },
    {
        "id": "2772982c52809eab",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Creating  an Object which contains all info required in the flow",
        "func": "const env_var = global.get('ENV_VARIABLES');\nconst flow_var = flow.get('FLOW_VARIABLES');\nmsg.a = true;\nconst document = msg.payload;\nconsole.log(document);\n\nmsg.obj = {\n    pan: document[\"Business Partner PAN\"],\n    gst: document[\"Business Partner GST\"],\n    mobileNo: document[\"Business Partner Phone\"],\n    email: document[\"Business Partner Email\"],\n    bankIdentifierByParent: document[\"Bank CRN\"],\n    bankAccountNumber: document[\"Loan Repayment Account Number\"],\n    bankIFSC: document[\"Loan Repayment Account IFSC\"],\n    bankName: document[\"Loan Repayment Account Name\"],\n    approvedLimit: document[\"Approved Limit\"],\n    bankProvidedLoanCodes: document[\"Loan Account Number\"],\n    businessPartnerId: \"\",\n    token: \"\",\n    businessType: \"\",\n    bnpl_preference: document[\"Create BNPL Preference\"].toUpperCase()\n}\nconsole.log(\"ROIIIIIIIII\", document[\"Rate Of Interest\"]);\nif (document[\"Rate Of Interest\"] !== undefined){\n    msg.obj[\"rateOfInterest\"] = document[\"Rate Of Interest\"]; \n}\n\nif (document[\"Business Partner PAN\"] === undefined || document[\"Business Partner GST\"] === undefined || document[\"Bank CRN\"] === undefined || document[\"Loan Repayment Account Number\"] === undefined\n    || document[\"Loan Repayment Account IFSC\"] === undefined || document[\"Loan Repayment Account Name\"] === undefined || document[\"Approved Limit\"] === undefined\n   )\n{\n    msg.a = false;\n}\n\n\nmsg.result = {\n    \"Business Partner ID\" : \"\",\n    \"User ID\": \"\",\n    \"Role User Mapping\": \"\",\n    \"Business Partner Sales Summary for current month\": \"\",\n    \"Business-Relationship with Bank\": \"\",\n    \"Business-Relationship with Enterprise\": \"\",\n    \"Create Loan Term\": \"\",\n    \"Update Loan Term\": \"\",\n    \"Fetch Tenor\": \"\",\n    \"Create BNPL Preference\": \"\"\n}\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow_var.token}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\nmsg.url = env_var.GET_BP + \"/\" + msg.obj.gst;\nmsg.method = 'get';\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1420,
        "wires": [
            [
                "f4ea368ea95492b3"
            ]
        ]
    },
    {
        "id": "da8f5d460633c83f",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "debug 444",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 1300,
        "wires": []
    },
    {
        "id": "0be7f023ce70bc74",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Changing seeding Status",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 790,
        "y": 1340,
        "wires": [
            [
                "e05f445aed083fb9"
            ]
        ]
    },
    {
        "id": "f4ea368ea95492b3",
        "type": "switch",
        "z": "46bc40aaa70da7e7",
        "name": "",
        "property": "a",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 1420,
        "wires": [
            [
                "96178eeb077fb327"
            ],
            [
                "e8d926ac7880ac6b"
            ]
        ]
    },
    {
        "id": "e05f445aed083fb9",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Flow Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 1340,
        "wires": []
    },
    {
        "id": "96178eeb077fb327",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Row condition falied",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 1400,
        "wires": []
    },
    {
        "id": "e8d926ac7880ac6b",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Get BP_ID",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 250,
        "y": 1480,
        "wires": [
            [
                "eebe6405a86efb99"
            ]
        ]
    },
    {
        "id": "eebe6405a86efb99",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Get userId from businessPartnerId",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${flow_var.token}`\n}\n\nif (msg.statusCode === 200){\n    const data = msg.payload;\n    msg.obj.businessPartnerId = data._id;\n    msg.result[\"Business Partner ID\"] = `${msg.obj.businessPartnerId}`;\n    msg.method = 'get';\n    msg.url = `${env_var.CHECK_BP_RELATIONSHIP}/${msg.obj.businessPartnerId}/${msg.ENTERPRISE_ID}`\n    // msg.url = `${env_var.BP_USER}/${msg.obj.businessPartnerId}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1480,
        "wires": [
            [
                "de213e14354d4284"
            ]
        ]
    },
    {
        "id": "de213e14354d4284",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "getting relationship type",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 1480,
        "wires": [
            [
                "dde42bbafc0f88bf"
            ]
        ]
    },
    {
        "id": "dde42bbafc0f88bf",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Get userId from businessPartnerId",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\n\nconst data = msg.payload;\nmsg.userId = data[0].userId;\nmsg.result[\"User ID\"] = `${msg.userId}`\n\nmsg.obj[\"businessType\"] = msg.payload.relationType?.split(\"-\")[0];\n\nif (msg.obj.businessType === \"DISTRIBUTOR\") {\n    msg.product_type_id = msg.bankApplicationConfigId;\n}\nelse {\n    msg.product_type_id = msg.bankApplicationConfigId;\n}\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${flow_var.token}`\n}\n\nmsg.method = 'get';\nmsg.url = `${env_var.BP_USER}/${msg.obj.businessPartnerId}`\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1540,
        "wires": [
            [
                "b8d0abda7bbf4a77"
            ]
        ]
    },
    {
        "id": "b8d0abda7bbf4a77",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Get User_ID",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 1540,
        "wires": [
            [
                "32e9b2af925bcada"
            ]
        ]
    },
    {
        "id": "bd9aeba3539d062e",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Check if RoleUserMapping exists",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\nif(msg.statusCode === 200){\n    const data = msg.payload;\n    msg.userId = data[0].userId;\n    msg.result[\"User ID\"] = `${msg.userId}`;\n\n    msg.headers = {\n        \"Authorization\": `Bearer ${flow_var.token}`,\n        \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n    }\n\n    msg.url = `${env_var.CHECK_ROLE_USER_MAPPING}/${msg.obj.businessPartnerId}`;\n    msg.method = 'get';\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1900,
        "wires": [
            [
                "d7b4539dd4d1bc47"
            ]
        ]
    },
    {
        "id": "d7b4539dd4d1bc47",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Check Role User Mapping",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 1900,
        "wires": [
            [
                "3c7624c43b0c6d38",
                "46f22475949a01c9"
            ]
        ]
    },
    {
        "id": "3c7624c43b0c6d38",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Checking RoleUser Mapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 1900,
        "wires": []
    },
    {
        "id": "46f22475949a01c9",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Result of Check Role User Mapping",
        "func": "const mappings = msg.payload;\n\nvar flag = 0;\nfor (const mapping of mappings) {\n    if(mapping.userId == msg.userId && mapping.roleId == msg.roleId){\n        flag = 1;\n        break;\n    }\n};\n\nif(flag === 1){\n    msg.userExists = \"true\";\n    msg.result[\"Role User Mapping\"] = `Exists`;\n}\nelse{\n    msg.userExists = \"false\";\n}\nmsg.userExists = \"false\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1980,
        "wires": [
            [
                "91c0b3797aec4216",
                "3bda400b447e9d7f"
            ]
        ]
    },
    {
        "id": "91c0b3797aec4216",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Check Role User Mapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "userExists",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1980,
        "wires": []
    },
    {
        "id": "3bda400b447e9d7f",
        "type": "switch",
        "z": "46bc40aaa70da7e7",
        "name": "",
        "property": "userExists",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 130,
        "y": 2080,
        "wires": [
            [
                "2099e77f0988ad89"
            ],
            [
                "6ea03b4a3c9689a2"
            ]
        ]
    },
    {
        "id": "2099e77f0988ad89",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Setting payload for roleUserMapping",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\n\nconst userId = msg.userId;\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow_var.token}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\n\n\n\n\nmsg.payload = {\n    userId : userId,\n    roleId: msg.roleId,\n    businessPartnerId : msg.obj.businessPartnerId,\n}\nmsg.url = env_var.ROLE_USER_MAPPING;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 2060,
        "wires": [
            [
                "a96aa368bad9b62b",
                "b5aceff2af16f35a",
                "a34f41b5a66e8712"
            ]
        ]
    },
    {
        "id": "6ea03b4a3c9689a2",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Checking if businessPartnerBankRelationship exists",
        "func": "const flow_var = flow.get(\"FLOW_VARIABLES\")\nconst env_var = global.get(\"ENV_VARIABLES\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${flow_var.token}`\n}\nmsg.url = `${env_var.CHECK_BP_RELATIONSHIP}/getByIdentifierByParent/${msg.obj.bankIdentifierByParent}`;\nmsg.method = 'get'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2260,
        "wires": [
            [
                "0e0f4fa77b17682a"
            ]
        ]
    },
    {
        "id": "a96aa368bad9b62b",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Payload for roleUserMapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 2040,
        "wires": []
    },
    {
        "id": "b5aceff2af16f35a",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Role User Mapping",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 710,
        "y": 2080,
        "wires": [
            [
                "a8198d8f1a183f1a",
                "6ea03b4a3c9689a2"
            ]
        ]
    },
    {
        "id": "a34f41b5a66e8712",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "debug 445",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 2180,
        "wires": []
    },
    {
        "id": "0e0f4fa77b17682a",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Get Identifier By Parent - Bank",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 2260,
        "wires": [
            [
                "6f2b31e9b6d0961a",
                "c8e1120b853d08f9"
            ]
        ]
    },
    {
        "id": "a8198d8f1a183f1a",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Result of roleUserMapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 2080,
        "wires": []
    },
    {
        "id": "6f2b31e9b6d0961a",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Checking if businessPartnerBankRelationship exists",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 2260,
        "wires": []
    },
    {
        "id": "c8e1120b853d08f9",
        "type": "switch",
        "z": "46bc40aaa70da7e7",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 70,
        "y": 2360,
        "wires": [
            [
                "46036e71d06457de"
            ],
            [
                "4b15434cd1e49470"
            ]
        ]
    },
    {
        "id": "46036e71d06457de",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Setting Payload for businessPartnerBankRelationship",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow_var.token}`\n}\n\nmsg.result[\"Business-Relationship with Bank\"] = \"No\"\n\nmsg.payload = {\n    businessId: msg.obj.businessPartnerId,\n    parentBusinessId: msg.BANK_ID,\n    identifierByParent: msg.obj.bankIdentifierByParent,\n    bankAccountNumber: msg.obj.bankAccountNumber,\n    bankIFSC: msg.obj.bankIFSC,\n    bankName: msg.obj.bankName,\n    relationType: `${msg.obj.businessType}-BANK`,\n    // relationType: `DISTRIBUTOR-BANK`,\n}\nmsg.url = env_var.BP_BANK_RELATIONSHIP;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 2340,
        "wires": [
            [
                "5a148a176ba38974",
                "f49b9c7de3822827"
            ]
        ]
    },
    {
        "id": "4b15434cd1e49470",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Checking If loanTerm exists",
        "func": "const flow_var = flow.get(\"FLOW_VARIABLES\")\nconst env_var = global.get(\"ENV_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nif (msg.statusCode === 200) {\n    if (msg.result[\"Business-Relationship with Bank\"] === \"No\") {\n        msg.result[\"Business-Relationship with Bank\"] = `Created ${msg.payload._id}`;\n    }\n    else {\n        msg.result[\"Business-Relationship with Bank\"] = `Exists`;\n    }\n}\nelse {\n    msg.result[\"Business-Relationship with Bank\"] = `${msg.statusCode} Error`\n}\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${actyvToken}`\n}\nmsg.url = `${env_var.LOAN_TERM}/service/fetchByBankID`;\nmsg.payload = {\"borrowerID\" : msg.obj.businessPartnerId,\n            \"enterpriseID\": msg.ENTERPRISE_ID,\n            \"bankID\": msg.BANK_ID};\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 2520,
        "wires": [
            [
                "bb6c19e9a9f00c68"
            ]
        ]
    },
    {
        "id": "5a148a176ba38974",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Payload for businessPartnerBankRelationship",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 2320,
        "wires": []
    },
    {
        "id": "f49b9c7de3822827",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Business Partner Bank Relationship",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 800,
        "y": 2360,
        "wires": [
            [
                "106789ef4bb431a5",
                "4b15434cd1e49470"
            ]
        ]
    },
    {
        "id": "bb6c19e9a9f00c68",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Fetch Loan Term ",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 2520,
        "wires": [
            [
                "0d767002d2a14434",
                "6bd59afb37147f0d"
            ]
        ]
    },
    {
        "id": "106789ef4bb431a5",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Business Partner Bank Relationship",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 2360,
        "wires": []
    },
    {
        "id": "0d767002d2a14434",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Check If Loan Term Exists",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 2520,
        "wires": []
    },
    {
        "id": "6bd59afb37147f0d",
        "type": "switch",
        "z": "46bc40aaa70da7e7",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 2660,
        "wires": [
            [
                "4e7dc1f5c4819030"
            ],
            [
                "97f67d2394211fbf"
            ]
        ]
    },
    {
        "id": "4e7dc1f5c4819030",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Setting Payload for creating loanTerm",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\nconst bankToken = flow.get(\"bankToken\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${bankToken}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    bankid : msg.BANKID\n}\n\nmsg.payload = {\n    bankID: msg.BANK_ID,\n    borrowerID: msg.obj.businessPartnerId,\n    enterpriseID: msg.ENTERPRISE_ID,\n    // productType: msg.bankApplicationConfigId\n    bankApplicationConfigID: msg.bankApplicationConfigId\n    // rateOfInterest: Number(msg.obj.rateOfInterest)\n}\nif(msg.obj[\"rateOfInterest\"]!==\"undefined\"){\n    msg.payload[\"rateOfInterest\"] = msg.obj.rateOfInterest;\n}\nmsg.url = env_var.LOAN_TERM;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 2620,
        "wires": [
            [
                "8b286892c6933714",
                "aec8046dc497bf28",
                "a369bac879971eb3"
            ]
        ]
    },
    {
        "id": "97f67d2394211fbf",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "setting up payload for updating loadn term if it already exists",
        "func": "msg.payload = msg.payload[0];\nif(msg.statusCode === 201){\n    msg.result[\"Create Loan Term\"] = `Exists: ${msg.payload.id}`;\n}\nelse{\n    msg.result[\"Create Loan Term\"] = `${msg.statusCode} Error`;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 2720,
        "wires": [
            [
                "2a9f77bdd61bd5c3"
            ]
        ]
    },
    {
        "id": "8b286892c6933714",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Payload for creating loanTerm",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 2600,
        "wires": []
    },
    {
        "id": "aec8046dc497bf28",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Create Loan Term",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 750,
        "y": 2640,
        "wires": [
            [
                "2a9f77bdd61bd5c3",
                "cf853ffb161a06e0"
            ]
        ]
    },
    {
        "id": "a369bac879971eb3",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Paylaod for creating loan_term",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 2660,
        "wires": []
    },
    {
        "id": "2a9f77bdd61bd5c3",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Setting Payload for udpating loanTerm",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    actyventityid: msg.actyvEntityId\n}\n\nconst data = msg.payload;\nmsg.loanTermId = data.id;\n\nif (msg.statusCode === 201 && msg.result[\"Create Loan Term\"] === \"\"){\n    msg.result[\"Create Loan Term\"] = `Loan Term Created: ${msg.loanTermId}`;\n}\n\nmsg.payload = {\n    loanTermsID : msg.loanTermId,\n    approvedLimit: msg.obj.approvedLimit,\n    validTill: \"20/11/2025\",\n    loanGrantStatus: \"APPROVED\",\n    crnNumber: msg.obj.bankIdentifierByParent,\n    awaitingBalanceRefresh: false,\n    businessType: msg.obj.businessType,\n    bankProvidedLoanCodes: msg.obj.bankProvidedLoanCodes\n}\nmsg.url = env_var.LOAN_TERM + \"/service/update\";\nmsg.method = 'patch';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 2720,
        "wires": [
            [
                "426b56e343b0647c",
                "0776f30b9a3e56bb"
            ]
        ]
    },
    {
        "id": "cf853ffb161a06e0",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Create Loan Term",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 2640,
        "wires": []
    },
    {
        "id": "426b56e343b0647c",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Payload for updating loanTerm",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 2700,
        "wires": []
    },
    {
        "id": "0776f30b9a3e56bb",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Update Loan Term",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1170,
        "y": 2740,
        "wires": [
            [
                "c3c0f562a269d17b",
                "46bc5195812ddc34"
            ]
        ]
    },
    {
        "id": "c3c0f562a269d17b",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Update Loan Term",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 2740,
        "wires": []
    },
    {
        "id": "46bc5195812ddc34",
        "type": "switch",
        "z": "46bc40aaa70da7e7",
        "name": "",
        "property": "obj[\"bnpl_preference\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Y",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "N",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 2880,
        "wires": [
            [
                "1d7e8282f5fe4bdf"
            ],
            [
                "8f731ad72663ba98"
            ]
        ]
    },
    {
        "id": "1d7e8282f5fe4bdf",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Payload For fetching TenorAndRateSpread",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nconst sleep = async (milliseconds) => {\n  await new Promise(resolve => {\n    return setTimeout(resolve, milliseconds)\n  });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n  \"Authorization\": `Bearer ${actyvToken}`,\n  \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n  bankid: msg.BANKID\n}\nif (msg.statusCode === 200) {\n  msg.result[\"Update Loan Term\"] = `Updated: ${msg.loanTermId}`;\n}\nelse {\n  msg.result[\"Update Loan Term\"] = `${msg.statusCode} Error`;\n}\n\nmsg.payload = {\n  \"bankID\": msg.BANK_ID,\n  \"loanID\": msg.loanTermId,\n}\n\nmsg.url = env_var.TENOR_AND_RATE_SPREAD + \"/fetch\";\nmsg.method = 'POST';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 2860,
        "wires": [
            [
                "9e392d0ab555faf6"
            ]
        ]
    },
    {
        "id": "8f731ad72663ba98",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "debug 446",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 3080,
        "wires": []
    },
    {
        "id": "9e392d0ab555faf6",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Fetching TenorAndRateSpread",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1310,
        "y": 2860,
        "wires": [
            [
                "e106ad7531043762",
                "efdb4823212bb010"
            ]
        ]
    },
    {
        "id": "d852bacf848fc4b1",
        "type": "http request",
        "z": "46bc40aaa70da7e7",
        "name": "Create BNPL Preference",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1330,
        "y": 2980,
        "wires": [
            [
                "c10186ee7ebe1cd7",
                "8f731ad72663ba98"
            ]
        ]
    },
    {
        "id": "e106ad7531043762",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "Setting Payload for creating BNPL preference",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"businesspartnerid\": flow.get(\"actyv_bp_id\"),\n    \"bankid\": msg.BANK_ID,\n    \"actyventityid\": msg.actyvEntityId\n}\n\nmsg.DEFAULT_SPREAD_ID = msg.payload[0].id;\n\nif (msg.statusCode === 201){\n    msg.result[\"Fetch Tenor\"] = `Tenor Fetched ${msg.DEFAULT_SPREAD_ID}`\n}\nelse{\n    msg.result[\"Fetch Tenor\"] = `${msg.statusCode} Error`\n}\n\nmsg.payload = {\n    borrowerID: msg.obj.businessPartnerId,\n    bankApplicationConfigID: msg.product_type_id,\n    defaultBankID: msg.BANK_ID,\n    defaultSpreadID: msg.DEFAULT_SPREAD_ID,\n    minInvoiceAmountThreshold: env_var.MIN_INVOICE_AMOUNT_THRESHOLD\n}\nmsg.url = env_var.BNPL_PREFERENCE;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 2980,
        "wires": [
            [
                "d852bacf848fc4b1",
                "893fc4d8f493e470",
                "fba1ebe5ceec377b"
            ]
        ]
    },
    {
        "id": "efdb4823212bb010",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "fetching tenor and rate spread",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1690,
        "y": 2840,
        "wires": []
    },
    {
        "id": "c10186ee7ebe1cd7",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Create BNPL Preference",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 2980,
        "wires": []
    },
    {
        "id": "893fc4d8f493e470",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "Payload for creating BNPL preference",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 2940,
        "wires": []
    },
    {
        "id": "fba1ebe5ceec377b",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "debug 447",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 3080,
        "wires": []
    },
    {
        "id": "b252b6bde58d7a2c",
        "type": "file in",
        "z": "46bc40aaa70da7e7",
        "name": "",
        "filename": "/Users/shravanpm/Downloads/vayu.xlsx",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 360,
        "y": 1200,
        "wires": [
            [
                "c75480b4de89ef2d",
                "c1c958ce1f07b54b"
            ]
        ]
    },
    {
        "id": "d2d92b5e3e22038e",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "debug 462",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1200,
        "wires": []
    },
    {
        "id": "c75480b4de89ef2d",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "debug 463",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 1240,
        "wires": []
    },
    {
        "id": "c1c958ce1f07b54b",
        "type": "function",
        "z": "46bc40aaa70da7e7",
        "name": "read xls",
        "func": "let data = xlsx.read(msg.payload, { type: \"buffer\" })\nconst wsname = data.SheetNames[0];\nconsole.log({wsname})\nconst ws = data.Sheets[wsname];\nconsole.log({ws})\nconst payload = xlsx.utils.sheet_to_json(ws);\nmsg.seedingData = payload\nmsg.completedSeeding = [],\nmsg.failedSeeding = []\nmsg.anchored = false;\nif(msg.enterpriseId){\n    msg.anchored = true\n}\n\nmsg.numOfRows = payload.length\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "xlsx",
                "module": "xlsx"
            }
        ],
        "x": 680,
        "y": 1200,
        "wires": [
            [
                "d2d92b5e3e22038e",
                "dd96269dadc50da5"
            ]
        ]
    },
    {
        "id": "32e9b2af925bcada",
        "type": "debug",
        "z": "46bc40aaa70da7e7",
        "name": "debug 464",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 1600,
        "wires": []
    },
    {
        "id": "b86b9344785e1e4b",
        "type": "inject",
        "z": "e85847ac8c3405fe",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "4df233a9c1043adf"
            ]
        ]
    },
    {
        "id": "4df233a9c1043adf",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "name": "Setting Global Variables",
        "func": "let BP_TYPE = \"DISTRIBUTOR\";\n\n\n\n\n\nconst ENVIRONMENT = env.get(\"ENVIRONMENT\");\nconst CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\");\n\nconst ROLE_ID = env.get(\"ROLE_ID\");\nconst EMAIL = env.get(\"SEEDING_EMAIL\");\nconst PASSWORD = env.get(\"SEEDING_PASSWORD\");\n// const RATE_OF_INTEREST = env.get(\"RATE_OF_INTEREST\");\n// let XLSX_FILE_PATH = env.get(\"XLSX_FILE_PATH\");\n// let XLSX_FILE_PATH = \"C:/Users/Ruthvik/Downloads/Format_File_BNPL_Seeding.xlsx\";\n\n\nconst SLEEP_TIME = 500;\nconst MIN_INVOICE_AMOUNT_THRESHOLD = 1000;\n\nlet PRODUCT_TYPE_ID;\n\n\n\n\nconst GO_SERVICE_URL = `https://actyv-platform-go-service.${ENVIRONMENT}.actyv.com/api`;\nconst PAYLATER_SERVICE_URL = `https://actyv-platform-paylater-service-v1.${ENVIRONMENT}.actyv.com/v1`;\nconst ADMIN_SERVICE_URL = `https://actyv-platform-admin-service.${ENVIRONMENT}.actyv.com/api`;\nconst AUTH_URL = `https://actyv-platform-admin-service.${ENVIRONMENT}.actyv.com/api/user/authenticateUser`;\n\nconst date = new Date();\n\nconst ENV_VARIABLES = {\n    \"GO_SERVICE_URL\": GO_SERVICE_URL,\n    \"PAYLATER_SERVICE_URL\": PAYLATER_SERVICE_URL,\n    \"ADMIN_SERVICE_URL\": ADMIN_SERVICE_URL,\n    \"GET_BP\": `${GO_SERVICE_URL}/business-partner/service`,\n    \"BP_USER\": `${ADMIN_SERVICE_URL}/business-partner-user/get/all`,\n    \"USER\": `${ADMIN_SERVICE_URL}/user`,\n    \"ROLE_USER_MAPPING\": `${ADMIN_SERVICE_URL}/role-user-mapping`,\n    \"BP_SALES_SUMMARY\": `${GO_SERVICE_URL}/business-partner-sales-summary`,\n    \"BP_BANK_RELATIONSHIP\": `${GO_SERVICE_URL}/business-relationship`,\n    \"LOAN_TERM\": `${PAYLATER_SERVICE_URL}/loan-terms`,\n    \"BNPL_PREFERENCE\": `${PAYLATER_SERVICE_URL}/bnpl-preference`,\n    \"AUTH_URL\": `${AUTH_URL}`,\n    \"CHECK_ROLE_USER_MAPPING\": `${ADMIN_SERVICE_URL}/role-user-mapping/byBusinessPartnerId`,\n    \"GET_SALES_SUMMARY\": `${GO_SERVICE_URL}/business-partner-sales-summary`,\n    \"CHECK_BP_RELATIONSHIP\": `${GO_SERVICE_URL}/business-relationship/service`,\n    \"TENOR_AND_RATE_SPREAD\": `${PAYLATER_SERVICE_URL}/tenor-and-rate-spread`,\n    \"YEAR\": date.getFullYear(),\n    \"MONTH\": date.getMonth() + 1,\n    // \"BUSINESSTYPE\" : `${BP_TYPE}`,\n    // \"RELATION1\": `${BP_TYPE}-BANK`,\n    // \"RELATION2\": `${BP_TYPE}-ENTERPRISE`,\n    \"CONFIG_KEY\": `${CONFIG_KEY}`,\n    // \"BANK_ID\": `${BANK_ID}`,\n    // \"ENTERPRISE_ID\": `${ENTERPRISE_ID}`,\n    \"ROLE_ID\": `${ROLE_ID}`,\n    \"EMAIL\": `${EMAIL}`,\n    \"PASSWORD\": `${PASSWORD}`,\n    \"SLEEP_TIME\": `${SLEEP_TIME}`,\n    //\"RATE_OF_INTEREST\": `${RATE_OF_INTEREST}`,\n    \"MIN_INVOICE_AMOUNT_THRESHOLD\": MIN_INVOICE_AMOUNT_THRESHOLD,\n    \"PRODUCT_TYPE_ID\": `${PRODUCT_TYPE_ID}`\n}\n\nglobal.set(\"ENV_VARIABLES\", ENV_VARIABLES);\n\n// msg.payload = `${XLSX_FILE_PATH}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 160,
        "wires": [
            [
                "5a010f2d82ebebea"
            ]
        ]
    },
    {
        "id": "5a010f2d82ebebea",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "name": "AuthenticateActyvEntityUserReq",
        "func": "\nconst EMAIL = \"anand.rastogi@actyv.com\";\nconst PASSWORD =  \"890ioP@12\";\n// const EMAIL = env.get('EMAIL')\n// const PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \"password\": PASSWORD,\n    \"email\": EMAIL\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 220,
        "wires": [
            [
                "cd52108ce846967c"
            ]
        ]
    },
    {
        "id": "cd52108ce846967c",
        "type": "http request",
        "z": "e85847ac8c3405fe",
        "name": "AuthenticateActyvEntityUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 660,
        "y": 220,
        "wires": [
            [
                "89d32ad5ef1a79b0"
            ]
        ]
    },
    {
        "id": "89d32ad5ef1a79b0",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "name": "saveActyvEntityUserToken",
        "func": "const env_var = global.get(\"ENV_VARIABLES\");\n\nconst FLOW_VARIABLES = {\n    token: msg.payload.idToken\n}\nflow.set(\"FLOW_VARIABLES\", FLOW_VARIABLES);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 220,
        "wires": [
            [
                "2832c8c6d9b7df47"
            ]
        ]
    },
    {
        "id": "2832c8c6d9b7df47",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "name": "AuthenticateActyvBPUserReq",
        "func": "\nconst EMAIL = \"parmarnirav600@gmail.com\";\nconst PASSWORD =  \"User@123\";\n// const EMAIL = env.get('EMAIL')\n// const PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \"password\": PASSWORD,\n    \"email\": EMAIL\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 280,
        "wires": [
            [
                "512c668e2edd9fcc"
            ]
        ]
    },
    {
        "id": "512c668e2edd9fcc",
        "type": "http request",
        "z": "e85847ac8c3405fe",
        "name": "AuthenticateActyvBPUser",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 650,
        "y": 280,
        "wires": [
            [
                "1322bb0b3ffdd36e"
            ]
        ]
    },
    {
        "id": "1322bb0b3ffdd36e",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "name": "saveActyvBPUserToken",
        "func": "const bp_token = msg.payload.idToken\nflow.set(\"bp_token\", bp_token);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 280,
        "wires": [
            [
                "eae805c490af56fc"
            ]
        ]
    },
    {
        "id": "eae805c490af56fc",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "name": "Getting Actyv Entity User",
        "func": "const flow_var = flow.get('FLOW_VARIABLES');\nconst EMAIL = \"anand.rastogi@actyv.com\";\nconst PASSWORD =  \"890ioP@12\";\n// const EMAIL = env.get('EMAIL')\n// const PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow_var.token}`,\n}\n\nmsg.url = `${ADMIN_URL}/api/user/getCurrentUser?url=https://actyv-platform.qa.actyv.com`;\nmsg.method = \"GET\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 340,
        "wires": [
            [
                "64986f952648f2df"
            ]
        ]
    },
    {
        "id": "64986f952648f2df",
        "type": "http request",
        "z": "e85847ac8c3405fe",
        "name": "Getting Actyv_id",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 580,
        "y": 340,
        "wires": [
            [
                "f6354108ce9de960"
            ]
        ]
    },
    {
        "id": "f6354108ce9de960",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "name": "saveactyvId",
        "func": "flow.set(\"actyv_id\", msg.payload.actyvEntityId);\nmsg.actyvId = msg.payload.actyvEntityId\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 340,
        "wires": [
            [
                "2a45d1bc2b64b6b0"
            ]
        ]
    },
    {
        "id": "2a45d1bc2b64b6b0",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "name": "Getting Actyv BPUser",
        "func": "const EMAIL = \"parmarnirav600@gmail.com\";\nconst PASSWORD = \"User@123\";\n// const EMAIL = env.get('EMAIL')\n// const PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow.get(\"bp_token\")}`,\n}\n\nmsg.url = `${ADMIN_URL}/api/user/getCurrentUser?url=https://platform.qa.actyv.com`;\nmsg.method = \"GET\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 400,
        "wires": [
            [
                "47e3cb3e1fab7169"
            ]
        ]
    },
    {
        "id": "47e3cb3e1fab7169",
        "type": "http request",
        "z": "e85847ac8c3405fe",
        "name": "Getting Actyv_id",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 580,
        "y": 400,
        "wires": [
            [
                "cd5ed0480414aabb"
            ]
        ]
    },
    {
        "id": "cd5ed0480414aabb",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "name": "save actyv_bp_id",
        "func": "flow.set(\"actyv_bp_id\", msg.payload.businessPartnerIds[0]);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 400,
        "wires": [
            [
                "de4673907b1da3ea"
            ]
        ]
    },
    {
        "id": "de4673907b1da3ea",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "name": "Setting Payload For Fetching INITIATED Status Files",
        "func": "// const enterpriseToken = flow.get(\"enterpriseToken\")\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/fileInfoBySeedingStatus/INITIATED`;\nconst flow_var = flow.get('FLOW_VARIABLES');\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${flow_var.token}`,\n    \"actyventityid\": `${flow.get(\"actyv_id\")}`\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'GET';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 460,
        "wires": [
            [
                "b401552923fcf7fc"
            ]
        ]
    },
    {
        "id": "b401552923fcf7fc",
        "type": "http request",
        "z": "e85847ac8c3405fe",
        "name": "INITIATED Files",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 460,
        "wires": [
            [
                "cb86a8840a45164b",
                "a94c80c02d99f045"
            ]
        ]
    },
    {
        "id": "a94c80c02d99f045",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "name": "Looping and Segregating Files",
        "func": "const files = msg.payload.fileInfo.filter((file) => file.seedingType == \"BNPL_SEEDING\");\n\n\nfor (const file of files) {\n    if (file.seedingType == \"BNPL_SEEDING\") {\n        node.send({\n            ...file,\n            payload: file.fileId,\n            seedingType: file.seedingType,\n            \n            \n        })\n    }\n}\n\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 520,
        "wires": [
            [
                "96ba226ed81d950d"
            ]
        ]
    },
    {
        "id": "96ba226ed81d950d",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\n\nflow.set(\"failureRows\", []);\n\n// msg.fileId = msg.payload\nmsg.method = \"GET\"\nmsg.headers = {\n    fileType: \"xlsx\"\n}\nmsg.url = `${GO_URL}/file/read/${msg.fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 640,
        "wires": [
            [
                "ed342afb38ed38f5"
            ]
        ]
    },
    {
        "id": "ed342afb38ed38f5",
        "type": "http request",
        "z": "e85847ac8c3405fe",
        "name": "readFile",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 840,
        "y": 640,
        "wires": [
            [
                "7e3d438692ba10ac"
            ]
        ]
    },
    {
        "id": "7e3d438692ba10ac",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "name": "read xls",
        "func": "let data = xlsx.read(msg.payload, { type: \"buffer\" })\nconst wsname = data.SheetNames[0];\nconst ws = data.Sheets[wsname];\nconst payload = xlsx.utils.sheet_to_json(ws);\nmsg.seedingData = payload\nmsg.completedSeeding = [],\nmsg.failedSeeding = []\nmsg.anchored = false;\nif(msg.enterpriseId){\n    msg.anchored = true\n}\n\nmsg.numOfRows = payload.length\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "xlsx",
                "module": "xlsx"
            }
        ],
        "x": 1020,
        "y": 640,
        "wires": [
            [
                "2b2de97cb38882ac",
                "87757eae2e7eeb2c"
            ]
        ]
    },
    {
        "id": "2b2de97cb38882ac",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "name": "Loop",
        "func": "const users = msg.seedingData;\nconst ENTERPRISE_ID = msg.enterpriseId;\nconst BANK_ID = msg.bankId;\nflow.set(\"failedRows\", []);\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\nfor (const user of users) {\n    node.send({\n        ...msg,\n        payload : user,\n        isCompleted : \"false\",\n        ENTERPRISE_ID: ENTERPRISE_ID,\n        BANK_ID: BANK_ID,\n    })\n    await sleep(10000);\n}\nawait sleep(30000);\nmsg.isCompleted = \"true\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 740,
        "wires": [
            [
                "02e022af1ff0a706"
            ]
        ]
    },
    {
        "id": "02e022af1ff0a706",
        "type": "switch",
        "z": "e85847ac8c3405fe",
        "name": "",
        "property": "isCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 740,
        "wires": [
            [
                "d96be95878c74295"
            ],
            [
                "d3814f53301ec66c"
            ]
        ]
    },
    {
        "id": "d96be95878c74295",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "name": "Flow Done",
        "func": "const fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/update/${msg.fileId}`;\nconst flow_var = flow.get('FLOW_VARIABLES');\nconst failedRows = flow.get(\"failedRows\").length;\nconsole.log(\"request\", fetchInitiatedFiles)\nconsole.log({ failedRows: flow.get(\"failedRows\")})\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${flow_var.token}`,\n    \"actyventityid\": `${flow.get(\"actyv_id\")}`\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'PATCH';\nmsg.payload = {\n    \"fileId\":msg.fileId,\n    \"seedingStatus\": failedRows == 0 ? \"COMPLETED\" : failedRows == msg.seedingData.length ? \"FAILED\" : \"PARTIALLY_COMPLETED\",\n    \"numOfRows\": msg.seedingData.length,\n    \"successRows\": msg.seedingData.length - failedRows,\n    \"failedRows\": failedRows,\n}\nreturn msg;\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 740,
        "wires": [
            [
                "8b36601caae84e22"
            ]
        ]
    },
    {
        "id": "d3814f53301ec66c",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "name": "Creating  an Object which contains all info required in the flow",
        "func": "const env_var = global.get('ENV_VARIABLES');\nconst flow_var = flow.get('FLOW_VARIABLES');\n\n\n\n\n\n\n\n\nmsg.a = true;\nconst document = msg.payload;\n\n\nmsg.obj = {\n    pan: document[\"Business Partner PAN\"],\n    gst: document[\"Business Partner GST\"],\n    mobileNo: document[\"Business Partner Phone\"],\n    email: document[\"Business Partner Email\"],\n    bankIdentifierByParent: document[\"Bank CRN\"],\n    bankAccountNumber: document[\"Loan Repayment Account Number\"],\n    bankIFSC: document[\"Loan Repayment Account IFSC\"],\n    bankName: document[\"Loan Repayment Account Name\"],\n    approvedLimit: document[\"Approved Limit\"],\n    bankProvidedLoanCodes: document[\"Loan Account Number\"],\n    businessPartnerId: \"\",\n    token: \"\",\n    businessType: \"\",\n    bnpl_preference: document[\"Create BNPL Preference\"].toUpperCase()\n}\nif (document[\"Rate Of Interest\"] !== undefined){\n    msg.obj[\"rateOfInterest\"] = document[\"Rate Of Interest\"]; \n}\n\nif (document[\"Business Partner PAN\"] === undefined || document[\"Business Partner GST\"] === undefined || document[\"Bank CRN\"] === undefined || document[\"Loan Repayment Account Number\"] === undefined\n    || document[\"Loan Repayment Account IFSC\"] === undefined || document[\"Loan Repayment Account Name\"] === undefined || document[\"Approved Limit\"] === undefined\n   )\n{\n    msg.a = false;\n}\nif (isNaN(document[\"Rate Of Interest\"])){\n    msg.a = false\n}\n\n\nmsg.result = {\n    \"Business Partner ID\" : \"\",\n    \"User ID\": \"\",\n    \"Role User Mapping\": \"\",\n    \"Business Partner Sales Summary for current month\": \"\",\n    \"Business-Relationship with Bank\": \"\",\n    \"Business-Relationship with Enterprise\": \"\",\n    \"Create Loan Term\": \"\",\n    \"Update Loan Term\": \"\",\n    \"Fetch Tenor\": \"\",\n    \"Create BNPL Preference\": \"\"\n}\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow_var.token}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\nmsg.url = env_var.GET_BP + \"/\" + msg.obj.gst;\n// msg.url = env_var.GET_BP + \"/\" + \"jdvpevj\";\nmsg.method = 'get';\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 800,
        "wires": [
            [
                "94605942e95e9831",
                "ab4828f723f96fe8"
            ]
        ]
    },
    {
        "id": "03654b843f984f96",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "name": "flow done",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 740,
        "wires": []
    },
    {
        "id": "e7f47a91fec14daa",
        "type": "http request",
        "z": "e85847ac8c3405fe",
        "name": "Get BP_ID",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 190,
        "y": 1000,
        "wires": [
            [
                "3ecc9d1d82b9dd3c"
            ]
        ]
    },
    {
        "id": "3ecc9d1d82b9dd3c",
        "type": "switch",
        "z": "e85847ac8c3405fe",
        "name": "",
        "property": "payload._id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 980,
        "wires": [
            [
                "e4c558f3b4291935"
            ],
            [
                "a12e13603c18fdcf"
            ]
        ]
    },
    {
        "id": "e4c558f3b4291935",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "name": "function 216",
        "func": "let failedRows = flow.get(\"failedRows\");\nfailedRows.push({\n    applicantPAN: msg.obj.pan,\n    error_remark: \"Failed to get bp with this GST\"\n})\nflow.set(\"failedRows\",failedRows);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 960,
        "wires": [
            [
                "ce0ad2c72d03ba95"
            ]
        ]
    },
    {
        "id": "ce0ad2c72d03ba95",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "name": "UnsuccessFul row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 960,
        "wires": []
    },
    {
        "id": "a12e13603c18fdcf",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "name": "Get userId from businessPartnerId",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${flow_var.token}`\n}\n\nif (msg.statusCode === 200){\n    const data = msg.payload;\n    msg.obj.businessPartnerId = data._id;\n    msg.result[\"Business Partner ID\"] = `${msg.obj.businessPartnerId}`;\n    msg.method = 'get';\n    msg.url = `${env_var.CHECK_BP_RELATIONSHIP}/${msg.obj.businessPartnerId}/${msg.ENTERPRISE_ID}`\n    // msg.url = `${env_var.CHECK_BP_RELATIONSHIP}/64521b0164c7df65fb660c22/${msg.ENTERPRISE_ID}`\n    // msg.url = `${env_var.BP_USER}/${msg.obj.businessPartnerId}`\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1080,
        "wires": [
            [
                "42ca99080b44e3e2"
            ]
        ]
    },
    {
        "id": "42ca99080b44e3e2",
        "type": "http request",
        "z": "e85847ac8c3405fe",
        "name": "getting relationship type",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 650,
        "y": 1080,
        "wires": [
            [
                "e7fec99156beb6cf"
            ]
        ]
    },
    {
        "id": "e7fec99156beb6cf",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "name": "Get userId from businessPartnerId",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\n\n\nmsg.obj[\"businessType\"] = msg.payload.relationType.split(\"-\")[0];\n\nif (msg.obj.businessType === \"DISTRIBUTOR\") {\n    msg.product_type_id = msg.bankApplicationConfigId;\n}\nelse {\n    msg.product_type_id = msg.bankApplicationConfigId;\n}\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${flow_var.token}`\n}\n\nmsg.method = 'get';\nmsg.url = `${env_var.BP_USER}/${msg.obj.businessPartnerId}`\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1080,
        "wires": [
            [
                "386f70d3ed6e25f5"
            ]
        ]
    },
    {
        "id": "386f70d3ed6e25f5",
        "type": "http request",
        "z": "e85847ac8c3405fe",
        "name": "Get User_ID",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 330,
        "y": 1160,
        "wires": [
            [
                "6e111b0f9e03ae00"
            ]
        ]
    },
    {
        "id": "cb86a8840a45164b",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "name": "get initiated files",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 440,
        "wires": []
    },
    {
        "id": "6e111b0f9e03ae00",
        "type": "switch",
        "z": "e85847ac8c3405fe",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 1160,
        "wires": [
            [
                "ca400e0a2305b402"
            ],
            [
                "a674caed42573a5c"
            ]
        ]
    },
    {
        "id": "6f15bf766bd12c08",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "g": "dc64955919fe19cf",
        "name": "Setting payload for roleUserMapping",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\n\nconst userId = msg.userId;\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow_var.token}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\n\n\n\n\nmsg.payload = {\n    userId : userId,\n    // userId: \"64521b00ce444f05fa197478\",\n    roleId: msg.roleId,\n    businessPartnerId : msg.obj.businessPartnerId,\n    // businessPartnerId: \"644788df588958bc97e5483\"\n}\nmsg.url = env_var.ROLE_USER_MAPPING;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1560,
        "wires": [
            [
                "e41cc43dae18adfe",
                "a043445408d86571"
            ]
        ]
    },
    {
        "id": "e41cc43dae18adfe",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "g": "dc64955919fe19cf",
        "name": "Payload for roleUserMapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 1540,
        "wires": []
    },
    {
        "id": "a043445408d86571",
        "type": "http request",
        "z": "e85847ac8c3405fe",
        "g": "dc64955919fe19cf",
        "name": "Role User Mapping",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 750,
        "y": 1580,
        "wires": [
            [
                "628a8998f42b6052",
                "a0b3d757389227d1"
            ]
        ]
    },
    {
        "id": "628a8998f42b6052",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "g": "dc64955919fe19cf",
        "name": "Result of roleUserMapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 1500,
        "wires": []
    },
    {
        "id": "0f25d6e6d94a7e0d",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "g": "dc64955919fe19cf",
        "name": "Check if RoleUserMapping exists",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\nif(msg.statusCode === 200){\n    \n\n    msg.headers = {\n        \"Authorization\": `Bearer ${flow_var.token}`,\n        \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n    }\n\n    msg.url = `${env_var.CHECK_ROLE_USER_MAPPING}/${msg.obj.businessPartnerId}`;\n    msg.method = 'get';\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1400,
        "wires": [
            [
                "3a8f4e19e7283f04"
            ]
        ]
    },
    {
        "id": "3a8f4e19e7283f04",
        "type": "http request",
        "z": "e85847ac8c3405fe",
        "g": "dc64955919fe19cf",
        "name": "Check Role User Mapping",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 710,
        "y": 1400,
        "wires": [
            [
                "daaff4dfd94f8e71"
            ]
        ]
    },
    {
        "id": "8be7f0961948cf85",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "g": "dc64955919fe19cf",
        "name": "Checking RoleUser Mapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 1160,
        "wires": []
    },
    {
        "id": "8d5ac1fddc3f9236",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "g": "dc64955919fe19cf",
        "name": "Result of Check Role User Mapping",
        "func": "const mappings = msg.payload;\nvar flag = 0;\n\nfor (const mapping of mappings) {\n    if(mapping.userId === msg.userId && mapping.roleId === msg.roleId){\n       \n        flag = 1;\n        break;\n    }\n};\n\nif(flag === 1){\n    msg.userExists = \"true\";\n    msg.result[\"Role User Mapping\"] = `Exists`\n}\nelse{\n    msg.userExists = \"false\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1480,
        "wires": [
            [
                "2b0fa9dcdb7f0b96",
                "8bbc5a0011702d4b"
            ]
        ]
    },
    {
        "id": "2b0fa9dcdb7f0b96",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "g": "dc64955919fe19cf",
        "name": "Check Role User Mapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "userExists",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1480,
        "wires": []
    },
    {
        "id": "daaff4dfd94f8e71",
        "type": "switch",
        "z": "e85847ac8c3405fe",
        "g": "dc64955919fe19cf",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 1400,
        "wires": [
            [
                "c6ef0b15ad9dac33"
            ],
            [
                "8d5ac1fddc3f9236"
            ]
        ]
    },
    {
        "id": "c6ef0b15ad9dac33",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "g": "dc64955919fe19cf",
        "name": "Roel User MApping API Failed",
        "func": "let failedRows = flow.get(\"failedRows\");\nfailedRows.push({\n    applicantPAN: msg.obj.pan,\n    error_remark: \"Fetch Role User Mapping API Failed\"\n})\nflow.set(\"failedRows\", failedRows);\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1380,
        "wires": [
            [
                "47d9d5700be81b1b"
            ]
        ]
    },
    {
        "id": "47d9d5700be81b1b",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "g": "dc64955919fe19cf",
        "name": "UnsuccessFul row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 1320,
        "wires": []
    },
    {
        "id": "8bbc5a0011702d4b",
        "type": "switch",
        "z": "e85847ac8c3405fe",
        "name": "",
        "property": "userExists",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 110,
        "y": 1560,
        "wires": [
            [
                "6f15bf766bd12c08"
            ],
            [
                "47a483a81ffc868b"
            ]
        ]
    },
    {
        "id": "bf3d4804bd14cc31",
        "type": "switch",
        "z": "e85847ac8c3405fe",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 2080,
        "wires": [
            [
                "5d522b92d1e80319"
            ],
            [
                "0c2b634090b27e87"
            ]
        ]
    },
    {
        "id": "5d522b92d1e80319",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "g": "8cfefe96b6c823a7",
        "name": "Setting Payload for businessPartnerBankRelationship",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow_var.token}`\n}\n\nmsg.result[\"Business-Relationship with Bank\"] = \"No\"\n\nmsg.payload = {\n    businessId: msg.obj.businessPartnerId,\n    parentBusinessId: msg.BANK_ID,\n    identifierByParent: msg.obj.bankIdentifierByParent,\n    bankAccountNumber: msg.obj.bankAccountNumber,\n    bankIFSC: msg.obj.bankIFSC,\n    bankName: msg.obj.bankName,\n    relationType: `${msg.obj.businessType}-BANK`,\n}\nmsg.url = env_var.BP_BANK_RELATIONSHIP;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 1940,
        "wires": [
            [
                "8983099b8176c964",
                "4abe3720557458e3"
            ]
        ]
    },
    {
        "id": "8983099b8176c964",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "g": "8cfefe96b6c823a7",
        "name": "Payload for businessPartnerBankRelationship",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 1880,
        "wires": []
    },
    {
        "id": "4abe3720557458e3",
        "type": "http request",
        "z": "e85847ac8c3405fe",
        "g": "8cfefe96b6c823a7",
        "name": "Business Partner Bank Relationship",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1520,
        "y": 1940,
        "wires": [
            [
                "3f664a2fc2393923"
            ]
        ]
    },
    {
        "id": "47a483a81ffc868b",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "g": "8cfefe96b6c823a7",
        "name": "Checking if businessPartnerBankRelationship exists",
        "func": "const flow_var = flow.get(\"FLOW_VARIABLES\")\nconst env_var = global.get(\"ENV_VARIABLES\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${flow_var.token}`\n}\nmsg.url = `${env_var.CHECK_BP_RELATIONSHIP}/getByIdentifierByParent/${msg.obj.bankIdentifierByParent}`;\nmsg.method = 'get'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 1760,
        "wires": [
            [
                "36b3ada9f1f98b29"
            ]
        ]
    },
    {
        "id": "36b3ada9f1f98b29",
        "type": "http request",
        "z": "e85847ac8c3405fe",
        "g": "8cfefe96b6c823a7",
        "name": "Get Identifier By Parent - Bank",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1510,
        "y": 1760,
        "wires": [
            [
                "c8fc569f224813b4",
                "d4a05f09ebfc9fd6"
            ]
        ]
    },
    {
        "id": "c8fc569f224813b4",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "g": "8cfefe96b6c823a7",
        "name": "Checking if businessPartnerBankRelationship exists",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1920,
        "y": 1760,
        "wires": []
    },
    {
        "id": "94605942e95e9831",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "name": "debug 447",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 800,
        "wires": []
    },
    {
        "id": "a674caed42573a5c",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "name": "Get role id",
        "func": "const data = msg.payload;\nmsg.userId = data[0].userId;\nmsg.result[\"User ID\"] = `${msg.userId}`;\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n   \n}\n\nmsg.method = 'POST';\nmsg.url = `${env.get(\"ADMIN_URL\")}/api/role/query`\nmsg.payload = {\n    \"query\": {\n        \"name\": \"paylater_bp_admin\"\n    }\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1200,
        "wires": [
            [
                "909dda1a284bd280"
            ]
        ]
    },
    {
        "id": "909dda1a284bd280",
        "type": "http request",
        "z": "e85847ac8c3405fe",
        "name": "Get role id",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 950,
        "y": 1200,
        "wires": [
            [
                "356a5e8d179dd41d",
                "d1d1aabf29b20224"
            ]
        ]
    },
    {
        "id": "356a5e8d179dd41d",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "name": "set roleId",
        "func": "msg.roleId = msg.payload[0][\"_id\"]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 1200,
        "wires": [
            [
                "0f25d6e6d94a7e0d"
            ]
        ]
    },
    {
        "id": "ee22802dff03a0d7",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "g": "d35d5d3072cd06fb",
        "name": "Setting Payload for creating loanTerm",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\n\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow_var.token}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\n\nmsg.payload = {\n    bankID: msg.BANK_ID,\n    borrowerID: msg.obj.businessPartnerId,\n    enterpriseID: msg.ENTERPRISE_ID,\n    bankApplicationConfigID: msg.product_type_id\n    //rateOfInterest: Number(msg.obj.rateOfInterest)\n}\nif(msg.obj[\"rateOfInterest\"]!==undefined){\n    msg.payload[\"rateOfInterest\"] = msg.obj.rateOfInterest;\n}\nmsg.url = env_var.LOAN_TERM;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 2380,
        "wires": [
            [
                "3898a644c2953717",
                "b9c719b0382b06e9",
                "6afef67c304aeda0"
            ]
        ]
    },
    {
        "id": "af96e8892128dcab",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "g": "d35d5d3072cd06fb",
        "name": "Setting Payload for udpating loanTerm",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow_var.token}`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\n\nconst data = msg.payload;\nmsg.loanTermId = data.id;\n\nif (msg.statusCode === 201 && msg.result[\"Create Loan Term\"] === \"\"){\n    msg.result[\"Create Loan Term\"] = `Loan Term Created: ${msg.loanTermId}`;\n}\n\nmsg.payload = {\n    loanTermsID : msg.loanTermId,\n    // loanTermsID: \"5b541302-db6a-4ecc-aa0e-d5d7036d3de0\",\n    approvedLimit: msg.obj.approvedLimit,\n    validTill: \"20/11/2025\",\n    loanGrantStatus: \"APPROVED\",\n    crnNumber: msg.obj.bankIdentifierByParent,\n    awaitingBalanceRefresh: false,\n    businessType: msg.obj.businessType,\n    bankProvidedLoanCodes:msg.obj.bankProvidedLoanCodes,\n}\nmsg.url = env_var.LOAN_TERM + \"/service/update\";\nmsg.method = 'patch';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 2500,
        "wires": [
            [
                "7f19a41d6bbbb5e1",
                "21617460e950ef83"
            ]
        ]
    },
    {
        "id": "3898a644c2953717",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "g": "d35d5d3072cd06fb",
        "name": "Payload for creating loanTerm",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 2360,
        "wires": []
    },
    {
        "id": "7f19a41d6bbbb5e1",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "g": "d35d5d3072cd06fb",
        "name": "Payload for updating loanTerm",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 2440,
        "wires": []
    },
    {
        "id": "b9c719b0382b06e9",
        "type": "http request",
        "z": "e85847ac8c3405fe",
        "g": "d35d5d3072cd06fb",
        "name": "Create Loan Term",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1330,
        "y": 2400,
        "wires": [
            [
                "af96e8892128dcab",
                "7fbdbfe068c3c34c"
            ]
        ]
    },
    {
        "id": "21617460e950ef83",
        "type": "http request",
        "z": "e85847ac8c3405fe",
        "g": "d35d5d3072cd06fb",
        "name": "Update Loan Term",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1690,
        "y": 2520,
        "wires": [
            [
                "96db78e1bb5a39f4",
                "c06c662c110d9a05"
            ]
        ]
    },
    {
        "id": "7fbdbfe068c3c34c",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "g": "d35d5d3072cd06fb",
        "name": "Create Loan Term",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 2380,
        "wires": []
    },
    {
        "id": "de2fbb7ebb05d02e",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "g": "d35d5d3072cd06fb",
        "name": "Update Loan Term",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2270,
        "y": 2560,
        "wires": []
    },
    {
        "id": "0c2b634090b27e87",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "g": "d35d5d3072cd06fb",
        "name": "Checking If loanTerm exists",
        "func": "const flow_var = flow.get(\"FLOW_VARIABLES\")\nconst env_var = global.get(\"ENV_VARIABLES\")\n\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nif (msg.statusCode === 200) {\n    if (msg.result[\"Business-Relationship with Bank\"] === \"No\") {\n        msg.result[\"Business-Relationship with Bank\"] = `Created ${msg.payload._id}`;\n    }\n    else {\n        msg.result[\"Business-Relationship with Bank\"] = `Exists`;\n    }\n}\nelse {\n    msg.result[\"Business-Relationship with Bank\"] = `${msg.statusCode} Error`\n}\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"Authorization\": `Bearer ${flow_var.token}`\n}\nmsg.url = `${env_var.LOAN_TERM}/service/fetchByBankID`;\nmsg.payload = {\"borrowerID\" : msg.obj.businessPartnerId,\n            \"enterpriseID\": msg.ENTERPRISE_ID,\n            \"bankID\": msg.BANK_ID};\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 2200,
        "wires": [
            [
                "e02f1f37c2d87077"
            ]
        ]
    },
    {
        "id": "e02f1f37c2d87077",
        "type": "http request",
        "z": "e85847ac8c3405fe",
        "g": "d35d5d3072cd06fb",
        "name": "Fetch Loan Term ",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1210,
        "y": 2200,
        "wires": [
            [
                "8d4733523365b76e",
                "144a851925bc8a5b"
            ]
        ]
    },
    {
        "id": "8d4733523365b76e",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "g": "d35d5d3072cd06fb",
        "name": "Check If Loan Term Exists",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 2200,
        "wires": []
    },
    {
        "id": "dd39442e581e2014",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "g": "d35d5d3072cd06fb",
        "name": "setting up payload for updating loadn term if it already exists",
        "func": "msg.payload = msg.payload[0];\nif(msg.statusCode === 201){\n    msg.result[\"Create Loan Term\"] = `Exists: ${msg.payload.id}`;\n}\nelse{\n    msg.result[\"Create Loan Term\"] = `${msg.statusCode} Error`;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 2500,
        "wires": [
            [
                "af96e8892128dcab"
            ]
        ]
    },
    {
        "id": "bbf511d8fc4a756a",
        "type": "switch",
        "z": "e85847ac8c3405fe",
        "g": "d35d5d3072cd06fb",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 2400,
        "wires": [
            [
                "ee22802dff03a0d7"
            ],
            [
                "dd39442e581e2014"
            ]
        ]
    },
    {
        "id": "6afef67c304aeda0",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "g": "d35d5d3072cd06fb",
        "name": "Paylaod for creating loan_term",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 2460,
        "wires": []
    },
    {
        "id": "3f664a2fc2393923",
        "type": "switch",
        "z": "e85847ac8c3405fe",
        "g": "8cfefe96b6c823a7",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1790,
        "y": 1960,
        "wires": [
            [
                "1b1decfe115033d0"
            ],
            [
                "0c2b634090b27e87"
            ]
        ]
    },
    {
        "id": "4a787803266e19ff",
        "type": "comment",
        "z": "e85847ac8c3405fe",
        "g": "8cfefe96b6c823a7",
        "name": "Check This",
        "info": "",
        "x": 1880,
        "y": 1720,
        "wires": []
    },
    {
        "id": "a0b3d757389227d1",
        "type": "switch",
        "z": "e85847ac8c3405fe",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 1580,
        "wires": [
            [
                "e658a9688b81e529"
            ],
            [
                "47a483a81ffc868b"
            ]
        ]
    },
    {
        "id": "e658a9688b81e529",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "name": "Set Role User Mapping Failed",
        "func": "let failedRows = flow.get(\"failedRows\");\nfailedRows.push({\n    applicantPAN: msg.obj.pan,\n    error_remark: \"Setting Role User Mapping API Failed\"\n})\nflow.set(\"failedRows\", failedRows);\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1560,
        "wires": [
            [
                "136f04db2c3fbb8d"
            ]
        ]
    },
    {
        "id": "136f04db2c3fbb8d",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "g": "dc64955919fe19cf",
        "name": "UnsuccessFul row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 1540,
        "wires": []
    },
    {
        "id": "96db78e1bb5a39f4",
        "type": "switch",
        "z": "e85847ac8c3405fe",
        "g": "d35d5d3072cd06fb",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1950,
        "y": 2500,
        "wires": [
            [
                "0116a9f867a05327"
            ],
            [
                "de2fbb7ebb05d02e",
                "79248e012debe54c"
            ]
        ]
    },
    {
        "id": "d4a05f09ebfc9fd6",
        "type": "switch",
        "z": "e85847ac8c3405fe",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 130,
        "y": 1920,
        "wires": [
            [
                "a1953a07f4ea1783"
            ],
            [
                "bf3d4804bd14cc31"
            ]
        ]
    },
    {
        "id": "144a851925bc8a5b",
        "type": "switch",
        "z": "e85847ac8c3405fe",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "201",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "201",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 70,
        "y": 2360,
        "wires": [
            [
                "50b7a031903dbad7"
            ],
            [
                "bbf511d8fc4a756a"
            ]
        ]
    },
    {
        "id": "c06c662c110d9a05",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "g": "d35d5d3072cd06fb",
        "name": "debug 451",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 2440,
        "wires": []
    },
    {
        "id": "9186d68940e05f6a",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "g": "89e23a4b656bb16d",
        "name": "Create BNPL Preference",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1590,
        "y": 2720,
        "wires": []
    },
    {
        "id": "eb41dce1e0f37a8f",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "g": "89e23a4b656bb16d",
        "name": "Payload for creating BNPL preference",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 2760,
        "wires": []
    },
    {
        "id": "da1a91bd467ff1fa",
        "type": "http request",
        "z": "e85847ac8c3405fe",
        "g": "89e23a4b656bb16d",
        "name": "Create BNPL Preference",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1090,
        "y": 2800,
        "wires": [
            [
                "9186d68940e05f6a",
                "9b476196ef49981c"
            ]
        ]
    },
    {
        "id": "708bace8714594ef",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "g": "89e23a4b656bb16d",
        "name": "Setting Payload for creating BNPL preference",
        "func": "// const env_var = global.get(\"ENV_VARIABLES\")\n// const flow_var = flow.get(\"FLOW_VARIABLES\")\n\n// msg.headers = {\n//     \"Authorization\": `Bearer ${flow.get(\"bp_token\")}`,\n//     \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n//     \"businesspartnerid\": flow.get(\"actyv_bp_id\"),\n//     \"bankid\": msg.BANK_ID\n// }\n\n// msg.DEFAULT_SPREAD_ID = msg.payload[0].id;\n\n// if (msg.statusCode === 201){\n//     msg.result[\"Fetch Tenor\"] = `Tenor Fetched ${msg.DEFAULT_SPREAD_ID}`\n// }\n// else{\n//     msg.result[\"Fetch Tenor\"] = `${msg.statusCode} Error`\n// }\n\n// msg.payload = {\n//     borrowerID: msg.obj.businessPartnerId,\n//     productTypeID: msg.product_type_id,\n//     defaultBankID: msg.BANK_ID,\n//     defaultSpreadID: msg.DEFAULT_SPREAD_ID,\n//     minInvoiceAmountThreshold: env_var.MIN_INVOICE_AMOUNT_THRESHOLD\n// }\n// msg.url = env_var.BNPL_PREFERENCE;\n// msg.method = 'post';\n\n// return msg;\n\nconst env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\nconst actyvToken = flow.get(\"actyvToken\")\n\nmsg.headers = {\n    \"Authorization\": `Bearer ${ flow.get(\"bp_token\") }`,\n    \"x-actyv-api-config-key\": env_var.CONFIG_KEY,\n    \"businesspartnerid\": flow.get(\"actyv_bp_id\"),\n    \"bankid\": msg.BANK_ID,\n    // \"actyventityid\": msg.actyvEntityId\n}\n\nmsg.DEFAULT_SPREAD_ID = msg.payload[0].id;\n\nif (msg.statusCode === 201) {\n    msg.result[\"Fetch Tenor\"] = `Tenor Fetched ${msg.DEFAULT_SPREAD_ID}`\n}\nelse {\n    msg.result[\"Fetch Tenor\"] = `${msg.statusCode} Error`\n}\n\nmsg.payload = {\n    borrowerID: msg.obj.businessPartnerId,\n    bankApplicationConfigID: msg.product_type_id,\n    defaultBankID: msg.BANK_ID,\n    defaultSpreadID: msg.DEFAULT_SPREAD_ID,\n    minInvoiceAmountThreshold: env_var.MIN_INVOICE_AMOUNT_THRESHOLD\n}\nmsg.url = env_var.BNPL_PREFERENCE;\nmsg.method = 'post';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2800,
        "wires": [
            [
                "da1a91bd467ff1fa",
                "eb41dce1e0f37a8f"
            ]
        ]
    },
    {
        "id": "2e73c6518d6be371",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "g": "89e23a4b656bb16d",
        "name": "Payload For fetching TenorAndRateSpread",
        "func": "const env_var = global.get(\"ENV_VARIABLES\")\nconst flow_var = flow.get(\"FLOW_VARIABLES\")\n\nconst sleep = async (milliseconds) => {\n  await new Promise(resolve => {\n    return setTimeout(resolve, milliseconds)\n  });\n};\n\nawait sleep(env_var.SLEEP_TIME);\n\nmsg.headers = {\n  \"Authorization\": `Bearer ${flow_var.token}`,\n  \"x-actyv-api-config-key\": env_var.CONFIG_KEY\n}\nif (msg.statusCode === 200) {\n  msg.result[\"Update Loan Term\"] = `Updated: ${msg.loanTermId}`;\n}\nelse {\n  msg.result[\"Update Loan Term\"] = `${msg.statusCode} Error`;\n}\n\nmsg.payload = {\n  \"bankID\": msg.BANK_ID,\n  \"loanID\": msg.loanTermId,\n}\n\nmsg.url = env_var.TENOR_AND_RATE_SPREAD + \"/fetch\";\nmsg.method = 'POST';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2680,
        "wires": [
            [
                "a88e6a5dfd1f264e"
            ]
        ]
    },
    {
        "id": "a88e6a5dfd1f264e",
        "type": "http request",
        "z": "e85847ac8c3405fe",
        "g": "89e23a4b656bb16d",
        "name": "Fetching TenorAndRateSpread",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1070,
        "y": 2680,
        "wires": [
            [
                "023443ad11220cde",
                "4b57fdf5d012e5d3"
            ]
        ]
    },
    {
        "id": "79248e012debe54c",
        "type": "switch",
        "z": "e85847ac8c3405fe",
        "name": "",
        "property": "obj[\"bnpl_preference\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Y",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "N",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 2700,
        "wires": [
            [
                "2e73c6518d6be371"
            ],
            [
                "44ac18880740119a"
            ]
        ]
    },
    {
        "id": "44ac18880740119a",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "name": "debug 453",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 3020,
        "wires": []
    },
    {
        "id": "023443ad11220cde",
        "type": "switch",
        "z": "e85847ac8c3405fe",
        "g": "89e23a4b656bb16d",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "201",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "201",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1350,
        "y": 2680,
        "wires": [
            [
                "0413856805265935"
            ],
            [
                "708bace8714594ef"
            ]
        ]
    },
    {
        "id": "9b476196ef49981c",
        "type": "switch",
        "z": "e85847ac8c3405fe",
        "g": "89e23a4b656bb16d",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "201",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "201",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1450,
        "y": 2800,
        "wires": [
            [
                "14255c8859b137ae"
            ],
            [
                "44ac18880740119a"
            ]
        ]
    },
    {
        "id": "ca400e0a2305b402",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "name": "USerID API Failed",
        "func": "let failedRows = flow.get(\"failedRows\");\nfailedRows.push({\n    applicantPAN: msg.obj.pan,\n    error_remark: \"Failed to get userID\"\n})\nflow.set(\"failedRows\", failedRows);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1160,
        "wires": [
            [
                "22cbac35fe32cd88"
            ]
        ]
    },
    {
        "id": "22cbac35fe32cd88",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "name": "debug 454",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 1140,
        "wires": []
    },
    {
        "id": "a1953a07f4ea1783",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "name": "Set Role User Mapping Failed",
        "func": "let failedRows = flow.get(\"failedRows\");\nfailedRows.push({\n    applicantPAN: msg.obj.pan,\n    error_remark: \"Error when checking for existing relationship with bank\"\n})\nflow.set(\"failedRows\", failedRows);\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1900,
        "wires": [
            [
                "70a67b42a5ad90cb"
            ]
        ]
    },
    {
        "id": "70a67b42a5ad90cb",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "name": "debug 455",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 1900,
        "wires": []
    },
    {
        "id": "1b1decfe115033d0",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "g": "8cfefe96b6c823a7",
        "name": "API Failed",
        "func": "let failedRows = flow.get(\"failedRows\");\nfailedRows.push({\n    applicantPAN: msg.obj.pan,\n    error_remark: \"Unable to set business partner relation ship with bank\"\n})\nflow.set(\"failedRows\", failedRows);\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 1940,
        "wires": [
            [
                "693639d732c2a674"
            ]
        ]
    },
    {
        "id": "693639d732c2a674",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "g": "8cfefe96b6c823a7",
        "name": "get bp bank relation api failed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2330,
        "y": 1940,
        "wires": []
    },
    {
        "id": "50b7a031903dbad7",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "name": "Fetch Loan term Failed",
        "func": "let failedRows = flow.get(\"failedRows\");\nfailedRows.push({\n    applicantPAN: msg.obj.pan,\n    error_remark: \"Fetch Loan term API Failed\"\n})\nflow.set(\"failedRows\", failedRows);\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 2340,
        "wires": [
            [
                "4440fa9c72dea92e"
            ]
        ]
    },
    {
        "id": "4440fa9c72dea92e",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "name": "debug 457",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 2340,
        "wires": []
    },
    {
        "id": "0116a9f867a05327",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "g": "d35d5d3072cd06fb",
        "name": "Update Loan term API Failed",
        "func": "let failedRows = flow.get(\"failedRows\");\nfailedRows.push({\n    applicantPAN: msg.obj.pan,\n    error_remark: \"Failed to Update Loan term\"\n})\nflow.set(\"failedRows\", failedRows);\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2180,
        "y": 2480,
        "wires": [
            [
                "f58abea0475d695e"
            ]
        ]
    },
    {
        "id": "f58abea0475d695e",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "g": "d35d5d3072cd06fb",
        "name": "debug 458",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2470,
        "y": 2480,
        "wires": []
    },
    {
        "id": "0413856805265935",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "g": "89e23a4b656bb16d",
        "name": "Fetch Tenor and Rate Spread API Failed",
        "func": "let failedRows = flow.get(\"failedRows\");\nfailedRows.push({\n    applicantPAN: msg.obj.pan,\n    error_remark: \"Unable to fetch Tenor and Rate Spread\"\n})\nflow.set(\"failedRows\", failedRows);\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 2680,
        "wires": [
            [
                "30809dbb220998f2"
            ]
        ]
    },
    {
        "id": "30809dbb220998f2",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "g": "89e23a4b656bb16d",
        "name": "debug 459",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1930,
        "y": 2680,
        "wires": []
    },
    {
        "id": "14255c8859b137ae",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "g": "89e23a4b656bb16d",
        "name": "Create BNPL Preference API Failed",
        "func": "let failedRows = flow.get(\"failedRows\");\nfailedRows.push({\n    applicantPAN: msg.obj.pan,\n    error_remark: \"Set BNPL preference API got failed\"\n})\nflow.set(\"failedRows\", failedRows);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 2780,
        "wires": [
            [
                "8bc2ab516a6ed6c8"
            ]
        ]
    },
    {
        "id": "8bc2ab516a6ed6c8",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "g": "89e23a4b656bb16d",
        "name": "debug 460",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2050,
        "y": 2780,
        "wires": []
    },
    {
        "id": "8b36601caae84e22",
        "type": "http request",
        "z": "e85847ac8c3405fe",
        "name": "Flow Done",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 850,
        "y": 720,
        "wires": [
            [
                "03654b843f984f96"
            ]
        ]
    },
    {
        "id": "d1d1aabf29b20224",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "name": "Get RoleID API",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 1120,
        "wires": []
    },
    {
        "id": "4b57fdf5d012e5d3",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "name": "fetch tenor and rate spread",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 2620,
        "wires": []
    },
    {
        "id": "ab4828f723f96fe8",
        "type": "switch",
        "z": "e85847ac8c3405fe",
        "name": "",
        "property": "a",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 880,
        "wires": [
            [
                "2958afde27e54c58"
            ],
            [
                "e7f47a91fec14daa"
            ]
        ]
    },
    {
        "id": "2958afde27e54c58",
        "type": "function",
        "z": "e85847ac8c3405fe",
        "name": "function 217",
        "func": "let failedRows = flow.get(\"failedRows\");\nfailedRows.push({\n    applicantPAN: msg.obj.pan,\n    error_remark: \"Failed primary checks\"\n})\nflow.set(\"failedRows\",failedRows);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 860,
        "wires": [
            [
                "42e277b8358d9dfa"
            ]
        ]
    },
    {
        "id": "42e277b8358d9dfa",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "name": "UnsuccessFul row",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 860,
        "wires": []
    },
    {
        "id": "87757eae2e7eeb2c",
        "type": "debug",
        "z": "e85847ac8c3405fe",
        "name": "debug 466",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "seedingData",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 600,
        "wires": []
    },
    {
        "id": "35f914c1426f1e1b",
        "type": "inject",
        "z": "4da9cf371ae8419b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 227,
        "y": 59,
        "wires": [
            [
                "cd26050f98d24bc7"
            ]
        ]
    },
    {
        "id": "f535f76332f21ecb",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "Setting Payload For Fetching INITIATED Status Files",
        "func": "const actyvToken = flow.get(\"actyvToken\")\nconst fetchInitiatedFiles = `${env.get(\"GO_URL\")}/seeding-file-info/fileInfoBySeedingStatus/INITIATED`;\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${actyvToken}`,\n    \"actyventityid\": msg.actyvEntityId\n}\nmsg.url = fetchInitiatedFiles;\nmsg.method = 'GET';\nmsg.logger = \"seeding files fetched in Initiated State\"\nmsg.loggerNewLine = true\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 500,
        "wires": [
            [
                "1c1bb251c85019a5"
            ]
        ]
    },
    {
        "id": "818df4c15d1494f0",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "Looping and Segregating Files",
        "func": "const files = msg.payload.fileInfo.filter((file) => file.seedingType == \"GO_SEEDING\");\nconst sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nfor (const file of files.slice(0,1)) {\n    // if (file.seedingType == \"GO_SEEDING\" && file.fileName === \"Format_File_GO_Seeding (5) (2).xlsx\") {\n    if (file.seedingType == \"GO_SEEDING\") {\n        node.send({\n            ...file,\n            ...msg,\n            payload: file.fileId,\n            seedingType: file.seedingType,\n            isComplete: false,\n            logger : \"fileId for go seeding\"\n        })\n        sleep(200000)\n    }\n}\nmsg.isComplete= true\nmsg.logger = \"No file found for Go seeding\"\nreturn msg\n// ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 332,
        "y": 598,
        "wires": [
            [
                "c72938bf1b722cb3"
            ]
        ]
    },
    {
        "id": "031f38fc596bac0b",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "readFileReq",
        "func": "const GO_URL = env.get('GO_URL')\nflow.set(\"succeededRows\", [])\nflow.set(\"failedRows\", []) \n\nflow.set(\"succeeded_Create_BP\", [])\nflow.set(\"failed_Create_BP\", []) \n\nmsg.fileId = msg.payload\nconsole.log(msg.fileId);\nconsole.log(msg.seedingType);\nmsg.method = \"GET\"\nmsg.headers = {\n    fileType: \"xlsx\"\n}\nmsg.url = `${GO_URL}/file/read/${msg.fileId}`;\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 660,
        "wires": [
            [
                "79e59608eb9ef0e1"
            ]
        ]
    },
    {
        "id": "e2498f228732502a",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "Fetch initiated files",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 500,
        "wires": []
    },
    {
        "id": "b2a3b862b04de435",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "Read file",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 722,
        "y": 658,
        "wires": []
    },
    {
        "id": "7b43e008c0515755",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "read xls",
        "func": "let data = xlsx.read(msg.payload, { type: \"buffer\" })\nconst wsname = data.SheetNames[0];\nconst ws = data.Sheets[wsname];\nconst payload = xlsx.utils.sheet_to_json(ws);\nmsg.seedingData = payload.filter((d) => d[\"Business Partner GST\"] !== undefined || d[\"Business Partner GST\"] !== null)\nmsg.completedSeeding = [],\nmsg.failedSeeding = []\nmsg.anchored = false;\nif(msg.enterpriseId){\n    msg.anchored = true\n}\nmsg.payload = payload\nmsg.numOfRows = msg.seedingData.length\n\nmsg.logger = \"read xlsx\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "xlsx",
                "module": "xlsx"
            }
        ],
        "x": 182,
        "y": 798,
        "wires": [
            [
                "bd7cbc8ea4e54786"
            ]
        ]
    },
    {
        "id": "9ad5d35dbd8a20c8",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "xlsx to json",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "seedingData",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 492,
        "y": 798,
        "wires": []
    },
    {
        "id": "cd26050f98d24bc7",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "AuthenticateEnterpriseUserReq",
        "func": "\nconst EMAIL = env.get('APL_ENTERPRISE_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 120,
        "wires": [
            [
                "13a12d753494165a"
            ]
        ]
    },
    {
        "id": "4bcfaecd6cf8480c",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "saveEnterpriseToken",
        "func": "flow.set(\"enterpriseToken\",msg.payload.idToken)\n// console.log({enterpriseToken: msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 887,
        "y": 119,
        "wires": [
            [
                "3939f1b9fa8e0fde"
            ]
        ]
    },
    {
        "id": "3939f1b9fa8e0fde",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "AuthenticateBankUserReq",
        "func": "\nconst BANK_USER_EMAIL = env.get('MSL_BANK_ADMIN_EMAIL')\nconst PASSWORD = env.get('PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": PASSWORD,\n    \"email\": BANK_USER_EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 200,
        "wires": [
            [
                "0f8e4331866894e4"
            ]
        ]
    },
    {
        "id": "b4912b21fe9ed1c3",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "saveBankToken",
        "func": "flow.set(\"bankToken\",msg.payload.idToken)\n// console.log({bankToken: msg.payload.idToken})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 200,
        "wires": [
            [
                "9dc64b4f4054efbd"
            ]
        ]
    },
    {
        "id": "75fbf6d31071850d",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "Authentication",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 807,
        "y": 59,
        "wires": []
    },
    {
        "id": "8786da9ce68fdc98",
        "type": "switch",
        "z": "4da9cf371ae8419b",
        "name": "checkAnchoredOrNot",
        "property": "anchored",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 222,
        "y": 1058,
        "wires": [
            [],
            [
                "8d05a46f4f99a203"
            ]
        ]
    },
    {
        "id": "fc5e4ddb42c7f92b",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "fetchEnterpriseConfig",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 1160,
        "wires": []
    },
    {
        "id": "8d05a46f4f99a203",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "fetchEnterpriseConfig",
        "func": "const enterpriseToken = flow.get(\"enterpriseToken\")\nconst enterpriseId = msg.enterpriseId\n\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\")\n}\nmsg.url = `${env.get(\"GO_URL\")}/enterprise-seeding-config/${enterpriseId}`;\nmsg.method = 'GET';\nmsg.logger = `fetch enterprise config with enterprise id= #${enterpriseId}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 1160,
        "wires": [
            [
                "af1db67c30e3c95d"
            ]
        ]
    },
    {
        "id": "eb48e4709781ea82",
        "type": "switch",
        "z": "4da9cf371ae8419b",
        "name": "enterpriseConfigExistOrNot",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 242,
        "y": 1358,
        "wires": [
            [
                "df0c7c49add02868",
                "cd520a755be06892",
                "8e9d19c5a17c64c8"
            ],
            [
                "ccdf8aebf7b1e4bd"
            ]
        ]
    },
    {
        "id": "ccdf8aebf7b1e4bd",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "checkEnterpriseConfig",
        "func": "const {\n    canCreateBusinessPartner = false,\n    canCreateBusinessPartnerUser = false,\n} = msg.payload.result;\nif (\n    [canCreateBusinessPartner, canCreateBusinessPartnerUser].includes(\n        true\n    )\n) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 1520,
        "wires": [
            [
                "ceed68e1f4d09410"
            ]
        ]
    },
    {
        "id": "ceed68e1f4d09410",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "Loop",
        "func": "const sleep = async (milliseconds) => {\n    await new Promise(resolve => {\n        return setTimeout(resolve, milliseconds)\n    });\n};\n\nfor(let [key,row] of msg.seedingData.entries()){\n    node.send({\n        ...msg,\n        row,\n        isCompleted : false,\n        isFileProcessingCompleted: key == msg.seedingData.length-1? true:false\n    })\n    await sleep(500)\n}\nawait sleep(30000)\nmsg.isCompleted = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1520,
        "wires": [
            [
                "1890b4253837623d",
                "8b9d84e2a9c07f8b"
            ]
        ]
    },
    {
        "id": "b70e30279112d2cd",
        "type": "switch",
        "z": "4da9cf371ae8419b",
        "name": "check number of rows",
        "property": "seedingData.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "100",
                "vt": "num"
            },
            {
                "t": "lte",
                "v": "100",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 222,
        "y": 878,
        "wires": [
            [
                "75d9ccd20ce180e1"
            ],
            [
                "eeb363d58c0d4d4a"
            ]
        ]
    },
    {
        "id": "8b9d84e2a9c07f8b",
        "type": "switch",
        "z": "4da9cf371ae8419b",
        "name": "checkLoopCompletedOrNot",
        "property": "isCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 220,
        "y": 1660,
        "wires": [
            [],
            [
                "7f92f52d1231c9d6"
            ]
        ]
    },
    {
        "id": "5e372accb5287426",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "postBusinessPartner",
        "func": "const enterpriseToken = flow.get(\"enterpriseToken\")\n\nconst {row,enterpriseId} = msg\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\"),\n    \"Authorization\": `Bearer ${enterpriseToken}`\n}\nmsg.url = `${env.get(\"GO_URL\")}/business-partner`;\n// msg.url = `http://localhost:4003/api/business-partner`;\nmsg.method = 'POST';\n\nconst DEFAULT_PASSWORD = env.get(\"DEFAULT_PASSWORD\")\nconsole.log({DEFAULT_PASSWORD})\nmsg.payload = {\n    \n  \"gstin\": row[\"Business Partner GST\"],\n  \"businessName\": row[\"Business Partner Company Name\"],\n  \"applicantMobile\": row[\"Business Partner Phone\"].toString().includes[\"+91\"] ? row[\"Business Partner Phone\"].toString().replace(\"+91\",\"\") : `${row[\"Business Partner Phone\"]}`,\n  \"applicantEmail\": row[\"Business Partner Email\"],\n  \"password\": DEFAULT_PASSWORD,\n  \"inviteId\": \"\",\n  \"registerAsAnchor\": \"\",\n  \"firstName\": row[\"Primary User First Name\"], //?\n  \"lastName\": row[\"Primary User Last Name\"] || \".\", //?\n  \"isConsentAccepted\": true,\n  \"autoConfirmUser\": true,\n  \"origin\": \"seed\",\n  \"stateCode\": \"\" //?\n\n}\nmsg.logger = \"Post business partner\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 205,
        "y": 2182,
        "wires": [
            [
                "d7a45a7ad3fbc0a2"
            ]
        ]
    },
    {
        "id": "b4bc8a69308905dc",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "postBusinessPartner",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 2180,
        "wires": []
    },
    {
        "id": "0dc150a349c973f1",
        "type": "switch",
        "z": "4da9cf371ae8419b",
        "name": "statusOfCreate_BP",
        "property": "payload.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "SUCCESS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SUCCESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 195,
        "y": 2262,
        "wires": [
            [
                "119cfbc5494120d3"
            ],
            [
                "e0c2533b33e82766"
            ]
        ]
    },
    {
        "id": "e0c2533b33e82766",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "createEnterprise_BP_mapping",
        "func": "const enterpriseToken = flow.get(\"enterpriseToken\")\nconst succeededRows = flow.get(\"succeededRows\") ||[]\n\n\n\n\nconst {row,enterpriseId} = msg\nmsg.headers = {\n    \"x-actyv-api-config-key\": env.get(\"X_ACTYV_API_CONFIG_KEY\")\n}\nmsg.url = `${env.get(\"GO_URL\")}/enterprise-partner-mapping/create`;\n\nmsg.completedSeeding.push({\n  businessPartnerId: msg.payload.businessPartnerId,\n  applicantEmail: msg.row[\"Business Partner Email\"]\n})\n\nsucceededRows.push({\n  businessPartnerId: msg.payload.businessPartnerId,\n  applicantEmail: msg.row[\"Business Partner Email\"]\n})\nflow.set(\"succeededRows\",succeededRows)\nflow.set(\"succeeded_Create_BP\", succeededRows)\nmsg.businessPartnerId = msg.payload.businessPartnerId\nmsg.method = 'POST';\nmsg.payload = {\n  enterpriseId,\n  businessPartnerId: msg.payload.businessPartnerId\n\n}\nmsg.logger = \"createEnterprise_BP_mapping\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 235,
        "y": 2342,
        "wires": [
            [
                "7c950c1cc4271c9f"
            ]
        ]
    },
    {
        "id": "ef61c69ee6ef5810",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "createEnterprise_BP_mapping",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 2280,
        "wires": []
    },
    {
        "id": "1ed544d3cb228275",
        "type": "switch",
        "z": "4da9cf371ae8419b",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 552,
        "y": 698,
        "wires": [
            [
                "33c2e5f1a3f78991"
            ],
            [
                "7b43e008c0515755"
            ]
        ]
    },
    {
        "id": "119cfbc5494120d3",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n \n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if(failedRow.length === 0){\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         createBusinessPartnerFailed: `${msg.payload}`,\n   \n//     })\n// }else{\n//     failedRows.forEach((row) =>{\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"])\n//         {\n//            row.createBusinessPartnerFailed = `${msg.payload}`\n//         }\n        \n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: msg.row[\"Business Partner Email\"],\n    message: `${msg.payload.message||\"Create business partner failed\"}`,\n\n})\n\n\n\nflow.set(\"failedRows\",failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nmsg.allFailed = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2240,
        "wires": [
            [
                "58e29f942897dd7b"
            ]
        ]
    },
    {
        "id": "73e9448c62ef6ae7",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 760,
        "y": 1160,
        "wires": [
            [
                "fc5e4ddb42c7f92b",
                "eb48e4709781ea82"
            ]
        ]
    },
    {
        "id": "955cb11e6f982222",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 780,
        "y": 2180,
        "wires": [
            [
                "b4bc8a69308905dc"
            ]
        ]
    },
    {
        "id": "f03078a69ddd5d4a",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 780,
        "y": 2340,
        "wires": [
            [
                "18671e71afb68eca"
            ]
        ]
    },
    {
        "id": "1890b4253837623d",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "debug 407",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "row",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 1480,
        "wires": []
    },
    {
        "id": "de4661694aa2da61",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 920,
        "y": 500,
        "wires": [
            [
                "e2498f228732502a"
            ]
        ]
    },
    {
        "id": "bd7cbc8ea4e54786",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 340,
        "y": 800,
        "wires": [
            [
                "9ad5d35dbd8a20c8",
                "b70e30279112d2cd"
            ]
        ]
    },
    {
        "id": "c72938bf1b722cb3",
        "type": "switch",
        "z": "4da9cf371ae8419b",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 592,
        "y": 598,
        "wires": [
            [
                "52a2715aaa63af72"
            ],
            [
                "031f38fc596bac0b"
            ]
        ]
    },
    {
        "id": "52a2715aaa63af72",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 782,
        "y": 578,
        "wires": [
            [
                "d7689f694fccddd1"
            ]
        ]
    },
    {
        "id": "d7689f694fccddd1",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "Files completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 942,
        "y": 578,
        "wires": []
    },
    {
        "id": "75d9ccd20ce180e1",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "Logger",
        "func": "msg.logger = \"No of rows greater than 100 not processing the file\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 542,
        "y": 858,
        "wires": [
            [
                "eae45894906f157c"
            ]
        ]
    },
    {
        "id": "eae45894906f157c",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 702,
        "y": 858,
        "wires": [
            [
                "c32a05ba17bf0465",
                "4f19f508597b300b"
            ]
        ]
    },
    {
        "id": "c32a05ba17bf0465",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "File is not processed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 882,
        "y": 858,
        "wires": []
    },
    {
        "id": "df0c7c49add02868",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "Logger",
        "func": "msg.logger = \"Enterprise config is not exist for the user so the file is not processed\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 502,
        "y": 1318,
        "wires": [
            [
                "096484c3724c7c08"
            ]
        ]
    },
    {
        "id": "096484c3724c7c08",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 662,
        "y": 1318,
        "wires": [
            [
                "193923669126d588"
            ]
        ]
    },
    {
        "id": "193923669126d588",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "No enterprise config",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1320,
        "wires": []
    },
    {
        "id": "eeb363d58c0d4d4a",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "Logger",
        "func": "msg.logger = `file processing started for #${msg.seedingData.length} rows`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 182,
        "y": 958,
        "wires": [
            [
                "87c18c4817f211bf"
            ]
        ]
    },
    {
        "id": "87c18c4817f211bf",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 402,
        "y": 958,
        "wires": [
            [
                "8786da9ce68fdc98"
            ]
        ]
    },
    {
        "id": "e715d71b794cdc8a",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "Format sales summary",
        "func": "\n\nconst salesSummary = []\nconst {businessPartnerId,enterpriseId} = msg\nfor(let key in msg.row){\n    if (key.includes(\"Transaction History\")){\n        let monthSplit = key.split(\"M\")\n        \n        let month = monthSplit[monthSplit.length-1]\n        if (msg.row[key]){\n            salesSummary.push(\n                {\n                    \"businessPartner\": businessPartnerId,\n                    \"enterprise\": enterpriseId,\n                    \"year\": +getMonthAndYear(month).split(\"-\")[0],\n                    \"month\": +getMonthAndYear(month).split(\"-\")[1],\n                    \"totalSalesAmount\": msg.row[key],\n                    \"totalSalesProjected\": msg.row[key]\n                }\n            )\n        }\n        \n    }\n}\n// msg.payload = salesSummary\nconsole.log({ \"Format sales summary\": salesSummary })\nfunction getMonthAndYear(month){\n    let date = moment().subtract(Number(month), 'months').format()\n    date = date.split(\"T\")[0]\n    console.log({date})\n    return date\n}\nfor (let [key, req] of salesSummary.entries()){\n    node.send({\n        ...msg,\n        req,\n        isComplete : false,\n        salesSummaryLoopCompleted: key == salesSummary.length - 1 ? true : false\n    })\n    console.log({req})\n}\nmsg.isComplete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "moment",
                "module": "moment"
            }
        ],
        "x": 465,
        "y": 2742,
        "wires": [
            [
                "b3cc4005f373842f"
            ]
        ]
    },
    {
        "id": "b5e92d9f3021f55d",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "Create business relation with erpId",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\n\nmsg.url = `${GO_URL}/business-relationship/service`;\nmsg.method = \"POST\"\nmsg.headers = {}\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n}\nconst {businessPartnerId,enterpriseId} = msg\n\nmsg.payload = {\n    \"businessId\": businessPartnerId,\n    \"parentBusinessId\": enterpriseId,\n    \"identifierByParent\": msg.row[\"Business Partner Customer No\"],\n    \"bankAccountNumber\": msg.row[\"Business Partner Account with Enterprise\"],\n    \"bankIFSC\": msg.row[\"Business Partner Bank IFSC with Enterprise\"],\n    \"bankName\": msg.row[\"Business Partner Bank Name with Enterprise\"],\n    \"relationType\": checkRelationType(msg.row[\"Business Partner Type\"]) \n}\nmsg.logger = `Create business relation with erpId #${msg.row[\"Business Partner Customer No\"]}`\n\n\nfunction checkRelationType(str){\n    if(str.toLowerCase() === \"distributor\"){\n        return \"DISTRIBUTOR-ENTERPRISE\"\n    } else if (str.toLowerCase() === \"vendor\"){\n        return \"VENDOR-ENTERPRISE\"\n    }\n    return \"\"\n}\nconsole.log(msg.payload)\nreturn msg\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 2460,
        "wires": [
            [
                "2443b158d3f956e3"
            ]
        ]
    },
    {
        "id": "a1489196ce7f72b5",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "post business-partner-sales-summary",
        "func": "const GO_URL = env.get(\"GO_URL\")\n\nmsg.url = `${GO_URL}/business-partner-sales-summary`,\nmsg.method = \"POST\"\nmsg.payload = msg.req\nmsg.logger = `post business-partner-sales-summary with ${JSON.stringify(msg.payload)}`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2820,
        "wires": [
            [
                "0ad97a91c50a39e9"
            ]
        ]
    },
    {
        "id": "304d69563ba8a589",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 960,
        "y": 2540,
        "wires": [
            [
                "31433e375406d28a",
                "d8372f63efdc025d"
            ]
        ]
    },
    {
        "id": "31433e375406d28a",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "Create business relation with erpId",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 2540,
        "wires": []
    },
    {
        "id": "240587336c8c7250",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 1145,
        "y": 2822,
        "wires": [
            [
                "843d53e25eba589f"
            ]
        ]
    },
    {
        "id": "843d53e25eba589f",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "post business-partner-sales-summary",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1415,
        "y": 2822,
        "wires": []
    },
    {
        "id": "2443b158d3f956e3",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 460,
        "y": 2540,
        "wires": [
            [
                "3a7fa6f6dd70c8d0"
            ]
        ]
    },
    {
        "id": "18671e71afb68eca",
        "type": "switch",
        "z": "4da9cf371ae8419b",
        "name": "",
        "property": "payload._id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 930,
        "y": 2340,
        "wires": [
            [
                "b3060dcce06f5bf3"
            ],
            [
                "b5e92d9f3021f55d"
            ]
        ]
    },
    {
        "id": "b3060dcce06f5bf3",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n\n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if (failedRow.length === 0) {\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         \"createBusinessPartner-enterpriseMappingFailed\": `${msg.payload}`,\n\n//     })\n// } else {\n//     failedRows.forEach((row) => {\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"]) {\n//             row[\"createBusinessPartner-enterpriseMappingFailed\"] = `${msg.payload}`\n//         }\n\n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: msg.row[\"Business Partner Email\"],\n    \"message\": `${JSON.stringify(msg.payload)}`,\n\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 2300,
        "wires": [
            [
                "3fe3c10ffab67e24"
            ]
        ]
    },
    {
        "id": "b3cc4005f373842f",
        "type": "switch",
        "z": "4da9cf371ae8419b",
        "name": "",
        "property": "isComplete",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            },
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 657,
        "y": 2740,
        "wires": [
            [
                "83c06b6b78e99483"
            ],
            [
                "a1489196ce7f72b5"
            ],
            []
        ]
    },
    {
        "id": "920d0f2f499c4e8e",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 2920,
        "wires": []
    },
    {
        "id": "83c06b6b78e99483",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "seedingData",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 2720,
        "wires": []
    },
    {
        "id": "999e399d96eb6fe8",
        "type": "switch",
        "z": "4da9cf371ae8419b",
        "name": "salesSummaryLoopCompleted?",
        "property": "salesSummaryLoopCompleted",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 957,
        "y": 2920,
        "wires": [
            [
                "cac4a369917da6b6"
            ]
        ]
    },
    {
        "id": "9dc64b4f4054efbd",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "AuthenticateActyvEntity",
        "func": "\nconst EMAIL = env.get('ACTYV_ADMIN_EMAIL')\nconst PASSWORD = env.get('DEFAULT_PASSWORD')\nconst ADMIN_URL = env.get('ADMIN_URL');\n\n\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.method = \"POST\"\nmsg.payload = {\n\n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 280,
        "wires": [
            [
                "b0957986dddbc48d"
            ]
        ]
    },
    {
        "id": "8b2e2771b6823a59",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "Getting Actyv User",
        "func": "const EMAIL = env.get(\"SGFL_EXXARO_BP_EMAIL\");\nconst PASSWORD = env.get(\"PASSWORD\");\nconst ADMIN_URL = env.get('ADMIN_URL');\nconst ACTYV_ENTITY_URL = env.get('ACTYV_ENTITY_URL')\nmsg.headers = {\n    \"Authorization\": `Bearer ${flow.get(\"actyvToken\")}`,\n}\n\nmsg.url = `${ADMIN_URL}/api/user/getCurrentUser?url=${ACTYV_ENTITY_URL}`;\nmsg.method = \"GET\"\nmsg.payload = {\n    \n    \"password\": PASSWORD,\n    \"email\": EMAIL\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 360,
        "wires": [
            [
                "714769872cd4f65c",
                "9865557660bc3fff"
            ]
        ]
    },
    {
        "id": "a35aadfbbd4eae0d",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "save actyv_entity_id",
        "func": "flow.set(\"actyv_bp_id\", msg.payload.actyvEntityId);\nmsg.actyvEntityId = msg.payload.actyvEntityId\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 360,
        "wires": [
            [
                "f535f76332f21ecb"
            ]
        ]
    },
    {
        "id": "a78102a8377514d1",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "saveActyvToken",
        "func": "flow.set(\"actyvToken\",msg.payload.idToken)\nconsole.log({actyvToken: msg.payload.idToken})\n// console.log({bankToken: msg.payload.idToken})\nmsg.actyvToken = msg.payload.idToken\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 280,
        "wires": [
            [
                "8b2e2771b6823a59"
            ]
        ]
    },
    {
        "id": "7f92f52d1231c9d6",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "checkValidations",
        "func": "let transactionHistorys = [\n    \"Transaction History M1\",\n    \"Transaction History M2\",\n    \"Transaction History M3\",\n    \"Transaction History M4\",\n    \"Transaction History M5\",\n    \"Transaction History M6\",\n    \"Transaction History M7\",\n    \"Transaction History M8\",\n    \"Transaction History M9\",\n    \"Transaction History M10\",\n    \"Transaction History M11\",\n    \"Transaction History M12\",\n];\n\nfunction checkAllMandatoryFieldsPresentOrNot(row) {\n    if (\n        +row[\"Transaction History M1\"] >= 0 &&\n        +row[\"Transaction History M2\"] >= 0 &&\n        +row[\"Transaction History M3\"] >= 0 &&\n        +row[\"Transaction History M4\"] >= 0 &&\n        +row[\"Transaction History M5\"] >= 0 &&\n        +row[\"Transaction History M6\"] >= 0 &&\n        row[\"Business Partner Customer No\"] &&\n        row[\"Primary User First Name\"] &&\n        row[\"Primary User Last Name\"] &&\n        row[\"Business Partner Company Name\"] &&\n        validatePan(row[\"Business Partner PAN\"]) &&\n        validateGst(row[\"Business Partner GST\"]) &&\n        validatePhone(row[\"Business Partner Phone\"]) &&\n        validateEmail(row[\"Business Partner Email\"]) &&\n        row[\"Business Partner City\"] &&\n        validateDistributorType(row[\"Business Partner Type\"]) &&\n        row[\"Business Partner Account with Enterprise\"] &&\n        row[\"Business Partner Bank Name with Enterprise\"] &&\n        row[\"Business Partner Bank IFSC with Enterprise\"]\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n\n//Check email\nfunction validateEmail(email) {\n    const emailPattern = /^([a-zA-Z0-9._%+-]+)@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})$/;\n\n    if (emailPattern.test(email)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n//Check phone number\nfunction validatePhone(phone) {\n    phone = phone.toString();\n    const phoneNumber = phone.length === 10 ? phone : phone.slice(3, 13);\n    const phoneNumberPattern = /^[1-9]\\d{9}$/;\n\n    if (phoneNumberPattern.test(phoneNumber)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction validateDistributorType(type) {\n    if (type.toLowerCase() === \"distributor\" || type.toLowerCase() === \"vendor\") {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction validatePan(pan) {\n    const panPattern = /^([A-Z]{5}[0-9]{4}[A-Z]{1})$/;\n\n    if (panPattern.test(pan)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction validateGst(pan) {\n    const gstinPattern =\n        /^([0-9]{2}[a-zA-Z]{5}[0-9]{4}[a-zA-Z]{1}[1-9A-Za-z]{1}Z[0-9A-Za-z]{1})$/;\n\n    if (gstinPattern.test(pan)) {\n        return true;\n    } else {\n        return false;\n    }\n}\nlet checkAllMandatoryFieldPresent = checkAllMandatoryFieldsPresentOrNot(\n    msg.row\n);\n\nconsole.log(checkAllMandatoryFieldPresent);\nmsg.primaryChecks = false\n\nif(checkAllMandatoryFieldPresent){\n    msg.primaryChecks = true\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 195,
        "y": 1822,
        "wires": [
            [
                "4a9b23d5e926bcec"
            ]
        ]
    },
    {
        "id": "4a9b23d5e926bcec",
        "type": "switch",
        "z": "4da9cf371ae8419b",
        "name": "primaryChecks",
        "property": "primaryChecks",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 445,
        "y": 1822,
        "wires": [
            [
                "bc947d1945704dc7"
            ],
            [
                "0181fabda15a1aee"
            ]
        ]
    },
    {
        "id": "0181fabda15a1aee",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "Get business relation with erpId",
        "func": "const GO_URL = env.get('GO_URL')\nconst X_ACTYV_API_CONFIG_KEY = env.get(\"X_ACTYV_API_CONFIG_KEY\") || \"\"\nconst businessPartnerId = msg.payload?._id\nmsg.businessPartnerId = businessPartnerId\nmsg.url = `${GO_URL}/business-relationship/service/getByIdentifierByParent/${msg.row[\"Business Partner Customer No\"]}`;\nmsg.method = \"GET\"\nmsg.headers = {}\nmsg.headers = {\n    \"x-actyv-api-config-key\": X_ACTYV_API_CONFIG_KEY,\n}\nmsg.logger = `Get business relation with erpId #${msg.row[\"Business Partner Customer No\"]}`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1920,
        "wires": [
            [
                "3c5c210b1d50536e"
            ]
        ]
    },
    {
        "id": "87765ab14e3c5869",
        "type": "subflow:951a533bb3498fe6",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 820,
        "y": 1920,
        "wires": [
            [
                "f5dd2c71ed7af849",
                "e9c1ba560f3d144c"
            ]
        ]
    },
    {
        "id": "f5dd2c71ed7af849",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "get relation",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1035,
        "y": 1922,
        "wires": []
    },
    {
        "id": "e9c1ba560f3d144c",
        "type": "switch",
        "z": "4da9cf371ae8419b",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 175,
        "y": 2042,
        "wires": [
            [
                "4edd696a31dc4c99"
            ],
            [
                "5e372accb5287426"
            ]
        ]
    },
    {
        "id": "4edd696a31dc4c99",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n\n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if (failedRow.length === 0) {\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         \"msg\": `Dealer code already exist`,\n\n//     })\n// } else {\n//     failedRows.forEach((row) => {\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"]) {\n//             row[\"msg\"] = `Dealer code already exist`\n//         }\n\n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: msg.row[\"Business Partner Email\"],\n    \"message\": `Dealer code already exist`,\n})\n\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\n\nmsg.allFailed = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2020,
        "wires": [
            [
                "49c05415aaa5758b"
            ]
        ]
    },
    {
        "id": "be578370d7b38244",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 2020,
        "wires": []
    },
    {
        "id": "121f308be5dadcfe",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 2240,
        "wires": []
    },
    {
        "id": "4ed4306e708f03d9",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 2300,
        "wires": []
    },
    {
        "id": "d8372f63efdc025d",
        "type": "switch",
        "z": "4da9cf371ae8419b",
        "name": "",
        "property": "payload.businessRelationship._id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 2640,
        "wires": [
            [
                "f61685180ae19776"
            ],
            [
                "e715d71b794cdc8a",
                "92be401235f7dd0e"
            ]
        ]
    },
    {
        "id": "f8e279de38bcf39d",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 2620,
        "wires": []
    },
    {
        "id": "f61685180ae19776",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n \n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if(failedRow.length === 0){\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         createRelationshipFailed: `${msg.payload}`,\n   \n//     })\n// }else{\n//     failedRows.forEach((row) =>{\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"])\n//         {\n//            row.createRelationshipFailed = `${msg.payload}`\n//         }\n        \n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: msg.row[\"Business Partner Email\"],\n    message: `${JSON.stringify(msg.payload)}`,\n\n})\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\n\n\nflow.set(\"failedRows\",failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 2620,
        "wires": [
            [
                "8f88d3455a9f85b7"
            ]
        ]
    },
    {
        "id": "92be401235f7dd0e",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "switch",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 2680,
        "wires": []
    },
    {
        "id": "cd520a755be06892",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n\n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if (failedRow.length === 0) {\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         \"businessPartnerNotFound\": `${msg.payload}`,\n\n//     })\n// } else {\n//     failedRows.forEach((row) => {\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"]) {\n//             row[\"businessPartnerNotFound\"] = `${msg.payload}`\n//         }\n\n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: \"ALL\",\n    message : `Enterprise config not present for enterprise`\n})\n\nmsg.allFailed = false\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1260,
        "wires": [
            [
                "05beccd6e5cfcdd3"
            ]
        ]
    },
    {
        "id": "e551cb7827daed66",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 1260,
        "wires": []
    },
    {
        "id": "4f19f508597b300b",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n\n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if (failedRow.length === 0) {\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         \"businessPartnerNotFound\": `${msg.payload}`,\n\n//     })\n// } else {\n//     failedRows.forEach((row) => {\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"]) {\n//             row[\"businessPartnerNotFound\"] = `${msg.payload}`\n//         }\n\n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: \"ALL\",\n    message: `Limit exceeded for file processing`\n})\n\nmsg.allFailed = true\n\nmsg.remark = `Limit exceeded for file processing`\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 940,
        "wires": [
            [
                "96c0ca749d1a284a"
            ]
        ]
    },
    {
        "id": "9124e890f926c0c4",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 940,
        "wires": []
    },
    {
        "id": "33c2e5f1a3f78991",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n\n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if (failedRow.length === 0) {\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         \"businessPartnerNotFound\": `${msg.payload}`,\n\n//     })\n// } else {\n//     failedRows.forEach((row) => {\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"]) {\n//             row[\"businessPartnerNotFound\"] = `${msg.payload}`\n//         }\n\n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: \"ALL\",\n    message: `File processing failed, couldn't read file`\n})\nmsg.remark = `File processing failed, couldn't read file`\n\n\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\n\nmsg.allFailed = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 700,
        "wires": [
            [
                "37605392dcf57cda"
            ]
        ]
    },
    {
        "id": "594e84d26375818b",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 700,
        "wires": []
    },
    {
        "id": "bc947d1945704dc7",
        "type": "function",
        "z": "4da9cf371ae8419b",
        "name": "failed row update",
        "func": "const failedRows = flow.get(\"failedRows\")\nconst succeededRows = flow.get(\"succeededRows\")\n\n\n// let failedRow = failedRows.filter((row) => row.applicantEmail === msg.row[\"Business Partner Email\"])\n// if (failedRow.length === 0) {\n//     failedRows.push({\n//         applicantEmail: msg.row[\"Business Partner Email\"],\n//         \"businessPartnerNotFound\": `${msg.payload}`,\n\n//     })\n// } else {\n//     failedRows.forEach((row) => {\n//         if (row.applicantEmail === msg.row[\"Business Partner Email\"]) {\n//             row[\"businessPartnerNotFound\"] = `${msg.payload}`\n//         }\n\n//     })\n// }\n\nfailedRows.push({\n    applicantEmail: msg.row[\"Business Partner Email\"],\n    message: `Primary check for the row failed`\n})\n\n\nmsg.failedRows = failedRows\nmsg.succeededRows = succeededRows\nflow.set(\"failedRows\", failedRows)\nflow.set(\"failed_Create_BP\", failedRows)\nmsg.allFailed = false\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1780,
        "wires": [
            [
                "a45ab326986fe884"
            ]
        ]
    },
    {
        "id": "eb6815278a2900f3",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "debug 467",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 2120,
        "wires": []
    },
    {
        "id": "714769872cd4f65c",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "debug 468",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 400,
        "wires": []
    },
    {
        "id": "9865557660bc3fff",
        "type": "subflow:0cbd918f05921aae",
        "z": "4da9cf371ae8419b",
        "name": "getActyvUser",
        "x": 500,
        "y": 360,
        "wires": [
            [
                "a35aadfbbd4eae0d"
            ]
        ]
    },
    {
        "id": "13a12d753494165a",
        "type": "subflow:0cbd918f05921aae",
        "z": "4da9cf371ae8419b",
        "name": "Authenticate enterprise",
        "x": 630,
        "y": 120,
        "wires": [
            [
                "4bcfaecd6cf8480c",
                "75fbf6d31071850d"
            ]
        ]
    },
    {
        "id": "0f8e4331866894e4",
        "type": "subflow:0cbd918f05921aae",
        "z": "4da9cf371ae8419b",
        "name": "authentic bank user",
        "x": 590,
        "y": 200,
        "wires": [
            [
                "b4912b21fe9ed1c3"
            ]
        ]
    },
    {
        "id": "b0957986dddbc48d",
        "type": "subflow:0cbd918f05921aae",
        "z": "4da9cf371ae8419b",
        "name": "authenticActyvEntity",
        "x": 560,
        "y": 280,
        "wires": [
            [
                "a78102a8377514d1"
            ]
        ]
    },
    {
        "id": "1c1bb251c85019a5",
        "type": "subflow:0cbd918f05921aae",
        "z": "4da9cf371ae8419b",
        "name": "getInitiatedFiles",
        "x": 700,
        "y": 500,
        "wires": [
            [
                "de4661694aa2da61",
                "818df4c15d1494f0"
            ]
        ]
    },
    {
        "id": "af1db67c30e3c95d",
        "type": "subflow:0cbd918f05921aae",
        "z": "4da9cf371ae8419b",
        "name": "fetchEnterpriseConfig",
        "x": 520,
        "y": 1160,
        "wires": [
            [
                "73e9448c62ef6ae7"
            ]
        ]
    },
    {
        "id": "3c5c210b1d50536e",
        "type": "subflow:0cbd918f05921aae",
        "z": "4da9cf371ae8419b",
        "name": "get business relation with erpId",
        "x": 590,
        "y": 1920,
        "wires": [
            [
                "87765ab14e3c5869"
            ]
        ]
    },
    {
        "id": "d7a45a7ad3fbc0a2",
        "type": "subflow:0cbd918f05921aae",
        "z": "4da9cf371ae8419b",
        "name": "post Business partner",
        "x": 520,
        "y": 2180,
        "wires": [
            [
                "955cb11e6f982222",
                "eb6815278a2900f3",
                "0dc150a349c973f1"
            ]
        ]
    },
    {
        "id": "7c950c1cc4271c9f",
        "type": "subflow:0cbd918f05921aae",
        "z": "4da9cf371ae8419b",
        "name": "createEnterprise_BP_mapping",
        "x": 550,
        "y": 2340,
        "wires": [
            [
                "f03078a69ddd5d4a",
                "ef61c69ee6ef5810"
            ]
        ]
    },
    {
        "id": "3a7fa6f6dd70c8d0",
        "type": "subflow:0cbd918f05921aae",
        "z": "4da9cf371ae8419b",
        "name": "Create business relation with erpId",
        "x": 700,
        "y": 2540,
        "wires": [
            [
                "304d69563ba8a589"
            ]
        ]
    },
    {
        "id": "0ad97a91c50a39e9",
        "type": "subflow:0cbd918f05921aae",
        "z": "4da9cf371ae8419b",
        "name": "post business-partner-sales-summary",
        "x": 870,
        "y": 2820,
        "wires": [
            [
                "240587336c8c7250",
                "999e399d96eb6fe8"
            ]
        ]
    },
    {
        "id": "79e59608eb9ef0e1",
        "type": "http request",
        "z": "4da9cf371ae8419b",
        "name": "read file",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 380,
        "y": 660,
        "wires": [
            [
                "b2a3b862b04de435",
                "1ed544d3cb228275"
            ]
        ]
    },
    {
        "id": "a45ab326986fe884",
        "type": "subflow:9c6db570ab89ba16",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 880,
        "y": 1780,
        "wires": [
            [
                "5f93334e6921a307"
            ]
        ]
    },
    {
        "id": "5f93334e6921a307",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "update file Status to completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 1780,
        "wires": []
    },
    {
        "id": "37605392dcf57cda",
        "type": "subflow:9c6db570ab89ba16",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 1020,
        "y": 700,
        "wires": [
            [
                "594e84d26375818b"
            ]
        ]
    },
    {
        "id": "96c0ca749d1a284a",
        "type": "subflow:9c6db570ab89ba16",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 820,
        "y": 940,
        "wires": [
            [
                "9124e890f926c0c4"
            ]
        ]
    },
    {
        "id": "05beccd6e5cfcdd3",
        "type": "subflow:9c6db570ab89ba16",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 840,
        "y": 1260,
        "wires": [
            [
                "e551cb7827daed66"
            ]
        ]
    },
    {
        "id": "49c05415aaa5758b",
        "type": "subflow:9c6db570ab89ba16",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 620,
        "y": 2020,
        "wires": [
            [
                "be578370d7b38244"
            ]
        ]
    },
    {
        "id": "58e29f942897dd7b",
        "type": "subflow:9c6db570ab89ba16",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 700,
        "y": 2240,
        "wires": [
            [
                "121f308be5dadcfe"
            ]
        ]
    },
    {
        "id": "3fe3c10ffab67e24",
        "type": "subflow:9c6db570ab89ba16",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 1380,
        "y": 2300,
        "wires": [
            [
                "4ed4306e708f03d9"
            ]
        ]
    },
    {
        "id": "8f88d3455a9f85b7",
        "type": "subflow:9c6db570ab89ba16",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 1000,
        "y": 2620,
        "wires": [
            [
                "f8e279de38bcf39d"
            ]
        ]
    },
    {
        "id": "cac4a369917da6b6",
        "type": "subflow:9c6db570ab89ba16",
        "z": "4da9cf371ae8419b",
        "name": "",
        "x": 1200,
        "y": 2920,
        "wires": [
            [
                "920d0f2f499c4e8e"
            ]
        ]
    },
    {
        "id": "8e9d19c5a17c64c8",
        "type": "debug",
        "z": "4da9cf371ae8419b",
        "name": "enterpriseConfigNotFound",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 1400,
        "wires": []
    }
]